parameters:
  name: ''
  architecture: x64
  buildScript: ''
  pool: {}
  customMatrixes: ''
  codeCoverage: false
  nightlyBuild: false
  innerLoop: false
  runSpecific: false
  container: ''
  useVSTestTask: false

jobs:
  - job: ${{ parameters.name }}
    ${{ if eq(parameters.nightlyBuild, 'true') }}:
      timeoutInMinutes: 30
    ${{ if and(eq(parameters.nightlyBuild, 'false'), eq(parameters.codeCoverage, 'false')) }}:
      timeoutInMinutes: 90
    ${{ if eq(parameters.codeCoverage, 'true') }}:
      timeoutInMinutes: 120
    cancelTimeoutInMinutes: 10
    variables:
      dotnetPath: $(Build.SourcesDirectory)/Tools/dotnetcli/dotnet
      nugetFeed: https://pkgs.dev.azure.com/dnceng/public/_packaging/MachineLearning/nuget/v3/index.json
      nightlyBuildProjPath: $(Build.SourcesDirectory)/test/Microsoft.ML.NightlyBuild.Tests/Microsoft.ML.NightlyBuild.Tests.csproj
      nightlyBuildRunPath: $(Build.SourcesDirectory)/bin/AnyCPU.$(_configuration)/Microsoft.ML.NightlyBuild.Tests/$(_targetFramework)
      packageUpdaterProjPath: $(Build.SourcesDirectory)/test/Microsoft.ML.NugetPackageVersionUpdater/Microsoft.ML.NugetPackageVersionUpdater.csproj
      versionFilePath: $(Build.SourcesDirectory)/test/Microsoft.ML.NugetPackageVersionUpdater/latest_versions.txt
      PROCDUMP_PATH: '$(Build.SourcesDirectory)/Tools/ProcDump/'
    strategy:
      matrix:
        ${{ if eq(parameters.customMatrixes, '') }}:
          Debug_Build:
            _configuration: Debug
            _config_short: D
            _includeBenchmarkData: false
            _targetFramework: netcoreapp2.1
          Release_Build:
            _configuration: Release
            _config_short: R
            _includeBenchmarkData: true
            _targetFramework: netcoreapp2.1
        ${{ if ne(parameters.customMatrixes, '') }}:
          ${{ insert }}: ${{ parameters.customMatrixes }}
    
    pool: ${{ parameters.pool }}
    ${{ if ne(parameters.container, '') }}:
      container: ${{ parameters.container }}

    steps:
    # Work around MacOS Homebrew image/environment bug: https://github.com/actions/virtual-environments/issues/1811
    - ${{ if eq(parameters.pool.name, 'Hosted macOS') }}:
      - script: |
          brew uninstall openssl@1.0.2t |
          brew uninstall python@2.7.17 |
          brew untap local/openssl |
          brew untap local/python2
        displayName: MacOS Homebrew bug Workaround
    - ${{ if eq(parameters.pool.name, 'Hosted macOS') }}:
      - script: brew update && brew unlink python@3.8 && brew install mono-libgdiplus && brew install $(Build.SourcesDirectory)/build/libomp.rb && brew link libomp --force
        displayName: Install build dependencies
    - ${{ if and( eq(parameters.nightlyBuild, 'true'), eq(parameters.pool.name, 'Hosted Ubuntu 1604')) }}:
      - bash: echo "##vso[task.setvariable variable=LD_LIBRARY_PATH]$(nightlyBuildRunPath):$LD_LIBRARY_PATH"
        displayName: Set LD_LIBRARY_PATH for Ubuntu and CentOS to locate Native shared library in current running path
    - script: ${{ parameters.buildScript }} -$(_configuration) -buildArch=${{ parameters.architecture }}
      displayName: Build
    - ${{ if eq(parameters.pool.name, 'Hosted macOS') }}:
      - task: Bash@3
        inputs:
          targetType: inline
          script: cd packages;find . -type d -path "*/runtimes/linux-*"  -exec rm -rv {} +;find . -type d -path "*/runtimes/win-*"  -exec rm -rv {} +;cd ..
        displayName: Clean up non-MacOS runtime folders of NuGet Packages to save disk space
    - ${{ if eq(parameters.pool.name, 'Hosted Ubuntu 1604') }}:
      - task: Bash@3
        inputs:
          targetType: inline
          script: cd packages;find . -type d -path "*/runtimes/osx-*"  -exec rm -rv {} +;find . -type d -path "*/runtimes/win-*"  -exec rm -rv {} +;cd ..
        displayName: Clean up non-Linux runtime folders of NuGet Packages to save disk space
    - ${{ if eq(parameters.buildScript, 'build.cmd') }}:
      - task: PowerShell@2
        inputs:
          targetType: inline
          script: Get-ChildItem -Path  '.\packages\*\runtimes\*' -Recurse | Select -ExpandProperty FullName | Where {$_ -notlike '*\win-*'} | sort length -Descending | Remove-Item -Recurse -Confirm:$false -Force
        displayName: Clean up non-Windows runtime folders of NuGet Packages to save disk space
      - script: dir /s "bin"
        displayName: show bin folder disk usage
    - ${{ if eq(parameters.nightlyBuild, 'true') }}:
      - script: $(dotnetPath) restore $(nightlyBuildProjPath)
        displayName: Restore nightly build project
      - script: $(dotnetPath) list $(nightlyBuildProjPath) package --source $(nugetFeed) --outdated > $(versionFilePath)
        displayName: List latest package versions
      - script: $(dotnetPath) run --project $(packageUpdaterProjPath)
        displayName: Update package versions for nightly build
      - ${{ if eq(parameters.buildScript, 'build.cmd') }}:
        - powershell: |
                    Get-ChildItem -Path  '.\bin\AnyCPU.*' -Recurse |
                    Select -ExpandProperty FullName |
                    Where {$_ -notlike '*\Microsoft.ML.NightlyBuild.Tests*'} |
                    sort length -Descending | 
                    Remove-Item -force 
                    Write-Output "Done cleaning up usless project..."
          displayName: Clean up useless project
      - script: $(dotnetPath) msbuild -restore $(nightlyBuildProjPath) /p:ReferenceTypeForTestFramework="Nuget" /p:Configuration=$(_configuration) /p:TargetArchitecture=${{ parameters.architecture }}
        displayName: Build Nightly-Build Project with latest package versions
      - script: ${{ parameters.buildScript }} -$(_configuration) -runnightlybuildtests
        displayName: Run Nightly Build Tests
    - ${{ if eq(parameters.nightlyBuild, 'false') }}:
      - script: ${{ parameters.buildScript }} -- /t:DownloadExternalTestFiles /p:IncludeBenchmarkData=$(_includeBenchmarkData)
        displayName: Download Benchmark Data
        timeoutInMinutes: 10
      - script: ${{ parameters.buildScript }} -- /t:DownloadTensorflowMetaFiles /p:IncludeTensorflowMetaFile=true
        displayName: Download Tensorflow Meta File
        timeoutInMinutes: 20
      - ${{ if eq(parameters.innerLoop, 'false') }}:
        - ${{ if and(eq(parameters.runSpecific, 'false'), eq(parameters.useVSTestTask, 'false')) }}:
          - script: ${{ parameters.buildScript }} -$(_configuration) -runtests -coverage=${{ parameters.codeCoverage }}
            displayName: Run All Tests.
        - ${{ if and(eq(parameters.runSpecific, 'true'), eq(parameters.useVSTestTask, 'false')) }}:
          - script: ${{ parameters.buildScript }} -$(_configuration) -runSpecificTests -coverage=${{ parameters.codeCoverage }}
            displayName: Run Specific Tests.
        - ${{ if and(eq(parameters.buildScript, 'build.cmd'), eq(parameters.useVSTestTask, 'true')) }}:
          - task: VSTest@2
            displayName: Run Tests with VSTest
            inputs:
              testSelector: testAssemblies
              testAssemblyVer2: |
                **\*test.dll
                **\*tests.dll
                !**\obj\** 
              runSettingsFile: $(Build.SourcesDirectory)/tools-local/vstest.runsettings
              searchFolder: '$(System.DefaultWorkingDirectory)'
              vstestLocationMethod: 'version' 
              vsTestVersion: 'latest'
              runInParallel: False
              runTestsInIsolation: True
              codeCoverageEnabled: ${{ parameters.codeCoverage }}
              otherConsoleOptions: ${{ parameters.vsTestConfiguration }}
              dontDistribute: True
              diagnosticsEnabled: False
              collectDumpOn: onAbortOnly
              publishRunAttachments: true
      - ${{ if eq(parameters.innerLoop, 'true') }}:
        - script: ${{ parameters.buildScript }} -$(_configuration) -runCITests -coverage=${{ parameters.codeCoverage }}
          displayName: Run CI Tests.
    - script: $(Build.SourcesDirectory)/Tools/dotnetcli/dotnet msbuild -restore build/Codecoverage.proj
      displayName: Upload coverage to codecov.io
      condition: and(succeeded(), eq(${{ parameters.codeCoverage }}, True))
    - task: PublishTestResults@2
      displayName: Publish Test Results
      condition: succeededOrFailed()
      inputs:
        testRunner: 'vSTest'
        searchFolder: '$(System.DefaultWorkingDirectory)/bin'
        testResultsFiles: '**/*.trx'
        testRunTitle: Machinelearning_Tests_${{ parameters.name }}_$(_configuration)_$(Build.BuildNumber)
        configuration: $(_configuration)
        mergeTestResults: true
    - task: CopyFiles@2
      displayName: Stage build logs
      condition: not(succeeded())
      inputs:
        sourceFolder: $(Build.SourcesDirectory)
        contents: '?(msbuild.*|binclash.log|init-tools.log)'
        targetFolder: $(Build.ArtifactStagingDirectory)
    - task: CopyFiles@2
      displayName: Stage test output
      condition: not(succeeded())
      inputs:
        sourceFolder: $(Build.SourcesDirectory)/bin
        contents: |
          **/TestOutput/**/*
          **/*.trx
        targetFolder: $(Build.ArtifactStagingDirectory)
    - task: CopyFiles@2
      displayName: Stage process dump and pdb if any
      condition: not(succeeded())
      inputs:
        sourceFolder: $(Build.SourcesDirectory)
        contents: |
          *.dmp
          CrashDumps/*.dmp
          bin/**/*.pdb
        targetFolder: $(Build.ArtifactStagingDirectory)
    - task: PublishBuildArtifacts@1
      displayName: Publish build and test logs
      condition: not(succeeded())
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: ${{ parameters.name }} $(_config_short)
        artifactType: container
    - ${{ if eq(parameters.nightlyBuild, 'false') }}:
      - script: ${{ parameters.buildScript }} -buildPackages
        displayName: Build Packages
