<Project Sdk="Microsoft.DotNet.Helix.Sdk">
  <Choose>
    <When Condition="$(HelixTargetQueues.ToLowerInvariant().Contains('windows'))">
    <PropertyGroup>
      <IsPosixShell>false</IsPosixShell>
    </PropertyGroup>
    </When>
    <Otherwise>
    <PropertyGroup>
      <IsPosixShell>true</IsPosixShell>
    </PropertyGroup>
    </Otherwise>
  </Choose>

  <PropertyGroup>
    <HelixSourcePrefix>pr/</HelixSourcePrefix>
    <HelixSource Condition="'$(HelixSource)' == ''">$(HelixSourcePrefix)dotnet/machinelearning</HelixSource>
    <HelixSource Condition="'$(BUILD_SOURCEBRANCH)' != ''">$(HelixSource)/$(BUILD_SOURCEBRANCH)</HelixSource>

    <HelixBuild Condition="'$(HelixBuild)' == ''">$(BUILD_BUILDNUMBER)</HelixBuild>
    <HelixBuild Condition="'$(HelixBuild)' == ''">default</HelixBuild>

    <WaitForWorkItemCompletion>true</WaitForWorkItemCompletion>
    <CancelHelixJobsIfBuildCancelled Condition="'$(CancelHelixJobsIfBuildCancelled)' != 'false'">true</CancelHelixJobsIfBuildCancelled>
    <FailOnWorkItemFailure Condition="'$(FailOnWorkItemFailure)' != 'false'">true</FailOnWorkItemFailure>

    <!-- Read global.json so we know the version of the dotnet cli we need -->
    <GlobalJsonContent>$([System.IO.File]::ReadAllText('$(RepoRoot)global.json'))</GlobalJsonContent>
    <DotNetCliPackageType>sdk</DotNetCliPackageType>
    <DotNetCliVersion>$([System.Text.RegularExpressions.Regex]::Match($(GlobalJsonContent), '(%3F&lt;="dotnet": ").*(%3F=")'))</DotNetCliVersion>

    <!-- The other DotNetCliRuntimes are figured out correctly by the queue name -->
    <DotNetCliRuntime Condition="'$(BuildArchitecture)' == 'x86'">win-x86</DotNetCliRuntime>
    <DotNetCliRuntime Condition="'$(BuildArchitecture)' == 'arm' And $(HelixTargetQueues.ToLowerInvariant().Contains('ubuntu'))">linux-arm</DotNetCliRuntime>
    <DotNetCliRuntime Condition="'$(BuildArchitecture)' == 'arm64' And $(HelixTargetQueues.ToLowerInvariant().Contains('osx'))">osx-arm64</DotNetCliRuntime>

    <!-- 'true' to produce a build error when tests fail. Default 'true' -->
    <FailOnTestFailure>true</FailOnTestFailure>
  </PropertyGroup>

  <ItemGroup>
    <AdditionalDotNetPackage Include="$(DotNetRuntime80Version)">
      <PackageType>runtime</PackageType>
      <DotNetCliRuntime Condition="'$(BuildArchitecture)' == 'x86'">win-x86</DotNetCliRuntime>
      <DotNetCliRuntime Condition="'$(BuildArchitecture)' == 'arm' And $(HelixTargetQueues.ToLowerInvariant().Contains('ubuntu'))">linux-arm</DotNetCliRuntime>
      <DotNetCliRuntime Condition="'$(BuildArchitecture)' == 'arm64' And $(HelixTargetQueues.ToLowerInvariant().Contains('osx'))">osx-arm64</DotNetCliRuntime>
    </AdditionalDotNetPackage>
  </ItemGroup>

  <PropertyGroup Condition="'$(HelixType)' == ''">
    <!-- For PRs we want helixtype to be the same for all frameworks except package testing-->
    <TestScope Condition="'$(TestScope)' == ''">innerloop</TestScope>
    <HelixType>test/unit/cli/$(TestScope)/</HelixType>
  </PropertyGroup>

  <PropertyGroup>
    <!-- TargetFramework of the xunit.runner.dll to use when running the tests -->
    <XUnitRuntimeTargetFramework>netcoreapp2.0</XUnitRuntimeTargetFramework>
    <!-- PackageVersion of xunit.runner.console to use -->
    <XUnitRunnerVersion>2.4.2</XUnitRunnerVersion>
    <!-- Additional command line arguments to pass to xunit.console.exe -->
  </PropertyGroup>

  <ItemGroup>
    <MyProjects Include="..\test\**\*.csproj" />
    <MyProjects Include="..\test\**\*.fsproj" />
    <MyProjects Remove="..\test\Microsoft.ML.NightlyBuild.Tests\Microsoft.ML.NightlyBuild.Tests.csproj" />
    <MyProjects Remove="..\test\Microsoft.ML.CpuMath.PerformanceTests\Microsoft.ML.CpuMath.PerformanceTests.csproj" />
    <MyProjects Remove="..\test\Microsoft.ML.PerformanceTests\Microsoft.ML.PerformanceTests.csproj" />
    <MyProjects Remove="..\test\Microsoft.ML.TestFrameworkCommon\Microsoft.ML.TestFrameworkCommon.csproj" />
    <MyProjects Remove="..\test\RemoteExecutorConsoleApp\RemoteExecutorConsoleApp.csproj" />
    <MyProjects Remove="..\test\Microsoft.ML.NugetPackageVersionUpdater\Microsoft.ML.NugetPackageVersionUpdater.csproj" />
    <MyProjects Remove="..\test\Microsoft.ML.Benchmarks.Tests\Microsoft.ML.Benchmarks.Tests.csproj" />
    <MyProjects Remove="..\test\Microsoft.ML.TorchSharp.Tests\Microsoft.ML.TorchSharp.Tests.csproj" Condition="'$(BuildArchitecture)' != 'x64'"/>
    <MyProjects Remove="..\test\Microsoft.ML.TensorFlow.Tests\Microsoft.ML.TensorFlow.Tests.csproj" Condition="'$(BuildArchitecture)' != 'x64'"/>
  </ItemGroup>

  <ItemGroup>
    <HelixCorrelationPayload Include="xunit-runner">
      <Uri>https://api.nuget.org/v3-flatcontainer/xunit.runner.console/$(XUnitRunnerVersion)/xunit.runner.console.$(XUnitRunnerVersion).nupkg</Uri>
      <Destination>xunit-runner</Destination>
    </HelixCorrelationPayload>

    <HelixCorrelationPayload Include="$(BUILD_SOURCESDIRECTORY)\test\data">
      <Destination>test\data</Destination>
    </HelixCorrelationPayload>

    <HelixCorrelationPayload Include="$(BUILD_SOURCESDIRECTORY)\test\BaselineOutput">
      <Destination>test\BaselineOutput</Destination>
    </HelixCorrelationPayload>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.DotNet.Build.Tasks.Templating" Version="$(MicrosoftDotNetBuildTasksTemplatingVersion)" PrivateAssets="All" />
  </ItemGroup>

  <Target Name="CreateHelixWorkItems" BeforeTargets="BeforeTest">
    <MSBuild Projects="@(MyProjects)"
      Targets="GetTargetFrameworks"
      BuildInParallel="$(BuildInParallel)"
      RemoveProperties="TargetFramework;RuntimeIdentifier">
        <Output TaskParameter="TargetOutputs" ItemName="ProjectsWithTargetFramework" />
    </MSBuild>

    <PropertyGroup>
      <HelixPreCommands Condition="$(IsPosixShell)">$(HelixPreCommands);export ML_TEST_DATADIR=$HELIX_CORRELATION_PAYLOAD;export MICROSOFTML_RESOURCE_PATH=$HELIX_WORKITEM_ROOT;sudo chmod -R 777 $HELIX_WORKITEM_ROOT;sudo chown -R $USER $HELIX_WORKITEM_ROOT</HelixPreCommands>
      <HelixPreCommands Condition="!$(IsPosixShell)">$(HelixPreCommands);set ML_TEST_DATADIR=%HELIX_CORRELATION_PAYLOAD%;set MICROSOFTML_RESOURCE_PATH=%HELIX_WORKITEM_ROOT%</HelixPreCommands>

      <HelixPreCommands Condition="$(IsPosixShell)">$(HelixPreCommands);export PATH=$HELIX_CORRELATION_PAYLOAD/$(DotNetCliDestination):$PATH</HelixPreCommands>
      <HelixPreCommands Condition="!$(IsPosixShell)">$(HelixPreCommands);set PATH=%HELIX_CORRELATION_PAYLOAD%\$(DotNetCliDestination)%3B%PATH%</HelixPreCommands> 

      <HelixPreCommands Condition="$(HelixTargetQueues.ToLowerInvariant().Contains('osx'))">$(HelixPreCommands);export LD_LIBRARY_PATH=/opt/homebrew/opt/mono-libgdiplus/lib;ls /usr/lib;ls $HELIX_WORKITEM_ROOT;export KMP_DUPLICATE_LIB_OK=TRUE;otool -L $HELIX_WORKITEM_ROOT/runtimes/osx-x64/native/lib_lightgbm.dylib</HelixPreCommands>

      <HelixPreCommands Condition="$(HelixTargetQueues.ToLowerInvariant().Contains('armarch'))">$(HelixPreCommands);sudo apt update;sudo apt-get install libomp-dev libomp5 -y</HelixPreCommands>

      <HelixCorrelationPayloadPath Condition="$(IsPosixShell)">$HELIX_CORRELATION_PAYLOAD</HelixCorrelationPayloadPath>
      <HelixCorrelationPayloadPath Condition="!$(IsPosixShell)">%HELIX_CORRELATION_PAYLOAD%</HelixCorrelationPayloadPath>

      <RunTestScript Condition="'$(OS)' != 'Windows_NT'">runTests.sh</RunTestScript>
      <RunTestScript Condition="'$(OS)' == 'Windows_NT'">.\runTests.cmd</RunTestScript>

      <MacFilesToCopy>/usr/local/opt/libomp/lib/libiomp5.dylib;/usr/local/opt/libomp/lib/libomp.dylib;</MacFilesToCopy>
      <MacFilesToCopy Condition="$(HelixTargetQueues.ToLowerInvariant().Contains('arm64'))">/usr/local/opt/libomp/lib/libomp.dylib;</MacFilesToCopy>
    </PropertyGroup>

    <!-- Copy libiomp5.dylib and libomp.dylib to the publish folders for OSX-->
    <Copy Condition="$(HelixTargetQueues.ToLowerInvariant().Contains('osx'))"
      SourceFiles = "$(MacFilesToCopy)"
      Retries="10"
      OverwriteReadOnlyFiles="true"
      RetryDelayMilliseconds="10"
      DestinationFolder="$(BUILD_SOURCESDIRECTORY)\artifacts\bin\%(ProjectsWithTargetFramework.Filename)\$(BuildConfig)\%(ProjectsWithTargetFramework.TargetFrameworks)$(PublishFolder)">
    </Copy>

    <Exec Condition="Exists('$(BUILD_SOURCESDIRECTORY)\artifacts\bin\%(ProjectsWithTargetFramework.Filename)\$(BuildConfig)\%(ProjectsWithTargetFramework.TargetFrameworks)$(PublishFolder)\libSymSgdNative.dylib') AND $(HelixTargetQueues.ToLowerInvariant().Contains('osx'))" 
    Command="install_name_tool -change &quot;/usr/local/opt/libomp/lib/libomp.dylib&quot; &quot;@loader_path/libomp.dylib&quot; $(BUILD_SOURCESDIRECTORY)/artifacts/bin/%(ProjectsWithTargetFramework.Filename)/$(BuildConfig)/%(ProjectsWithTargetFramework.TargetFrameworks)$(PublishFolder)/libSymSgdNative.dylib" />
    
    <Exec Condition="Exists('$(BUILD_SOURCESDIRECTORY)\artifacts\bin\%(ProjectsWithTargetFramework.Filename)\$(BuildConfig)\%(ProjectsWithTargetFramework.TargetFrameworks)$(PublishFolder)\runtimes\osx-x64\native\lib_lightgbm.dylib') AND $(HelixTargetQueues.ToLowerInvariant().Contains('osx'))" 
    Command="install_name_tool -change &quot;/usr/local/opt/libomp/lib/libomp.dylib&quot; &quot;@rpath/libomp.dylib&quot; $(BUILD_SOURCESDIRECTORY)/artifacts/bin/%(ProjectsWithTargetFramework.Filename)/$(BuildConfig)/%(ProjectsWithTargetFramework.TargetFrameworks)$(PublishFolder)/runtimes/osx-x64/native/lib_lightgbm.dylib" />
    
    <Exec Condition="Exists('$(BUILD_SOURCESDIRECTORY)\artifacts\bin\%(ProjectsWithTargetFramework.Filename)\$(BuildConfig)\%(ProjectsWithTargetFramework.TargetFrameworks)$(PublishFolder)\runtimes\osx-x64\native\libonnxruntime.dylib') AND $(HelixTargetQueues.ToLowerInvariant().Contains('osx'))" 
    Command="install_name_tool -change &quot;/usr/local/opt/libomp/lib/libomp.dylib&quot; &quot;@loader_path/libomp.dylib&quot; $(BUILD_SOURCESDIRECTORY)/artifacts/bin/%(ProjectsWithTargetFramework.Filename)/$(BuildConfig)/%(ProjectsWithTargetFramework.TargetFrameworks)$(PublishFolder)/runtimes/osx-x64/native/libonnxruntime.dylib" />

    <!-- Remove the native libraries for other OS to save on payload size -->
    <ItemGroup>
      <WindowsFiles Include="$(BUILD_SOURCESDIRECTORY)\artifacts\bin\%(ProjectsWithTargetFramework.Filename)\$(BuildConfig)\%(ProjectsWithTargetFramework.TargetFrameworks)$(PublishFolder)\runtimes\win*\**\*.*"/>
      <LinuxFiles Include="$(BUILD_SOURCESDIRECTORY)\artifacts\bin\%(ProjectsWithTargetFramework.Filename)\$(BuildConfig)\%(ProjectsWithTargetFramework.TargetFrameworks)$(PublishFolder)\runtimes\linux*\**\*.*"/>
      <OsxFiles Include="$(BUILD_SOURCESDIRECTORY)\artifacts\bin\%(ProjectsWithTargetFramework.Filename)\$(BuildConfig)\%(ProjectsWithTargetFramework.TargetFrameworks)$(PublishFolder)\runtimes\osx*\**\*.*"/>
    </ItemGroup>

    <Delete Condition="$(HelixTargetQueues.ToLowerInvariant().Contains('windows'))"
      Files="@(LinuxFiles);@(OsxFiles)" />

    <Delete Condition="$(HelixTargetQueues.ToLowerInvariant().Contains('osx'))"
      Files="@(LinuxFiles);@(WindowsFiles)" />

    <Delete Condition="$(HelixTargetQueues.ToLowerInvariant().Contains('ubuntu'))"
      Files="@(WindowsFiles);@(OsxFiles)" />

    <ItemGroup>
      <RunCommand Condition="!$(TestTargetFramework.EndsWith('net462'))" Include="%(ProjectsWithTargetFramework.Filename)">
        <Command>dotnet exec --roll-forward Major --runtimeconfig %(ProjectsWithTargetFramework.Filename).runtimeconfig.json --depsfile %(ProjectsWithTargetFramework.Filename).deps.json $(HelixCorrelationPayloadPath)/xunit-runner/tools/netcoreapp2.0/xunit.console.dll %(ProjectsWithTargetFramework.Filename).dll -notrait Category=SkipInCI -xml testResults.xml</Command>
        <!-- FileName is reserved so have to go with something else -->
        <Filen>%(ProjectsWithTargetFramework.Filename)</Filen>
        <TargetFrameworks>%(ProjectsWithTargetFramework.TargetFrameworks)</TargetFrameworks>
        <OutputPath>$(BUILD_SOURCESDIRECTORY)\artifacts\bin\%(ProjectsWithTargetFramework.Filename)\$(BuildConfig)\%(ProjectsWithTargetFramework.TargetFrameworks)\$(RunTestScript)</OutputPath>
      </RunCommand>
      <RunCommand Condition="$(TestTargetFramework.EndsWith('net462')) And %(ProjectsWithTargetFramework.TargetFrameworks) != 'net8.0'"  Include="%(ProjectsWithTargetFramework.Filename)">
        <Command>$(HelixCorrelationPayloadPath)/xunit-runner/tools/net462/xunit.console.exe %(ProjectsWithTargetFramework.Filename).dll -notrait Category=SkipInCI -xml testResults.xml</Command>
              <!-- FileName is reserved so have to go with something else -->
        <Filen>%(ProjectsWithTargetFramework.Filename)</Filen>
        <TargetFrameworks>%(ProjectsWithTargetFramework.TargetFrameworks)</TargetFrameworks>
        <OutputPath>$(BUILD_SOURCESDIRECTORY)\artifacts\bin\%(ProjectsWithTargetFramework.Filename)\$(BuildConfig)\%(ProjectsWithTargetFramework.TargetFrameworks)\win-x64\$(RunTestScript)</OutputPath>
      </RunCommand>
    </ItemGroup>

    <GenerateFileFromTemplate TemplateFile="$(MSBuildThisFileDirectory)testing\$(RunTestScript)"
        OutputPath="%(RunCommand.OutputPath)"
        Properties="runCommand=%(RunCommand.Command)" />

    <ItemGroup>
      <HelixWorkItem Condition="$(TestTargetFramework) == %(ProjectsWithTargetFramework.TargetFrameworks)" Include="%(ProjectsWithTargetFramework.Filename)">
        <PayloadDirectory>$(BUILD_SOURCESDIRECTORY)\artifacts\bin\%(ProjectsWithTargetFramework.Filename)\$(BuildConfig)\%(ProjectsWithTargetFramework.TargetFrameworks)\</PayloadDirectory>
        <PayloadDirectory Condition="%(ProjectsWithTargetFramework.TargetFrameworks) == 'net462'">$(BUILD_SOURCESDIRECTORY)\artifacts\bin\%(ProjectsWithTargetFramework.Filename)\$(BuildConfig)\%(ProjectsWithTargetFramework.TargetFrameworks)\win-x64</PayloadDirectory>
        <Command  Condition="'$(OS)' != 'Windows_NT'">./$(RunTestScript)</Command>
        <Command  Condition="'$(OS)' == 'Windows_NT'">call $(RunTestScript)</Command>
        <Timeout>01:00:00</Timeout>
        <Timeout Condition="$(HelixTargetQueues.ToLowerInvariant().Contains('osx'))">00:30:00</Timeout>
        <Timeout Condition="'$(WorkItemTimeout)' != ''">$(WorkItemTimeout)</Timeout>
      </HelixWorkItem >
    </ItemGroup>

  </Target>
</Project>