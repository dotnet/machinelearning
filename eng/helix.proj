<Project Sdk="Microsoft.DotNet.Helix.Sdk" InitialTargets="CreateHelixWorkItems">
  <Choose>
    <When Condition="$(HelixTargetQueues.ToLowerInvariant().Contains('windows'))">
    <PropertyGroup>
      <IsPosixShell>false</IsPosixShell>
    </PropertyGroup>
    </When>
    <Otherwise>
    <PropertyGroup>
      <IsPosixShell>true</IsPosixShell>
    </PropertyGroup>
    </Otherwise>
  </Choose>

  <PropertyGroup>
    <HelixSourcePrefix>pr/</HelixSourcePrefix>
    <HelixSource Condition="'$(HelixSource)' == ''">$(HelixSourcePrefix)dotnet/machinelearning</HelixSource>
    <HelixSource Condition="'$(BUILD_SOURCEBRANCH)' != ''">$(HelixSource)/$(BUILD_SOURCEBRANCH)</HelixSource>

    <HelixBuild Condition="'$(HelixBuild)' == ''">$(BUILD_BUILDNUMBER)</HelixBuild>
    <HelixBuild Condition="'$(HelixBuild)' == ''">default</HelixBuild>

    <WaitForWorkItemCompletion>true</WaitForWorkItemCompletion>
    <CancelHelixJobsIfBuildCancelled Condition="'$(CancelHelixJobsIfBuildCancelled)' != 'false'">true</CancelHelixJobsIfBuildCancelled>
    <FailOnWorkItemFailure Condition="'$(FailOnWorkItemFailure)' != 'false'">true</FailOnWorkItemFailure>

    <!-- Read global.json so we know the version of the dotnet cli we need -->
    <GlobalJsonContent>$([System.IO.File]::ReadAllText('$(RepoRoot)global.json'))</GlobalJsonContent>
    <DotNetCliPackageType>sdk</DotNetCliPackageType>
    <DotNetCliVersion>$([System.Text.RegularExpressions.Regex]::Match($(GlobalJsonContent), '(%3F&lt;="dotnet": ").*(%3F=")'))</DotNetCliVersion>

    <!-- The other DotNetCliRuntimes are figured out correctly by the queue name -->
    <DotNetCliRuntime Condition="'$(TargetArchitecture)' == 'x86'">win-x86</DotNetCliRuntime>
    <DotNetCliRuntime Condition="'$(TargetArchitecture)' == 'arm' And $(HelixTargetQueues.ToLowerInvariant().Contains('ubuntu'))">linux-arm</DotNetCliRuntime>
    <DotNetCliRuntime Condition="'$(TargetArchitecture)' == 'arm64' And $(HelixTargetQueues.ToLowerInvariant().Contains('osx'))">osx-arm64</DotNetCliRuntime>

    <!-- 'true' to produce a build error when tests fail. Default 'true' -->
    <FailOnTestFailure>true</FailOnTestFailure>
  </PropertyGroup>

  <ItemGroup>
    <AdditionalDotNetPackage Include="$(DotNetRuntime80Version)">
      <PackageType>runtime</PackageType>
      <DotNetCliRuntime Condition="'$(TargetArchitecture)' == 'x86'">win-x86</DotNetCliRuntime>
      <DotNetCliRuntime Condition="'$(TargetArchitecture)' == 'arm' And $(HelixTargetQueues.ToLowerInvariant().Contains('ubuntu'))">linux-arm</DotNetCliRuntime>
    </AdditionalDotNetPackage>
  </ItemGroup>

  <PropertyGroup Condition="'$(HelixType)' == ''">
    <!-- For PRs we want helixtype to be the same for all frameworks except package testing-->
    <TestScope Condition="'$(TestScope)' == ''">innerloop</TestScope>
    <HelixType>test/unit/cli/$(TestScope)/</HelixType>
  </PropertyGroup>

  <PropertyGroup>
    <!-- TargetFramework of the xunit.runner.dll to use when running the tests -->
    <XUnitRuntimeTargetFramework>netcoreapp2.0</XUnitRuntimeTargetFramework>
    <!-- PackageVersion of xunit.runner.console to use -->
    <XUnitRunnerVersion>2.4.2</XUnitRunnerVersion>
    <!-- Additional command line arguments to pass to xunit.console.exe -->
  </PropertyGroup>

  <ItemGroup>
    <MyProjects Include="..\test\**\*.csproj" />
    <MyProjects Include="..\test\**\*.fsproj" />
  </ItemGroup>

  <ItemGroup>
    <HelixCorrelationPayload Include="xunit-runner">
      <Uri>https://api.nuget.org/v3-flatcontainer/xunit.runner.console/$(XUnitRunnerVersion)/xunit.runner.console.$(XUnitRunnerVersion).nupkg</Uri>
      <Destination>xunit-runner</Destination>
    </HelixCorrelationPayload>

    <HelixCorrelationPayload Include="$(BUILD_SOURCESDIRECTORY)\test\data">
      <Destination>test\data</Destination>
    </HelixCorrelationPayload>

    <HelixCorrelationPayload Include="$(BUILD_SOURCESDIRECTORY)\test\BaselineOutput">
      <Destination>test\BaselineOutput</Destination>
    </HelixCorrelationPayload>
  </ItemGroup>

  <Target Name="CreateHelixWorkItems">
    <MSBuild Projects="@(MyProjects)"
      Targets="GetHelixWorkItems"
      BuildInParallel="$(BuildInParallel)"
      RemoveProperties="TargetFramework;RuntimeIdentifier">
        <Output TaskParameter="TargetOutputs" ItemName="HelixWorkItem" />
    </MSBuild>

    <PropertyGroup>
      <HelixPreCommands Condition="$(IsPosixShell)">$(HelixPreCommands);export ML_TEST_DATADIR=$HELIX_CORRELATION_PAYLOAD;export MICROSOFTML_RESOURCE_PATH=$HELIX_WORKITEM_ROOT;sudo chmod -R 777 $HELIX_WORKITEM_ROOT;sudo chown -R $USER $HELIX_WORKITEM_ROOT</HelixPreCommands>
      <HelixPreCommands Condition="!$(IsPosixShell)">$(HelixPreCommands);set ML_TEST_DATADIR=%HELIX_CORRELATION_PAYLOAD%;set MICROSOFTML_RESOURCE_PATH=%HELIX_WORKITEM_ROOT%</HelixPreCommands>

      <HelixPreCommands Condition="$(IsPosixShell)">$(HelixPreCommands);export PATH=$HELIX_CORRELATION_PAYLOAD/$(DotNetCliDestination):$PATH</HelixPreCommands>
      <HelixPreCommands Condition="!$(IsPosixShell)">$(HelixPreCommands);set PATH=%HELIX_CORRELATION_PAYLOAD%\$(DotNetCliDestination)%3B%PATH%</HelixPreCommands> 

      <HelixPreCommands Condition="$(HelixTargetQueues.ToLowerInvariant().Contains('osx'))">$(HelixPreCommands);export LD_LIBRARY_PATH=/opt/homebrew/opt/mono-libgdiplus/lib;ls /usr/lib;ls $HELIX_WORKITEM_ROOT</HelixPreCommands>

      <HelixPreCommands Condition="$(HelixTargetQueues.ToLowerInvariant().Contains('armarch'))">$(HelixPreCommands);sudo apt update;sudo apt-get install libomp-dev libomp5 -y</HelixPreCommands>
    </PropertyGroup>
  </Target>
</Project>
