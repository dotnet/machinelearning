{
  "EntryPoints": [
    {
      "Name": "Data.CustomTextLoader",
      "Desc": "Import a dataset from a text file",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "InputFile",
          "Type": "FileHandle",
          "Desc": "Location of the input file",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "CustomSchema",
          "Type": "String",
          "Desc": "Custom schema to use for parsing",
          "Aliases": [
            "schema"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": null
        }
      ],
      "Outputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "The resulting data view"
        }
      ]
    },
    {
      "Name": "Data.DataViewReference",
      "Desc": "Pass dataview from memory to experiment",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Pointer to IDataView in memory",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "The resulting data view"
        }
      ]
    },
    {
      "Name": "Data.IDataViewArrayConverter",
      "Desc": "Create and array variable",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": {
            "Kind": "Array",
            "ItemType": "DataView"
          },
          "Desc": "The data sets",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": {
            "Kind": "Array",
            "ItemType": "DataView"
          },
          "Desc": "The data set array"
        }
      ]
    },
    {
      "Name": "Data.PredictorModelArrayConverter",
      "Desc": "Create and array variable",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Model",
          "Type": {
            "Kind": "Array",
            "ItemType": "PredictorModel"
          },
          "Desc": "The models",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "OutputModel",
          "Type": {
            "Kind": "Array",
            "ItemType": "PredictorModel"
          },
          "Desc": "The model array"
        }
      ]
    },
    {
      "Name": "Data.TextLoader",
      "Desc": "Import a dataset from a text file",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "InputFile",
          "Type": "FileHandle",
          "Desc": "Location of the input file",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Arguments",
          "Type": {
            "Kind": "Struct",
            "Fields": [
              {
                "Name": "Column",
                "Type": {
                  "Kind": "Array",
                  "ItemType": {
                    "Kind": "Struct",
                    "Fields": [
                      {
                        "Name": "Name",
                        "Type": "String",
                        "Desc": "Name of the column",
                        "Required": false,
                        "SortOrder": 150.0,
                        "IsNullable": false,
                        "Default": null
                      },
                      {
                        "Name": "Type",
                        "Type": {
                          "Kind": "Enum",
                          "Values": [
                            "I1",
                            "U1",
                            "I2",
                            "U2",
                            "I4",
                            "U4",
                            "I8",
                            "U8",
                            "R4",
                            "Num",
                            "R8",
                            "TX",
                            "Text",
                            "TXT",
                            "BL",
                            "Bool",
                            "TimeSpan",
                            "TS",
                            "DT",
                            "DateTime",
                            "DZ",
                            "DateTimeZone",
                            "UG",
                            "U16"
                          ]
                        },
                        "Desc": "Type of the items in the column",
                        "Required": false,
                        "SortOrder": 150.0,
                        "IsNullable": true,
                        "Default": null
                      },
                      {
                        "Name": "Source",
                        "Type": {
                          "Kind": "Array",
                          "ItemType": {
                            "Kind": "Struct",
                            "Fields": [
                              {
                                "Name": "Min",
                                "Type": "Int",
                                "Desc": "First index in the range",
                                "Required": true,
                                "SortOrder": 150.0,
                                "IsNullable": false,
                                "Default": 0
                              },
                              {
                                "Name": "Max",
                                "Type": "Int",
                                "Desc": "Last index in the range",
                                "Required": false,
                                "SortOrder": 150.0,
                                "IsNullable": true,
                                "Default": null
                              },
                              {
                                "Name": "AutoEnd",
                                "Type": "Bool",
                                "Desc": "This range extends to the end of the line, but should be a fixed number of items",
                                "Aliases": [
                                  "auto"
                                ],
                                "Required": false,
                                "SortOrder": 150.0,
                                "IsNullable": false,
                                "Default": false
                              },
                              {
                                "Name": "VariableEnd",
                                "Type": "Bool",
                                "Desc": "This range extends to the end of the line, which can vary from line to line",
                                "Aliases": [
                                  "var"
                                ],
                                "Required": false,
                                "SortOrder": 150.0,
                                "IsNullable": false,
                                "Default": false
                              },
                              {
                                "Name": "AllOther",
                                "Type": "Bool",
                                "Desc": "This range includes only other indices not specified",
                                "Aliases": [
                                  "other"
                                ],
                                "Required": false,
                                "SortOrder": 150.0,
                                "IsNullable": false,
                                "Default": false
                              },
                              {
                                "Name": "ForceVector",
                                "Type": "Bool",
                                "Desc": "Force scalar columns to be treated as vectors of length one",
                                "Aliases": [
                                  "vector"
                                ],
                                "Required": false,
                                "SortOrder": 150.0,
                                "IsNullable": false,
                                "Default": false
                              }
                            ]
                          }
                        },
                        "Desc": "Source index range(s) of the column",
                        "Aliases": [
                          "src"
                        ],
                        "Required": false,
                        "SortOrder": 150.0,
                        "IsNullable": false,
                        "Default": null
                      },
                      {
                        "Name": "KeyRange",
                        "Type": {
                          "Kind": "Struct",
                          "Fields": [
                            {
                              "Name": "Min",
                              "Type": "UInt",
                              "Desc": "First index in the range",
                              "Required": false,
                              "SortOrder": 150.0,
                              "IsNullable": false,
                              "Default": 0
                            },
                            {
                              "Name": "Max",
                              "Type": "UInt",
                              "Desc": "Last index in the range",
                              "Required": false,
                              "SortOrder": 150.0,
                              "IsNullable": true,
                              "Default": null
                            },
                            {
                              "Name": "Contiguous",
                              "Type": "Bool",
                              "Desc": "Whether the key is contiguous",
                              "Required": false,
                              "SortOrder": 150.0,
                              "IsNullable": false,
                              "Default": true
                            }
                          ]
                        },
                        "Desc": "For a key column, this defines the range of values",
                        "Aliases": [
                          "key"
                        ],
                        "Required": false,
                        "SortOrder": 150.0,
                        "IsNullable": false,
                        "Default": null
                      }
                    ]
                  }
                },
                "Desc": "Column groups. Each group is specified as name:type:numeric-ranges, eg, col=Features:R4:1-17,26,35-40",
                "Aliases": [
                  "col"
                ],
                "Required": false,
                "SortOrder": 1.0,
                "IsNullable": false,
                "Default": null
              },
              {
                "Name": "UseThreads",
                "Type": "Bool",
                "Desc": "Use separate parsing threads?",
                "Aliases": [
                  "threads"
                ],
                "Required": false,
                "SortOrder": 150.0,
                "IsNullable": false,
                "Default": true
              },
              {
                "Name": "HeaderFile",
                "Type": "String",
                "Desc": "File containing a header with feature names. If specified, header defined in the data file (header+) is ignored.",
                "Aliases": [
                  "hf"
                ],
                "Required": false,
                "SortOrder": 150.0,
                "IsNullable": false,
                "Default": null
              },
              {
                "Name": "MaxRows",
                "Type": "Int",
                "Desc": "Maximum number of rows to produce",
                "Aliases": [
                  "rows"
                ],
                "Required": false,
                "SortOrder": 150.0,
                "IsNullable": true,
                "Default": null
              },
              {
                "Name": "AllowQuoting",
                "Type": "Bool",
                "Desc": "Whether the input may include quoted values, which can contain separator characters, colons, and distinguish empty values from missing values. When true, consecutive separators denote a missing value and an empty value is denoted by \"\". When false, consecutive separators denote an empty value.",
                "Aliases": [
                  "quote"
                ],
                "Required": false,
                "SortOrder": 150.0,
                "IsNullable": false,
                "Default": true
              },
              {
                "Name": "AllowSparse",
                "Type": "Bool",
                "Desc": "Whether the input may include sparse representations",
                "Aliases": [
                  "sparse"
                ],
                "Required": false,
                "SortOrder": 150.0,
                "IsNullable": false,
                "Default": true
              },
              {
                "Name": "InputSize",
                "Type": "Int",
                "Desc": "Number of source columns in the text data. Default is that sparse rows contain their size information.",
                "Aliases": [
                  "size"
                ],
                "Required": false,
                "SortOrder": 150.0,
                "IsNullable": true,
                "Default": null
              },
              {
                "Name": "Separator",
                "Type": {
                  "Kind": "Array",
                  "ItemType": "Char"
                },
                "Desc": "Source column separator.",
                "Aliases": [
                  "sep"
                ],
                "Required": false,
                "SortOrder": 150.0,
                "IsNullable": false,
                "Default": [
                  "\t"
                ]
              },
              {
                "Name": "TrimWhitespace",
                "Type": "Bool",
                "Desc": "Remove trailing whitespace from lines",
                "Aliases": [
                  "trim"
                ],
                "Required": false,
                "SortOrder": 150.0,
                "IsNullable": false,
                "Default": false
              },
              {
                "Name": "HasHeader",
                "Type": "Bool",
                "Desc": "Data file has header with feature names. Header is read only if options 'hs' and 'hf' are not specified.",
                "Aliases": [
                  "header"
                ],
                "Required": false,
                "SortOrder": 150.0,
                "IsNullable": false,
                "Default": false
              }
            ]
          },
          "Desc": "Arguments",
          "Aliases": [
            "args"
          ],
          "Required": true,
          "SortOrder": 2.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "The resulting data view"
        }
      ],
      "InputKind": [
        "ILearningPipelineLoader"
      ]
    },
    {
      "Name": "Models.AnomalyDetectionEvaluator",
      "Desc": "Evaluates an anomaly detection scored dataset.",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "The data to be used for evaluation.",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "NameColumn",
          "Type": "String",
          "Desc": "Name column name.",
          "Aliases": [
            "name"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Name"
        },
        {
          "Name": "K",
          "Type": "Int",
          "Desc": "Expected number of false positives",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 10
        },
        {
          "Name": "P",
          "Type": "Float",
          "Desc": "Expected false positive rate",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.01
        },
        {
          "Name": "NumTopResults",
          "Type": "Int",
          "Desc": "Number of top-scored predictions to display",
          "Aliases": [
            "n"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 50
        },
        {
          "Name": "Stream",
          "Type": "Bool",
          "Desc": "Whether to calculate metrics in one pass",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "MaxAucExamples",
          "Type": "Int",
          "Desc": "The number of samples to use for AUC calculation. If 0, AUC is not computed. If -1, the whole dataset is used",
          "Aliases": [
            "numauc"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": -1
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels.",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Weight column name.",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "ScoreColumn",
          "Type": "String",
          "Desc": "Score column name.",
          "Aliases": [
            "score"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "StratColumn",
          "Type": {
            "Kind": "Array",
            "ItemType": "String"
          },
          "Desc": "Stratification column name.",
          "Aliases": [
            "strat"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        }
      ],
      "Outputs": [
        {
          "Name": "Warnings",
          "Type": "DataView",
          "Desc": "Warning dataset"
        },
        {
          "Name": "OverallMetrics",
          "Type": "DataView",
          "Desc": "Overall metrics dataset"
        },
        {
          "Name": "PerInstanceMetrics",
          "Type": "DataView",
          "Desc": "Per instance metrics dataset"
        }
      ],
      "InputKind": [
        "IEvaluatorInput"
      ],
      "OutputKind": [
        "IEvaluatorOutput"
      ]
    },
    {
      "Name": "Models.BinaryClassificationEvaluator",
      "Desc": "Evaluates a binary classification scored dataset.",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "The data to be used for evaluation.",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "NameColumn",
          "Type": "String",
          "Desc": "Name column name.",
          "Aliases": [
            "name"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Name"
        },
        {
          "Name": "ProbabilityColumn",
          "Type": "String",
          "Desc": "Probability column name",
          "Aliases": [
            "prob"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "Threshold",
          "Type": "Float",
          "Desc": "Probability value for classification thresholding",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "UseRawScoreThreshold",
          "Type": "Bool",
          "Desc": "Use raw score value instead of probability for classification thresholding",
          "Aliases": [
            "useRawScore"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "NumRocExamples",
          "Type": "Int",
          "Desc": "The number of samples to use for p/r curve generation. Specify 0 for no p/r curve generation",
          "Aliases": [
            "numpr"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 100000
        },
        {
          "Name": "MaxAucExamples",
          "Type": "Int",
          "Desc": "The number of samples to use for AUC calculation. If 0, AUC is not computed. If -1, the whole dataset is used",
          "Aliases": [
            "numauc"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": -1
        },
        {
          "Name": "NumAuPrcExamples",
          "Type": "Int",
          "Desc": "The number of samples to use for AUPRC calculation. Specify 0 for no AUPRC calculation",
          "Aliases": [
            "numauprc"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 100000
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels.",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Weight column name.",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "ScoreColumn",
          "Type": "String",
          "Desc": "Score column name.",
          "Aliases": [
            "score"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "StratColumn",
          "Type": {
            "Kind": "Array",
            "ItemType": "String"
          },
          "Desc": "Stratification column name.",
          "Aliases": [
            "strat"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        }
      ],
      "Outputs": [
        {
          "Name": "Warnings",
          "Type": "DataView",
          "Desc": "Warning dataset"
        },
        {
          "Name": "OverallMetrics",
          "Type": "DataView",
          "Desc": "Overall metrics dataset"
        },
        {
          "Name": "PerInstanceMetrics",
          "Type": "DataView",
          "Desc": "Per instance metrics dataset"
        },
        {
          "Name": "ConfusionMatrix",
          "Type": "DataView",
          "Desc": "Confusion matrix dataset"
        }
      ],
      "InputKind": [
        "IEvaluatorInput"
      ],
      "OutputKind": [
        "IClassificationEvaluatorOutput",
        "IEvaluatorOutput"
      ]
    },
    {
      "Name": "Models.BinaryCrossValidator",
      "Desc": "Cross validation for binary classification",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "The data set",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Nodes",
          "Type": {
            "Kind": "Array",
            "ItemType": "Node"
          },
          "Desc": "The training subgraph",
          "Required": true,
          "SortOrder": 3.0,
          "IsNullable": false
        },
        {
          "Name": "Inputs",
          "Type": {
            "Kind": "Struct",
            "Fields": [
              {
                "Name": "Data",
                "Type": "DataView",
                "Desc": "The data to be used for training",
                "Required": true,
                "SortOrder": 1.0,
                "IsNullable": false
              }
            ]
          },
          "Desc": "The training subgraph inputs",
          "Required": true,
          "SortOrder": 4.0,
          "IsNullable": false
        },
        {
          "Name": "Outputs",
          "Type": {
            "Kind": "Struct",
            "Fields": [
              {
                "Name": "Model",
                "Type": "PredictorModel",
                "Desc": "The model",
                "Required": true,
                "SortOrder": 1.0,
                "IsNullable": false
              }
            ]
          },
          "Desc": "The training subgraph outputs",
          "Required": true,
          "SortOrder": 5.0,
          "IsNullable": false
        },
        {
          "Name": "StratificationColumn",
          "Type": "String",
          "Desc": "Column to use for stratification",
          "Aliases": [
            "strat"
          ],
          "Required": false,
          "SortOrder": 7.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "NumFolds",
          "Type": "Int",
          "Desc": "Number of folds in k-fold cross-validation",
          "Aliases": [
            "k"
          ],
          "Required": false,
          "SortOrder": 8.0,
          "IsNullable": false,
          "Default": 2
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": {
            "Kind": "Array",
            "ItemType": "PredictorModel"
          },
          "Desc": "The trained model"
        },
        {
          "Name": "Warnings",
          "Type": {
            "Kind": "Array",
            "ItemType": "DataView"
          },
          "Desc": "Warning dataset"
        },
        {
          "Name": "OverallMetrics",
          "Type": {
            "Kind": "Array",
            "ItemType": "DataView"
          },
          "Desc": "Overall metrics dataset"
        },
        {
          "Name": "PerInstanceMetrics",
          "Type": {
            "Kind": "Array",
            "ItemType": "DataView"
          },
          "Desc": "Per instance metrics dataset"
        },
        {
          "Name": "ConfusionMatrix",
          "Type": {
            "Kind": "Array",
            "ItemType": "DataView"
          },
          "Desc": "Confusion matrix dataset"
        }
      ]
    },
    {
      "Name": "Models.ClassificationEvaluator",
      "Desc": "Evaluates a multi class classification scored dataset.",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "The data to be used for evaluation.",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "NameColumn",
          "Type": "String",
          "Desc": "Name column name.",
          "Aliases": [
            "name"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Name"
        },
        {
          "Name": "OutputTopKAcc",
          "Type": "Int",
          "Desc": "Output top-K accuracy.",
          "Aliases": [
            "topkacc"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "NumTopClassesToOutput",
          "Type": "Int",
          "Desc": "Output top-K classes.",
          "Aliases": [
            "topk"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 3
        },
        {
          "Name": "NumClassesConfusionMatrix",
          "Type": "Int",
          "Desc": "Maximum number of classes in confusion matrix.",
          "Aliases": [
            "nccf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 10
        },
        {
          "Name": "OutputPerClassStatistics",
          "Type": "Bool",
          "Desc": "Output per class statistics and confusion matrix.",
          "Aliases": [
            "opcs"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels.",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Weight column name.",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "ScoreColumn",
          "Type": "String",
          "Desc": "Score column name.",
          "Aliases": [
            "score"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "StratColumn",
          "Type": {
            "Kind": "Array",
            "ItemType": "String"
          },
          "Desc": "Stratification column name.",
          "Aliases": [
            "strat"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        }
      ],
      "Outputs": [
        {
          "Name": "Warnings",
          "Type": "DataView",
          "Desc": "Warning dataset"
        },
        {
          "Name": "OverallMetrics",
          "Type": "DataView",
          "Desc": "Overall metrics dataset"
        },
        {
          "Name": "PerInstanceMetrics",
          "Type": "DataView",
          "Desc": "Per instance metrics dataset"
        },
        {
          "Name": "ConfusionMatrix",
          "Type": "DataView",
          "Desc": "Confusion matrix dataset"
        }
      ],
      "InputKind": [
        "IEvaluatorInput"
      ],
      "OutputKind": [
        "IClassificationEvaluatorOutput",
        "IEvaluatorOutput"
      ]
    },
    {
      "Name": "Models.ClusterEvaluator",
      "Desc": "Evaluates a clustering scored dataset.",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "The data to be used for evaluation.",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "NameColumn",
          "Type": "String",
          "Desc": "Name column name.",
          "Aliases": [
            "name"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Name"
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Features column name",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "CalculateDbi",
          "Type": "Bool",
          "Desc": "Calculate DBI? (time-consuming unsupervised metric)",
          "Aliases": [
            "dbi"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "NumTopClustersToOutput",
          "Type": "Int",
          "Desc": "Output top K clusters",
          "Aliases": [
            "topk"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 3
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels.",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Weight column name.",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "ScoreColumn",
          "Type": "String",
          "Desc": "Score column name.",
          "Aliases": [
            "score"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "StratColumn",
          "Type": {
            "Kind": "Array",
            "ItemType": "String"
          },
          "Desc": "Stratification column name.",
          "Aliases": [
            "strat"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        }
      ],
      "Outputs": [
        {
          "Name": "Warnings",
          "Type": "DataView",
          "Desc": "Warning dataset"
        },
        {
          "Name": "OverallMetrics",
          "Type": "DataView",
          "Desc": "Overall metrics dataset"
        },
        {
          "Name": "PerInstanceMetrics",
          "Type": "DataView",
          "Desc": "Per instance metrics dataset"
        }
      ],
      "InputKind": [
        "IEvaluatorInput"
      ],
      "OutputKind": [
        "IEvaluatorOutput"
      ]
    },
    {
      "Name": "Models.CrossValidationResultsCombiner",
      "Desc": "Combine the metric data views returned from cross validation.",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "OverallMetrics",
          "Type": {
            "Kind": "Array",
            "ItemType": "DataView"
          },
          "Desc": "Overall metrics datasets",
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "PerInstanceMetrics",
          "Type": {
            "Kind": "Array",
            "ItemType": "DataView"
          },
          "Desc": "Per instance metrics datasets",
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "ConfusionMatrix",
          "Type": {
            "Kind": "Array",
            "ItemType": "DataView"
          },
          "Desc": "Confusion matrix datasets",
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "Warnings",
          "Type": {
            "Kind": "Array",
            "ItemType": "DataView"
          },
          "Desc": "Warning datasets",
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "The label column name",
          "Aliases": [
            "Label"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "Kind",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "SignatureBinaryClassifierTrainer",
              "SignatureMultiClassClassifierTrainer",
              "SignatureRankerTrainer",
              "SignatureRegressorTrainer",
              "SignatureMultiOutputRegressorTrainer",
              "SignatureAnomalyDetectorTrainer",
              "SignatureClusteringTrainer"
            ]
          },
          "Desc": "Specifies the trainer kind, which determines the evaluator to be used.",
          "Required": true,
          "SortOrder": 7.0,
          "IsNullable": false,
          "Default": "SignatureBinaryClassifierTrainer"
        }
      ],
      "Outputs": [
        {
          "Name": "Warnings",
          "Type": "DataView",
          "Desc": "Warning dataset"
        },
        {
          "Name": "OverallMetrics",
          "Type": "DataView",
          "Desc": "Overall metrics dataset"
        },
        {
          "Name": "PerInstanceMetrics",
          "Type": "DataView",
          "Desc": "Per instance metrics dataset"
        },
        {
          "Name": "ConfusionMatrix",
          "Type": "DataView",
          "Desc": "Confusion matrix dataset"
        }
      ]
    },
    {
      "Name": "Models.CrossValidator",
      "Desc": "Cross validation for general learning",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "The data set",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "TransformModel",
          "Type": "TransformModel",
          "Desc": "The transform model from the pipeline before this command. It gets included in the Output.PredictorModel.",
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "Nodes",
          "Type": {
            "Kind": "Array",
            "ItemType": "Node"
          },
          "Desc": "The training subgraph",
          "Required": true,
          "SortOrder": 3.0,
          "IsNullable": false
        },
        {
          "Name": "Inputs",
          "Type": {
            "Kind": "Struct",
            "Fields": [
              {
                "Name": "Data",
                "Type": "DataView",
                "Desc": "The data to be used for training",
                "Required": true,
                "SortOrder": 1.0,
                "IsNullable": false
              }
            ]
          },
          "Desc": "The training subgraph inputs",
          "Required": true,
          "SortOrder": 4.0,
          "IsNullable": false
        },
        {
          "Name": "Outputs",
          "Type": {
            "Kind": "Struct",
            "Fields": [
              {
                "Name": "Model",
                "Type": "PredictorModel",
                "Desc": "The model",
                "Required": true,
                "SortOrder": 1.0,
                "IsNullable": false
              }
            ]
          },
          "Desc": "The training subgraph outputs",
          "Required": true,
          "SortOrder": 5.0,
          "IsNullable": false
        },
        {
          "Name": "StratificationColumn",
          "Type": "String",
          "Desc": "Column to use for stratification",
          "Aliases": [
            "strat"
          ],
          "Required": false,
          "SortOrder": 7.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "NumFolds",
          "Type": "Int",
          "Desc": "Number of folds in k-fold cross-validation",
          "Aliases": [
            "k"
          ],
          "Required": false,
          "SortOrder": 8.0,
          "IsNullable": false,
          "Default": 2
        },
        {
          "Name": "Kind",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "SignatureBinaryClassifierTrainer",
              "SignatureMultiClassClassifierTrainer",
              "SignatureRankerTrainer",
              "SignatureRegressorTrainer",
              "SignatureMultiOutputRegressorTrainer",
              "SignatureAnomalyDetectorTrainer",
              "SignatureClusteringTrainer"
            ]
          },
          "Desc": "Specifies the trainer kind, which determines the evaluator to be used.",
          "Required": true,
          "SortOrder": 9.0,
          "IsNullable": false,
          "Default": "SignatureBinaryClassifierTrainer"
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": {
            "Kind": "Array",
            "ItemType": "PredictorModel"
          },
          "Desc": "The final model including the trained predictor model and the model from the transforms, provided as the Input.TransformModel."
        },
        {
          "Name": "Warnings",
          "Type": "DataView",
          "Desc": "Warning dataset"
        },
        {
          "Name": "OverallMetrics",
          "Type": "DataView",
          "Desc": "Overall metrics dataset"
        },
        {
          "Name": "PerInstanceMetrics",
          "Type": "DataView",
          "Desc": "Per instance metrics dataset"
        },
        {
          "Name": "ConfusionMatrix",
          "Type": "DataView",
          "Desc": "Confusion matrix dataset"
        }
      ]
    },
    {
      "Name": "Models.CrossValidatorDatasetSplitter",
      "Desc": "Split the dataset into the specified number of cross-validation folds (train and test sets)",
      "FriendlyName": "Dataset CV Split",
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "NumFolds",
          "Type": "Int",
          "Desc": "Number of folds to split into",
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": 2
        },
        {
          "Name": "StratificationColumn",
          "Type": "String",
          "Desc": "Stratification column",
          "Aliases": [
            "strat"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": null
        }
      ],
      "Outputs": [
        {
          "Name": "TrainData",
          "Type": {
            "Kind": "Array",
            "ItemType": "DataView"
          },
          "Desc": "Training data (one dataset per fold)"
        },
        {
          "Name": "TestData",
          "Type": {
            "Kind": "Array",
            "ItemType": "DataView"
          },
          "Desc": "Testing data (one dataset per fold)"
        }
      ]
    },
    {
      "Name": "Models.DatasetTransformer",
      "Desc": "Applies a TransformModel to a dataset.",
      "FriendlyName": "Apply Transform Model Output",
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "TransformModel",
          "Type": "TransformModel",
          "Desc": "Transform model",
          "Required": true,
          "SortOrder": 2.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ]
    },
    {
      "Name": "Models.FixedPlattCalibrator",
      "Desc": "Apply a Platt calibrator with a fixed slope and offset to an input model",
      "FriendlyName": "Fixed Sigmoid Calibration",
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Slope",
          "Type": "Float",
          "Desc": "The slope parameter of the calibration function 1 / (1 + exp(-slope * x + offset)",
          "Aliases": [
            "slope"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": 1.0
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "UncalibratedPredictorModel",
          "Type": "PredictorModel",
          "Desc": "The predictor to calibrate",
          "Aliases": [
            "uncalibratedPredictorModel"
          ],
          "Required": true,
          "SortOrder": 2.0,
          "IsNullable": false
        },
        {
          "Name": "Offset",
          "Type": "Float",
          "Desc": "The offset parameter of the calibration function 1 / (1 + exp(-slope * x + offset)",
          "Aliases": [
            "offset"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "MaxRows",
          "Type": "Int",
          "Desc": "The maximum number of examples to train the calibrator on",
          "Aliases": [
            "maxRows"
          ],
          "Required": true,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": 1000000000,
          "Range": {
            "Inf": 0,
            "Max": 2147483647
          }
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ICalibratorInput",
        "ITransformInput"
      ],
      "OutputKind": [
        "ICalibratorOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Models.MultiOutputRegressionEvaluator",
      "Desc": "Evaluates a multi output regression scored dataset.",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "The data to be used for evaluation.",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "NameColumn",
          "Type": "String",
          "Desc": "Name column name.",
          "Aliases": [
            "name"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Name"
        },
        {
          "Name": "LossFunction",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "RegressionLossFunction"
          },
          "Desc": "Loss function",
          "Aliases": [
            "loss"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": {
            "Name": "SquaredLoss"
          }
        },
        {
          "Name": "SupressScoresAndLabels",
          "Type": "Bool",
          "Desc": "Supress labels and scores in per-instance outputs?",
          "Aliases": [
            "noScores"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels.",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Weight column name.",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "ScoreColumn",
          "Type": "String",
          "Desc": "Score column name.",
          "Aliases": [
            "score"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "StratColumn",
          "Type": {
            "Kind": "Array",
            "ItemType": "String"
          },
          "Desc": "Stratification column name.",
          "Aliases": [
            "strat"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        }
      ],
      "Outputs": [
        {
          "Name": "Warnings",
          "Type": "DataView",
          "Desc": "Warning dataset"
        },
        {
          "Name": "OverallMetrics",
          "Type": "DataView",
          "Desc": "Overall metrics dataset"
        },
        {
          "Name": "PerInstanceMetrics",
          "Type": "DataView",
          "Desc": "Per instance metrics dataset"
        }
      ],
      "InputKind": [
        "IEvaluatorInput"
      ],
      "OutputKind": [
        "IEvaluatorOutput"
      ]
    },
    {
      "Name": "Models.NaiveCalibrator",
      "Desc": "Apply a Naive calibrator to an input model",
      "FriendlyName": "Naive Calibrator",
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "UncalibratedPredictorModel",
          "Type": "PredictorModel",
          "Desc": "The predictor to calibrate",
          "Aliases": [
            "uncalibratedPredictorModel"
          ],
          "Required": true,
          "SortOrder": 2.0,
          "IsNullable": false
        },
        {
          "Name": "MaxRows",
          "Type": "Int",
          "Desc": "The maximum number of examples to train the calibrator on",
          "Aliases": [
            "maxRows"
          ],
          "Required": true,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": 1000000000,
          "Range": {
            "Inf": 0,
            "Max": 2147483647
          }
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ICalibratorInput",
        "ITransformInput"
      ],
      "OutputKind": [
        "ICalibratorOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Models.OneVersusAll",
      "Desc": "One-vs-All macro (OVA)",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Nodes",
          "Type": {
            "Kind": "Array",
            "ItemType": "Node"
          },
          "Desc": "The subgraph for the binary trainer used to construct the OVA learner. This should be a TrainBinary node.",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "OutputForSubGraph",
          "Type": {
            "Kind": "Struct",
            "Fields": [
              {
                "Name": "Model",
                "Type": "PredictorModel",
                "Desc": "The predictor model for the subgraph exemplar.",
                "Required": true,
                "SortOrder": 1.0,
                "IsNullable": false
              }
            ]
          },
          "Desc": "The training subgraph output.",
          "Required": true,
          "SortOrder": 2.0,
          "IsNullable": false
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "UseProbabilities",
          "Type": "Bool",
          "Desc": "Use probabilities in OVA combiner",
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Column to use for example weight",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": "Weight"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained multiclass model"
        }
      ],
      "InputKind": [
        "ITrainerInputWithWeight",
        "ITrainerInputWithLabel",
        "ITrainerInput"
      ]
    },
    {
      "Name": "Models.OvaModelCombiner",
      "Desc": "Combines a sequence of PredictorModels into a single model",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "ModelArray",
          "Type": {
            "Kind": "Array",
            "ItemType": "PredictorModel"
          },
          "Desc": "Input models",
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "UseProbabilities",
          "Type": "Bool",
          "Desc": "Use probabilities from learners instead of raw values.",
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Column to use for example weight",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": "Weight"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "Predictor model"
        }
      ],
      "InputKind": [
        "ITrainerInputWithWeight",
        "ITrainerInputWithLabel",
        "ITrainerInput"
      ]
    },
    {
      "Name": "Models.PAVCalibrator",
      "Desc": "Apply a PAV calibrator to an input model",
      "FriendlyName": "PAV Calibration",
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "UncalibratedPredictorModel",
          "Type": "PredictorModel",
          "Desc": "The predictor to calibrate",
          "Aliases": [
            "uncalibratedPredictorModel"
          ],
          "Required": true,
          "SortOrder": 2.0,
          "IsNullable": false
        },
        {
          "Name": "MaxRows",
          "Type": "Int",
          "Desc": "The maximum number of examples to train the calibrator on",
          "Aliases": [
            "maxRows"
          ],
          "Required": true,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": 1000000000,
          "Range": {
            "Inf": 0,
            "Max": 2147483647
          }
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ICalibratorInput",
        "ITransformInput"
      ],
      "OutputKind": [
        "ICalibratorOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Models.PipelineSweeper",
      "Desc": "AutoML pipeline sweeping optimzation macro.",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training.",
          "Aliases": [
            "train"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "TestingData",
          "Type": "DataView",
          "Desc": "The data to be used for testing.",
          "Aliases": [
            "test"
          ],
          "Required": true,
          "SortOrder": 2.0,
          "IsNullable": false
        },
        {
          "Name": "StateArguments",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "AutoMlStateBase"
          },
          "Desc": "The arguments for creating an AutoMlState component.",
          "Aliases": [
            "args"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "State",
          "Type": {
            "Kind": "C# Object",
            "ItemType": "Microsoft.ML.Runtime.EntryPoints.IMlState"
          },
          "Desc": "The stateful object conducting of the autoML search.",
          "Aliases": [
            "state"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "BatchSize",
          "Type": "Int",
          "Desc": "Number of candidate pipelines to retrieve each round.",
          "Aliases": [
            "bsize"
          ],
          "Required": true,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": 0
        },
        {
          "Name": "CandidateOutputs",
          "Type": {
            "Kind": "Array",
            "ItemType": "DataView"
          },
          "Desc": "Output datasets from previous iteration of sweep.",
          "Required": false,
          "SortOrder": 7.0,
          "IsNullable": false,
          "Default": null
        }
      ],
      "Outputs": [
        {
          "Name": "State",
          "Type": {
            "Kind": "C# Object",
            "ItemType": "Microsoft.ML.Runtime.EntryPoints.IMlState"
          },
          "Desc": "Stateful autoML object, keeps track of where the search in progress."
        },
        {
          "Name": "Results",
          "Type": "DataView",
          "Desc": "Results of the sweep, including pipelines (as graph strings), IDs, and metric values."
        }
      ]
    },
    {
      "Name": "Models.PlattCalibrator",
      "Desc": "Apply a Platt calibrator to an input model",
      "FriendlyName": "Sigmoid Calibration",
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "UncalibratedPredictorModel",
          "Type": "PredictorModel",
          "Desc": "The predictor to calibrate",
          "Aliases": [
            "uncalibratedPredictorModel"
          ],
          "Required": true,
          "SortOrder": 2.0,
          "IsNullable": false
        },
        {
          "Name": "MaxRows",
          "Type": "Int",
          "Desc": "The maximum number of examples to train the calibrator on",
          "Aliases": [
            "maxRows"
          ],
          "Required": true,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": 1000000000,
          "Range": {
            "Inf": 0,
            "Max": 2147483647
          }
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ICalibratorInput",
        "ITransformInput"
      ],
      "OutputKind": [
        "ICalibratorOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Models.QuantileRegressionEvaluator",
      "Desc": "Evaluates a quantile regression scored dataset.",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "The data to be used for evaluation.",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "NameColumn",
          "Type": "String",
          "Desc": "Name column name.",
          "Aliases": [
            "name"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Name"
        },
        {
          "Name": "LossFunction",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "RegressionLossFunction"
          },
          "Desc": "Loss function",
          "Aliases": [
            "loss"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": {
            "Name": "SquaredLoss"
          }
        },
        {
          "Name": "Index",
          "Type": "Int",
          "Desc": "Quantile index to select",
          "Aliases": [
            "ind"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels.",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Weight column name.",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "ScoreColumn",
          "Type": "String",
          "Desc": "Score column name.",
          "Aliases": [
            "score"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "StratColumn",
          "Type": {
            "Kind": "Array",
            "ItemType": "String"
          },
          "Desc": "Stratification column name.",
          "Aliases": [
            "strat"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        }
      ],
      "Outputs": [
        {
          "Name": "Warnings",
          "Type": "DataView",
          "Desc": "Warning dataset"
        },
        {
          "Name": "OverallMetrics",
          "Type": "DataView",
          "Desc": "Overall metrics dataset"
        },
        {
          "Name": "PerInstanceMetrics",
          "Type": "DataView",
          "Desc": "Per instance metrics dataset"
        }
      ],
      "InputKind": [
        "IEvaluatorInput"
      ],
      "OutputKind": [
        "IEvaluatorOutput"
      ]
    },
    {
      "Name": "Models.RankerEvaluator",
      "Desc": "Evaluates a ranking scored dataset.",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "The data to be used for evaluation.",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "NameColumn",
          "Type": "String",
          "Desc": "Name column name.",
          "Aliases": [
            "name"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Name"
        },
        {
          "Name": "GroupIdColumn",
          "Type": "String",
          "Desc": "Column to use for the group ID",
          "Aliases": [
            "group"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "DcgTruncationLevel",
          "Type": "Int",
          "Desc": "Maximum truncation level for computing (N)DCG",
          "Aliases": [
            "t"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 3
        },
        {
          "Name": "LabelGains",
          "Type": "String",
          "Desc": "Label relevance gains",
          "Aliases": [
            "gains"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": "0,3,7,15,31"
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels.",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Weight column name.",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "ScoreColumn",
          "Type": "String",
          "Desc": "Score column name.",
          "Aliases": [
            "score"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "StratColumn",
          "Type": {
            "Kind": "Array",
            "ItemType": "String"
          },
          "Desc": "Stratification column name.",
          "Aliases": [
            "strat"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        }
      ],
      "Outputs": [
        {
          "Name": "Warnings",
          "Type": "DataView",
          "Desc": "Warning dataset"
        },
        {
          "Name": "OverallMetrics",
          "Type": "DataView",
          "Desc": "Overall metrics dataset"
        },
        {
          "Name": "PerInstanceMetrics",
          "Type": "DataView",
          "Desc": "Per instance metrics dataset"
        }
      ],
      "InputKind": [
        "IEvaluatorInput"
      ],
      "OutputKind": [
        "IEvaluatorOutput"
      ]
    },
    {
      "Name": "Models.RegressionEvaluator",
      "Desc": "Evaluates a regression scored dataset.",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "The data to be used for evaluation.",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "NameColumn",
          "Type": "String",
          "Desc": "Name column name.",
          "Aliases": [
            "name"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Name"
        },
        {
          "Name": "LossFunction",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "RegressionLossFunction"
          },
          "Desc": "Loss function",
          "Aliases": [
            "loss"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": {
            "Name": "SquaredLoss"
          }
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels.",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Weight column name.",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "ScoreColumn",
          "Type": "String",
          "Desc": "Score column name.",
          "Aliases": [
            "score"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "StratColumn",
          "Type": {
            "Kind": "Array",
            "ItemType": "String"
          },
          "Desc": "Stratification column name.",
          "Aliases": [
            "strat"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        }
      ],
      "Outputs": [
        {
          "Name": "Warnings",
          "Type": "DataView",
          "Desc": "Warning dataset"
        },
        {
          "Name": "OverallMetrics",
          "Type": "DataView",
          "Desc": "Overall metrics dataset"
        },
        {
          "Name": "PerInstanceMetrics",
          "Type": "DataView",
          "Desc": "Per instance metrics dataset"
        }
      ],
      "InputKind": [
        "IEvaluatorInput"
      ],
      "OutputKind": [
        "IEvaluatorOutput"
      ]
    },
    {
      "Name": "Models.Summarizer",
      "Desc": "Summarize a linear regression predictor.",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The predictor to summarize",
          "Aliases": [
            "predictorModel"
          ],
          "Required": true,
          "SortOrder": 150.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "Summary",
          "Type": "DataView",
          "Desc": "The summary of a predictor"
        },
        {
          "Name": "Stats",
          "Type": "DataView",
          "Desc": "The training set statistics. Note that this output can be null."
        }
      ]
    },
    {
      "Name": "Models.SweepResultExtractor",
      "Desc": "Extracts the sweep result.",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "State",
          "Type": {
            "Kind": "C# Object",
            "ItemType": "Microsoft.ML.Runtime.EntryPoints.IMlState"
          },
          "Desc": "The stateful object conducting of the autoML search.",
          "Aliases": [
            "state"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": null
        }
      ],
      "Outputs": [
        {
          "Name": "State",
          "Type": {
            "Kind": "C# Object",
            "ItemType": "Microsoft.ML.Runtime.EntryPoints.IMlState"
          },
          "Desc": "Stateful autoML object, keeps track of where the search in progress."
        },
        {
          "Name": "Results",
          "Type": "DataView",
          "Desc": "Results of the sweep, including pipelines (as graph strings), IDs, and metric values."
        }
      ]
    },
    {
      "Name": "Models.TrainTestBinaryEvaluator",
      "Desc": "Train test for binary classification",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "train"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "TestingData",
          "Type": "DataView",
          "Desc": "The data to be used for testing",
          "Aliases": [
            "test"
          ],
          "Required": true,
          "SortOrder": 2.0,
          "IsNullable": false
        },
        {
          "Name": "Nodes",
          "Type": {
            "Kind": "Array",
            "ItemType": "Node"
          },
          "Desc": "The training subgraph",
          "Required": true,
          "SortOrder": 3.0,
          "IsNullable": false
        },
        {
          "Name": "Inputs",
          "Type": {
            "Kind": "Struct",
            "Fields": [
              {
                "Name": "Data",
                "Type": "DataView",
                "Desc": "The data to be used for training",
                "Required": true,
                "SortOrder": 1.0,
                "IsNullable": false
              }
            ]
          },
          "Desc": "The training subgraph inputs",
          "Required": true,
          "SortOrder": 4.0,
          "IsNullable": false
        },
        {
          "Name": "Outputs",
          "Type": {
            "Kind": "Struct",
            "Fields": [
              {
                "Name": "Model",
                "Type": "PredictorModel",
                "Desc": "The model",
                "Required": true,
                "SortOrder": 1.0,
                "IsNullable": false
              }
            ]
          },
          "Desc": "The training subgraph outputs",
          "Required": true,
          "SortOrder": 5.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        },
        {
          "Name": "Warnings",
          "Type": "DataView",
          "Desc": "Warning dataset"
        },
        {
          "Name": "OverallMetrics",
          "Type": "DataView",
          "Desc": "Overall metrics dataset"
        },
        {
          "Name": "PerInstanceMetrics",
          "Type": "DataView",
          "Desc": "Per instance metrics dataset"
        },
        {
          "Name": "ConfusionMatrix",
          "Type": "DataView",
          "Desc": "Confusion matrix dataset"
        }
      ]
    },
    {
      "Name": "Models.TrainTestEvaluator",
      "Desc": "General train test for any supported evaluator",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "train"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "TestingData",
          "Type": "DataView",
          "Desc": "The data to be used for testing",
          "Aliases": [
            "test"
          ],
          "Required": true,
          "SortOrder": 2.0,
          "IsNullable": false
        },
        {
          "Name": "TransformModel",
          "Type": "TransformModel",
          "Desc": "The aggregated transform model from the pipeline before this command, to apply to the test data, and also include in the final model, together with the predictor model.",
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "Nodes",
          "Type": {
            "Kind": "Array",
            "ItemType": "Node"
          },
          "Desc": "The training subgraph",
          "Required": true,
          "SortOrder": 4.0,
          "IsNullable": false
        },
        {
          "Name": "Inputs",
          "Type": {
            "Kind": "Struct",
            "Fields": [
              {
                "Name": "Data",
                "Type": "DataView",
                "Desc": "The data to be used for training",
                "Required": true,
                "SortOrder": 1.0,
                "IsNullable": false
              }
            ]
          },
          "Desc": "The training subgraph inputs",
          "Required": true,
          "SortOrder": 5.0,
          "IsNullable": false
        },
        {
          "Name": "Outputs",
          "Type": {
            "Kind": "Struct",
            "Fields": [
              {
                "Name": "Model",
                "Type": "PredictorModel",
                "Desc": "The model",
                "Required": true,
                "SortOrder": 1.0,
                "IsNullable": false
              }
            ]
          },
          "Desc": "The training subgraph outputs",
          "Required": true,
          "SortOrder": 6.0,
          "IsNullable": false
        },
        {
          "Name": "Kind",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "SignatureBinaryClassifierTrainer",
              "SignatureMultiClassClassifierTrainer",
              "SignatureRankerTrainer",
              "SignatureRegressorTrainer",
              "SignatureMultiOutputRegressorTrainer",
              "SignatureAnomalyDetectorTrainer",
              "SignatureClusteringTrainer"
            ]
          },
          "Desc": "Specifies the trainer kind, which determines the evaluator to be used.",
          "Required": false,
          "SortOrder": 7.0,
          "IsNullable": false,
          "Default": "SignatureBinaryClassifierTrainer"
        },
        {
          "Name": "PipelineId",
          "Type": "String",
          "Desc": "Identifies which pipeline was run for this train test.",
          "Required": false,
          "SortOrder": 8.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "IncludeTrainingMetrics",
          "Type": "Bool",
          "Desc": "Indicates whether to include and output training dataset metrics.",
          "Required": false,
          "SortOrder": 9.0,
          "IsNullable": false,
          "Default": false
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The final model including the trained predictor model and the model from the transforms, provided as the Input.TransformModel."
        },
        {
          "Name": "Warnings",
          "Type": "DataView",
          "Desc": "Warning dataset"
        },
        {
          "Name": "OverallMetrics",
          "Type": "DataView",
          "Desc": "Overall metrics dataset"
        },
        {
          "Name": "PerInstanceMetrics",
          "Type": "DataView",
          "Desc": "Per instance metrics dataset"
        },
        {
          "Name": "ConfusionMatrix",
          "Type": "DataView",
          "Desc": "Confusion matrix dataset"
        },
        {
          "Name": "TrainingWarnings",
          "Type": "DataView",
          "Desc": "Warning dataset for training"
        },
        {
          "Name": "TrainingOverallMetrics",
          "Type": "DataView",
          "Desc": "Overall metrics dataset for training"
        },
        {
          "Name": "TrainingPerInstanceMetrics",
          "Type": "DataView",
          "Desc": "Per instance metrics dataset for training"
        },
        {
          "Name": "TrainingConfusionMatrix",
          "Type": "DataView",
          "Desc": "Confusion matrix dataset for training"
        }
      ]
    },
    {
      "Name": "Trainers.AveragedPerceptronBinaryClassifier",
      "Desc": "Train a Average perceptron.",
      "FriendlyName": "Averaged Perceptron",
      "ShortName": "ap",
      "Inputs": [
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "LossFunction",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "ClassificationLossFunction"
          },
          "Desc": "Loss Function",
          "Aliases": [
            "loss"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": {
            "Name": "HingeLoss"
          }
        },
        {
          "Name": "LearningRate",
          "Type": "Float",
          "Desc": "Learning rate",
          "Aliases": [
            "lr"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 1.0,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              0.01,
              0.1,
              0.5,
              1.0
            ]
          }
        },
        {
          "Name": "DecreaseLearningRate",
          "Type": "Bool",
          "Desc": "Decrease learning rate",
          "Aliases": [
            "decreaselr"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": false,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              false,
              true
            ]
          }
        },
        {
          "Name": "L2RegularizerWeight",
          "Type": "Float",
          "Desc": "L2 Regularization Weight",
          "Aliases": [
            "reg"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 0.0,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.0,
            "Max": 0.5
          }
        },
        {
          "Name": "NumIterations",
          "Type": "Int",
          "Desc": "Number of iterations",
          "Aliases": [
            "iter"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 1,
          "SweepRange": {
            "RangeType": "Long",
            "Min": 1,
            "Max": 100,
            "StepSize": 10.0,
            "IsLogScale": true
          }
        },
        {
          "Name": "InitWtsDiameter",
          "Type": "Float",
          "Desc": "Init weights diameter",
          "Aliases": [
            "initwts"
          ],
          "Required": false,
          "SortOrder": 140.0,
          "IsNullable": false,
          "Default": 0.0,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.0,
            "Max": 1.0,
            "NumSteps": 5
          }
        },
        {
          "Name": "Calibrator",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "CalibratorTrainer"
          },
          "Desc": "The calibrator kind to apply to the predictor. Specify null for no calibration",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": {
            "Name": "PlattCalibrator"
          }
        },
        {
          "Name": "MaxCalibrationExamples",
          "Type": "Int",
          "Desc": "The maximum number of examples to use when training the calibrator",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1000000
        },
        {
          "Name": "ResetWeightsAfterXExamples",
          "Type": "Int",
          "Desc": "Number of examples after which weights will be reset to the current average",
          "Aliases": [
            "numreset"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "DoLazyUpdates",
          "Type": "Bool",
          "Desc": "Instead of updating averaged weights on every example, only update when loss is nonzero",
          "Aliases": [
            "lazy"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "RecencyGain",
          "Type": "Float",
          "Desc": "Extra weight given to more recent updates",
          "Aliases": [
            "rg"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "RecencyGainMulti",
          "Type": "Bool",
          "Desc": "Whether Recency Gain is multiplicative (vs. additive)",
          "Aliases": [
            "rgm"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "Averaged",
          "Type": "Bool",
          "Desc": "Do averaging?",
          "Aliases": [
            "avg"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "AveragedTolerance",
          "Type": "Float",
          "Desc": "The inexactness tolerance for averaging",
          "Aliases": [
            "avgtol"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.01
        },
        {
          "Name": "InitialWeights",
          "Type": "String",
          "Desc": "Initial Weights and bias, comma-separated",
          "Aliases": [
            "initweights"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "Shuffle",
          "Type": "Bool",
          "Desc": "Whether to shuffle for each training iteration",
          "Aliases": [
            "shuf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              false,
              true
            ]
          }
        },
        {
          "Name": "StreamingCacheSize",
          "Type": "Int",
          "Desc": "Size of cache when trained in Scope",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1000000
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ITrainerInputWithLabel",
        "ITrainerInput"
      ],
      "OutputKind": [
        "IBinaryClassificationOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Trainers.FastForestBinaryClassifier",
      "Desc": "Uses a random forest learner to perform binary classification.",
      "FriendlyName": "Fast Forest Classification",
      "ShortName": "ff",
      "Inputs": [
        {
          "Name": "NumTrees",
          "Type": "Int",
          "Desc": "Number of weak hypotheses in the ensemble",
          "Aliases": [
            "iter"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": 100,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              20,
              100,
              500
            ]
          }
        },
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "NumLeaves",
          "Type": "Int",
          "Desc": "The max number of leaves in each regression tree",
          "Aliases": [
            "nl"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": 20,
          "SweepRange": {
            "RangeType": "Long",
            "Min": 2,
            "Max": 128,
            "StepSize": 4.0,
            "IsLogScale": true
          }
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "MinDocumentsInLeafs",
          "Type": "Int",
          "Desc": "The minimal number of documents allowed in a leaf of a regression tree, out of the subsampled data",
          "Aliases": [
            "mil"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": 10,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              1,
              10,
              50
            ]
          }
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Column to use for example weight",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": "Weight"
        },
        {
          "Name": "GroupIdColumn",
          "Type": "String",
          "Desc": "Column to use for example groupId",
          "Aliases": [
            "groupId"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "GroupId"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "MaxTreeOutput",
          "Type": "Float",
          "Desc": "Upper bound on absolute value of single tree output",
          "Aliases": [
            "mo"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 100.0
        },
        {
          "Name": "Calibrator",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "CalibratorTrainer"
          },
          "Desc": "The calibrator kind to apply to the predictor. Specify null for no calibration",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": {
            "Name": "PlattCalibrator"
          }
        },
        {
          "Name": "MaxCalibrationExamples",
          "Type": "Int",
          "Desc": "The maximum number of examples to use when training the calibrator",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1000000
        },
        {
          "Name": "QuantileSampleCount",
          "Type": "Int",
          "Desc": "Number of labels to be sampled from each leaf to make the distribtuion",
          "Aliases": [
            "qsc"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 100
        },
        {
          "Name": "ParallelTrainer",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "ParallelTraining"
          },
          "Desc": "Allows to choose Parallel FastTree Learning Algorithm",
          "Aliases": [
            "parag"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": {
            "Name": "Single"
          }
        },
        {
          "Name": "NumThreads",
          "Type": "Int",
          "Desc": "The number of threads to use",
          "Aliases": [
            "t"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "RngSeed",
          "Type": "Int",
          "Desc": "The seed of the random number generator",
          "Aliases": [
            "r1"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 123
        },
        {
          "Name": "FeatureSelectSeed",
          "Type": "Int",
          "Desc": "The seed of the active feature selection",
          "Aliases": [
            "r3"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 123
        },
        {
          "Name": "EntropyCoefficient",
          "Type": "Float",
          "Desc": "The entropy (regularization) coefficient between 0 and 1",
          "Aliases": [
            "e"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "HistogramPoolSize",
          "Type": "Int",
          "Desc": "The number of histograms in the pool (between 2 and numLeaves)",
          "Aliases": [
            "ps"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": -1
        },
        {
          "Name": "DiskTranspose",
          "Type": "Bool",
          "Desc": "Whether to utilize the disk or the data's native transposition facilities (where applicable) when performing the transpose",
          "Aliases": [
            "dt"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "FeatureFlocks",
          "Type": "Bool",
          "Desc": "Whether to collectivize features during dataset preparation to speed up training",
          "Aliases": [
            "flocks"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "CategoricalSplit",
          "Type": "Bool",
          "Desc": "Whether to do split based on multiple categorical feature values.",
          "Aliases": [
            "cat"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "MaxCategoricalGroupsPerNode",
          "Type": "Int",
          "Desc": "Maximum categorical split groups to consider when splitting on a categorical feature. Split groups are a collection of split points. This is used to reduce overfitting when there many categorical features.",
          "Aliases": [
            "mcg"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 64
        },
        {
          "Name": "MaxCategoricalSplitPoints",
          "Type": "Int",
          "Desc": "Maximum categorical split points to consider when splitting on a categorical feature.",
          "Aliases": [
            "maxcat"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 64
        },
        {
          "Name": "MinDocsPercentageForCategoricalSplit",
          "Type": "Float",
          "Desc": "Minimum categorical docs percentage in a bin to consider for a split.",
          "Aliases": [
            "mdop"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.001
        },
        {
          "Name": "MinDocsForCategoricalSplit",
          "Type": "Int",
          "Desc": "Minimum categorical doc count in a bin to consider for a split.",
          "Aliases": [
            "mdo"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 100
        },
        {
          "Name": "Bias",
          "Type": "Float",
          "Desc": "Bias for calculating gradient for each feature bin for a categorical feature.",
          "Aliases": [
            "bias"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "Bundling",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "None",
              "AggregateLowPopulation",
              "Adjacent"
            ]
          },
          "Desc": "Bundle low population bins. Bundle.None(0): no bundling, Bundle.AggregateLowPopulation(1): Bundle low population, Bundle.Adjacent(2): Neighbor low population bundle.",
          "Aliases": [
            "bundle"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": "None"
        },
        {
          "Name": "MaxBins",
          "Type": "Int",
          "Desc": "Maximum number of distinct values (bins) per feature",
          "Aliases": [
            "mb"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 255
        },
        {
          "Name": "SparsifyThreshold",
          "Type": "Float",
          "Desc": "Sparsity level needed to use sparse feature representation",
          "Aliases": [
            "sp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.7
        },
        {
          "Name": "FeatureFirstUsePenalty",
          "Type": "Float",
          "Desc": "The feature first use penalty coefficient",
          "Aliases": [
            "ffup"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "FeatureReusePenalty",
          "Type": "Float",
          "Desc": "The feature re-use penalty (regularization) coefficient",
          "Aliases": [
            "frup"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "GainConfidenceLevel",
          "Type": "Float",
          "Desc": "Tree fitting gain confidence requirement (should be in the range [0,1) ).",
          "Aliases": [
            "gainconf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "SoftmaxTemperature",
          "Type": "Float",
          "Desc": "The temperature of the randomized softmax distribution for choosing the feature",
          "Aliases": [
            "smtemp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "ExecutionTimes",
          "Type": "Bool",
          "Desc": "Print execution time breakdown to stdout",
          "Aliases": [
            "et"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "FeatureFraction",
          "Type": "Float",
          "Desc": "The fraction of features (chosen randomly) to use on each iteration",
          "Aliases": [
            "ff"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.7
        },
        {
          "Name": "BaggingSize",
          "Type": "Int",
          "Desc": "Number of trees in each bag (0 for disabling bagging)",
          "Aliases": [
            "bag"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1
        },
        {
          "Name": "BaggingTrainFraction",
          "Type": "Float",
          "Desc": "Percentage of training examples used in each bag",
          "Aliases": [
            "bagfrac"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.7
        },
        {
          "Name": "SplitFraction",
          "Type": "Float",
          "Desc": "The fraction of features (chosen randomly) to use on each split",
          "Aliases": [
            "sf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.7
        },
        {
          "Name": "Smoothing",
          "Type": "Float",
          "Desc": "Smoothing paramter for tree regularization",
          "Aliases": [
            "s"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "AllowEmptyTrees",
          "Type": "Bool",
          "Desc": "When a root split is impossible, allow training to proceed",
          "Aliases": [
            "allowempty",
            "dummies"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "FeatureCompressionLevel",
          "Type": "Int",
          "Desc": "The level of feature compression to use",
          "Aliases": [
            "fcomp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1
        },
        {
          "Name": "CompressEnsemble",
          "Type": "Bool",
          "Desc": "Compress the tree Ensemble",
          "Aliases": [
            "cmp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "MaxTreesAfterCompression",
          "Type": "Int",
          "Desc": "Maximum Number of trees after compression",
          "Aliases": [
            "cmpmax"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": -1
        },
        {
          "Name": "PrintTestGraph",
          "Type": "Bool",
          "Desc": "Print metrics graph for the first test set",
          "Aliases": [
            "graph"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "PrintTrainValidGraph",
          "Type": "Bool",
          "Desc": "Print Train and Validation metrics in graph",
          "Aliases": [
            "graphtv"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "TestFrequency",
          "Type": "Int",
          "Desc": "Calculate metric values for train/valid/test every k rounds",
          "Aliases": [
            "tf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 2147483647
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ITrainerInputWithGroupId",
        "ITrainerInputWithWeight",
        "ITrainerInputWithLabel",
        "ITrainerInput"
      ],
      "OutputKind": [
        "IBinaryClassificationOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Trainers.FastForestRegressor",
      "Desc": "Trains a random forest to fit target values using least-squares.",
      "FriendlyName": "FastForestRegression",
      "ShortName": "ffr",
      "Inputs": [
        {
          "Name": "NumTrees",
          "Type": "Int",
          "Desc": "Number of weak hypotheses in the ensemble",
          "Aliases": [
            "iter"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": 100,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              20,
              100,
              500
            ]
          }
        },
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "NumLeaves",
          "Type": "Int",
          "Desc": "The max number of leaves in each regression tree",
          "Aliases": [
            "nl"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": 20,
          "SweepRange": {
            "RangeType": "Long",
            "Min": 2,
            "Max": 128,
            "StepSize": 4.0,
            "IsLogScale": true
          }
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "MinDocumentsInLeafs",
          "Type": "Int",
          "Desc": "The minimal number of documents allowed in a leaf of a regression tree, out of the subsampled data",
          "Aliases": [
            "mil"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": 10,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              1,
              10,
              50
            ]
          }
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Column to use for example weight",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": "Weight"
        },
        {
          "Name": "GroupIdColumn",
          "Type": "String",
          "Desc": "Column to use for example groupId",
          "Aliases": [
            "groupId"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "GroupId"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "ShuffleLabels",
          "Type": "Bool",
          "Desc": "Shuffle the labels on every iteration. Useful probably only if using this tree as a tree leaf featurizer for multiclass.",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "QuantileSampleCount",
          "Type": "Int",
          "Desc": "Number of labels to be sampled from each leaf to make the distribtuion",
          "Aliases": [
            "qsc"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 100
        },
        {
          "Name": "ParallelTrainer",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "ParallelTraining"
          },
          "Desc": "Allows to choose Parallel FastTree Learning Algorithm",
          "Aliases": [
            "parag"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": {
            "Name": "Single"
          }
        },
        {
          "Name": "NumThreads",
          "Type": "Int",
          "Desc": "The number of threads to use",
          "Aliases": [
            "t"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "RngSeed",
          "Type": "Int",
          "Desc": "The seed of the random number generator",
          "Aliases": [
            "r1"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 123
        },
        {
          "Name": "FeatureSelectSeed",
          "Type": "Int",
          "Desc": "The seed of the active feature selection",
          "Aliases": [
            "r3"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 123
        },
        {
          "Name": "EntropyCoefficient",
          "Type": "Float",
          "Desc": "The entropy (regularization) coefficient between 0 and 1",
          "Aliases": [
            "e"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "HistogramPoolSize",
          "Type": "Int",
          "Desc": "The number of histograms in the pool (between 2 and numLeaves)",
          "Aliases": [
            "ps"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": -1
        },
        {
          "Name": "DiskTranspose",
          "Type": "Bool",
          "Desc": "Whether to utilize the disk or the data's native transposition facilities (where applicable) when performing the transpose",
          "Aliases": [
            "dt"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "FeatureFlocks",
          "Type": "Bool",
          "Desc": "Whether to collectivize features during dataset preparation to speed up training",
          "Aliases": [
            "flocks"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "CategoricalSplit",
          "Type": "Bool",
          "Desc": "Whether to do split based on multiple categorical feature values.",
          "Aliases": [
            "cat"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "MaxCategoricalGroupsPerNode",
          "Type": "Int",
          "Desc": "Maximum categorical split groups to consider when splitting on a categorical feature. Split groups are a collection of split points. This is used to reduce overfitting when there many categorical features.",
          "Aliases": [
            "mcg"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 64
        },
        {
          "Name": "MaxCategoricalSplitPoints",
          "Type": "Int",
          "Desc": "Maximum categorical split points to consider when splitting on a categorical feature.",
          "Aliases": [
            "maxcat"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 64
        },
        {
          "Name": "MinDocsPercentageForCategoricalSplit",
          "Type": "Float",
          "Desc": "Minimum categorical docs percentage in a bin to consider for a split.",
          "Aliases": [
            "mdop"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.001
        },
        {
          "Name": "MinDocsForCategoricalSplit",
          "Type": "Int",
          "Desc": "Minimum categorical doc count in a bin to consider for a split.",
          "Aliases": [
            "mdo"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 100
        },
        {
          "Name": "Bias",
          "Type": "Float",
          "Desc": "Bias for calculating gradient for each feature bin for a categorical feature.",
          "Aliases": [
            "bias"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "Bundling",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "None",
              "AggregateLowPopulation",
              "Adjacent"
            ]
          },
          "Desc": "Bundle low population bins. Bundle.None(0): no bundling, Bundle.AggregateLowPopulation(1): Bundle low population, Bundle.Adjacent(2): Neighbor low population bundle.",
          "Aliases": [
            "bundle"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": "None"
        },
        {
          "Name": "MaxBins",
          "Type": "Int",
          "Desc": "Maximum number of distinct values (bins) per feature",
          "Aliases": [
            "mb"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 255
        },
        {
          "Name": "SparsifyThreshold",
          "Type": "Float",
          "Desc": "Sparsity level needed to use sparse feature representation",
          "Aliases": [
            "sp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.7
        },
        {
          "Name": "FeatureFirstUsePenalty",
          "Type": "Float",
          "Desc": "The feature first use penalty coefficient",
          "Aliases": [
            "ffup"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "FeatureReusePenalty",
          "Type": "Float",
          "Desc": "The feature re-use penalty (regularization) coefficient",
          "Aliases": [
            "frup"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "GainConfidenceLevel",
          "Type": "Float",
          "Desc": "Tree fitting gain confidence requirement (should be in the range [0,1) ).",
          "Aliases": [
            "gainconf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "SoftmaxTemperature",
          "Type": "Float",
          "Desc": "The temperature of the randomized softmax distribution for choosing the feature",
          "Aliases": [
            "smtemp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "ExecutionTimes",
          "Type": "Bool",
          "Desc": "Print execution time breakdown to stdout",
          "Aliases": [
            "et"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "FeatureFraction",
          "Type": "Float",
          "Desc": "The fraction of features (chosen randomly) to use on each iteration",
          "Aliases": [
            "ff"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.7
        },
        {
          "Name": "BaggingSize",
          "Type": "Int",
          "Desc": "Number of trees in each bag (0 for disabling bagging)",
          "Aliases": [
            "bag"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1
        },
        {
          "Name": "BaggingTrainFraction",
          "Type": "Float",
          "Desc": "Percentage of training examples used in each bag",
          "Aliases": [
            "bagfrac"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.7
        },
        {
          "Name": "SplitFraction",
          "Type": "Float",
          "Desc": "The fraction of features (chosen randomly) to use on each split",
          "Aliases": [
            "sf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.7
        },
        {
          "Name": "Smoothing",
          "Type": "Float",
          "Desc": "Smoothing paramter for tree regularization",
          "Aliases": [
            "s"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "AllowEmptyTrees",
          "Type": "Bool",
          "Desc": "When a root split is impossible, allow training to proceed",
          "Aliases": [
            "allowempty",
            "dummies"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "FeatureCompressionLevel",
          "Type": "Int",
          "Desc": "The level of feature compression to use",
          "Aliases": [
            "fcomp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1
        },
        {
          "Name": "CompressEnsemble",
          "Type": "Bool",
          "Desc": "Compress the tree Ensemble",
          "Aliases": [
            "cmp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "MaxTreesAfterCompression",
          "Type": "Int",
          "Desc": "Maximum Number of trees after compression",
          "Aliases": [
            "cmpmax"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": -1
        },
        {
          "Name": "PrintTestGraph",
          "Type": "Bool",
          "Desc": "Print metrics graph for the first test set",
          "Aliases": [
            "graph"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "PrintTrainValidGraph",
          "Type": "Bool",
          "Desc": "Print Train and Validation metrics in graph",
          "Aliases": [
            "graphtv"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "TestFrequency",
          "Type": "Int",
          "Desc": "Calculate metric values for train/valid/test every k rounds",
          "Aliases": [
            "tf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 2147483647
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ITrainerInputWithGroupId",
        "ITrainerInputWithWeight",
        "ITrainerInputWithLabel",
        "ITrainerInput"
      ],
      "OutputKind": [
        "IRegressionOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Trainers.FastTreeBinaryClassifier",
      "Desc": "Uses a logit-boost boosted tree learner to perform binary classification.",
      "FriendlyName": "FastTree (Boosted Trees) Classification",
      "ShortName": "ftc",
      "Inputs": [
        {
          "Name": "NumTrees",
          "Type": "Int",
          "Desc": "Number of weak hypotheses in the ensemble",
          "Aliases": [
            "iter"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": 100,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              20,
              100,
              500
            ]
          }
        },
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "NumLeaves",
          "Type": "Int",
          "Desc": "The max number of leaves in each regression tree",
          "Aliases": [
            "nl"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": 20,
          "SweepRange": {
            "RangeType": "Long",
            "Min": 2,
            "Max": 128,
            "StepSize": 4.0,
            "IsLogScale": true
          }
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "MinDocumentsInLeafs",
          "Type": "Int",
          "Desc": "The minimal number of documents allowed in a leaf of a regression tree, out of the subsampled data",
          "Aliases": [
            "mil"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": 10,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              1,
              10,
              50
            ]
          }
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "LearningRates",
          "Type": "Float",
          "Desc": "The learning rate",
          "Aliases": [
            "lr"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": 0.2,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.025,
            "Max": 0.4,
            "IsLogScale": true
          }
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Column to use for example weight",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": "Weight"
        },
        {
          "Name": "GroupIdColumn",
          "Type": "String",
          "Desc": "Column to use for example groupId",
          "Aliases": [
            "groupId"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "GroupId"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "UnbalancedSets",
          "Type": "Bool",
          "Desc": "Should we use derivatives optimized for unbalanced sets",
          "Aliases": [
            "us"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "BestStepRankingRegressionTrees",
          "Type": "Bool",
          "Desc": "Use best regression step trees?",
          "Aliases": [
            "bsr"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "UseLineSearch",
          "Type": "Bool",
          "Desc": "Should we use line search for a step size",
          "Aliases": [
            "ls"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "NumPostBracketSteps",
          "Type": "Int",
          "Desc": "Number of post-bracket line search steps",
          "Aliases": [
            "lssteps"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0
        },
        {
          "Name": "MinStepSize",
          "Type": "Float",
          "Desc": "Minimum line search step size",
          "Aliases": [
            "minstep"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "OptimizationAlgorithm",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "GradientDescent",
              "AcceleratedGradientDescent",
              "ConjugateGradientDescent"
            ]
          },
          "Desc": "Optimization algorithm to be used (GradientDescent, AcceleratedGradientDescent)",
          "Aliases": [
            "oa"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": "GradientDescent"
        },
        {
          "Name": "EarlyStoppingRule",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "EarlyStoppingCriterion"
          },
          "Desc": "Early stopping rule. (Validation set (/valid) is required.)",
          "Aliases": [
            "esr"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "EarlyStoppingMetrics",
          "Type": "Int",
          "Desc": "Early stopping metrics. (For regression, 1: L1, 2:L2; for ranking, 1:NDCG@1, 3:NDCG@3)",
          "Aliases": [
            "esmt"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0
        },
        {
          "Name": "EnablePruning",
          "Type": "Bool",
          "Desc": "Enable post-training pruning to avoid overfitting. (a validation set is required)",
          "Aliases": [
            "pruning"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "UseTolerantPruning",
          "Type": "Bool",
          "Desc": "Use window and tolerance for pruning",
          "Aliases": [
            "prtol"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "PruningThreshold",
          "Type": "Float",
          "Desc": "The tolerance threshold for pruning",
          "Aliases": [
            "prth"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.004
        },
        {
          "Name": "PruningWindowSize",
          "Type": "Int",
          "Desc": "The moving window size for pruning",
          "Aliases": [
            "prws"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 5
        },
        {
          "Name": "Shrinkage",
          "Type": "Float",
          "Desc": "Shrinkage",
          "Aliases": [
            "shrk"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1.0,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.025,
            "Max": 4.0,
            "IsLogScale": true
          }
        },
        {
          "Name": "DropoutRate",
          "Type": "Float",
          "Desc": "Dropout rate for tree regularization",
          "Aliases": [
            "tdrop"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              0.0,
              1E-09,
              0.05,
              0.1,
              0.2
            ]
          }
        },
        {
          "Name": "GetDerivativesSampleRate",
          "Type": "Int",
          "Desc": "Sample each query 1 in k times in the GetDerivatives function",
          "Aliases": [
            "sr"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1
        },
        {
          "Name": "WriteLastEnsemble",
          "Type": "Bool",
          "Desc": "Write the last ensemble instead of the one determined by early stopping",
          "Aliases": [
            "hl"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "MaxTreeOutput",
          "Type": "Float",
          "Desc": "Upper bound on absolute value of single tree output",
          "Aliases": [
            "mo"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 100.0
        },
        {
          "Name": "RandomStart",
          "Type": "Bool",
          "Desc": "Training starts from random ordering (determined by /r1)",
          "Aliases": [
            "rs"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "FilterZeroLambdas",
          "Type": "Bool",
          "Desc": "Filter zero lambdas during training",
          "Aliases": [
            "fzl"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "BaselineScoresFormula",
          "Type": "String",
          "Desc": "Freeform defining the scores that should be used as the baseline ranker",
          "Aliases": [
            "basescores"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "BaselineAlphaRisk",
          "Type": "String",
          "Desc": "Baseline alpha for tradeoffs of risk (0 is normal training)",
          "Aliases": [
            "basealpha"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "PositionDiscountFreeform",
          "Type": "String",
          "Desc": "The discount freeform which specifies the per position discounts of documents in a query (uses a single variable P for position where P=0 is first position)",
          "Aliases": [
            "pdff"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "ParallelTrainer",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "ParallelTraining"
          },
          "Desc": "Allows to choose Parallel FastTree Learning Algorithm",
          "Aliases": [
            "parag"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": {
            "Name": "Single"
          }
        },
        {
          "Name": "NumThreads",
          "Type": "Int",
          "Desc": "The number of threads to use",
          "Aliases": [
            "t"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "RngSeed",
          "Type": "Int",
          "Desc": "The seed of the random number generator",
          "Aliases": [
            "r1"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 123
        },
        {
          "Name": "FeatureSelectSeed",
          "Type": "Int",
          "Desc": "The seed of the active feature selection",
          "Aliases": [
            "r3"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 123
        },
        {
          "Name": "EntropyCoefficient",
          "Type": "Float",
          "Desc": "The entropy (regularization) coefficient between 0 and 1",
          "Aliases": [
            "e"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "HistogramPoolSize",
          "Type": "Int",
          "Desc": "The number of histograms in the pool (between 2 and numLeaves)",
          "Aliases": [
            "ps"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": -1
        },
        {
          "Name": "DiskTranspose",
          "Type": "Bool",
          "Desc": "Whether to utilize the disk or the data's native transposition facilities (where applicable) when performing the transpose",
          "Aliases": [
            "dt"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "FeatureFlocks",
          "Type": "Bool",
          "Desc": "Whether to collectivize features during dataset preparation to speed up training",
          "Aliases": [
            "flocks"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "CategoricalSplit",
          "Type": "Bool",
          "Desc": "Whether to do split based on multiple categorical feature values.",
          "Aliases": [
            "cat"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "MaxCategoricalGroupsPerNode",
          "Type": "Int",
          "Desc": "Maximum categorical split groups to consider when splitting on a categorical feature. Split groups are a collection of split points. This is used to reduce overfitting when there many categorical features.",
          "Aliases": [
            "mcg"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 64
        },
        {
          "Name": "MaxCategoricalSplitPoints",
          "Type": "Int",
          "Desc": "Maximum categorical split points to consider when splitting on a categorical feature.",
          "Aliases": [
            "maxcat"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 64
        },
        {
          "Name": "MinDocsPercentageForCategoricalSplit",
          "Type": "Float",
          "Desc": "Minimum categorical docs percentage in a bin to consider for a split.",
          "Aliases": [
            "mdop"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.001
        },
        {
          "Name": "MinDocsForCategoricalSplit",
          "Type": "Int",
          "Desc": "Minimum categorical doc count in a bin to consider for a split.",
          "Aliases": [
            "mdo"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 100
        },
        {
          "Name": "Bias",
          "Type": "Float",
          "Desc": "Bias for calculating gradient for each feature bin for a categorical feature.",
          "Aliases": [
            "bias"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "Bundling",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "None",
              "AggregateLowPopulation",
              "Adjacent"
            ]
          },
          "Desc": "Bundle low population bins. Bundle.None(0): no bundling, Bundle.AggregateLowPopulation(1): Bundle low population, Bundle.Adjacent(2): Neighbor low population bundle.",
          "Aliases": [
            "bundle"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": "None"
        },
        {
          "Name": "MaxBins",
          "Type": "Int",
          "Desc": "Maximum number of distinct values (bins) per feature",
          "Aliases": [
            "mb"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 255
        },
        {
          "Name": "SparsifyThreshold",
          "Type": "Float",
          "Desc": "Sparsity level needed to use sparse feature representation",
          "Aliases": [
            "sp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.7
        },
        {
          "Name": "FeatureFirstUsePenalty",
          "Type": "Float",
          "Desc": "The feature first use penalty coefficient",
          "Aliases": [
            "ffup"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "FeatureReusePenalty",
          "Type": "Float",
          "Desc": "The feature re-use penalty (regularization) coefficient",
          "Aliases": [
            "frup"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "GainConfidenceLevel",
          "Type": "Float",
          "Desc": "Tree fitting gain confidence requirement (should be in the range [0,1) ).",
          "Aliases": [
            "gainconf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "SoftmaxTemperature",
          "Type": "Float",
          "Desc": "The temperature of the randomized softmax distribution for choosing the feature",
          "Aliases": [
            "smtemp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "ExecutionTimes",
          "Type": "Bool",
          "Desc": "Print execution time breakdown to stdout",
          "Aliases": [
            "et"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "FeatureFraction",
          "Type": "Float",
          "Desc": "The fraction of features (chosen randomly) to use on each iteration",
          "Aliases": [
            "ff"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1.0
        },
        {
          "Name": "BaggingSize",
          "Type": "Int",
          "Desc": "Number of trees in each bag (0 for disabling bagging)",
          "Aliases": [
            "bag"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0
        },
        {
          "Name": "BaggingTrainFraction",
          "Type": "Float",
          "Desc": "Percentage of training examples used in each bag",
          "Aliases": [
            "bagfrac"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.7
        },
        {
          "Name": "SplitFraction",
          "Type": "Float",
          "Desc": "The fraction of features (chosen randomly) to use on each split",
          "Aliases": [
            "sf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1.0
        },
        {
          "Name": "Smoothing",
          "Type": "Float",
          "Desc": "Smoothing paramter for tree regularization",
          "Aliases": [
            "s"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "AllowEmptyTrees",
          "Type": "Bool",
          "Desc": "When a root split is impossible, allow training to proceed",
          "Aliases": [
            "allowempty",
            "dummies"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "FeatureCompressionLevel",
          "Type": "Int",
          "Desc": "The level of feature compression to use",
          "Aliases": [
            "fcomp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1
        },
        {
          "Name": "CompressEnsemble",
          "Type": "Bool",
          "Desc": "Compress the tree Ensemble",
          "Aliases": [
            "cmp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "MaxTreesAfterCompression",
          "Type": "Int",
          "Desc": "Maximum Number of trees after compression",
          "Aliases": [
            "cmpmax"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": -1
        },
        {
          "Name": "PrintTestGraph",
          "Type": "Bool",
          "Desc": "Print metrics graph for the first test set",
          "Aliases": [
            "graph"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "PrintTrainValidGraph",
          "Type": "Bool",
          "Desc": "Print Train and Validation metrics in graph",
          "Aliases": [
            "graphtv"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "TestFrequency",
          "Type": "Int",
          "Desc": "Calculate metric values for train/valid/test every k rounds",
          "Aliases": [
            "tf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 2147483647
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ITrainerInputWithGroupId",
        "ITrainerInputWithWeight",
        "ITrainerInputWithLabel",
        "ITrainerInput"
      ],
      "OutputKind": [
        "IBinaryClassificationOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Trainers.FastTreeRanker",
      "Desc": "Trains gradient boosted decision trees to the LambdaRank quasi-gradient.",
      "FriendlyName": "FastTree (Boosted Trees) Ranking",
      "ShortName": "ftrank",
      "Inputs": [
        {
          "Name": "NumTrees",
          "Type": "Int",
          "Desc": "Number of weak hypotheses in the ensemble",
          "Aliases": [
            "iter"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": 100,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              20,
              100,
              500
            ]
          }
        },
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "NumLeaves",
          "Type": "Int",
          "Desc": "The max number of leaves in each regression tree",
          "Aliases": [
            "nl"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": 20,
          "SweepRange": {
            "RangeType": "Long",
            "Min": 2,
            "Max": 128,
            "StepSize": 4.0,
            "IsLogScale": true
          }
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "MinDocumentsInLeafs",
          "Type": "Int",
          "Desc": "The minimal number of documents allowed in a leaf of a regression tree, out of the subsampled data",
          "Aliases": [
            "mil"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": 10,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              1,
              10,
              50
            ]
          }
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "LearningRates",
          "Type": "Float",
          "Desc": "The learning rate",
          "Aliases": [
            "lr"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": 0.2,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.025,
            "Max": 0.4,
            "IsLogScale": true
          }
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Column to use for example weight",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": "Weight"
        },
        {
          "Name": "GroupIdColumn",
          "Type": "String",
          "Desc": "Column to use for example groupId",
          "Aliases": [
            "groupId"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "GroupId"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "CustomGains",
          "Type": "String",
          "Desc": "Comma seperated list of gains associated to each relevance label.",
          "Aliases": [
            "gains"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": "0,3,7,15,31"
        },
        {
          "Name": "TrainDcg",
          "Type": "Bool",
          "Desc": "Train DCG instead of NDCG",
          "Aliases": [
            "dcg"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "SortingAlgorithm",
          "Type": "String",
          "Desc": "The sorting algorithm to use for DCG and LambdaMart calculations [DescendingStablePessimistic/DescendingStable/DescendingReverse/DescendingDotNet]",
          "Aliases": [
            "sort"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": "DescendingStablePessimistic"
        },
        {
          "Name": "LambdaMartMaxTruncation",
          "Type": "Int",
          "Desc": "max-NDCG truncation to use in the Lambda Mart algorithm",
          "Aliases": [
            "n"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 100
        },
        {
          "Name": "ShiftedNdcg",
          "Type": "Bool",
          "Desc": "Use shifted NDCG",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "CostFunctionParam",
          "Type": "Char",
          "Desc": "Cost function parameter (w/c)",
          "Aliases": [
            "cf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": "w"
        },
        {
          "Name": "DistanceWeight2",
          "Type": "Bool",
          "Desc": "Distance weight 2 adjustment to cost",
          "Aliases": [
            "dw"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "NormalizeQueryLambdas",
          "Type": "Bool",
          "Desc": "Normalize query lambdas",
          "Aliases": [
            "nql"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "BestStepRankingRegressionTrees",
          "Type": "Bool",
          "Desc": "Use best regression step trees?",
          "Aliases": [
            "bsr"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "UseLineSearch",
          "Type": "Bool",
          "Desc": "Should we use line search for a step size",
          "Aliases": [
            "ls"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "NumPostBracketSteps",
          "Type": "Int",
          "Desc": "Number of post-bracket line search steps",
          "Aliases": [
            "lssteps"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0
        },
        {
          "Name": "MinStepSize",
          "Type": "Float",
          "Desc": "Minimum line search step size",
          "Aliases": [
            "minstep"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "OptimizationAlgorithm",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "GradientDescent",
              "AcceleratedGradientDescent",
              "ConjugateGradientDescent"
            ]
          },
          "Desc": "Optimization algorithm to be used (GradientDescent, AcceleratedGradientDescent)",
          "Aliases": [
            "oa"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": "GradientDescent"
        },
        {
          "Name": "EarlyStoppingRule",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "EarlyStoppingCriterion"
          },
          "Desc": "Early stopping rule. (Validation set (/valid) is required.)",
          "Aliases": [
            "esr"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "EarlyStoppingMetrics",
          "Type": "Int",
          "Desc": "Early stopping metrics. (For regression, 1: L1, 2:L2; for ranking, 1:NDCG@1, 3:NDCG@3)",
          "Aliases": [
            "esmt"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1
        },
        {
          "Name": "EnablePruning",
          "Type": "Bool",
          "Desc": "Enable post-training pruning to avoid overfitting. (a validation set is required)",
          "Aliases": [
            "pruning"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "UseTolerantPruning",
          "Type": "Bool",
          "Desc": "Use window and tolerance for pruning",
          "Aliases": [
            "prtol"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "PruningThreshold",
          "Type": "Float",
          "Desc": "The tolerance threshold for pruning",
          "Aliases": [
            "prth"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.004
        },
        {
          "Name": "PruningWindowSize",
          "Type": "Int",
          "Desc": "The moving window size for pruning",
          "Aliases": [
            "prws"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 5
        },
        {
          "Name": "Shrinkage",
          "Type": "Float",
          "Desc": "Shrinkage",
          "Aliases": [
            "shrk"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1.0,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.025,
            "Max": 4.0,
            "IsLogScale": true
          }
        },
        {
          "Name": "DropoutRate",
          "Type": "Float",
          "Desc": "Dropout rate for tree regularization",
          "Aliases": [
            "tdrop"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              0.0,
              1E-09,
              0.05,
              0.1,
              0.2
            ]
          }
        },
        {
          "Name": "GetDerivativesSampleRate",
          "Type": "Int",
          "Desc": "Sample each query 1 in k times in the GetDerivatives function",
          "Aliases": [
            "sr"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1
        },
        {
          "Name": "WriteLastEnsemble",
          "Type": "Bool",
          "Desc": "Write the last ensemble instead of the one determined by early stopping",
          "Aliases": [
            "hl"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "MaxTreeOutput",
          "Type": "Float",
          "Desc": "Upper bound on absolute value of single tree output",
          "Aliases": [
            "mo"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 100.0
        },
        {
          "Name": "RandomStart",
          "Type": "Bool",
          "Desc": "Training starts from random ordering (determined by /r1)",
          "Aliases": [
            "rs"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "FilterZeroLambdas",
          "Type": "Bool",
          "Desc": "Filter zero lambdas during training",
          "Aliases": [
            "fzl"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "BaselineScoresFormula",
          "Type": "String",
          "Desc": "Freeform defining the scores that should be used as the baseline ranker",
          "Aliases": [
            "basescores"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "BaselineAlphaRisk",
          "Type": "String",
          "Desc": "Baseline alpha for tradeoffs of risk (0 is normal training)",
          "Aliases": [
            "basealpha"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "PositionDiscountFreeform",
          "Type": "String",
          "Desc": "The discount freeform which specifies the per position discounts of documents in a query (uses a single variable P for position where P=0 is first position)",
          "Aliases": [
            "pdff"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "ParallelTrainer",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "ParallelTraining"
          },
          "Desc": "Allows to choose Parallel FastTree Learning Algorithm",
          "Aliases": [
            "parag"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": {
            "Name": "Single"
          }
        },
        {
          "Name": "NumThreads",
          "Type": "Int",
          "Desc": "The number of threads to use",
          "Aliases": [
            "t"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "RngSeed",
          "Type": "Int",
          "Desc": "The seed of the random number generator",
          "Aliases": [
            "r1"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 123
        },
        {
          "Name": "FeatureSelectSeed",
          "Type": "Int",
          "Desc": "The seed of the active feature selection",
          "Aliases": [
            "r3"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 123
        },
        {
          "Name": "EntropyCoefficient",
          "Type": "Float",
          "Desc": "The entropy (regularization) coefficient between 0 and 1",
          "Aliases": [
            "e"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "HistogramPoolSize",
          "Type": "Int",
          "Desc": "The number of histograms in the pool (between 2 and numLeaves)",
          "Aliases": [
            "ps"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": -1
        },
        {
          "Name": "DiskTranspose",
          "Type": "Bool",
          "Desc": "Whether to utilize the disk or the data's native transposition facilities (where applicable) when performing the transpose",
          "Aliases": [
            "dt"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "FeatureFlocks",
          "Type": "Bool",
          "Desc": "Whether to collectivize features during dataset preparation to speed up training",
          "Aliases": [
            "flocks"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "CategoricalSplit",
          "Type": "Bool",
          "Desc": "Whether to do split based on multiple categorical feature values.",
          "Aliases": [
            "cat"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "MaxCategoricalGroupsPerNode",
          "Type": "Int",
          "Desc": "Maximum categorical split groups to consider when splitting on a categorical feature. Split groups are a collection of split points. This is used to reduce overfitting when there many categorical features.",
          "Aliases": [
            "mcg"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 64
        },
        {
          "Name": "MaxCategoricalSplitPoints",
          "Type": "Int",
          "Desc": "Maximum categorical split points to consider when splitting on a categorical feature.",
          "Aliases": [
            "maxcat"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 64
        },
        {
          "Name": "MinDocsPercentageForCategoricalSplit",
          "Type": "Float",
          "Desc": "Minimum categorical docs percentage in a bin to consider for a split.",
          "Aliases": [
            "mdop"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.001
        },
        {
          "Name": "MinDocsForCategoricalSplit",
          "Type": "Int",
          "Desc": "Minimum categorical doc count in a bin to consider for a split.",
          "Aliases": [
            "mdo"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 100
        },
        {
          "Name": "Bias",
          "Type": "Float",
          "Desc": "Bias for calculating gradient for each feature bin for a categorical feature.",
          "Aliases": [
            "bias"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "Bundling",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "None",
              "AggregateLowPopulation",
              "Adjacent"
            ]
          },
          "Desc": "Bundle low population bins. Bundle.None(0): no bundling, Bundle.AggregateLowPopulation(1): Bundle low population, Bundle.Adjacent(2): Neighbor low population bundle.",
          "Aliases": [
            "bundle"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": "None"
        },
        {
          "Name": "MaxBins",
          "Type": "Int",
          "Desc": "Maximum number of distinct values (bins) per feature",
          "Aliases": [
            "mb"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 255
        },
        {
          "Name": "SparsifyThreshold",
          "Type": "Float",
          "Desc": "Sparsity level needed to use sparse feature representation",
          "Aliases": [
            "sp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.7
        },
        {
          "Name": "FeatureFirstUsePenalty",
          "Type": "Float",
          "Desc": "The feature first use penalty coefficient",
          "Aliases": [
            "ffup"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "FeatureReusePenalty",
          "Type": "Float",
          "Desc": "The feature re-use penalty (regularization) coefficient",
          "Aliases": [
            "frup"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "GainConfidenceLevel",
          "Type": "Float",
          "Desc": "Tree fitting gain confidence requirement (should be in the range [0,1) ).",
          "Aliases": [
            "gainconf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "SoftmaxTemperature",
          "Type": "Float",
          "Desc": "The temperature of the randomized softmax distribution for choosing the feature",
          "Aliases": [
            "smtemp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "ExecutionTimes",
          "Type": "Bool",
          "Desc": "Print execution time breakdown to stdout",
          "Aliases": [
            "et"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "FeatureFraction",
          "Type": "Float",
          "Desc": "The fraction of features (chosen randomly) to use on each iteration",
          "Aliases": [
            "ff"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1.0
        },
        {
          "Name": "BaggingSize",
          "Type": "Int",
          "Desc": "Number of trees in each bag (0 for disabling bagging)",
          "Aliases": [
            "bag"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0
        },
        {
          "Name": "BaggingTrainFraction",
          "Type": "Float",
          "Desc": "Percentage of training examples used in each bag",
          "Aliases": [
            "bagfrac"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.7
        },
        {
          "Name": "SplitFraction",
          "Type": "Float",
          "Desc": "The fraction of features (chosen randomly) to use on each split",
          "Aliases": [
            "sf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1.0
        },
        {
          "Name": "Smoothing",
          "Type": "Float",
          "Desc": "Smoothing paramter for tree regularization",
          "Aliases": [
            "s"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "AllowEmptyTrees",
          "Type": "Bool",
          "Desc": "When a root split is impossible, allow training to proceed",
          "Aliases": [
            "allowempty",
            "dummies"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "FeatureCompressionLevel",
          "Type": "Int",
          "Desc": "The level of feature compression to use",
          "Aliases": [
            "fcomp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1
        },
        {
          "Name": "CompressEnsemble",
          "Type": "Bool",
          "Desc": "Compress the tree Ensemble",
          "Aliases": [
            "cmp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "MaxTreesAfterCompression",
          "Type": "Int",
          "Desc": "Maximum Number of trees after compression",
          "Aliases": [
            "cmpmax"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": -1
        },
        {
          "Name": "PrintTestGraph",
          "Type": "Bool",
          "Desc": "Print metrics graph for the first test set",
          "Aliases": [
            "graph"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "PrintTrainValidGraph",
          "Type": "Bool",
          "Desc": "Print Train and Validation metrics in graph",
          "Aliases": [
            "graphtv"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "TestFrequency",
          "Type": "Int",
          "Desc": "Calculate metric values for train/valid/test every k rounds",
          "Aliases": [
            "tf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 2147483647
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ITrainerInputWithGroupId",
        "ITrainerInputWithWeight",
        "ITrainerInputWithLabel",
        "ITrainerInput"
      ],
      "OutputKind": [
        "IRankingOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Trainers.FastTreeRegressor",
      "Desc": "Trains gradient boosted decision trees to fit target values using least-squares.",
      "FriendlyName": "FastTree (Boosted Trees) Regression",
      "ShortName": "ftr",
      "Inputs": [
        {
          "Name": "NumTrees",
          "Type": "Int",
          "Desc": "Number of weak hypotheses in the ensemble",
          "Aliases": [
            "iter"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": 100,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              20,
              100,
              500
            ]
          }
        },
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "NumLeaves",
          "Type": "Int",
          "Desc": "The max number of leaves in each regression tree",
          "Aliases": [
            "nl"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": 20,
          "SweepRange": {
            "RangeType": "Long",
            "Min": 2,
            "Max": 128,
            "StepSize": 4.0,
            "IsLogScale": true
          }
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "MinDocumentsInLeafs",
          "Type": "Int",
          "Desc": "The minimal number of documents allowed in a leaf of a regression tree, out of the subsampled data",
          "Aliases": [
            "mil"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": 10,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              1,
              10,
              50
            ]
          }
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "LearningRates",
          "Type": "Float",
          "Desc": "The learning rate",
          "Aliases": [
            "lr"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": 0.2,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.025,
            "Max": 0.4,
            "IsLogScale": true
          }
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Column to use for example weight",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": "Weight"
        },
        {
          "Name": "GroupIdColumn",
          "Type": "String",
          "Desc": "Column to use for example groupId",
          "Aliases": [
            "groupId"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "GroupId"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "BestStepRankingRegressionTrees",
          "Type": "Bool",
          "Desc": "Use best regression step trees?",
          "Aliases": [
            "bsr"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "UseLineSearch",
          "Type": "Bool",
          "Desc": "Should we use line search for a step size",
          "Aliases": [
            "ls"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "NumPostBracketSteps",
          "Type": "Int",
          "Desc": "Number of post-bracket line search steps",
          "Aliases": [
            "lssteps"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0
        },
        {
          "Name": "MinStepSize",
          "Type": "Float",
          "Desc": "Minimum line search step size",
          "Aliases": [
            "minstep"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "OptimizationAlgorithm",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "GradientDescent",
              "AcceleratedGradientDescent",
              "ConjugateGradientDescent"
            ]
          },
          "Desc": "Optimization algorithm to be used (GradientDescent, AcceleratedGradientDescent)",
          "Aliases": [
            "oa"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": "GradientDescent"
        },
        {
          "Name": "EarlyStoppingRule",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "EarlyStoppingCriterion"
          },
          "Desc": "Early stopping rule. (Validation set (/valid) is required.)",
          "Aliases": [
            "esr"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "EarlyStoppingMetrics",
          "Type": "Int",
          "Desc": "Early stopping metrics. (For regression, 1: L1, 2:L2; for ranking, 1:NDCG@1, 3:NDCG@3)",
          "Aliases": [
            "esmt"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1
        },
        {
          "Name": "EnablePruning",
          "Type": "Bool",
          "Desc": "Enable post-training pruning to avoid overfitting. (a validation set is required)",
          "Aliases": [
            "pruning"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "UseTolerantPruning",
          "Type": "Bool",
          "Desc": "Use window and tolerance for pruning",
          "Aliases": [
            "prtol"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "PruningThreshold",
          "Type": "Float",
          "Desc": "The tolerance threshold for pruning",
          "Aliases": [
            "prth"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.004
        },
        {
          "Name": "PruningWindowSize",
          "Type": "Int",
          "Desc": "The moving window size for pruning",
          "Aliases": [
            "prws"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 5
        },
        {
          "Name": "Shrinkage",
          "Type": "Float",
          "Desc": "Shrinkage",
          "Aliases": [
            "shrk"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1.0,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.025,
            "Max": 4.0,
            "IsLogScale": true
          }
        },
        {
          "Name": "DropoutRate",
          "Type": "Float",
          "Desc": "Dropout rate for tree regularization",
          "Aliases": [
            "tdrop"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              0.0,
              1E-09,
              0.05,
              0.1,
              0.2
            ]
          }
        },
        {
          "Name": "GetDerivativesSampleRate",
          "Type": "Int",
          "Desc": "Sample each query 1 in k times in the GetDerivatives function",
          "Aliases": [
            "sr"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1
        },
        {
          "Name": "WriteLastEnsemble",
          "Type": "Bool",
          "Desc": "Write the last ensemble instead of the one determined by early stopping",
          "Aliases": [
            "hl"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "MaxTreeOutput",
          "Type": "Float",
          "Desc": "Upper bound on absolute value of single tree output",
          "Aliases": [
            "mo"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 100.0
        },
        {
          "Name": "RandomStart",
          "Type": "Bool",
          "Desc": "Training starts from random ordering (determined by /r1)",
          "Aliases": [
            "rs"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "FilterZeroLambdas",
          "Type": "Bool",
          "Desc": "Filter zero lambdas during training",
          "Aliases": [
            "fzl"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "BaselineScoresFormula",
          "Type": "String",
          "Desc": "Freeform defining the scores that should be used as the baseline ranker",
          "Aliases": [
            "basescores"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "BaselineAlphaRisk",
          "Type": "String",
          "Desc": "Baseline alpha for tradeoffs of risk (0 is normal training)",
          "Aliases": [
            "basealpha"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "PositionDiscountFreeform",
          "Type": "String",
          "Desc": "The discount freeform which specifies the per position discounts of documents in a query (uses a single variable P for position where P=0 is first position)",
          "Aliases": [
            "pdff"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "ParallelTrainer",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "ParallelTraining"
          },
          "Desc": "Allows to choose Parallel FastTree Learning Algorithm",
          "Aliases": [
            "parag"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": {
            "Name": "Single"
          }
        },
        {
          "Name": "NumThreads",
          "Type": "Int",
          "Desc": "The number of threads to use",
          "Aliases": [
            "t"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "RngSeed",
          "Type": "Int",
          "Desc": "The seed of the random number generator",
          "Aliases": [
            "r1"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 123
        },
        {
          "Name": "FeatureSelectSeed",
          "Type": "Int",
          "Desc": "The seed of the active feature selection",
          "Aliases": [
            "r3"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 123
        },
        {
          "Name": "EntropyCoefficient",
          "Type": "Float",
          "Desc": "The entropy (regularization) coefficient between 0 and 1",
          "Aliases": [
            "e"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "HistogramPoolSize",
          "Type": "Int",
          "Desc": "The number of histograms in the pool (between 2 and numLeaves)",
          "Aliases": [
            "ps"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": -1
        },
        {
          "Name": "DiskTranspose",
          "Type": "Bool",
          "Desc": "Whether to utilize the disk or the data's native transposition facilities (where applicable) when performing the transpose",
          "Aliases": [
            "dt"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "FeatureFlocks",
          "Type": "Bool",
          "Desc": "Whether to collectivize features during dataset preparation to speed up training",
          "Aliases": [
            "flocks"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "CategoricalSplit",
          "Type": "Bool",
          "Desc": "Whether to do split based on multiple categorical feature values.",
          "Aliases": [
            "cat"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "MaxCategoricalGroupsPerNode",
          "Type": "Int",
          "Desc": "Maximum categorical split groups to consider when splitting on a categorical feature. Split groups are a collection of split points. This is used to reduce overfitting when there many categorical features.",
          "Aliases": [
            "mcg"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 64
        },
        {
          "Name": "MaxCategoricalSplitPoints",
          "Type": "Int",
          "Desc": "Maximum categorical split points to consider when splitting on a categorical feature.",
          "Aliases": [
            "maxcat"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 64
        },
        {
          "Name": "MinDocsPercentageForCategoricalSplit",
          "Type": "Float",
          "Desc": "Minimum categorical docs percentage in a bin to consider for a split.",
          "Aliases": [
            "mdop"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.001
        },
        {
          "Name": "MinDocsForCategoricalSplit",
          "Type": "Int",
          "Desc": "Minimum categorical doc count in a bin to consider for a split.",
          "Aliases": [
            "mdo"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 100
        },
        {
          "Name": "Bias",
          "Type": "Float",
          "Desc": "Bias for calculating gradient for each feature bin for a categorical feature.",
          "Aliases": [
            "bias"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "Bundling",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "None",
              "AggregateLowPopulation",
              "Adjacent"
            ]
          },
          "Desc": "Bundle low population bins. Bundle.None(0): no bundling, Bundle.AggregateLowPopulation(1): Bundle low population, Bundle.Adjacent(2): Neighbor low population bundle.",
          "Aliases": [
            "bundle"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": "None"
        },
        {
          "Name": "MaxBins",
          "Type": "Int",
          "Desc": "Maximum number of distinct values (bins) per feature",
          "Aliases": [
            "mb"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 255
        },
        {
          "Name": "SparsifyThreshold",
          "Type": "Float",
          "Desc": "Sparsity level needed to use sparse feature representation",
          "Aliases": [
            "sp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.7
        },
        {
          "Name": "FeatureFirstUsePenalty",
          "Type": "Float",
          "Desc": "The feature first use penalty coefficient",
          "Aliases": [
            "ffup"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "FeatureReusePenalty",
          "Type": "Float",
          "Desc": "The feature re-use penalty (regularization) coefficient",
          "Aliases": [
            "frup"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "GainConfidenceLevel",
          "Type": "Float",
          "Desc": "Tree fitting gain confidence requirement (should be in the range [0,1) ).",
          "Aliases": [
            "gainconf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "SoftmaxTemperature",
          "Type": "Float",
          "Desc": "The temperature of the randomized softmax distribution for choosing the feature",
          "Aliases": [
            "smtemp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "ExecutionTimes",
          "Type": "Bool",
          "Desc": "Print execution time breakdown to stdout",
          "Aliases": [
            "et"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "FeatureFraction",
          "Type": "Float",
          "Desc": "The fraction of features (chosen randomly) to use on each iteration",
          "Aliases": [
            "ff"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1.0
        },
        {
          "Name": "BaggingSize",
          "Type": "Int",
          "Desc": "Number of trees in each bag (0 for disabling bagging)",
          "Aliases": [
            "bag"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0
        },
        {
          "Name": "BaggingTrainFraction",
          "Type": "Float",
          "Desc": "Percentage of training examples used in each bag",
          "Aliases": [
            "bagfrac"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.7
        },
        {
          "Name": "SplitFraction",
          "Type": "Float",
          "Desc": "The fraction of features (chosen randomly) to use on each split",
          "Aliases": [
            "sf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1.0
        },
        {
          "Name": "Smoothing",
          "Type": "Float",
          "Desc": "Smoothing paramter for tree regularization",
          "Aliases": [
            "s"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "AllowEmptyTrees",
          "Type": "Bool",
          "Desc": "When a root split is impossible, allow training to proceed",
          "Aliases": [
            "allowempty",
            "dummies"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "FeatureCompressionLevel",
          "Type": "Int",
          "Desc": "The level of feature compression to use",
          "Aliases": [
            "fcomp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1
        },
        {
          "Name": "CompressEnsemble",
          "Type": "Bool",
          "Desc": "Compress the tree Ensemble",
          "Aliases": [
            "cmp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "MaxTreesAfterCompression",
          "Type": "Int",
          "Desc": "Maximum Number of trees after compression",
          "Aliases": [
            "cmpmax"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": -1
        },
        {
          "Name": "PrintTestGraph",
          "Type": "Bool",
          "Desc": "Print metrics graph for the first test set",
          "Aliases": [
            "graph"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "PrintTrainValidGraph",
          "Type": "Bool",
          "Desc": "Print Train and Validation metrics in graph",
          "Aliases": [
            "graphtv"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "TestFrequency",
          "Type": "Int",
          "Desc": "Calculate metric values for train/valid/test every k rounds",
          "Aliases": [
            "tf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 2147483647
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ITrainerInputWithGroupId",
        "ITrainerInputWithWeight",
        "ITrainerInputWithLabel",
        "ITrainerInput"
      ],
      "OutputKind": [
        "IRegressionOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Trainers.FastTreeTweedieRegressor",
      "Desc": "Trains gradient boosted decision trees to fit target values using a Tweedie loss function. This learner is a generalization of Poisson, compound Poisson, and gamma regression.",
      "FriendlyName": "FastTree (Boosted Trees) Tweedie Regression",
      "ShortName": "fttweedie",
      "Inputs": [
        {
          "Name": "NumTrees",
          "Type": "Int",
          "Desc": "Number of weak hypotheses in the ensemble",
          "Aliases": [
            "iter"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": 100,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              20,
              100,
              500
            ]
          }
        },
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "NumLeaves",
          "Type": "Int",
          "Desc": "The max number of leaves in each regression tree",
          "Aliases": [
            "nl"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": 20,
          "SweepRange": {
            "RangeType": "Long",
            "Min": 2,
            "Max": 128,
            "StepSize": 4.0,
            "IsLogScale": true
          }
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "MinDocumentsInLeafs",
          "Type": "Int",
          "Desc": "The minimal number of documents allowed in a leaf of a regression tree, out of the subsampled data",
          "Aliases": [
            "mil"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": 10,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              1,
              10,
              50
            ]
          }
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "LearningRates",
          "Type": "Float",
          "Desc": "The learning rate",
          "Aliases": [
            "lr"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": 0.2,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.025,
            "Max": 0.4,
            "IsLogScale": true
          }
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Column to use for example weight",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": "Weight"
        },
        {
          "Name": "GroupIdColumn",
          "Type": "String",
          "Desc": "Column to use for example groupId",
          "Aliases": [
            "groupId"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "GroupId"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Index",
          "Type": "Float",
          "Desc": "Index parameter for the Tweedie distribution, in the range [1, 2]. 1 is Poisson loss, 2 is gamma loss, and intermediate values are compound Poisson loss.",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1.5
        },
        {
          "Name": "BestStepRankingRegressionTrees",
          "Type": "Bool",
          "Desc": "Use best regression step trees?",
          "Aliases": [
            "bsr"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "UseLineSearch",
          "Type": "Bool",
          "Desc": "Should we use line search for a step size",
          "Aliases": [
            "ls"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "NumPostBracketSteps",
          "Type": "Int",
          "Desc": "Number of post-bracket line search steps",
          "Aliases": [
            "lssteps"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0
        },
        {
          "Name": "MinStepSize",
          "Type": "Float",
          "Desc": "Minimum line search step size",
          "Aliases": [
            "minstep"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "OptimizationAlgorithm",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "GradientDescent",
              "AcceleratedGradientDescent",
              "ConjugateGradientDescent"
            ]
          },
          "Desc": "Optimization algorithm to be used (GradientDescent, AcceleratedGradientDescent)",
          "Aliases": [
            "oa"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": "GradientDescent"
        },
        {
          "Name": "EarlyStoppingRule",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "EarlyStoppingCriterion"
          },
          "Desc": "Early stopping rule. (Validation set (/valid) is required.)",
          "Aliases": [
            "esr"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "EarlyStoppingMetrics",
          "Type": "Int",
          "Desc": "Early stopping metrics. (For regression, 1: L1, 2:L2; for ranking, 1:NDCG@1, 3:NDCG@3)",
          "Aliases": [
            "esmt"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0
        },
        {
          "Name": "EnablePruning",
          "Type": "Bool",
          "Desc": "Enable post-training pruning to avoid overfitting. (a validation set is required)",
          "Aliases": [
            "pruning"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "UseTolerantPruning",
          "Type": "Bool",
          "Desc": "Use window and tolerance for pruning",
          "Aliases": [
            "prtol"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "PruningThreshold",
          "Type": "Float",
          "Desc": "The tolerance threshold for pruning",
          "Aliases": [
            "prth"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.004
        },
        {
          "Name": "PruningWindowSize",
          "Type": "Int",
          "Desc": "The moving window size for pruning",
          "Aliases": [
            "prws"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 5
        },
        {
          "Name": "Shrinkage",
          "Type": "Float",
          "Desc": "Shrinkage",
          "Aliases": [
            "shrk"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1.0,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.025,
            "Max": 4.0,
            "IsLogScale": true
          }
        },
        {
          "Name": "DropoutRate",
          "Type": "Float",
          "Desc": "Dropout rate for tree regularization",
          "Aliases": [
            "tdrop"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              0.0,
              1E-09,
              0.05,
              0.1,
              0.2
            ]
          }
        },
        {
          "Name": "GetDerivativesSampleRate",
          "Type": "Int",
          "Desc": "Sample each query 1 in k times in the GetDerivatives function",
          "Aliases": [
            "sr"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1
        },
        {
          "Name": "WriteLastEnsemble",
          "Type": "Bool",
          "Desc": "Write the last ensemble instead of the one determined by early stopping",
          "Aliases": [
            "hl"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "MaxTreeOutput",
          "Type": "Float",
          "Desc": "Upper bound on absolute value of single tree output",
          "Aliases": [
            "mo"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 100.0
        },
        {
          "Name": "RandomStart",
          "Type": "Bool",
          "Desc": "Training starts from random ordering (determined by /r1)",
          "Aliases": [
            "rs"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "FilterZeroLambdas",
          "Type": "Bool",
          "Desc": "Filter zero lambdas during training",
          "Aliases": [
            "fzl"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "BaselineScoresFormula",
          "Type": "String",
          "Desc": "Freeform defining the scores that should be used as the baseline ranker",
          "Aliases": [
            "basescores"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "BaselineAlphaRisk",
          "Type": "String",
          "Desc": "Baseline alpha for tradeoffs of risk (0 is normal training)",
          "Aliases": [
            "basealpha"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "PositionDiscountFreeform",
          "Type": "String",
          "Desc": "The discount freeform which specifies the per position discounts of documents in a query (uses a single variable P for position where P=0 is first position)",
          "Aliases": [
            "pdff"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "ParallelTrainer",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "ParallelTraining"
          },
          "Desc": "Allows to choose Parallel FastTree Learning Algorithm",
          "Aliases": [
            "parag"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": {
            "Name": "Single"
          }
        },
        {
          "Name": "NumThreads",
          "Type": "Int",
          "Desc": "The number of threads to use",
          "Aliases": [
            "t"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "RngSeed",
          "Type": "Int",
          "Desc": "The seed of the random number generator",
          "Aliases": [
            "r1"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 123
        },
        {
          "Name": "FeatureSelectSeed",
          "Type": "Int",
          "Desc": "The seed of the active feature selection",
          "Aliases": [
            "r3"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 123
        },
        {
          "Name": "EntropyCoefficient",
          "Type": "Float",
          "Desc": "The entropy (regularization) coefficient between 0 and 1",
          "Aliases": [
            "e"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "HistogramPoolSize",
          "Type": "Int",
          "Desc": "The number of histograms in the pool (between 2 and numLeaves)",
          "Aliases": [
            "ps"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": -1
        },
        {
          "Name": "DiskTranspose",
          "Type": "Bool",
          "Desc": "Whether to utilize the disk or the data's native transposition facilities (where applicable) when performing the transpose",
          "Aliases": [
            "dt"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "FeatureFlocks",
          "Type": "Bool",
          "Desc": "Whether to collectivize features during dataset preparation to speed up training",
          "Aliases": [
            "flocks"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "CategoricalSplit",
          "Type": "Bool",
          "Desc": "Whether to do split based on multiple categorical feature values.",
          "Aliases": [
            "cat"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "MaxCategoricalGroupsPerNode",
          "Type": "Int",
          "Desc": "Maximum categorical split groups to consider when splitting on a categorical feature. Split groups are a collection of split points. This is used to reduce overfitting when there many categorical features.",
          "Aliases": [
            "mcg"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 64
        },
        {
          "Name": "MaxCategoricalSplitPoints",
          "Type": "Int",
          "Desc": "Maximum categorical split points to consider when splitting on a categorical feature.",
          "Aliases": [
            "maxcat"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 64
        },
        {
          "Name": "MinDocsPercentageForCategoricalSplit",
          "Type": "Float",
          "Desc": "Minimum categorical docs percentage in a bin to consider for a split.",
          "Aliases": [
            "mdop"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.001
        },
        {
          "Name": "MinDocsForCategoricalSplit",
          "Type": "Int",
          "Desc": "Minimum categorical doc count in a bin to consider for a split.",
          "Aliases": [
            "mdo"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 100
        },
        {
          "Name": "Bias",
          "Type": "Float",
          "Desc": "Bias for calculating gradient for each feature bin for a categorical feature.",
          "Aliases": [
            "bias"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "Bundling",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "None",
              "AggregateLowPopulation",
              "Adjacent"
            ]
          },
          "Desc": "Bundle low population bins. Bundle.None(0): no bundling, Bundle.AggregateLowPopulation(1): Bundle low population, Bundle.Adjacent(2): Neighbor low population bundle.",
          "Aliases": [
            "bundle"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": "None"
        },
        {
          "Name": "MaxBins",
          "Type": "Int",
          "Desc": "Maximum number of distinct values (bins) per feature",
          "Aliases": [
            "mb"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 255
        },
        {
          "Name": "SparsifyThreshold",
          "Type": "Float",
          "Desc": "Sparsity level needed to use sparse feature representation",
          "Aliases": [
            "sp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.7
        },
        {
          "Name": "FeatureFirstUsePenalty",
          "Type": "Float",
          "Desc": "The feature first use penalty coefficient",
          "Aliases": [
            "ffup"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "FeatureReusePenalty",
          "Type": "Float",
          "Desc": "The feature re-use penalty (regularization) coefficient",
          "Aliases": [
            "frup"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "GainConfidenceLevel",
          "Type": "Float",
          "Desc": "Tree fitting gain confidence requirement (should be in the range [0,1) ).",
          "Aliases": [
            "gainconf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "SoftmaxTemperature",
          "Type": "Float",
          "Desc": "The temperature of the randomized softmax distribution for choosing the feature",
          "Aliases": [
            "smtemp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "ExecutionTimes",
          "Type": "Bool",
          "Desc": "Print execution time breakdown to stdout",
          "Aliases": [
            "et"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "FeatureFraction",
          "Type": "Float",
          "Desc": "The fraction of features (chosen randomly) to use on each iteration",
          "Aliases": [
            "ff"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1.0
        },
        {
          "Name": "BaggingSize",
          "Type": "Int",
          "Desc": "Number of trees in each bag (0 for disabling bagging)",
          "Aliases": [
            "bag"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0
        },
        {
          "Name": "BaggingTrainFraction",
          "Type": "Float",
          "Desc": "Percentage of training examples used in each bag",
          "Aliases": [
            "bagfrac"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.7
        },
        {
          "Name": "SplitFraction",
          "Type": "Float",
          "Desc": "The fraction of features (chosen randomly) to use on each split",
          "Aliases": [
            "sf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1.0
        },
        {
          "Name": "Smoothing",
          "Type": "Float",
          "Desc": "Smoothing paramter for tree regularization",
          "Aliases": [
            "s"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "AllowEmptyTrees",
          "Type": "Bool",
          "Desc": "When a root split is impossible, allow training to proceed",
          "Aliases": [
            "allowempty",
            "dummies"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "FeatureCompressionLevel",
          "Type": "Int",
          "Desc": "The level of feature compression to use",
          "Aliases": [
            "fcomp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1
        },
        {
          "Name": "CompressEnsemble",
          "Type": "Bool",
          "Desc": "Compress the tree Ensemble",
          "Aliases": [
            "cmp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "MaxTreesAfterCompression",
          "Type": "Int",
          "Desc": "Maximum Number of trees after compression",
          "Aliases": [
            "cmpmax"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": -1
        },
        {
          "Name": "PrintTestGraph",
          "Type": "Bool",
          "Desc": "Print metrics graph for the first test set",
          "Aliases": [
            "graph"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "PrintTrainValidGraph",
          "Type": "Bool",
          "Desc": "Print Train and Validation metrics in graph",
          "Aliases": [
            "graphtv"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "TestFrequency",
          "Type": "Int",
          "Desc": "Calculate metric values for train/valid/test every k rounds",
          "Aliases": [
            "tf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 2147483647
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ITrainerInputWithGroupId",
        "ITrainerInputWithWeight",
        "ITrainerInputWithLabel",
        "ITrainerInput"
      ],
      "OutputKind": [
        "IRegressionOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Trainers.GeneralizedAdditiveModelBinaryClassifier",
      "Desc": "Trains a gradient boosted stump per feature, on all features simultaneously, to fit target values using least-squares. It mantains no interactions between features.",
      "FriendlyName": "Generalized Additive Model for Binary Classification",
      "ShortName": "gam",
      "Inputs": [
        {
          "Name": "NumIterations",
          "Type": "Int",
          "Desc": "Total number of iterations over all features",
          "Aliases": [
            "iter"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": 9500,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              200,
              1500,
              9500
            ]
          }
        },
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "MinDocuments",
          "Type": "Int",
          "Desc": "Minimum number of training instances required to form a partition",
          "Aliases": [
            "mi"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": 10,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              1,
              10,
              50
            ]
          }
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "LearningRates",
          "Type": "Float",
          "Desc": "The learning rate",
          "Aliases": [
            "lr"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": 0.002,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.001,
            "Max": 0.1,
            "IsLogScale": true
          }
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Column to use for example weight",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": "Weight"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "UnbalancedSets",
          "Type": "Bool",
          "Desc": "Should we use derivatives optimized for unbalanced sets",
          "Aliases": [
            "us"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "Calibrator",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "CalibratorTrainer"
          },
          "Desc": "The calibrator kind to apply to the predictor. Specify null for no calibration",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": {
            "Name": "PlattCalibrator"
          }
        },
        {
          "Name": "MaxCalibrationExamples",
          "Type": "Int",
          "Desc": "The maximum number of examples to use when training the calibrator",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1000000
        },
        {
          "Name": "EntropyCoefficient",
          "Type": "Float",
          "Desc": "The entropy (regularization) coefficient between 0 and 1",
          "Aliases": [
            "e"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "GainConfidenceLevel",
          "Type": "Int",
          "Desc": "Tree fitting gain confidence requirement (should be in the range [0,1) ).",
          "Aliases": [
            "gainconf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0
        },
        {
          "Name": "NumThreads",
          "Type": "Int",
          "Desc": "The number of threads to use",
          "Aliases": [
            "t"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "DiskTranspose",
          "Type": "Bool",
          "Desc": "Whether to utilize the disk or the data's native transposition facilities (where applicable) when performing the transpose",
          "Aliases": [
            "dt"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "MaxBins",
          "Type": "Int",
          "Desc": "Maximum number of distinct values (bins) per feature",
          "Aliases": [
            "mb"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 255
        },
        {
          "Name": "MaxOutput",
          "Type": "Float",
          "Desc": "Upper bound on absolute value of single output",
          "Aliases": [
            "mo"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": "Infinity"
        },
        {
          "Name": "GetDerivativesSampleRate",
          "Type": "Int",
          "Desc": "Sample each query 1 in k times in the GetDerivatives function",
          "Aliases": [
            "sr"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1
        },
        {
          "Name": "RngSeed",
          "Type": "Int",
          "Desc": "The seed of the random number generator",
          "Aliases": [
            "r1"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 123
        },
        {
          "Name": "FeatureFlocks",
          "Type": "Bool",
          "Desc": "Whether to collectivize features during dataset preparation to speed up training",
          "Aliases": [
            "flocks"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ITrainerInputWithWeight",
        "ITrainerInputWithLabel",
        "ITrainerInput"
      ],
      "OutputKind": [
        "IBinaryClassificationOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Trainers.GeneralizedAdditiveModelRegressor",
      "Desc": "Trains a gradient boosted stump per feature, on all features simultaneously, to fit target values using least-squares. It mantains no interactions between features.",
      "FriendlyName": "Generalized Additive Model for Regression",
      "ShortName": "gamr",
      "Inputs": [
        {
          "Name": "NumIterations",
          "Type": "Int",
          "Desc": "Total number of iterations over all features",
          "Aliases": [
            "iter"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": 9500,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              200,
              1500,
              9500
            ]
          }
        },
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "MinDocuments",
          "Type": "Int",
          "Desc": "Minimum number of training instances required to form a partition",
          "Aliases": [
            "mi"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": 10,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              1,
              10,
              50
            ]
          }
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "LearningRates",
          "Type": "Float",
          "Desc": "The learning rate",
          "Aliases": [
            "lr"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": 0.002,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.001,
            "Max": 0.1,
            "IsLogScale": true
          }
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Column to use for example weight",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": "Weight"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "EntropyCoefficient",
          "Type": "Float",
          "Desc": "The entropy (regularization) coefficient between 0 and 1",
          "Aliases": [
            "e"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "GainConfidenceLevel",
          "Type": "Int",
          "Desc": "Tree fitting gain confidence requirement (should be in the range [0,1) ).",
          "Aliases": [
            "gainconf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0
        },
        {
          "Name": "NumThreads",
          "Type": "Int",
          "Desc": "The number of threads to use",
          "Aliases": [
            "t"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "DiskTranspose",
          "Type": "Bool",
          "Desc": "Whether to utilize the disk or the data's native transposition facilities (where applicable) when performing the transpose",
          "Aliases": [
            "dt"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "MaxBins",
          "Type": "Int",
          "Desc": "Maximum number of distinct values (bins) per feature",
          "Aliases": [
            "mb"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 255
        },
        {
          "Name": "MaxOutput",
          "Type": "Float",
          "Desc": "Upper bound on absolute value of single output",
          "Aliases": [
            "mo"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": "Infinity"
        },
        {
          "Name": "GetDerivativesSampleRate",
          "Type": "Int",
          "Desc": "Sample each query 1 in k times in the GetDerivatives function",
          "Aliases": [
            "sr"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1
        },
        {
          "Name": "RngSeed",
          "Type": "Int",
          "Desc": "The seed of the random number generator",
          "Aliases": [
            "r1"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 123
        },
        {
          "Name": "FeatureFlocks",
          "Type": "Bool",
          "Desc": "Whether to collectivize features during dataset preparation to speed up training",
          "Aliases": [
            "flocks"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ITrainerInputWithWeight",
        "ITrainerInputWithLabel",
        "ITrainerInput"
      ],
      "OutputKind": [
        "IRegressionOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Trainers.KMeansPlusPlusClusterer",
      "Desc": "K-means is a popular clustering algorithm. With K-means, the data is clustered into a specified number of clusters in order to minimize the within-cluster sum of squares. K-means++ improves upon K-means by using a better method for choosing the initial cluster centers.",
      "FriendlyName": "KMeans++ Clustering",
      "ShortName": "KM",
      "Inputs": [
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "K",
          "Type": "Int",
          "Desc": "The number of clusters",
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 5,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              5,
              10,
              20,
              40
            ]
          }
        },
        {
          "Name": "NumThreads",
          "Type": "Int",
          "Desc": "Degree of lock-free parallelism. Defaults to automatic. Determinism not guaranteed.",
          "Aliases": [
            "nt",
            "t",
            "threads"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "InitAlgorithm",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "KMeansPlusPlus",
              "Random",
              "KMeansParallel"
            ]
          },
          "Desc": "Cluster initialization algorithm",
          "Aliases": [
            "init"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": "KMeansParallel"
        },
        {
          "Name": "OptTol",
          "Type": "Float",
          "Desc": "Tolerance parameter for trainer convergence. Lower = slower, more accurate",
          "Aliases": [
            "ot"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1E-07
        },
        {
          "Name": "MaxIterations",
          "Type": "Int",
          "Desc": "Maximum number of iterations.",
          "Aliases": [
            "maxiter"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1000
        },
        {
          "Name": "AccelMemBudgetMb",
          "Type": "Int",
          "Desc": "Memory budget (in MBs) to use for KMeans acceleration",
          "Aliases": [
            "accelMemBudgetMb"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 4096
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ITrainerInput"
      ],
      "OutputKind": [
        "IClusteringOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Trainers.LinearSvmBinaryClassifier",
      "Desc": "Train a linear SVM.",
      "FriendlyName": "SVM (Pegasos-Linear)",
      "ShortName": "svm",
      "Inputs": [
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Lambda",
          "Type": "Float",
          "Desc": "Regularizer constant",
          "Aliases": [
            "lambda"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 0.001,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 1E-05,
            "Max": 0.1,
            "StepSize": 10.0,
            "IsLogScale": true
          }
        },
        {
          "Name": "PerformProjection",
          "Type": "Bool",
          "Desc": "Perform projection to unit-ball? Typically used with batch size > 1.",
          "Aliases": [
            "project"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": false,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              false,
              true
            ]
          }
        },
        {
          "Name": "NumIterations",
          "Type": "Int",
          "Desc": "Number of iterations",
          "Aliases": [
            "iter"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 1,
          "SweepRange": {
            "RangeType": "Long",
            "Min": 1,
            "Max": 100,
            "StepSize": 10.0,
            "IsLogScale": true
          }
        },
        {
          "Name": "InitWtsDiameter",
          "Type": "Float",
          "Desc": "Init weights diameter",
          "Aliases": [
            "initwts"
          ],
          "Required": false,
          "SortOrder": 140.0,
          "IsNullable": false,
          "Default": 0.0,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.0,
            "Max": 1.0,
            "NumSteps": 5
          }
        },
        {
          "Name": "NoBias",
          "Type": "Bool",
          "Desc": "No bias",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              false,
              true
            ]
          }
        },
        {
          "Name": "Calibrator",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "CalibratorTrainer"
          },
          "Desc": "The calibrator kind to apply to the predictor. Specify null for no calibration",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": {
            "Name": "PlattCalibrator"
          }
        },
        {
          "Name": "MaxCalibrationExamples",
          "Type": "Int",
          "Desc": "The maximum number of examples to use when training the calibrator",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1000000
        },
        {
          "Name": "InitialWeights",
          "Type": "String",
          "Desc": "Initial Weights and bias, comma-separated",
          "Aliases": [
            "initweights"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "Shuffle",
          "Type": "Bool",
          "Desc": "Whether to shuffle for each training iteration",
          "Aliases": [
            "shuf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              false,
              true
            ]
          }
        },
        {
          "Name": "StreamingCacheSize",
          "Type": "Int",
          "Desc": "Size of cache when trained in Scope",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1000000
        },
        {
          "Name": "BatchSize",
          "Type": "Int",
          "Desc": "Batch size",
          "Aliases": [
            "batch"
          ],
          "Required": false,
          "SortOrder": 190.0,
          "IsNullable": false,
          "Default": 1
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ITrainerInputWithLabel",
        "ITrainerInput"
      ],
      "OutputKind": [
        "IBinaryClassificationOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Trainers.LogisticRegressionBinaryClassifier",
      "Desc": "Train a logistic regression binary model",
      "FriendlyName": "Logistic Regression",
      "ShortName": "lr",
      "Inputs": [
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Column to use for example weight",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": "Weight"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "ShowTrainingStats",
          "Type": "Bool",
          "Desc": "Show statistics of training examples.",
          "Aliases": [
            "stat"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "L2Weight",
          "Type": "Float",
          "Desc": "L2 regularization weight",
          "Aliases": [
            "l2"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 1.0,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.0,
            "Max": 1.0,
            "NumSteps": 4
          }
        },
        {
          "Name": "L1Weight",
          "Type": "Float",
          "Desc": "L1 regularization weight",
          "Aliases": [
            "l1"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 1.0,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.0,
            "Max": 1.0,
            "NumSteps": 4
          }
        },
        {
          "Name": "OptTol",
          "Type": "Float",
          "Desc": "Tolerance parameter for optimization convergence. Lower = slower, more accurate",
          "Aliases": [
            "ot"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 1E-07,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              0.0001,
              1E-07
            ]
          }
        },
        {
          "Name": "MemorySize",
          "Type": "Int",
          "Desc": "Memory size for L-BFGS. Lower=faster, less accurate",
          "Aliases": [
            "m"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 20,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              5,
              20,
              50
            ]
          }
        },
        {
          "Name": "EnforceNonNegativity",
          "Type": "Bool",
          "Desc": "Enforce non-negative weights",
          "Aliases": [
            "nn"
          ],
          "Required": false,
          "SortOrder": 90.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "InitWtsDiameter",
          "Type": "Float",
          "Desc": "Init weights diameter",
          "Aliases": [
            "initwts"
          ],
          "Required": false,
          "SortOrder": 140.0,
          "IsNullable": false,
          "Default": 0.0,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.0,
            "Max": 1.0,
            "NumSteps": 5
          }
        },
        {
          "Name": "MaxIterations",
          "Type": "Int",
          "Desc": "Maximum iterations.",
          "Aliases": [
            "maxiter"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 2147483647,
          "SweepRange": {
            "RangeType": "Long",
            "Min": 1,
            "Max": 2147483647
          }
        },
        {
          "Name": "SgdInitializationTolerance",
          "Type": "Float",
          "Desc": "Run SGD to initialize LR weights, converging to this tolerance",
          "Aliases": [
            "sgd"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "Quiet",
          "Type": "Bool",
          "Desc": "If set to true, produce no output during training.",
          "Aliases": [
            "q"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "UseThreads",
          "Type": "Bool",
          "Desc": "Whether or not to use threads. Default is true",
          "Aliases": [
            "t"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "NumThreads",
          "Type": "Int",
          "Desc": "Number of threads",
          "Aliases": [
            "nt"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "DenseOptimizer",
          "Type": "Bool",
          "Desc": "Force densification of the internal optimization vectors",
          "Aliases": [
            "do"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              false,
              true
            ]
          }
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ITrainerInputWithWeight",
        "ITrainerInputWithLabel",
        "ITrainerInput"
      ],
      "OutputKind": [
        "IBinaryClassificationOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Trainers.LogisticRegressionClassifier",
      "Desc": "Train a logistic regression multi class model",
      "FriendlyName": "Multi-class Logistic Regression",
      "ShortName": "mlr",
      "Inputs": [
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Column to use for example weight",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": "Weight"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "ShowTrainingStats",
          "Type": "Bool",
          "Desc": "Show statistics of training examples.",
          "Aliases": [
            "stat"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "L2Weight",
          "Type": "Float",
          "Desc": "L2 regularization weight",
          "Aliases": [
            "l2"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 1.0,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.0,
            "Max": 1.0,
            "NumSteps": 4
          }
        },
        {
          "Name": "L1Weight",
          "Type": "Float",
          "Desc": "L1 regularization weight",
          "Aliases": [
            "l1"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 1.0,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.0,
            "Max": 1.0,
            "NumSteps": 4
          }
        },
        {
          "Name": "OptTol",
          "Type": "Float",
          "Desc": "Tolerance parameter for optimization convergence. Lower = slower, more accurate",
          "Aliases": [
            "ot"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 1E-07,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              0.0001,
              1E-07
            ]
          }
        },
        {
          "Name": "MemorySize",
          "Type": "Int",
          "Desc": "Memory size for L-BFGS. Lower=faster, less accurate",
          "Aliases": [
            "m"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 20,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              5,
              20,
              50
            ]
          }
        },
        {
          "Name": "EnforceNonNegativity",
          "Type": "Bool",
          "Desc": "Enforce non-negative weights",
          "Aliases": [
            "nn"
          ],
          "Required": false,
          "SortOrder": 90.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "InitWtsDiameter",
          "Type": "Float",
          "Desc": "Init weights diameter",
          "Aliases": [
            "initwts"
          ],
          "Required": false,
          "SortOrder": 140.0,
          "IsNullable": false,
          "Default": 0.0,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.0,
            "Max": 1.0,
            "NumSteps": 5
          }
        },
        {
          "Name": "MaxIterations",
          "Type": "Int",
          "Desc": "Maximum iterations.",
          "Aliases": [
            "maxiter"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 2147483647,
          "SweepRange": {
            "RangeType": "Long",
            "Min": 1,
            "Max": 2147483647
          }
        },
        {
          "Name": "SgdInitializationTolerance",
          "Type": "Float",
          "Desc": "Run SGD to initialize LR weights, converging to this tolerance",
          "Aliases": [
            "sgd"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "Quiet",
          "Type": "Bool",
          "Desc": "If set to true, produce no output during training.",
          "Aliases": [
            "q"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "UseThreads",
          "Type": "Bool",
          "Desc": "Whether or not to use threads. Default is true",
          "Aliases": [
            "t"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "NumThreads",
          "Type": "Int",
          "Desc": "Number of threads",
          "Aliases": [
            "nt"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "DenseOptimizer",
          "Type": "Bool",
          "Desc": "Force densification of the internal optimization vectors",
          "Aliases": [
            "do"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              false,
              true
            ]
          }
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ITrainerInputWithWeight",
        "ITrainerInputWithLabel",
        "ITrainerInput"
      ],
      "OutputKind": [
        "IMulticlassClassificationOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Trainers.NaiveBayesClassifier",
      "Desc": "Train a MultiClassNaiveBayesTrainer.",
      "FriendlyName": "Multiclass Naive Bayes",
      "ShortName": "MNB",
      "Inputs": [
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ITrainerInputWithLabel",
        "ITrainerInput"
      ],
      "OutputKind": [
        "IMulticlassClassificationOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Trainers.OnlineGradientDescentRegressor",
      "Desc": "Train a Online gradient descent perceptron.",
      "FriendlyName": "Stochastic Gradient Descent (Regression)",
      "ShortName": "ogd",
      "Inputs": [
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "LossFunction",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "RegressionLossFunction"
          },
          "Desc": "Loss Function",
          "Aliases": [
            "loss"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": {
            "Name": "SquaredLoss"
          }
        },
        {
          "Name": "LearningRate",
          "Type": "Float",
          "Desc": "Learning rate",
          "Aliases": [
            "lr"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 0.1,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              0.01,
              0.1,
              0.5,
              1.0
            ]
          }
        },
        {
          "Name": "DecreaseLearningRate",
          "Type": "Bool",
          "Desc": "Decrease learning rate",
          "Aliases": [
            "decreaselr"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": true,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              false,
              true
            ]
          }
        },
        {
          "Name": "L2RegularizerWeight",
          "Type": "Float",
          "Desc": "L2 Regularization Weight",
          "Aliases": [
            "reg"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 0.0,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.0,
            "Max": 0.5
          }
        },
        {
          "Name": "NumIterations",
          "Type": "Int",
          "Desc": "Number of iterations",
          "Aliases": [
            "iter"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 1,
          "SweepRange": {
            "RangeType": "Long",
            "Min": 1,
            "Max": 100,
            "StepSize": 10.0,
            "IsLogScale": true
          }
        },
        {
          "Name": "InitWtsDiameter",
          "Type": "Float",
          "Desc": "Init weights diameter",
          "Aliases": [
            "initwts"
          ],
          "Required": false,
          "SortOrder": 140.0,
          "IsNullable": false,
          "Default": 0.0,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.0,
            "Max": 1.0,
            "NumSteps": 5
          }
        },
        {
          "Name": "ResetWeightsAfterXExamples",
          "Type": "Int",
          "Desc": "Number of examples after which weights will be reset to the current average",
          "Aliases": [
            "numreset"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "DoLazyUpdates",
          "Type": "Bool",
          "Desc": "Instead of updating averaged weights on every example, only update when loss is nonzero",
          "Aliases": [
            "lazy"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "RecencyGain",
          "Type": "Float",
          "Desc": "Extra weight given to more recent updates",
          "Aliases": [
            "rg"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "RecencyGainMulti",
          "Type": "Bool",
          "Desc": "Whether Recency Gain is multiplicative (vs. additive)",
          "Aliases": [
            "rgm"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "Averaged",
          "Type": "Bool",
          "Desc": "Do averaging?",
          "Aliases": [
            "avg"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "AveragedTolerance",
          "Type": "Float",
          "Desc": "The inexactness tolerance for averaging",
          "Aliases": [
            "avgtol"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.01
        },
        {
          "Name": "InitialWeights",
          "Type": "String",
          "Desc": "Initial Weights and bias, comma-separated",
          "Aliases": [
            "initweights"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "Shuffle",
          "Type": "Bool",
          "Desc": "Whether to shuffle for each training iteration",
          "Aliases": [
            "shuf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              false,
              true
            ]
          }
        },
        {
          "Name": "StreamingCacheSize",
          "Type": "Int",
          "Desc": "Size of cache when trained in Scope",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1000000
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ITrainerInputWithLabel",
        "ITrainerInput"
      ],
      "OutputKind": [
        "IRegressionOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Trainers.OrdinaryLeastSquaresRegressor",
      "Desc": "Train an OLS regression model.",
      "FriendlyName": "Ordinary Least Squares (Regression)",
      "ShortName": "ols",
      "Inputs": [
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Column to use for example weight",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": "Weight"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "L2Weight",
          "Type": "Float",
          "Desc": "L2 regularization weight",
          "Aliases": [
            "l2"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 1E-06,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              1E-06,
              0.1,
              1.0
            ]
          }
        },
        {
          "Name": "PerParameterSignificance",
          "Type": "Bool",
          "Desc": "Whether to calculate per parameter significance statistics",
          "Aliases": [
            "sig"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ITrainerInputWithWeight",
        "ITrainerInputWithLabel",
        "ITrainerInput"
      ],
      "OutputKind": [
        "IRegressionOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Trainers.PcaAnomalyDetector",
      "Desc": "Train an PCA Anomaly model.",
      "FriendlyName": "PCA Anomaly Detector",
      "ShortName": "pcaAnom",
      "Inputs": [
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Column to use for example weight",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": "Weight"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Rank",
          "Type": "Int",
          "Desc": "The number of components in the PCA",
          "Aliases": [
            "k"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 20,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              10,
              20,
              40,
              80
            ]
          }
        },
        {
          "Name": "Oversampling",
          "Type": "Int",
          "Desc": "Oversampling parameter for randomized PCA training",
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 20,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              10,
              20,
              40
            ]
          }
        },
        {
          "Name": "Center",
          "Type": "Bool",
          "Desc": "If enabled, data is centered to be zero mean",
          "Aliases": [
            "center"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              false,
              true
            ]
          }
        },
        {
          "Name": "Seed",
          "Type": "Int",
          "Desc": "The seed for random number generation",
          "Aliases": [
            "seed"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ITrainerInput"
      ],
      "OutputKind": [
        "IAnomalyDetectionOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Trainers.PoissonRegressor",
      "Desc": "Train an Poisson regression model.",
      "FriendlyName": "Poisson Regression",
      "ShortName": "PR",
      "Inputs": [
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Column to use for example weight",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": "Weight"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "L2Weight",
          "Type": "Float",
          "Desc": "L2 regularization weight",
          "Aliases": [
            "l2"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 1.0,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.0,
            "Max": 1.0,
            "NumSteps": 4
          }
        },
        {
          "Name": "L1Weight",
          "Type": "Float",
          "Desc": "L1 regularization weight",
          "Aliases": [
            "l1"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 1.0,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.0,
            "Max": 1.0,
            "NumSteps": 4
          }
        },
        {
          "Name": "OptTol",
          "Type": "Float",
          "Desc": "Tolerance parameter for optimization convergence. Lower = slower, more accurate",
          "Aliases": [
            "ot"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 1E-07,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              0.0001,
              1E-07
            ]
          }
        },
        {
          "Name": "MemorySize",
          "Type": "Int",
          "Desc": "Memory size for L-BFGS. Lower=faster, less accurate",
          "Aliases": [
            "m"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 20,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              5,
              20,
              50
            ]
          }
        },
        {
          "Name": "EnforceNonNegativity",
          "Type": "Bool",
          "Desc": "Enforce non-negative weights",
          "Aliases": [
            "nn"
          ],
          "Required": false,
          "SortOrder": 90.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "InitWtsDiameter",
          "Type": "Float",
          "Desc": "Init weights diameter",
          "Aliases": [
            "initwts"
          ],
          "Required": false,
          "SortOrder": 140.0,
          "IsNullable": false,
          "Default": 0.0,
          "SweepRange": {
            "RangeType": "Float",
            "Min": 0.0,
            "Max": 1.0,
            "NumSteps": 5
          }
        },
        {
          "Name": "MaxIterations",
          "Type": "Int",
          "Desc": "Maximum iterations.",
          "Aliases": [
            "maxiter"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 2147483647,
          "SweepRange": {
            "RangeType": "Long",
            "Min": 1,
            "Max": 2147483647
          }
        },
        {
          "Name": "SgdInitializationTolerance",
          "Type": "Float",
          "Desc": "Run SGD to initialize LR weights, converging to this tolerance",
          "Aliases": [
            "sgd"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0
        },
        {
          "Name": "Quiet",
          "Type": "Bool",
          "Desc": "If set to true, produce no output during training.",
          "Aliases": [
            "q"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "UseThreads",
          "Type": "Bool",
          "Desc": "Whether or not to use threads. Default is true",
          "Aliases": [
            "t"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "NumThreads",
          "Type": "Int",
          "Desc": "Number of threads",
          "Aliases": [
            "nt"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "DenseOptimizer",
          "Type": "Bool",
          "Desc": "Force densification of the internal optimization vectors",
          "Aliases": [
            "do"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              false,
              true
            ]
          }
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ITrainerInputWithWeight",
        "ITrainerInputWithLabel",
        "ITrainerInput"
      ],
      "OutputKind": [
        "IRegressionOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Trainers.StochasticDualCoordinateAscentBinaryClassifier",
      "Desc": "Train an SDCA binary model.",
      "FriendlyName": "Fast Linear (SA-SDCA)",
      "ShortName": "SDCA",
      "Inputs": [
        {
          "Name": "L2Const",
          "Type": "Float",
          "Desc": "L2 regularizer constant. By default the l2 constant is automatically inferred based on data set.",
          "Aliases": [
            "l2"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": true,
          "Default": null,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              "<Auto>",
              1E-07,
              1E-06,
              1E-05,
              0.0001,
              0.001,
              0.01
            ]
          }
        },
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "L1Threshold",
          "Type": "Float",
          "Desc": "L1 soft threshold (L1/L2). Note that it is easier to control and sweep using the threshold parameter than the raw L1-regularizer constant. By default the l1 threshold is automatically inferred based on data set.",
          "Aliases": [
            "l1"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": true,
          "Default": null,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              "<Auto>",
              0.0,
              0.25,
              0.5,
              0.75,
              1.0
            ]
          }
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "LossFunction",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "SDCAClassificationLossFunction"
          },
          "Desc": "Loss Function",
          "Aliases": [
            "loss"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": {
            "Name": "LogLoss"
          }
        },
        {
          "Name": "NumThreads",
          "Type": "Int",
          "Desc": "Degree of lock-free parallelism. Defaults to automatic. Determinism not guaranteed.",
          "Aliases": [
            "nt",
            "t",
            "threads"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "PositiveInstanceWeight",
          "Type": "Float",
          "Desc": "Apply weight to the positive class, for imbalanced data",
          "Aliases": [
            "piw"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1.0
        },
        {
          "Name": "Calibrator",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "CalibratorTrainer"
          },
          "Desc": "The calibrator kind to apply to the predictor. Specify null for no calibration",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": {
            "Name": "PlattCalibrator"
          }
        },
        {
          "Name": "MaxCalibrationExamples",
          "Type": "Int",
          "Desc": "The maximum number of examples to use when training the calibrator",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1000000
        },
        {
          "Name": "ConvergenceTolerance",
          "Type": "Float",
          "Desc": "The tolerance for the ratio between duality gap and primal loss for convergence checking.",
          "Aliases": [
            "tol"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.1,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              0.001,
              0.01,
              0.1,
              0.2
            ]
          }
        },
        {
          "Name": "MaxIterations",
          "Type": "Int",
          "Desc": "Maximum number of iterations; set to 1 to simulate online learning. Defaults to automatic.",
          "Aliases": [
            "iter"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              "<Auto>",
              10,
              20,
              100
            ]
          }
        },
        {
          "Name": "Shuffle",
          "Type": "Bool",
          "Desc": "Shuffle data every epoch?",
          "Aliases": [
            "shuf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              false,
              true
            ]
          }
        },
        {
          "Name": "CheckFrequency",
          "Type": "Int",
          "Desc": "Convergence check frequency (in terms of number of iterations). Set as negative or zero for not checking at all. If left blank, it defaults to check after every 'numThreads' iterations.",
          "Aliases": [
            "checkFreq"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "BiasLearningRate",
          "Type": "Float",
          "Desc": "The learning rate for adjusting bias from being regularized.",
          "Aliases": [
            "blr"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              0.0,
              0.01,
              0.1,
              1.0
            ]
          }
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ITrainerInputWithLabel",
        "ITrainerInput"
      ],
      "OutputKind": [
        "IBinaryClassificationOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Trainers.StochasticDualCoordinateAscentClassifier",
      "Desc": "Train an SDCA multi class model",
      "FriendlyName": "Fast Linear Multi-class Classification (SA-SDCA)",
      "ShortName": "sasdcamc",
      "Inputs": [
        {
          "Name": "L2Const",
          "Type": "Float",
          "Desc": "L2 regularizer constant. By default the l2 constant is automatically inferred based on data set.",
          "Aliases": [
            "l2"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": true,
          "Default": null,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              "<Auto>",
              1E-07,
              1E-06,
              1E-05,
              0.0001,
              0.001,
              0.01
            ]
          }
        },
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "L1Threshold",
          "Type": "Float",
          "Desc": "L1 soft threshold (L1/L2). Note that it is easier to control and sweep using the threshold parameter than the raw L1-regularizer constant. By default the l1 threshold is automatically inferred based on data set.",
          "Aliases": [
            "l1"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": true,
          "Default": null,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              "<Auto>",
              0.0,
              0.25,
              0.5,
              0.75,
              1.0
            ]
          }
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "LossFunction",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "SDCAClassificationLossFunction"
          },
          "Desc": "Loss Function",
          "Aliases": [
            "loss"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": {
            "Name": "LogLoss"
          }
        },
        {
          "Name": "NumThreads",
          "Type": "Int",
          "Desc": "Degree of lock-free parallelism. Defaults to automatic. Determinism not guaranteed.",
          "Aliases": [
            "nt",
            "t",
            "threads"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "ConvergenceTolerance",
          "Type": "Float",
          "Desc": "The tolerance for the ratio between duality gap and primal loss for convergence checking.",
          "Aliases": [
            "tol"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.1,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              0.001,
              0.01,
              0.1,
              0.2
            ]
          }
        },
        {
          "Name": "MaxIterations",
          "Type": "Int",
          "Desc": "Maximum number of iterations; set to 1 to simulate online learning. Defaults to automatic.",
          "Aliases": [
            "iter"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              "<Auto>",
              10,
              20,
              100
            ]
          }
        },
        {
          "Name": "Shuffle",
          "Type": "Bool",
          "Desc": "Shuffle data every epoch?",
          "Aliases": [
            "shuf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              false,
              true
            ]
          }
        },
        {
          "Name": "CheckFrequency",
          "Type": "Int",
          "Desc": "Convergence check frequency (in terms of number of iterations). Set as negative or zero for not checking at all. If left blank, it defaults to check after every 'numThreads' iterations.",
          "Aliases": [
            "checkFreq"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "BiasLearningRate",
          "Type": "Float",
          "Desc": "The learning rate for adjusting bias from being regularized.",
          "Aliases": [
            "blr"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              0.0,
              0.01,
              0.1,
              1.0
            ]
          }
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ITrainerInputWithLabel",
        "ITrainerInput"
      ],
      "OutputKind": [
        "IMulticlassClassificationOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Trainers.StochasticDualCoordinateAscentRegressor",
      "Desc": "Train an SDCA regression model",
      "FriendlyName": "Fast Linear Regression (SA-SDCA)",
      "ShortName": "sasdcar",
      "Inputs": [
        {
          "Name": "L2Const",
          "Type": "Float",
          "Desc": "L2 regularizer constant. By default the l2 constant is automatically inferred based on data set.",
          "Aliases": [
            "l2"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": true,
          "Default": null,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              "<Auto>",
              1E-07,
              1E-06,
              1E-05,
              0.0001,
              0.001,
              0.01
            ]
          }
        },
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "L1Threshold",
          "Type": "Float",
          "Desc": "L1 soft threshold (L1/L2). Note that it is easier to control and sweep using the threshold parameter than the raw L1-regularizer constant. By default the l1 threshold is automatically inferred based on data set.",
          "Aliases": [
            "l1"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": true,
          "Default": null,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              "<Auto>",
              0.0,
              0.25,
              0.5,
              0.75,
              1.0
            ]
          }
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "LossFunction",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "SDCARegressionLossFunction"
          },
          "Desc": "Loss Function",
          "Aliases": [
            "loss"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": {
            "Name": "SquaredLoss"
          }
        },
        {
          "Name": "NumThreads",
          "Type": "Int",
          "Desc": "Degree of lock-free parallelism. Defaults to automatic. Determinism not guaranteed.",
          "Aliases": [
            "nt",
            "t",
            "threads"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "ConvergenceTolerance",
          "Type": "Float",
          "Desc": "The tolerance for the ratio between duality gap and primal loss for convergence checking.",
          "Aliases": [
            "tol"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.01,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              0.001,
              0.01,
              0.1,
              0.2
            ]
          }
        },
        {
          "Name": "MaxIterations",
          "Type": "Int",
          "Desc": "Maximum number of iterations; set to 1 to simulate online learning. Defaults to automatic.",
          "Aliases": [
            "iter"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              "<Auto>",
              10,
              20,
              100
            ]
          }
        },
        {
          "Name": "Shuffle",
          "Type": "Bool",
          "Desc": "Shuffle data every epoch?",
          "Aliases": [
            "shuf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              false,
              true
            ]
          }
        },
        {
          "Name": "CheckFrequency",
          "Type": "Int",
          "Desc": "Convergence check frequency (in terms of number of iterations). Set as negative or zero for not checking at all. If left blank, it defaults to check after every 'numThreads' iterations.",
          "Aliases": [
            "checkFreq"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "BiasLearningRate",
          "Type": "Float",
          "Desc": "The learning rate for adjusting bias from being regularized.",
          "Aliases": [
            "blr"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1.0,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              0.0,
              0.01,
              0.1,
              1.0
            ]
          }
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ITrainerInputWithLabel",
        "ITrainerInput"
      ],
      "OutputKind": [
        "IRegressionOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Trainers.StochasticGradientDescentBinaryClassifier",
      "Desc": "Train an Hogwild SGD binary model.",
      "FriendlyName": "Hogwild SGD (binary)",
      "ShortName": "HogwildSGD",
      "Inputs": [
        {
          "Name": "TrainingData",
          "Type": "DataView",
          "Desc": "The data to be used for training",
          "Aliases": [
            "data"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "FeatureColumn",
          "Type": "String",
          "Desc": "Column to use for features",
          "Aliases": [
            "feat"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Features"
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "Column to use for example weight",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": "Weight"
        },
        {
          "Name": "NormalizeFeatures",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "No",
              "Warn",
              "Auto",
              "Yes"
            ]
          },
          "Desc": "Normalize option for the feature column",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Auto",
              "Memory",
              "Disk",
              "None"
            ]
          },
          "Desc": "Whether learner should cache input training data",
          "Aliases": [
            "cache"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": "Auto"
        },
        {
          "Name": "LossFunction",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "ClassificationLossFunction"
          },
          "Desc": "Loss Function",
          "Aliases": [
            "loss"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": {
            "Name": "LogLoss"
          }
        },
        {
          "Name": "L2Const",
          "Type": "Float",
          "Desc": "L2 regularizer constant",
          "Aliases": [
            "l2"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": false,
          "Default": 1E-06,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              1E-07,
              5E-07,
              1E-06,
              5E-06,
              1E-05
            ]
          }
        },
        {
          "Name": "NumThreads",
          "Type": "Int",
          "Desc": "Degree of lock-free parallelism. Defaults to automatic depending on data sparseness. Determinism not guaranteed.",
          "Aliases": [
            "nt",
            "t",
            "threads"
          ],
          "Required": false,
          "SortOrder": 50.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "ConvergenceTolerance",
          "Type": "Float",
          "Desc": "Exponential moving averaged improvement tolerance for convergence",
          "Aliases": [
            "tol"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.0001,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              0.01,
              0.001,
              0.0001,
              1E-05
            ]
          }
        },
        {
          "Name": "MaxIterations",
          "Type": "Int",
          "Desc": "Maximum number of iterations; set to 1 to simulate online learning.",
          "Aliases": [
            "iter"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 20,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              1,
              5,
              10,
              20
            ]
          }
        },
        {
          "Name": "InitLearningRate",
          "Type": "Float",
          "Desc": "Initial learning rate (only used by SGD)",
          "Aliases": [
            "ilr",
            "lr"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0.01
        },
        {
          "Name": "Shuffle",
          "Type": "Bool",
          "Desc": "Shuffle data every epoch?",
          "Aliases": [
            "shuf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true,
          "SweepRange": {
            "RangeType": "Discrete",
            "Values": [
              false,
              true
            ]
          }
        },
        {
          "Name": "PositiveInstanceWeight",
          "Type": "Float",
          "Desc": "Apply weight to the positive class, for imbalanced data",
          "Aliases": [
            "piw"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1.0
        },
        {
          "Name": "CheckFrequency",
          "Type": "Int",
          "Desc": "Convergence check frequency (in terms of number of iterations). Default equals number of threads",
          "Aliases": [
            "checkFreq"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "Calibrator",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "CalibratorTrainer"
          },
          "Desc": "The calibrator kind to apply to the predictor. Specify null for no calibration",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": {
            "Name": "PlattCalibrator"
          }
        },
        {
          "Name": "MaxCalibrationExamples",
          "Type": "Int",
          "Desc": "The maximum number of examples to use when training the calibrator",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1000000
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The trained model"
        }
      ],
      "InputKind": [
        "ITrainerInputWithWeight",
        "ITrainerInputWithLabel",
        "ITrainerInput"
      ],
      "OutputKind": [
        "IBinaryClassificationOutput",
        "ITrainerOutput"
      ]
    },
    {
      "Name": "Transforms.ApproximateBootstrapSampler",
      "Desc": "Approximate bootstrap sampling.",
      "FriendlyName": "Bootstrap Sample Transform",
      "ShortName": "BootstrapSample",
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Complement",
          "Type": "Bool",
          "Desc": "Whether this is the out-of-bag sample, that is, all those rows that are not selected by the transform.",
          "Aliases": [
            "comp"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "Seed",
          "Type": "UInt",
          "Desc": "The random seed. If unspecified random state will be instead derived from the environment.",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "ShuffleInput",
          "Type": "Bool",
          "Desc": "Whether we should attempt to shuffle the source data. By default on, but can be turned off for efficiency.",
          "Aliases": [
            "si"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "PoolSize",
          "Type": "Int",
          "Desc": "When shuffling the output, the number of output rows to keep in that pool. Note that shuffling of output is completely distinct from shuffling of input.",
          "Aliases": [
            "pool"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1000
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.BinaryPredictionScoreColumnsRenamer",
      "Desc": "For binary prediction, it renames the PredictedLabel and Score columns to include the name of the positive class.",
      "FriendlyName": "Rename Binary Prediction Score Columns",
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The predictor model used in scoring",
          "Required": true,
          "SortOrder": 2.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.BinNormalizer",
      "Desc": "The values are assigned into equidensity bins and a value is mapped to its bin_number/number_of_bins.",
      "FriendlyName": "Binning Normalizer",
      "ShortName": "Bin",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "NumBins",
                  "Type": "Int",
                  "Desc": "Max number of bins, power of 2 recommended",
                  "Aliases": [
                    "bins"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "FixZero",
                  "Type": "Bool",
                  "Desc": "Whether to map zero to zero, preserving sparsity",
                  "Aliases": [
                    "zero"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "MaxTrainingExamples",
                  "Type": "Int",
                  "Desc": "Max number of examples used to train the normalizer",
                  "Aliases": [
                    "maxtrain"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:src)",
          "Aliases": [
            "col"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "NumBins",
          "Type": "Int",
          "Desc": "Max number of bins, power of 2 recommended",
          "Aliases": [
            "bins"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1024
        },
        {
          "Name": "FixZero",
          "Type": "Bool",
          "Desc": "Whether to map zero to zero, preserving sparsity",
          "Aliases": [
            "zero"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "MaxTrainingExamples",
          "Type": "Int",
          "Desc": "Max number of examples used to train the normalizer",
          "Aliases": [
            "maxtrain"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1000000000
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.CategoricalHashOneHotVectorizer",
      "Desc": "Encodes the categorical variable with hash-based encoding",
      "FriendlyName": "Categorical Hash Transform",
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "OutputKind",
                  "Type": {
                    "Kind": "Enum",
                    "Values": [
                      "Bag",
                      "Ind",
                      "Key",
                      "Bin"
                    ]
                  },
                  "Desc": "Output kind: Bag (multi-set vector), Ind (indicator vector), or Key (index)",
                  "Aliases": [
                    "kind"
                  ],
                  "Required": false,
                  "SortOrder": 102.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "HashBits",
                  "Type": "Int",
                  "Desc": "The number of bits to hash into. Must be between 1 and 30, inclusive.",
                  "Aliases": [
                    "bits"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Seed",
                  "Type": "UInt",
                  "Desc": "Hashing seed",
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Ordered",
                  "Type": "Bool",
                  "Desc": "Whether the position of each term should be included in the hash",
                  "Aliases": [
                    "ord"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "InvertHash",
                  "Type": "Int",
                  "Desc": "Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.",
                  "Aliases": [
                    "ih"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:hashBits:src)",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "HashBits",
          "Type": "Int",
          "Desc": "Number of bits to hash into. Must be between 1 and 30, inclusive.",
          "Aliases": [
            "bits"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": 16
        },
        {
          "Name": "OutputKind",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Bag",
              "Ind",
              "Key",
              "Bin"
            ]
          },
          "Desc": "Output kind: Bag (multi-set vector), Ind (indicator vector), or Key (index)",
          "Aliases": [
            "kind"
          ],
          "Required": false,
          "SortOrder": 102.0,
          "IsNullable": false,
          "Default": "Bag"
        },
        {
          "Name": "Seed",
          "Type": "UInt",
          "Desc": "Hashing seed",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 314489979
        },
        {
          "Name": "Ordered",
          "Type": "Bool",
          "Desc": "Whether the position of each term should be included in the hash",
          "Aliases": [
            "ord"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "InvertHash",
          "Type": "Int",
          "Desc": "Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.",
          "Aliases": [
            "ih"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.CategoricalOneHotVectorizer",
      "Desc": "Encodes the categorical variable with one-hot encoding based on term dictionary",
      "FriendlyName": "Categorical Transform",
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "OutputKind",
                  "Type": {
                    "Kind": "Enum",
                    "Values": [
                      "Bag",
                      "Ind",
                      "Key",
                      "Bin"
                    ]
                  },
                  "Desc": "Output kind: Bag (multi-set vector), Ind (indicator vector), Key (index), or Binary encoded indicator vector",
                  "Aliases": [
                    "kind"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "MaxNumTerms",
                  "Type": "Int",
                  "Desc": "Maximum number of terms to keep when auto-training",
                  "Aliases": [
                    "max"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Term",
                  "Type": {
                    "Kind": "Array",
                    "ItemType": "String"
                  },
                  "Desc": "List of terms",
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Sort",
                  "Type": {
                    "Kind": "Enum",
                    "Values": [
                      "Occurrence",
                      "Value"
                    ]
                  },
                  "Desc": "How items should be ordered when vectorized. By default, they will be in the order encountered. If by value items are sorted according to their default comparison, e.g., text sorting will be case sensitive (e.g., 'A' then 'Z' then 'a').",
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "TextKeyValues",
                  "Type": "Bool",
                  "Desc": "Whether key value metadata should be text, regardless of the actual input type",
                  "Aliases": [
                    "textkv"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:src)",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "MaxNumTerms",
          "Type": "Int",
          "Desc": "Maximum number of terms to keep per column when auto-training",
          "Aliases": [
            "max"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": 1000000
        },
        {
          "Name": "OutputKind",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Bag",
              "Ind",
              "Key",
              "Bin"
            ]
          },
          "Desc": "Output kind: Bag (multi-set vector), Ind (indicator vector), or Key (index)",
          "Aliases": [
            "kind"
          ],
          "Required": false,
          "SortOrder": 102.0,
          "IsNullable": false,
          "Default": "Ind"
        },
        {
          "Name": "Term",
          "Type": {
            "Kind": "Array",
            "ItemType": "String"
          },
          "Desc": "List of terms",
          "Required": false,
          "SortOrder": 106.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "Sort",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Occurrence",
              "Value"
            ]
          },
          "Desc": "How items should be ordered when vectorized. By default, they will be in the order encountered. If by value items are sorted according to their default comparison, e.g., text sorting will be case sensitive (e.g., 'A' then 'Z' then 'a').",
          "Required": false,
          "SortOrder": 113.0,
          "IsNullable": false,
          "Default": "Occurrence"
        },
        {
          "Name": "TextKeyValues",
          "Type": "Bool",
          "Desc": "Whether key value metadata should be text, regardless of the actual input type",
          "Aliases": [
            "textkv"
          ],
          "Required": false,
          "SortOrder": 114.0,
          "IsNullable": false,
          "Default": true
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.CharacterTokenizer",
      "Desc": "Character-oriented tokenizer where text is considered a sequence of characters.",
      "FriendlyName": "Character Tokenizer Transform",
      "ShortName": "CharToken",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:src)",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "UseMarkerChars",
          "Type": "Bool",
          "Desc": "Whether to mark the beginning/end of each row/slot with start of text character (0x02)/end of text character (0x03)",
          "Aliases": [
            "mark"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": true
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.ColumnConcatenator",
      "Desc": "Concatenates two columns of the same item type.",
      "FriendlyName": "Concat Transform",
      "ShortName": "Concat",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": {
                    "Kind": "Array",
                    "ItemType": "String"
                  },
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:srcs)",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.ColumnCopier",
      "Desc": "Duplicates columns from the dataset",
      "FriendlyName": "Copy Columns Transform",
      "ShortName": "Copy",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:src)",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.ColumnDropper",
      "Desc": "Drops columns from the dataset",
      "FriendlyName": "Drop Columns Transform",
      "ShortName": "Drop",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": "String"
          },
          "Desc": "Column name to drop",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.ColumnSelector",
      "Desc": "Selects a set of columns, dropping all others",
      "FriendlyName": "Select Columns",
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": "String"
          },
          "Desc": "Column name to keep",
          "Aliases": [
            "col"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.ColumnTypeConverter",
      "Desc": "Converts a column to a different type, using standard conversions.",
      "FriendlyName": "Convert Transform",
      "ShortName": "Convert",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "ResultType",
                  "Type": {
                    "Kind": "Enum",
                    "Values": [
                      "I1",
                      "U1",
                      "I2",
                      "U2",
                      "I4",
                      "U4",
                      "I8",
                      "U8",
                      "R4",
                      "Num",
                      "R8",
                      "TX",
                      "Text",
                      "TXT",
                      "BL",
                      "Bool",
                      "TimeSpan",
                      "TS",
                      "DT",
                      "DateTime",
                      "DZ",
                      "DateTimeZone",
                      "UG",
                      "U16"
                    ]
                  },
                  "Desc": "The result type",
                  "Aliases": [
                    "type"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Range",
                  "Type": "String",
                  "Desc": "For a key column, this defines the range of values",
                  "Aliases": [
                    "key"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:type:src)",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "ResultType",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "I1",
              "U1",
              "I2",
              "U2",
              "I4",
              "U4",
              "I8",
              "U8",
              "R4",
              "Num",
              "R8",
              "TX",
              "Text",
              "TXT",
              "BL",
              "Bool",
              "TimeSpan",
              "TS",
              "DT",
              "DateTime",
              "DZ",
              "DateTimeZone",
              "UG",
              "U16"
            ]
          },
          "Desc": "The result type",
          "Aliases": [
            "type"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "Range",
          "Type": "String",
          "Desc": "For a key column, this defines the range of values",
          "Aliases": [
            "key"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.CombinerByContiguousGroupId",
      "Desc": "Groups values of a scalar column into a vector, by a contiguous group ID",
      "FriendlyName": "Group Transform",
      "ShortName": "Group",
      "Inputs": [
        {
          "Name": "GroupKey",
          "Type": {
            "Kind": "Array",
            "ItemType": "String"
          },
          "Desc": "Columns to group by",
          "Aliases": [
            "g"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": "String"
          },
          "Desc": "Columns to group together",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 2.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.ConditionalNormalizer",
      "Desc": "Normalize the columns only if needed",
      "FriendlyName": "Normalize If Needed",
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "FixZero",
                  "Type": "Bool",
                  "Desc": "Whether to map zero to zero, preserving sparsity",
                  "Aliases": [
                    "zero"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "MaxTrainingExamples",
                  "Type": "Int",
                  "Desc": "Max number of examples used to train the normalizer",
                  "Aliases": [
                    "maxtrain"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:src)",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "FixZero",
          "Type": "Bool",
          "Desc": "Whether to map zero to zero, preserving sparsity",
          "Aliases": [
            "zero"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "MaxTrainingExamples",
          "Type": "Int",
          "Desc": "Max number of examples used to train the normalizer",
          "Aliases": [
            "maxtrain"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1000000000
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ]
    },
    {
      "Name": "Transforms.DataCache",
      "Desc": "Caches using the specified cache option.",
      "FriendlyName": "Cache Data",
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Caching",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Memory",
              "Disk"
            ]
          },
          "Desc": "Caching strategy",
          "Required": true,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Memory"
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Dataset"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ]
    },
    {
      "Name": "Transforms.DatasetScorer",
      "Desc": "Score a dataset with a predictor model",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "The dataset to be scored",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The predictor model to apply to data",
          "Required": true,
          "SortOrder": 2.0,
          "IsNullable": false
        },
        {
          "Name": "Suffix",
          "Type": "String",
          "Desc": "Suffix to append to the score columns",
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": null
        }
      ],
      "Outputs": [
        {
          "Name": "ScoredData",
          "Type": "DataView",
          "Desc": "The scored dataset"
        },
        {
          "Name": "ScoringTransform",
          "Type": "TransformModel",
          "Desc": "The scoring transform"
        }
      ]
    },
    {
      "Name": "Transforms.DatasetTransformScorer",
      "Desc": "Score a dataset with a transform model",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "The dataset to be scored",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "TransformModel",
          "Type": "TransformModel",
          "Desc": "The transform model to apply to data",
          "Required": true,
          "SortOrder": 2.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "ScoredData",
          "Type": "DataView",
          "Desc": "The scored dataset"
        },
        {
          "Name": "ScoringTransform",
          "Type": "TransformModel",
          "Desc": "The scoring transform"
        }
      ]
    },
    {
      "Name": "Transforms.Dictionarizer",
      "Desc": "Converts input values (words, numbers, etc.) to index in a dictionary.",
      "FriendlyName": "Term Transform",
      "ShortName": "TermTransform",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "MaxNumTerms",
                  "Type": "Int",
                  "Desc": "Maximum number of terms to keep when auto-training",
                  "Aliases": [
                    "max"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Term",
                  "Type": {
                    "Kind": "Array",
                    "ItemType": "String"
                  },
                  "Desc": "List of terms",
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Sort",
                  "Type": {
                    "Kind": "Enum",
                    "Values": [
                      "Occurrence",
                      "Value"
                    ]
                  },
                  "Desc": "How items should be ordered when vectorized. By default, they will be in the order encountered. If by value items are sorted according to their default comparison, e.g., text sorting will be case sensitive (e.g., 'A' then 'Z' then 'a').",
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "TextKeyValues",
                  "Type": "Bool",
                  "Desc": "Whether key value metadata should be text, regardless of the actual input type",
                  "Aliases": [
                    "textkv"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:src)",
          "Aliases": [
            "col"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "MaxNumTerms",
          "Type": "Int",
          "Desc": "Maximum number of terms to keep per column when auto-training",
          "Aliases": [
            "max"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": 1000000
        },
        {
          "Name": "Term",
          "Type": {
            "Kind": "Array",
            "ItemType": "String"
          },
          "Desc": "List of terms",
          "Required": false,
          "SortOrder": 106.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "Sort",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Occurrence",
              "Value"
            ]
          },
          "Desc": "How items should be ordered when vectorized. By default, they will be in the order encountered. If by value items are sorted according to their default comparison, e.g., text sorting will be case sensitive (e.g., 'A' then 'Z' then 'a').",
          "Required": false,
          "SortOrder": 113.0,
          "IsNullable": false,
          "Default": "Occurrence"
        },
        {
          "Name": "TextKeyValues",
          "Type": "Bool",
          "Desc": "Whether key value metadata should be text, regardless of the actual input type",
          "Aliases": [
            "textkv"
          ],
          "Required": false,
          "SortOrder": 114.0,
          "IsNullable": false,
          "Default": false
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.FeatureCombiner",
      "Desc": "Combines all the features into one feature column.",
      "FriendlyName": "Feature Combiner",
      "ShortName": "fc",
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Features",
          "Type": {
            "Kind": "Array",
            "ItemType": "String"
          },
          "Desc": "Features",
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": null
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.FeatureSelectorByCount",
      "Desc": "Selects the slots for which the count of non-default values is greater than or equal to a threshold.",
      "FriendlyName": "Count Feature Selection Transform",
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": "String"
          },
          "Desc": "Columns to use for feature selection",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Count",
          "Type": "Int",
          "Desc": "If the count of non-default values for a slot is greater than or equal to this threshold, the slot is preserved",
          "Aliases": [
            "c"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": 1
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.FeatureSelectorByMutualInformation",
      "Desc": "Selects the top k slots across all specified columns ordered by their mutual information with the label column.",
      "FriendlyName": "Mutual Information Feature Selection Transform",
      "ShortName": "MIFeatureSelection",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": "String"
          },
          "Desc": "Columns to use for feature selection",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "SlotsInOutput",
          "Type": "Int",
          "Desc": "The maximum number of slots to preserve in output",
          "Aliases": [
            "topk",
            "numSlotsToKeep"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": 1000
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Column to use for labels",
          "Aliases": [
            "lab"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": "Label"
        },
        {
          "Name": "NumBins",
          "Type": "Int",
          "Desc": "Max number of bins for R4/R8 columns, power of 2 recommended",
          "Aliases": [
            "bins"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 256
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.GlobalContrastNormalizer",
      "Desc": "Performs a global contrast normalization on input values: Y = (s * X - M) / D, where s is a scale, M is mean and D is either L2 norm or standard deviation.",
      "FriendlyName": "Global Contrast Normalization Transform",
      "ShortName": "Gcn",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "UseStdDev",
                  "Type": "Bool",
                  "Desc": "Normalize by standard deviation rather than L2 norm",
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Scale",
                  "Type": "Float",
                  "Desc": "Scale features by this value",
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "SubMean",
                  "Type": "Bool",
                  "Desc": "Subtract mean from each value before normalizing",
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:src)",
          "Aliases": [
            "col"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "SubMean",
          "Type": "Bool",
          "Desc": "Subtract mean from each value before normalizing",
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "UseStdDev",
          "Type": "Bool",
          "Desc": "Normalize by standard deviation rather than L2 norm",
          "Aliases": [
            "useStd"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "Scale",
          "Type": "Float",
          "Desc": "Scale features by this value",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1.0
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.HashConverter",
      "Desc": "Converts column values into hashes. This transform accepts both numeric and text inputs, both single and vector-valued columns. This is a part of the Dracula transform.",
      "FriendlyName": "Hash Join Transform",
      "ShortName": "HashJoin",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "Join",
                  "Type": "Bool",
                  "Desc": "Whether the values need to be combined for a single hash",
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "CustomSlotMap",
                  "Type": "String",
                  "Desc": "Which slots should be combined together. Example: 0,3,5;0,1;3;2,1,0. Overrides 'join'.",
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "HashBits",
                  "Type": "Int",
                  "Desc": "Number of bits to hash into. Must be between 1 and 31, inclusive.",
                  "Aliases": [
                    "bits"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Seed",
                  "Type": "UInt",
                  "Desc": "Hashing seed",
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Ordered",
                  "Type": "Bool",
                  "Desc": "Whether the position of each term should be included in the hash",
                  "Aliases": [
                    "ord"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:src)",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "HashBits",
          "Type": "Int",
          "Desc": "Number of bits to hash into. Must be between 1 and 31, inclusive.",
          "Aliases": [
            "bits"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": 31
        },
        {
          "Name": "Join",
          "Type": "Bool",
          "Desc": "Whether the values need to be combined for a single hash",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "Seed",
          "Type": "UInt",
          "Desc": "Hashing seed",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 314489979
        },
        {
          "Name": "Ordered",
          "Type": "Bool",
          "Desc": "Whether the position of each term should be included in the hash",
          "Aliases": [
            "ord"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.KeyToTextConverter",
      "Desc": "KeyToValueTransform utilizes KeyValues metadata to map key indices to the corresponding values in the KeyValues metadata.",
      "FriendlyName": "Key To Value Transform",
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:src)",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.LabelColumnKeyBooleanConverter",
      "Desc": "Transforms the label to either key or bool (if needed) to make it suitable for classification.",
      "FriendlyName": "Prepare Classification Label",
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "The label column",
          "Required": true,
          "SortOrder": 2.0,
          "IsNullable": false
        },
        {
          "Name": "TextKeyValues",
          "Type": "Bool",
          "Desc": "Convert the key values to text",
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": true
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.LabelIndicator",
      "Desc": "Label remapper used by OVA",
      "FriendlyName": "LabelIndicator",
      "ShortName": "LabelIndictator",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "ClassIndex",
                  "Type": "Int",
                  "Desc": "The positive example class for binary classification.",
                  "Aliases": [
                    "index"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:src)",
          "Aliases": [
            "col"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "ClassIndex",
          "Type": "Int",
          "Desc": "Label of the positive class.",
          "Aliases": [
            "index"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.LabelToFloatConverter",
      "Desc": "Transforms the label to float to make it suitable for regression.",
      "FriendlyName": "Prepare Regression Label",
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "The label column",
          "Required": true,
          "SortOrder": 2.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.LogMeanVarianceNormalizer",
      "Desc": "Normalizes the data based on the computed mean and variance of the logarithm of the data.",
      "FriendlyName": "LogMeanVar Normalizer",
      "ShortName": "LogMeanVar",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "MaxTrainingExamples",
                  "Type": "Int",
                  "Desc": "Max number of examples used to train the normalizer",
                  "Aliases": [
                    "maxtrain"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:src)",
          "Aliases": [
            "col"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "UseCdf",
          "Type": "Bool",
          "Desc": "Whether to use CDF as the output",
          "Aliases": [
            "cdf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "MaxTrainingExamples",
          "Type": "Int",
          "Desc": "Max number of examples used to train the normalizer",
          "Aliases": [
            "maxtrain"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1000000000
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.LpNormalizer",
      "Desc": "Normalize vectors (rows) individually by rescaling them to unit norm (L2, L1 or LInf). Performs the following operation on a vector X: Y = (X - M) / D, where M is mean and D is either L2 norm, L1 norm or LInf norm.",
      "FriendlyName": "Lp-Norm Normalizer",
      "ShortName": "lpnorm",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "NormKind",
                  "Type": {
                    "Kind": "Enum",
                    "Values": [
                      "L2Norm",
                      "StdDev",
                      "L1Norm",
                      "LInf"
                    ]
                  },
                  "Desc": "The norm to use to normalize each sample",
                  "Aliases": [
                    "norm"
                  ],
                  "Required": false,
                  "SortOrder": 1.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "SubMean",
                  "Type": "Bool",
                  "Desc": "Subtract mean from each value before normalizing",
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:src)",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "NormKind",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "L2Norm",
              "StdDev",
              "L1Norm",
              "LInf"
            ]
          },
          "Desc": "The norm to use to normalize each sample",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": "L2Norm"
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "SubMean",
          "Type": "Bool",
          "Desc": "Subtract mean from each value before normalizing",
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": false
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.ManyHeterogeneousModelCombiner",
      "Desc": "Combines a sequence of TransformModels and a PredictorModel into a single PredictorModel.",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "TransformModels",
          "Type": {
            "Kind": "Array",
            "ItemType": "TransformModel"
          },
          "Desc": "Transform model",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "Predictor model",
          "Required": true,
          "SortOrder": 2.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "Predictor model"
        }
      ]
    },
    {
      "Name": "Transforms.MeanVarianceNormalizer",
      "Desc": "Normalizes the data based on the computed mean and variance of the data.",
      "FriendlyName": "MeanVar Normalizer",
      "ShortName": "MeanVar",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "FixZero",
                  "Type": "Bool",
                  "Desc": "Whether to map zero to zero, preserving sparsity",
                  "Aliases": [
                    "zero"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "MaxTrainingExamples",
                  "Type": "Int",
                  "Desc": "Max number of examples used to train the normalizer",
                  "Aliases": [
                    "maxtrain"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:src)",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "UseCdf",
          "Type": "Bool",
          "Desc": "Whether to use CDF as the output",
          "Aliases": [
            "cdf"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "FixZero",
          "Type": "Bool",
          "Desc": "Whether to map zero to zero, preserving sparsity",
          "Aliases": [
            "zero"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "MaxTrainingExamples",
          "Type": "Int",
          "Desc": "Max number of examples used to train the normalizer",
          "Aliases": [
            "maxtrain"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1000000000
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.MinMaxNormalizer",
      "Desc": "Normalizes the data based on the observed minimum and maximum values of the data.",
      "FriendlyName": "Min-Max Normalizer",
      "ShortName": "MinMax",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "FixZero",
                  "Type": "Bool",
                  "Desc": "Whether to map zero to zero, preserving sparsity",
                  "Aliases": [
                    "zero"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "MaxTrainingExamples",
                  "Type": "Int",
                  "Desc": "Max number of examples used to train the normalizer",
                  "Aliases": [
                    "maxtrain"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:src)",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "FixZero",
          "Type": "Bool",
          "Desc": "Whether to map zero to zero, preserving sparsity",
          "Aliases": [
            "zero"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "MaxTrainingExamples",
          "Type": "Int",
          "Desc": "Max number of examples used to train the normalizer",
          "Aliases": [
            "maxtrain"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1000000000
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.MissingValueHandler",
      "Desc": "Handle missing values by replacing them with either the default value or the mean/min/max value (for non-text columns only). An indicator column can optionally be concatenated, if theinput column type is numeric.",
      "FriendlyName": "NA Handle Transform",
      "ShortName": "NAHandle",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "Kind",
                  "Type": {
                    "Kind": "Enum",
                    "Values": [
                      "Default",
                      "Def",
                      "DefaultValue",
                      "Mean",
                      "Minimum",
                      "Min",
                      "Maximum",
                      "Max"
                    ]
                  },
                  "Desc": "The replacement method to utilize",
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "ImputeBySlot",
                  "Type": "Bool",
                  "Desc": "Whether to impute values by slot",
                  "Aliases": [
                    "slot"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "ConcatIndicator",
                  "Type": "Bool",
                  "Desc": "Whether or not to concatenate an indicator vector column to the value column",
                  "Aliases": [
                    "ind"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:rep:src)",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "ReplaceWith",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Default",
              "Def",
              "DefaultValue",
              "Mean",
              "Minimum",
              "Min",
              "Maximum",
              "Max"
            ]
          },
          "Desc": "The replacement method to utilize",
          "Aliases": [
            "kind"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": "Def"
        },
        {
          "Name": "ImputeBySlot",
          "Type": "Bool",
          "Desc": "Whether to impute values by slot",
          "Aliases": [
            "slot"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "Concat",
          "Type": "Bool",
          "Desc": "Whether or not to concatenate an indicator vector column to the value column",
          "Aliases": [
            "ind"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.MissingValueIndicator",
      "Desc": "Create a boolean output column with the same number of slots as the input column, where the output value is true if the value in the input column is missing.",
      "FriendlyName": "NA Indicator Transform",
      "ShortName": "NAInd",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:src)",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.MissingValuesDropper",
      "Desc": "Removes NAs from vector columns.",
      "FriendlyName": "NA Drop Transform",
      "ShortName": "NADrop",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "Columns to drop the NAs for",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.MissingValuesRowDropper",
      "Desc": "Filters out rows that contain missing values.",
      "FriendlyName": "NA Filter",
      "ShortName": "NAFilter",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": "String"
          },
          "Desc": "Column",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Complement",
          "Type": "Bool",
          "Desc": "If true, keep only rows that contain NA values, and filter the rest.",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.MissingValueSubstitutor",
      "Desc": "Create an output column of the same type and size of the input column, where missing values are replaced with either the default value or the mean/min/max value (for non-text columns only).",
      "FriendlyName": "NA Replace Transform",
      "ShortName": "NARep",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "ReplacementString",
                  "Type": "String",
                  "Desc": "Replacement value for NAs (uses default value if not given)",
                  "Aliases": [
                    "rep"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Kind",
                  "Type": {
                    "Kind": "Enum",
                    "Values": [
                      "Default",
                      "DefaultValue",
                      "Def",
                      "Mean",
                      "Min",
                      "Minimum",
                      "Max",
                      "Maximum",
                      "SpecifiedValue",
                      "Val",
                      "Value"
                    ]
                  },
                  "Desc": "The replacement method to utilize",
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Slot",
                  "Type": "Bool",
                  "Desc": "Whether to impute values by slot",
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:rep:src)",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "ReplacementKind",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Default",
              "DefaultValue",
              "Def",
              "Mean",
              "Min",
              "Minimum",
              "Max",
              "Maximum",
              "SpecifiedValue",
              "Val",
              "Value"
            ]
          },
          "Desc": "The replacement method to utilize",
          "Aliases": [
            "kind"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": "Def"
        },
        {
          "Name": "ImputeBySlot",
          "Type": "Bool",
          "Desc": "Whether to impute values by slot",
          "Aliases": [
            "slot"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.ModelCombiner",
      "Desc": "Combines a sequence of TransformModels into a single model",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Models",
          "Type": {
            "Kind": "Array",
            "ItemType": "TransformModel"
          },
          "Desc": "Input models",
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": null
        }
      ],
      "Outputs": [
        {
          "Name": "OutputModel",
          "Type": "TransformModel",
          "Desc": "Combined model"
        }
      ]
    },
    {
      "Name": "Transforms.NGramTranslator",
      "Desc": "Produces a bag of counts of ngrams (sequences of consecutive values of length 1-n) in a given vector of keys. It does so by building a dictionary of ngrams and using the id in the dictionary as the index in the bag.",
      "FriendlyName": "NGram Transform",
      "ShortName": "NgramTransform",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "NgramLength",
                  "Type": "Int",
                  "Desc": "Maximum ngram length",
                  "Aliases": [
                    "ngram"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "AllLengths",
                  "Type": "Bool",
                  "Desc": "Whether to include all ngram lengths up to NgramLength or only NgramLength",
                  "Aliases": [
                    "all"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "SkipLength",
                  "Type": "Int",
                  "Desc": "Maximum number of tokens to skip when constructing an ngram",
                  "Aliases": [
                    "skips"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "MaxNumTerms",
                  "Type": {
                    "Kind": "Array",
                    "ItemType": "Int"
                  },
                  "Desc": "Maximum number of ngrams to store in the dictionary",
                  "Aliases": [
                    "max"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Weighting",
                  "Type": {
                    "Kind": "Enum",
                    "Values": [
                      "Tf",
                      "Idf",
                      "TfIdf"
                    ]
                  },
                  "Desc": "Statistical measure used to evaluate how important a word is to a document in a corpus",
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:src)",
          "Aliases": [
            "col"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "NgramLength",
          "Type": "Int",
          "Desc": "Maximum ngram length",
          "Aliases": [
            "ngram"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 2
        },
        {
          "Name": "AllLengths",
          "Type": "Bool",
          "Desc": "Whether to store all ngram lengths up to ngramLength, or only ngramLength",
          "Aliases": [
            "all"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "SkipLength",
          "Type": "Int",
          "Desc": "Maximum number of tokens to skip when constructing an ngram",
          "Aliases": [
            "skips"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0
        },
        {
          "Name": "MaxNumTerms",
          "Type": {
            "Kind": "Array",
            "ItemType": "Int"
          },
          "Desc": "Maximum number of ngrams to store in the dictionary",
          "Aliases": [
            "max"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": [
            10000000
          ]
        },
        {
          "Name": "Weighting",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Tf",
              "Idf",
              "TfIdf"
            ]
          },
          "Desc": "The weighting criteria",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": "Tf"
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.NoOperation",
      "Desc": "Does nothing.",
      "FriendlyName": "No Op",
      "ShortName": "Nop",
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.OptionalColumnCreator",
      "Desc": "If the source column does not exist after deserialization, create a column with the right type and default values.",
      "FriendlyName": "Optional Column Transform",
      "ShortName": "optional",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": "String"
          },
          "Desc": "New column definition(s)",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.PcaCalculator",
      "Desc": "Train an PCA Anomaly model.",
      "FriendlyName": "Principal Component Analysis Transform",
      "ShortName": "Pca",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "WeightColumn",
                  "Type": "String",
                  "Desc": "The name of the weight column",
                  "Aliases": [
                    "weight"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Rank",
                  "Type": "Int",
                  "Desc": "The number of components in the PCA",
                  "Aliases": [
                    "k"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Oversampling",
                  "Type": "Int",
                  "Desc": "Oversampling parameter for randomized PCA training",
                  "Aliases": [
                    "over"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Center",
                  "Type": "Bool",
                  "Desc": "If enabled, data is centered to be zero mean",
                  "Aliases": [
                    "center"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Seed",
                  "Type": "Int",
                  "Desc": "The seed for random number generation",
                  "Aliases": [
                    "seed"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:src)",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "WeightColumn",
          "Type": "String",
          "Desc": "The name of the weight column",
          "Aliases": [
            "weight"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "Rank",
          "Type": "Int",
          "Desc": "The number of components in the PCA",
          "Aliases": [
            "k"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 20
        },
        {
          "Name": "Oversampling",
          "Type": "Int",
          "Desc": "Oversampling parameter for randomized PCA training",
          "Aliases": [
            "over"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 20
        },
        {
          "Name": "Center",
          "Type": "Bool",
          "Desc": "If enabled, data is centered to be zero mean",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "Seed",
          "Type": "Int",
          "Desc": "The seed for random number generation",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 0
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.PredictedLabelColumnOriginalValueConverter",
      "Desc": "Transforms a predicted label column to its original values, unless it is of type bool.",
      "FriendlyName": "Convert Predicted Label",
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "PredictedLabelColumn",
          "Type": "String",
          "Desc": "The predicted label column",
          "Required": true,
          "SortOrder": 2.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.RandomNumberGenerator",
      "Desc": "Adds a column with a generated number sequence.",
      "FriendlyName": "Generate Number Transform",
      "ShortName": "Generate",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "UseCounter",
                  "Type": "Bool",
                  "Desc": "Use an auto-incremented integer starting at zero instead of a random number",
                  "Aliases": [
                    "cnt"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Seed",
                  "Type": "UInt",
                  "Desc": "The random seed",
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:seed)",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "UseCounter",
          "Type": "Bool",
          "Desc": "Use an auto-incremented integer starting at zero instead of a random number",
          "Aliases": [
            "cnt"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "Seed",
          "Type": "UInt",
          "Desc": "The random seed",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 42
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.RowRangeFilter",
      "Desc": "Filters a dataview on a column of type Single, Double or Key (contiguous). Keeps the values that are in the specified min/max range. NaNs are always filtered out. If the input is a Key type, the min/max are considered percentages of the number of values.",
      "FriendlyName": "Range Filter",
      "ShortName": "RangeFilter",
      "Inputs": [
        {
          "Name": "Column",
          "Type": "String",
          "Desc": "Column",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Min",
          "Type": "Float",
          "Desc": "Minimum value (0 to 1 for key types)",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "Max",
          "Type": "Float",
          "Desc": "Maximum value (0 to 1 for key types)",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "Complement",
          "Type": "Bool",
          "Desc": "If true, keep the values that fall outside the range.",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "IncludeMin",
          "Type": "Bool",
          "Desc": "If true, include in the range the values that are equal to min.",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "IncludeMax",
          "Type": "Bool",
          "Desc": "If true, include in the range the values that are equal to max.",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": true,
          "Default": null
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.RowSkipAndTakeFilter",
      "Desc": "Allows limiting input to a subset of rows at an optional offset.  Can be used to implement data paging.",
      "FriendlyName": "Skip and Take Filter",
      "ShortName": "SkipTake",
      "Inputs": [
        {
          "Name": "Skip",
          "Type": "Int",
          "Desc": "Number of items to skip",
          "Aliases": [
            "s"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": true,
          "Default": null
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Take",
          "Type": "Int",
          "Desc": "Number of items to take",
          "Aliases": [
            "t"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": true,
          "Default": null
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.RowSkipFilter",
      "Desc": "Allows limiting input to a subset of rows by skipping a number of rows.",
      "FriendlyName": "Skip Filter",
      "ShortName": "Skip",
      "Inputs": [
        {
          "Name": "Count",
          "Type": "Int",
          "Desc": "Number of items to skip",
          "Aliases": [
            "c",
            "n",
            "s"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": 0
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.RowTakeFilter",
      "Desc": "Allows limiting input to a subset of rows by taking N first rows.",
      "FriendlyName": "Take Filter",
      "ShortName": "Take",
      "Inputs": [
        {
          "Name": "Count",
          "Type": "Int",
          "Desc": "Number of items to take",
          "Aliases": [
            "c",
            "n",
            "t"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": 9223372036854775807
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.ScoreColumnSelector",
      "Desc": "Selects only the last score columns and the extra columns specified in the arguments.",
      "FriendlyName": "Choose Columns By Index",
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "ExtraColumns",
          "Type": {
            "Kind": "Array",
            "ItemType": "String"
          },
          "Desc": "Extra columns to write",
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": null
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.Scorer",
      "Desc": "Turn the predictor model into a transform model",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "The predictor model to turn into a transform",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "ScoredData",
          "Type": "DataView",
          "Desc": "The scored dataset"
        },
        {
          "Name": "ScoringTransform",
          "Type": "TransformModel",
          "Desc": "The scoring transform"
        }
      ]
    },
    {
      "Name": "Transforms.Segregator",
      "Desc": "Un-groups vector columns into sequences of rows, inverse of Group transform",
      "FriendlyName": "Un-group Transform",
      "ShortName": "Ungroup",
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": "String"
          },
          "Desc": "Columns to unroll, or 'pivot'",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 150.0,
          "IsNullable": false
        },
        {
          "Name": "Mode",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Inner",
              "Outer",
              "First"
            ]
          },
          "Desc": "Specifies how to unroll multiple pivot columns of different size.",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": "Inner"
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.SentimentAnalyzer",
      "Desc": "Uses a pretrained sentiment model to score input strings",
      "FriendlyName": "Sentiment Analyzing Transform",
      "ShortName": "Senti",
      "Inputs": [
        {
          "Name": "Source",
          "Type": "String",
          "Desc": "Name of the source column.",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Name",
          "Type": "String",
          "Desc": "Name of the new column.",
          "Aliases": [
            "dst"
          ],
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": null
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.SupervisedBinNormalizer",
      "Desc": "Similar to BinNormalizer, but calculates bins based on correlation with the label column, not equi-density. The new value is bin_number / number_of_bins.",
      "FriendlyName": "Supervised Binning Normalizer",
      "ShortName": "SupBin",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "NumBins",
                  "Type": "Int",
                  "Desc": "Max number of bins, power of 2 recommended",
                  "Aliases": [
                    "bins"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "FixZero",
                  "Type": "Bool",
                  "Desc": "Whether to map zero to zero, preserving sparsity",
                  "Aliases": [
                    "zero"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "MaxTrainingExamples",
                  "Type": "Int",
                  "Desc": "Max number of examples used to train the normalizer",
                  "Aliases": [
                    "maxtrain"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:src)",
          "Aliases": [
            "col"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "LabelColumn",
          "Type": "String",
          "Desc": "Label column for supervised binning",
          "Aliases": [
            "label",
            "lab"
          ],
          "Required": true,
          "SortOrder": 150.0,
          "IsNullable": false
        },
        {
          "Name": "MinBinSize",
          "Type": "Int",
          "Desc": "Minimum number of examples per bin",
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 10
        },
        {
          "Name": "NumBins",
          "Type": "Int",
          "Desc": "Max number of bins, power of 2 recommended",
          "Aliases": [
            "bins"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1024
        },
        {
          "Name": "FixZero",
          "Type": "Bool",
          "Desc": "Whether to map zero to zero, preserving sparsity",
          "Aliases": [
            "zero"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "MaxTrainingExamples",
          "Type": "Int",
          "Desc": "Max number of examples used to train the normalizer",
          "Aliases": [
            "maxtrain"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": 1000000000
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.TextFeaturizer",
      "Desc": "A transform that turns a collection of text documents into numerical feature vectors. The feature vectors are normalized counts of (word and/or character) ngrams in a given tokenized text.",
      "FriendlyName": "Text Transform",
      "ShortName": "Text",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Struct",
            "Fields": [
              {
                "Name": "Name",
                "Type": "String",
                "Desc": "Name of the new column",
                "Aliases": [
                  "name"
                ],
                "Required": false,
                "SortOrder": 150.0,
                "IsNullable": false,
                "Default": null
              },
              {
                "Name": "Source",
                "Type": {
                  "Kind": "Array",
                  "ItemType": "String"
                },
                "Desc": "Name of the source column",
                "Aliases": [
                  "src"
                ],
                "Required": false,
                "SortOrder": 150.0,
                "IsNullable": false,
                "Default": null
              }
            ]
          },
          "Desc": "New column definition (optional form: name:srcs).",
          "Aliases": [
            "col"
          ],
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Language",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "English",
              "French",
              "German",
              "Dutch",
              "Italian",
              "Spanish",
              "Japanese"
            ]
          },
          "Desc": "Dataset language or 'AutoDetect' to detect language per row.",
          "Aliases": [
            "lang"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": "English"
        },
        {
          "Name": "StopWordsRemover",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "StopWordsRemover"
          },
          "Desc": "Stopwords remover.",
          "Aliases": [
            "remover"
          ],
          "Required": false,
          "SortOrder": 4.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "TextCase",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Lower",
              "Upper",
              "None"
            ]
          },
          "Desc": "Casing text using the rules of the invariant culture.",
          "Aliases": [
            "case"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": "Lower"
        },
        {
          "Name": "KeepDiacritics",
          "Type": "Bool",
          "Desc": "Whether to keep diacritical marks or remove them.",
          "Aliases": [
            "diac"
          ],
          "Required": false,
          "SortOrder": 6.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "KeepPunctuations",
          "Type": "Bool",
          "Desc": "Whether to keep punctuation marks or remove them.",
          "Aliases": [
            "punc"
          ],
          "Required": false,
          "SortOrder": 7.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "KeepNumbers",
          "Type": "Bool",
          "Desc": "Whether to keep numbers or remove them.",
          "Aliases": [
            "num"
          ],
          "Required": false,
          "SortOrder": 8.0,
          "IsNullable": false,
          "Default": true
        },
        {
          "Name": "OutputTokens",
          "Type": "Bool",
          "Desc": "Whether to output the transformed text tokens as an additional column.",
          "Aliases": [
            "tokens",
            "showtext",
            "showTransformedText"
          ],
          "Required": false,
          "SortOrder": 9.0,
          "IsNullable": false,
          "Default": false
        },
        {
          "Name": "Dictionary",
          "Type": {
            "Kind": "Struct",
            "Fields": [
              {
                "Name": "Term",
                "Type": {
                  "Kind": "Array",
                  "ItemType": "String"
                },
                "Desc": "List of terms",
                "Required": false,
                "SortOrder": 1.0,
                "IsNullable": false,
                "Default": null
              },
              {
                "Name": "Sort",
                "Type": {
                  "Kind": "Enum",
                  "Values": [
                    "Occurrence",
                    "Value"
                  ]
                },
                "Desc": "How items should be ordered when vectorized. By default, they will be in the order encountered. If by value items are sorted according to their default comparison, e.g., text sorting will be case sensitive (e.g., 'A' then 'Z' then 'a').",
                "Required": false,
                "SortOrder": 5.0,
                "IsNullable": false,
                "Default": "Occurrence"
              },
              {
                "Name": "DropUnknowns",
                "Type": "Bool",
                "Desc": "Drop unknown terms instead of mapping them to NA term.",
                "Aliases": [
                  "dropna"
                ],
                "Required": false,
                "SortOrder": 6.0,
                "IsNullable": false,
                "Default": false
              }
            ]
          },
          "Desc": "A dictionary of whitelisted terms.",
          "Aliases": [
            "dict"
          ],
          "Required": false,
          "SortOrder": 10.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "WordFeatureExtractor",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "NgramExtractor"
          },
          "Desc": "Ngram feature extractor to use for words (WordBag/WordHashBag).",
          "Aliases": [
            "wordExtractor"
          ],
          "Required": false,
          "SortOrder": 11.0,
          "IsNullable": false,
          "Default": {
            "Name": "NGram",
            "Settings": {
              "MaxNumTerms": [
                10000000
              ]
            }
          }
        },
        {
          "Name": "CharFeatureExtractor",
          "Type": {
            "Kind": "Component",
            "ComponentKind": "NgramExtractor"
          },
          "Desc": "Ngram feature extractor to use for characters (WordBag/WordHashBag).",
          "Aliases": [
            "charExtractor"
          ],
          "Required": false,
          "SortOrder": 12.0,
          "IsNullable": false,
          "Default": {
            "Name": "NGram",
            "Settings": {
              "NgramLength": 3,
              "AllLengths": false,
              "MaxNumTerms": [
                10000000
              ]
            }
          }
        },
        {
          "Name": "VectorNormalizer",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "None",
              "L1",
              "L2",
              "LInf"
            ]
          },
          "Desc": "Normalize vectors (rows) individually by rescaling them to unit norm.",
          "Aliases": [
            "norm"
          ],
          "Required": false,
          "SortOrder": 13.0,
          "IsNullable": false,
          "Default": "L2"
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.TextToKeyConverter",
      "Desc": "Converts input values (words, numbers, etc.) to index in a dictionary.",
      "FriendlyName": "Term Transform",
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "MaxNumTerms",
                  "Type": "Int",
                  "Desc": "Maximum number of terms to keep when auto-training",
                  "Aliases": [
                    "max"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Term",
                  "Type": {
                    "Kind": "Array",
                    "ItemType": "String"
                  },
                  "Desc": "List of terms",
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Sort",
                  "Type": {
                    "Kind": "Enum",
                    "Values": [
                      "Occurrence",
                      "Value"
                    ]
                  },
                  "Desc": "How items should be ordered when vectorized. By default, they will be in the order encountered. If by value items are sorted according to their default comparison, e.g., text sorting will be case sensitive (e.g., 'A' then 'Z' then 'a').",
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "TextKeyValues",
                  "Type": "Bool",
                  "Desc": "Whether key value metadata should be text, regardless of the actual input type",
                  "Aliases": [
                    "textkv"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": true,
                  "Default": null
                },
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s) (optional form: name:src)",
          "Aliases": [
            "col"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "MaxNumTerms",
          "Type": "Int",
          "Desc": "Maximum number of terms to keep per column when auto-training",
          "Aliases": [
            "max"
          ],
          "Required": false,
          "SortOrder": 5.0,
          "IsNullable": false,
          "Default": 1000000
        },
        {
          "Name": "Term",
          "Type": {
            "Kind": "Array",
            "ItemType": "String"
          },
          "Desc": "List of terms",
          "Required": false,
          "SortOrder": 106.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "Sort",
          "Type": {
            "Kind": "Enum",
            "Values": [
              "Occurrence",
              "Value"
            ]
          },
          "Desc": "How items should be ordered when vectorized. By default, they will be in the order encountered. If by value items are sorted according to their default comparison, e.g., text sorting will be case sensitive (e.g., 'A' then 'Z' then 'a').",
          "Required": false,
          "SortOrder": 113.0,
          "IsNullable": false,
          "Default": "Occurrence"
        },
        {
          "Name": "TextKeyValues",
          "Type": "Bool",
          "Desc": "Whether key value metadata should be text, regardless of the actual input type",
          "Aliases": [
            "textkv"
          ],
          "Required": false,
          "SortOrder": 114.0,
          "IsNullable": false,
          "Default": false
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.TrainTestDatasetSplitter",
      "Desc": "Split the dataset into train and test sets",
      "FriendlyName": "Dataset Train-Test Split",
      "ShortName": null,
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "Fraction",
          "Type": "Float",
          "Desc": "Fraction of training data",
          "Required": false,
          "SortOrder": 2.0,
          "IsNullable": false,
          "Default": 0.8
        },
        {
          "Name": "StratificationColumn",
          "Type": "String",
          "Desc": "Stratification column",
          "Aliases": [
            "strat"
          ],
          "Required": false,
          "SortOrder": 3.0,
          "IsNullable": false,
          "Default": null
        }
      ],
      "Outputs": [
        {
          "Name": "TrainData",
          "Type": "DataView",
          "Desc": "Training data"
        },
        {
          "Name": "TestData",
          "Type": "DataView",
          "Desc": "Testing data"
        }
      ]
    },
    {
      "Name": "Transforms.TreeLeafFeaturizer",
      "Desc": "Trains a tree ensemble, or loads it from a file, then maps a numeric feature vector to three outputs: 1. A vector containing the individual tree outputs of the tree ensemble. 2. A vector indicating the leaves that the feature vector falls on in the tree ensemble. 3. A vector indicating the paths that the feature vector falls on in the tree ensemble. If a both a model file and a trainer are specified - will use the model file. If neither are specified, will train a default FastTree model. This can handle key labels by training a regression model towards their optionally permuted indices.",
      "FriendlyName": "Tree Ensemble Featurization Transform",
      "ShortName": "TreeFeat",
      "Inputs": [
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "Trainer to use",
          "Required": true,
          "SortOrder": 10.0,
          "IsNullable": false
        },
        {
          "Name": "Suffix",
          "Type": "String",
          "Desc": "Output column: The suffix to append to the default column names",
          "Aliases": [
            "ex"
          ],
          "Required": false,
          "SortOrder": 101.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "LabelPermutationSeed",
          "Type": "Int",
          "Desc": "If specified, determines the permutation seed for applying this featurizer to a multiclass problem.",
          "Aliases": [
            "lps"
          ],
          "Required": false,
          "SortOrder": 102.0,
          "IsNullable": false,
          "Default": 0
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "IFeaturizerInput",
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    },
    {
      "Name": "Transforms.TwoHeterogeneousModelCombiner",
      "Desc": "Combines a TransformModel and a PredictorModel into a single PredictorModel.",
      "FriendlyName": null,
      "ShortName": null,
      "Inputs": [
        {
          "Name": "TransformModel",
          "Type": "TransformModel",
          "Desc": "Transform model",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "Predictor model",
          "Required": true,
          "SortOrder": 2.0,
          "IsNullable": false
        }
      ],
      "Outputs": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel",
          "Desc": "Predictor model"
        }
      ]
    },
    {
      "Name": "Transforms.WordTokenizer",
      "Desc": "The input to this transform is text, and the output is a vector of text containing the words (tokens) in the original text. The separator is space, but can be specified as any other character (or multiple characters) if needed.",
      "FriendlyName": "Tokenize Text Transform",
      "ShortName": "TokenizeTextTransform",
      "Inputs": [
        {
          "Name": "Column",
          "Type": {
            "Kind": "Array",
            "ItemType": {
              "Kind": "Struct",
              "Fields": [
                {
                  "Name": "TermSeparators",
                  "Type": "String",
                  "Desc": "Comma separated set of term separator(s). Commonly: 'space', 'comma', 'semicolon' or other single character.",
                  "Aliases": [
                    "sep"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Name",
                  "Type": "String",
                  "Desc": "Name of the new column",
                  "Aliases": [
                    "name"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                },
                {
                  "Name": "Source",
                  "Type": "String",
                  "Desc": "Name of the source column",
                  "Aliases": [
                    "src"
                  ],
                  "Required": false,
                  "SortOrder": 150.0,
                  "IsNullable": false,
                  "Default": null
                }
              ]
            }
          },
          "Desc": "New column definition(s)",
          "Aliases": [
            "col"
          ],
          "Required": false,
          "SortOrder": 1.0,
          "IsNullable": false,
          "Default": null
        },
        {
          "Name": "Data",
          "Type": "DataView",
          "Desc": "Input dataset",
          "Required": true,
          "SortOrder": 1.0,
          "IsNullable": false
        },
        {
          "Name": "TermSeparators",
          "Type": "String",
          "Desc": "Comma separated set of term separator(s). Commonly: 'space', 'comma', 'semicolon' or other single character.",
          "Aliases": [
            "sep"
          ],
          "Required": false,
          "SortOrder": 150.0,
          "IsNullable": false,
          "Default": "space"
        }
      ],
      "Outputs": [
        {
          "Name": "OutputData",
          "Type": "DataView",
          "Desc": "Transformed dataset"
        },
        {
          "Name": "Model",
          "Type": "TransformModel",
          "Desc": "Transform model"
        }
      ],
      "InputKind": [
        "ITransformInput"
      ],
      "OutputKind": [
        "ITransformOutput"
      ]
    }
  ],
  "Components": [
    {
      "Kind": "AutoMlEngine",
      "Components": [
        {
          "Name": "Defaults",
          "Desc": "AutoML engine that returns learners with default settings.",
          "FriendlyName": "Defaults Engine",
          "Settings": []
        },
        {
          "Name": "Rocket",
          "Desc": "AutoML engine that consists of distinct, hierarchical stages of operation.",
          "FriendlyName": "Rocket Engine",
          "Settings": [
            {
              "Name": "TopKLearners",
              "Type": "Int",
              "Desc": "Number of learners to retain for second stage.",
              "Aliases": [
                "topk"
              ],
              "Required": false,
              "SortOrder": 1.0,
              "IsNullable": false,
              "Default": 2
            },
            {
              "Name": "SecondRoundTrialsPerLearner",
              "Type": "Int",
              "Desc": "Number of trials for retained second stage learners.",
              "Aliases": [
                "stage2num"
              ],
              "Required": false,
              "SortOrder": 2.0,
              "IsNullable": false,
              "Default": 5
            },
            {
              "Name": "RandomInitialization",
              "Type": "Bool",
              "Desc": "Use random initialization only.",
              "Aliases": [
                "randinit"
              ],
              "Required": false,
              "SortOrder": 3.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "NumInitializationPipelines",
              "Type": "Int",
              "Desc": "Number of initilization pipelines, used for random initialization only.",
              "Aliases": [
                "numinitseeds"
              ],
              "Required": false,
              "SortOrder": 4.0,
              "IsNullable": false,
              "Default": 20
            }
          ]
        },
        {
          "Name": "UniformRandom",
          "Desc": "AutoML engine using uniform random sampling.",
          "FriendlyName": "Uniform Random Engine",
          "Settings": []
        }
      ]
    },
    {
      "Kind": "AutoMlStateBase",
      "Components": [
        {
          "Name": "AutoMlState",
          "Desc": "State of an AutoML search and search space.",
          "FriendlyName": "AutoML State",
          "Aliases": [
            "automlst"
          ],
          "Settings": [
            {
              "Name": "Metric",
              "Type": {
                "Kind": "Enum",
                "Values": [
                  "Auc",
                  "AccuracyMicro",
                  "AccuracyMacro",
                  "L2",
                  "F1",
                  "AuPrc",
                  "TopKAccuracy",
                  "Rms",
                  "LossFn",
                  "RSquared",
                  "LogLoss",
                  "LogLossReduction",
                  "Ndcg",
                  "Dcg",
                  "PositivePrecision",
                  "PositiveRecall",
                  "NegativePrecision",
                  "NegativeRecall",
                  "DrAtK",
                  "DrAtPFpr",
                  "DrAtNumPos",
                  "NumAnomalies",
                  "ThreshAtK",
                  "ThreshAtP",
                  "ThreshAtNumPos",
                  "Nmi",
                  "AvgMinScore",
                  "Dbi"
                ]
              },
              "Desc": "Supported metric for evaluator.",
              "Aliases": [
                "metric"
              ],
              "Required": true,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": "Auc"
            },
            {
              "Name": "Engine",
              "Type": {
                "Kind": "Component",
                "ComponentKind": "AutoMlEngine"
              },
              "Desc": "AutoML engine (pipeline optimizer) that generates next candidates.",
              "Aliases": [
                "engine"
              ],
              "Required": true,
              "SortOrder": 150.0,
              "IsNullable": false
            },
            {
              "Name": "TrainerKind",
              "Type": {
                "Kind": "Enum",
                "Values": [
                  "SignatureBinaryClassifierTrainer",
                  "SignatureMultiClassClassifierTrainer",
                  "SignatureRankerTrainer",
                  "SignatureRegressorTrainer",
                  "SignatureMultiOutputRegressorTrainer",
                  "SignatureAnomalyDetectorTrainer",
                  "SignatureClusteringTrainer"
                ]
              },
              "Desc": "Kind of trainer for task, such as binary classification trainer, multiclass trainer, etc.",
              "Aliases": [
                "tk"
              ],
              "Required": true,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": "SignatureBinaryClassifierTrainer"
            },
            {
              "Name": "TerminatorArgs",
              "Type": {
                "Kind": "Component",
                "ComponentKind": "SearchTerminator"
              },
              "Desc": "Arguments for creating terminator, which determines when to stop search.",
              "Aliases": [
                "term"
              ],
              "Required": true,
              "SortOrder": 150.0,
              "IsNullable": false
            },
            {
              "Name": "RequestedLearners",
              "Type": {
                "Kind": "Array",
                "ItemType": "String"
              },
              "Desc": "Learner set to sweep over (if available).",
              "Aliases": [
                "learners"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": null
            }
          ]
        }
      ]
    },
    {
      "Kind": "CalibratorTrainer",
      "Components": [
        {
          "Name": "FixedPlattCalibrator",
          "Desc": null,
          "FriendlyName": "Fixed Platt Calibrator",
          "Aliases": [
            "FixedPlatt",
            "FixedSigmoid"
          ],
          "Settings": [
            {
              "Name": "Slope",
              "Type": "Float",
              "Desc": "The slope parameter of f(x) = 1 / (1 + exp(-slope * x + offset)",
              "Aliases": [
                "a"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1.0
            },
            {
              "Name": "Offset",
              "Type": "Float",
              "Desc": "The offset parameter of f(x) = 1 / (1 + exp(-slope * x + offset)",
              "Aliases": [
                "b"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            }
          ]
        },
        {
          "Name": "NaiveCalibrator",
          "Desc": null,
          "FriendlyName": "Naive Calibrator",
          "Aliases": [
            "Naive"
          ],
          "Settings": []
        },
        {
          "Name": "PavCalibrator",
          "Desc": null,
          "FriendlyName": "PAV Calibrator",
          "Aliases": [
            "Pav"
          ],
          "Settings": []
        },
        {
          "Name": "PlattCalibrator",
          "Desc": "Platt calibration.",
          "FriendlyName": "Platt Calibrator",
          "Aliases": [
            "Platt",
            "Sigmoid"
          ],
          "Settings": []
        }
      ]
    },
    {
      "Kind": "ClassificationLossFunction",
      "Components": [
        {
          "Name": "ExpLoss",
          "Desc": "Exponential loss.",
          "FriendlyName": "Exponential Loss",
          "Settings": [
            {
              "Name": "Beta",
              "Type": "Float",
              "Desc": "Beta (dilation)",
              "Aliases": [
                "beta"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1.0
            }
          ]
        },
        {
          "Name": "HingeLoss",
          "Desc": "Hinge loss.",
          "FriendlyName": "Hinge loss",
          "Aliases": [
            "Hinge"
          ],
          "Settings": [
            {
              "Name": "Margin",
              "Type": "Float",
              "Desc": "Margin value",
              "Aliases": [
                "marg"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1.0
            }
          ]
        },
        {
          "Name": "LogLoss",
          "Desc": "Log loss.",
          "FriendlyName": "Log loss",
          "Aliases": [
            "Logistic",
            "CrossEntropy"
          ],
          "Settings": []
        },
        {
          "Name": "SmoothedHingeLoss",
          "Desc": "Smoothed Hinge loss.",
          "FriendlyName": "Smoothed Hinge Loss",
          "Aliases": [
            "SmoothedHinge"
          ],
          "Settings": [
            {
              "Name": "SmoothingConst",
              "Type": "Float",
              "Desc": "Smoothing constant",
              "Aliases": [
                "smooth"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1.0
            }
          ]
        }
      ]
    },
    {
      "Kind": "EarlyStoppingCriterion",
      "Components": [
        {
          "Name": "GL",
          "Desc": "Stop in case of loss of generality.",
          "FriendlyName": "Loss of Generality (GL)",
          "Settings": [
            {
              "Name": "Threshold",
              "Type": "Float",
              "Desc": "Threshold in range [0,1].",
              "Aliases": [
                "th"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.01,
              "Range": {
                "Max": 1.0,
                "Min": 0.0
              }
            }
          ]
        },
        {
          "Name": "LP",
          "Desc": "Stops in case of low progress.",
          "FriendlyName": "Low Progress (LP)",
          "Settings": [
            {
              "Name": "Threshold",
              "Type": "Float",
              "Desc": "Threshold in range [0,1].",
              "Aliases": [
                "th"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.01,
              "Range": {
                "Max": 1.0,
                "Min": 0.0
              }
            },
            {
              "Name": "WindowSize",
              "Type": "Int",
              "Desc": "The window size.",
              "Aliases": [
                "w"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 5,
              "Range": {
                "Inf": 0
              }
            }
          ]
        },
        {
          "Name": "PQ",
          "Desc": "Stops in case of generality to progress ration exceeds threshold.",
          "FriendlyName": "Generality to Progress Ratio (PQ)",
          "Settings": [
            {
              "Name": "Threshold",
              "Type": "Float",
              "Desc": "Threshold in range [0,1].",
              "Aliases": [
                "th"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.01,
              "Range": {
                "Max": 1.0,
                "Min": 0.0
              }
            },
            {
              "Name": "WindowSize",
              "Type": "Int",
              "Desc": "The window size.",
              "Aliases": [
                "w"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 5,
              "Range": {
                "Inf": 0
              }
            }
          ]
        },
        {
          "Name": "TR",
          "Desc": "Stop if validation score exceeds threshold value.",
          "FriendlyName": "Tolerant (TR)",
          "Settings": [
            {
              "Name": "Threshold",
              "Type": "Float",
              "Desc": "Tolerance threshold. (Non negative value)",
              "Aliases": [
                "th"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.01,
              "Range": {
                "Min": 0.0
              }
            }
          ]
        },
        {
          "Name": "UP",
          "Desc": "Stops in case of consecutive loss in generality.",
          "FriendlyName": "Consecutive Loss in Generality (UP)",
          "Settings": [
            {
              "Name": "WindowSize",
              "Type": "Int",
              "Desc": "The window size.",
              "Aliases": [
                "w"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 5,
              "Range": {
                "Inf": 0
              }
            }
          ]
        }
      ]
    },
    {
      "Kind": "FastTreeTrainer",
      "Components": [
        {
          "Name": "FastTreeBinaryClassification",
          "Desc": "Uses a logit-boost boosted tree learner to perform binary classification.",
          "FriendlyName": "FastTree (Boosted Trees) Classification",
          "Settings": [
            {
              "Name": "NumTrees",
              "Type": "Int",
              "Desc": "Number of weak hypotheses in the ensemble",
              "Aliases": [
                "iter"
              ],
              "Required": false,
              "SortOrder": 1.0,
              "IsNullable": false,
              "Default": 100,
              "SweepRange": {
                "RangeType": "Discrete",
                "Values": [
                  20,
                  100,
                  500
                ]
              }
            },
            {
              "Name": "TrainingData",
              "Type": "DataView",
              "Desc": "The data to be used for training",
              "Aliases": [
                "data"
              ],
              "Required": true,
              "SortOrder": 1.0,
              "IsNullable": false
            },
            {
              "Name": "NumLeaves",
              "Type": "Int",
              "Desc": "The max number of leaves in each regression tree",
              "Aliases": [
                "nl"
              ],
              "Required": false,
              "SortOrder": 2.0,
              "IsNullable": false,
              "Default": 20,
              "SweepRange": {
                "RangeType": "Long",
                "Min": 2,
                "Max": 128,
                "StepSize": 4.0,
                "IsLogScale": true
              }
            },
            {
              "Name": "FeatureColumn",
              "Type": "String",
              "Desc": "Column to use for features",
              "Aliases": [
                "feat"
              ],
              "Required": false,
              "SortOrder": 2.0,
              "IsNullable": false,
              "Default": "Features"
            },
            {
              "Name": "MinDocumentsInLeafs",
              "Type": "Int",
              "Desc": "The minimal number of documents allowed in a leaf of a regression tree, out of the subsampled data",
              "Aliases": [
                "mil"
              ],
              "Required": false,
              "SortOrder": 3.0,
              "IsNullable": false,
              "Default": 10,
              "SweepRange": {
                "RangeType": "Discrete",
                "Values": [
                  1,
                  10,
                  50
                ]
              }
            },
            {
              "Name": "LabelColumn",
              "Type": "String",
              "Desc": "Column to use for labels",
              "Aliases": [
                "lab"
              ],
              "Required": false,
              "SortOrder": 3.0,
              "IsNullable": false,
              "Default": "Label"
            },
            {
              "Name": "LearningRates",
              "Type": "Float",
              "Desc": "The learning rate",
              "Aliases": [
                "lr"
              ],
              "Required": false,
              "SortOrder": 4.0,
              "IsNullable": false,
              "Default": 0.2,
              "SweepRange": {
                "RangeType": "Float",
                "Min": 0.025,
                "Max": 0.4,
                "IsLogScale": true
              }
            },
            {
              "Name": "WeightColumn",
              "Type": "String",
              "Desc": "Column to use for example weight",
              "Aliases": [
                "weight"
              ],
              "Required": false,
              "SortOrder": 4.0,
              "IsNullable": false,
              "Default": "Weight"
            },
            {
              "Name": "GroupIdColumn",
              "Type": "String",
              "Desc": "Column to use for example groupId",
              "Aliases": [
                "groupId"
              ],
              "Required": false,
              "SortOrder": 5.0,
              "IsNullable": false,
              "Default": "GroupId"
            },
            {
              "Name": "NormalizeFeatures",
              "Type": {
                "Kind": "Enum",
                "Values": [
                  "No",
                  "Warn",
                  "Auto",
                  "Yes"
                ]
              },
              "Desc": "Normalize option for the feature column",
              "Aliases": [
                "norm"
              ],
              "Required": false,
              "SortOrder": 5.0,
              "IsNullable": false,
              "Default": "Auto"
            },
            {
              "Name": "Caching",
              "Type": {
                "Kind": "Enum",
                "Values": [
                  "Auto",
                  "Memory",
                  "Disk",
                  "None"
                ]
              },
              "Desc": "Whether learner should cache input training data",
              "Aliases": [
                "cache"
              ],
              "Required": false,
              "SortOrder": 6.0,
              "IsNullable": false,
              "Default": "Auto"
            },
            {
              "Name": "UnbalancedSets",
              "Type": "Bool",
              "Desc": "Should we use derivatives optimized for unbalanced sets",
              "Aliases": [
                "us"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "BestStepRankingRegressionTrees",
              "Type": "Bool",
              "Desc": "Use best regression step trees?",
              "Aliases": [
                "bsr"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "UseLineSearch",
              "Type": "Bool",
              "Desc": "Should we use line search for a step size",
              "Aliases": [
                "ls"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "NumPostBracketSteps",
              "Type": "Int",
              "Desc": "Number of post-bracket line search steps",
              "Aliases": [
                "lssteps"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0
            },
            {
              "Name": "MinStepSize",
              "Type": "Float",
              "Desc": "Minimum line search step size",
              "Aliases": [
                "minstep"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "OptimizationAlgorithm",
              "Type": {
                "Kind": "Enum",
                "Values": [
                  "GradientDescent",
                  "AcceleratedGradientDescent",
                  "ConjugateGradientDescent"
                ]
              },
              "Desc": "Optimization algorithm to be used (GradientDescent, AcceleratedGradientDescent)",
              "Aliases": [
                "oa"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": "GradientDescent"
            },
            {
              "Name": "EarlyStoppingRule",
              "Type": {
                "Kind": "Component",
                "ComponentKind": "EarlyStoppingCriterion"
              },
              "Desc": "Early stopping rule. (Validation set (/valid) is required.)",
              "Aliases": [
                "esr"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": null
            },
            {
              "Name": "EarlyStoppingMetrics",
              "Type": "Int",
              "Desc": "Early stopping metrics. (For regression, 1: L1, 2:L2; for ranking, 1:NDCG@1, 3:NDCG@3)",
              "Aliases": [
                "esmt"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0
            },
            {
              "Name": "EnablePruning",
              "Type": "Bool",
              "Desc": "Enable post-training pruning to avoid overfitting. (a validation set is required)",
              "Aliases": [
                "pruning"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "UseTolerantPruning",
              "Type": "Bool",
              "Desc": "Use window and tolerance for pruning",
              "Aliases": [
                "prtol"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "PruningThreshold",
              "Type": "Float",
              "Desc": "The tolerance threshold for pruning",
              "Aliases": [
                "prth"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.004
            },
            {
              "Name": "PruningWindowSize",
              "Type": "Int",
              "Desc": "The moving window size for pruning",
              "Aliases": [
                "prws"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 5
            },
            {
              "Name": "Shrinkage",
              "Type": "Float",
              "Desc": "Shrinkage",
              "Aliases": [
                "shrk"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1.0,
              "SweepRange": {
                "RangeType": "Float",
                "Min": 0.025,
                "Max": 4.0,
                "IsLogScale": true
              }
            },
            {
              "Name": "DropoutRate",
              "Type": "Float",
              "Desc": "Dropout rate for tree regularization",
              "Aliases": [
                "tdrop"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0,
              "SweepRange": {
                "RangeType": "Discrete",
                "Values": [
                  0.0,
                  1E-09,
                  0.05,
                  0.1,
                  0.2
                ]
              }
            },
            {
              "Name": "GetDerivativesSampleRate",
              "Type": "Int",
              "Desc": "Sample each query 1 in k times in the GetDerivatives function",
              "Aliases": [
                "sr"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1
            },
            {
              "Name": "WriteLastEnsemble",
              "Type": "Bool",
              "Desc": "Write the last ensemble instead of the one determined by early stopping",
              "Aliases": [
                "hl"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "MaxTreeOutput",
              "Type": "Float",
              "Desc": "Upper bound on absolute value of single tree output",
              "Aliases": [
                "mo"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 100.0
            },
            {
              "Name": "RandomStart",
              "Type": "Bool",
              "Desc": "Training starts from random ordering (determined by /r1)",
              "Aliases": [
                "rs"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "FilterZeroLambdas",
              "Type": "Bool",
              "Desc": "Filter zero lambdas during training",
              "Aliases": [
                "fzl"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "BaselineScoresFormula",
              "Type": "String",
              "Desc": "Freeform defining the scores that should be used as the baseline ranker",
              "Aliases": [
                "basescores"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": null
            },
            {
              "Name": "BaselineAlphaRisk",
              "Type": "String",
              "Desc": "Baseline alpha for tradeoffs of risk (0 is normal training)",
              "Aliases": [
                "basealpha"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": null
            },
            {
              "Name": "PositionDiscountFreeform",
              "Type": "String",
              "Desc": "The discount freeform which specifies the per position discounts of documents in a query (uses a single variable P for position where P=0 is first position)",
              "Aliases": [
                "pdff"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": null
            },
            {
              "Name": "ParallelTrainer",
              "Type": {
                "Kind": "Component",
                "ComponentKind": "ParallelTraining"
              },
              "Desc": "Allows to choose Parallel FastTree Learning Algorithm",
              "Aliases": [
                "parag"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": {
                "Name": "Single"
              }
            },
            {
              "Name": "NumThreads",
              "Type": "Int",
              "Desc": "The number of threads to use",
              "Aliases": [
                "t"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": true,
              "Default": null
            },
            {
              "Name": "RngSeed",
              "Type": "Int",
              "Desc": "The seed of the random number generator",
              "Aliases": [
                "r1"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 123
            },
            {
              "Name": "FeatureSelectSeed",
              "Type": "Int",
              "Desc": "The seed of the active feature selection",
              "Aliases": [
                "r3"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 123
            },
            {
              "Name": "EntropyCoefficient",
              "Type": "Float",
              "Desc": "The entropy (regularization) coefficient between 0 and 1",
              "Aliases": [
                "e"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "HistogramPoolSize",
              "Type": "Int",
              "Desc": "The number of histograms in the pool (between 2 and numLeaves)",
              "Aliases": [
                "ps"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": -1
            },
            {
              "Name": "DiskTranspose",
              "Type": "Bool",
              "Desc": "Whether to utilize the disk or the data's native transposition facilities (where applicable) when performing the transpose",
              "Aliases": [
                "dt"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": true,
              "Default": null
            },
            {
              "Name": "FeatureFlocks",
              "Type": "Bool",
              "Desc": "Whether to collectivize features during dataset preparation to speed up training",
              "Aliases": [
                "flocks"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": true
            },
            {
              "Name": "CategoricalSplit",
              "Type": "Bool",
              "Desc": "Whether to do split based on multiple categorical feature values.",
              "Aliases": [
                "cat"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "MaxCategoricalGroupsPerNode",
              "Type": "Int",
              "Desc": "Maximum categorical split groups to consider when splitting on a categorical feature. Split groups are a collection of split points. This is used to reduce overfitting when there many categorical features.",
              "Aliases": [
                "mcg"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 64
            },
            {
              "Name": "MaxCategoricalSplitPoints",
              "Type": "Int",
              "Desc": "Maximum categorical split points to consider when splitting on a categorical feature.",
              "Aliases": [
                "maxcat"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 64
            },
            {
              "Name": "MinDocsPercentageForCategoricalSplit",
              "Type": "Float",
              "Desc": "Minimum categorical docs percentage in a bin to consider for a split.",
              "Aliases": [
                "mdop"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.001
            },
            {
              "Name": "MinDocsForCategoricalSplit",
              "Type": "Int",
              "Desc": "Minimum categorical doc count in a bin to consider for a split.",
              "Aliases": [
                "mdo"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 100
            },
            {
              "Name": "Bias",
              "Type": "Float",
              "Desc": "Bias for calculating gradient for each feature bin for a categorical feature.",
              "Aliases": [
                "bias"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "Bundling",
              "Type": {
                "Kind": "Enum",
                "Values": [
                  "None",
                  "AggregateLowPopulation",
                  "Adjacent"
                ]
              },
              "Desc": "Bundle low population bins. Bundle.None(0): no bundling, Bundle.AggregateLowPopulation(1): Bundle low population, Bundle.Adjacent(2): Neighbor low population bundle.",
              "Aliases": [
                "bundle"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": "None"
            },
            {
              "Name": "MaxBins",
              "Type": "Int",
              "Desc": "Maximum number of distinct values (bins) per feature",
              "Aliases": [
                "mb"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 255
            },
            {
              "Name": "SparsifyThreshold",
              "Type": "Float",
              "Desc": "Sparsity level needed to use sparse feature representation",
              "Aliases": [
                "sp"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.7
            },
            {
              "Name": "FeatureFirstUsePenalty",
              "Type": "Float",
              "Desc": "The feature first use penalty coefficient",
              "Aliases": [
                "ffup"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "FeatureReusePenalty",
              "Type": "Float",
              "Desc": "The feature re-use penalty (regularization) coefficient",
              "Aliases": [
                "frup"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "GainConfidenceLevel",
              "Type": "Float",
              "Desc": "Tree fitting gain confidence requirement (should be in the range [0,1) ).",
              "Aliases": [
                "gainconf"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "SoftmaxTemperature",
              "Type": "Float",
              "Desc": "The temperature of the randomized softmax distribution for choosing the feature",
              "Aliases": [
                "smtemp"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "ExecutionTimes",
              "Type": "Bool",
              "Desc": "Print execution time breakdown to stdout",
              "Aliases": [
                "et"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "FeatureFraction",
              "Type": "Float",
              "Desc": "The fraction of features (chosen randomly) to use on each iteration",
              "Aliases": [
                "ff"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1.0
            },
            {
              "Name": "BaggingSize",
              "Type": "Int",
              "Desc": "Number of trees in each bag (0 for disabling bagging)",
              "Aliases": [
                "bag"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0
            },
            {
              "Name": "BaggingTrainFraction",
              "Type": "Float",
              "Desc": "Percentage of training examples used in each bag",
              "Aliases": [
                "bagfrac"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.7
            },
            {
              "Name": "SplitFraction",
              "Type": "Float",
              "Desc": "The fraction of features (chosen randomly) to use on each split",
              "Aliases": [
                "sf"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1.0
            },
            {
              "Name": "Smoothing",
              "Type": "Float",
              "Desc": "Smoothing paramter for tree regularization",
              "Aliases": [
                "s"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "AllowEmptyTrees",
              "Type": "Bool",
              "Desc": "When a root split is impossible, allow training to proceed",
              "Aliases": [
                "allowempty",
                "dummies"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": true
            },
            {
              "Name": "FeatureCompressionLevel",
              "Type": "Int",
              "Desc": "The level of feature compression to use",
              "Aliases": [
                "fcomp"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1
            },
            {
              "Name": "CompressEnsemble",
              "Type": "Bool",
              "Desc": "Compress the tree Ensemble",
              "Aliases": [
                "cmp"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "MaxTreesAfterCompression",
              "Type": "Int",
              "Desc": "Maximum Number of trees after compression",
              "Aliases": [
                "cmpmax"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": -1
            },
            {
              "Name": "PrintTestGraph",
              "Type": "Bool",
              "Desc": "Print metrics graph for the first test set",
              "Aliases": [
                "graph"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "PrintTrainValidGraph",
              "Type": "Bool",
              "Desc": "Print Train and Validation metrics in graph",
              "Aliases": [
                "graphtv"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "TestFrequency",
              "Type": "Int",
              "Desc": "Calculate metric values for train/valid/test every k rounds",
              "Aliases": [
                "tf"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 2147483647
            }
          ]
        },
        {
          "Name": "FastTreeRanking",
          "Desc": "Trains gradient boosted decision trees to the LambdaRank quasi-gradient.",
          "FriendlyName": "FastTree (Boosted Trees) Ranking",
          "Settings": [
            {
              "Name": "NumTrees",
              "Type": "Int",
              "Desc": "Number of weak hypotheses in the ensemble",
              "Aliases": [
                "iter"
              ],
              "Required": false,
              "SortOrder": 1.0,
              "IsNullable": false,
              "Default": 100,
              "SweepRange": {
                "RangeType": "Discrete",
                "Values": [
                  20,
                  100,
                  500
                ]
              }
            },
            {
              "Name": "TrainingData",
              "Type": "DataView",
              "Desc": "The data to be used for training",
              "Aliases": [
                "data"
              ],
              "Required": true,
              "SortOrder": 1.0,
              "IsNullable": false
            },
            {
              "Name": "NumLeaves",
              "Type": "Int",
              "Desc": "The max number of leaves in each regression tree",
              "Aliases": [
                "nl"
              ],
              "Required": false,
              "SortOrder": 2.0,
              "IsNullable": false,
              "Default": 20,
              "SweepRange": {
                "RangeType": "Long",
                "Min": 2,
                "Max": 128,
                "StepSize": 4.0,
                "IsLogScale": true
              }
            },
            {
              "Name": "FeatureColumn",
              "Type": "String",
              "Desc": "Column to use for features",
              "Aliases": [
                "feat"
              ],
              "Required": false,
              "SortOrder": 2.0,
              "IsNullable": false,
              "Default": "Features"
            },
            {
              "Name": "MinDocumentsInLeafs",
              "Type": "Int",
              "Desc": "The minimal number of documents allowed in a leaf of a regression tree, out of the subsampled data",
              "Aliases": [
                "mil"
              ],
              "Required": false,
              "SortOrder": 3.0,
              "IsNullable": false,
              "Default": 10,
              "SweepRange": {
                "RangeType": "Discrete",
                "Values": [
                  1,
                  10,
                  50
                ]
              }
            },
            {
              "Name": "LabelColumn",
              "Type": "String",
              "Desc": "Column to use for labels",
              "Aliases": [
                "lab"
              ],
              "Required": false,
              "SortOrder": 3.0,
              "IsNullable": false,
              "Default": "Label"
            },
            {
              "Name": "LearningRates",
              "Type": "Float",
              "Desc": "The learning rate",
              "Aliases": [
                "lr"
              ],
              "Required": false,
              "SortOrder": 4.0,
              "IsNullable": false,
              "Default": 0.2,
              "SweepRange": {
                "RangeType": "Float",
                "Min": 0.025,
                "Max": 0.4,
                "IsLogScale": true
              }
            },
            {
              "Name": "WeightColumn",
              "Type": "String",
              "Desc": "Column to use for example weight",
              "Aliases": [
                "weight"
              ],
              "Required": false,
              "SortOrder": 4.0,
              "IsNullable": false,
              "Default": "Weight"
            },
            {
              "Name": "GroupIdColumn",
              "Type": "String",
              "Desc": "Column to use for example groupId",
              "Aliases": [
                "groupId"
              ],
              "Required": false,
              "SortOrder": 5.0,
              "IsNullable": false,
              "Default": "GroupId"
            },
            {
              "Name": "NormalizeFeatures",
              "Type": {
                "Kind": "Enum",
                "Values": [
                  "No",
                  "Warn",
                  "Auto",
                  "Yes"
                ]
              },
              "Desc": "Normalize option for the feature column",
              "Aliases": [
                "norm"
              ],
              "Required": false,
              "SortOrder": 5.0,
              "IsNullable": false,
              "Default": "Auto"
            },
            {
              "Name": "Caching",
              "Type": {
                "Kind": "Enum",
                "Values": [
                  "Auto",
                  "Memory",
                  "Disk",
                  "None"
                ]
              },
              "Desc": "Whether learner should cache input training data",
              "Aliases": [
                "cache"
              ],
              "Required": false,
              "SortOrder": 6.0,
              "IsNullable": false,
              "Default": "Auto"
            },
            {
              "Name": "CustomGains",
              "Type": "String",
              "Desc": "Comma seperated list of gains associated to each relevance label.",
              "Aliases": [
                "gains"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": "0,3,7,15,31"
            },
            {
              "Name": "TrainDcg",
              "Type": "Bool",
              "Desc": "Train DCG instead of NDCG",
              "Aliases": [
                "dcg"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "SortingAlgorithm",
              "Type": "String",
              "Desc": "The sorting algorithm to use for DCG and LambdaMart calculations [DescendingStablePessimistic/DescendingStable/DescendingReverse/DescendingDotNet]",
              "Aliases": [
                "sort"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": "DescendingStablePessimistic"
            },
            {
              "Name": "LambdaMartMaxTruncation",
              "Type": "Int",
              "Desc": "max-NDCG truncation to use in the Lambda Mart algorithm",
              "Aliases": [
                "n"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 100
            },
            {
              "Name": "ShiftedNdcg",
              "Type": "Bool",
              "Desc": "Use shifted NDCG",
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "CostFunctionParam",
              "Type": "Char",
              "Desc": "Cost function parameter (w/c)",
              "Aliases": [
                "cf"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": "w"
            },
            {
              "Name": "DistanceWeight2",
              "Type": "Bool",
              "Desc": "Distance weight 2 adjustment to cost",
              "Aliases": [
                "dw"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "NormalizeQueryLambdas",
              "Type": "Bool",
              "Desc": "Normalize query lambdas",
              "Aliases": [
                "nql"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "BestStepRankingRegressionTrees",
              "Type": "Bool",
              "Desc": "Use best regression step trees?",
              "Aliases": [
                "bsr"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "UseLineSearch",
              "Type": "Bool",
              "Desc": "Should we use line search for a step size",
              "Aliases": [
                "ls"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "NumPostBracketSteps",
              "Type": "Int",
              "Desc": "Number of post-bracket line search steps",
              "Aliases": [
                "lssteps"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0
            },
            {
              "Name": "MinStepSize",
              "Type": "Float",
              "Desc": "Minimum line search step size",
              "Aliases": [
                "minstep"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "OptimizationAlgorithm",
              "Type": {
                "Kind": "Enum",
                "Values": [
                  "GradientDescent",
                  "AcceleratedGradientDescent",
                  "ConjugateGradientDescent"
                ]
              },
              "Desc": "Optimization algorithm to be used (GradientDescent, AcceleratedGradientDescent)",
              "Aliases": [
                "oa"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": "GradientDescent"
            },
            {
              "Name": "EarlyStoppingRule",
              "Type": {
                "Kind": "Component",
                "ComponentKind": "EarlyStoppingCriterion"
              },
              "Desc": "Early stopping rule. (Validation set (/valid) is required.)",
              "Aliases": [
                "esr"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": null
            },
            {
              "Name": "EarlyStoppingMetrics",
              "Type": "Int",
              "Desc": "Early stopping metrics. (For regression, 1: L1, 2:L2; for ranking, 1:NDCG@1, 3:NDCG@3)",
              "Aliases": [
                "esmt"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1
            },
            {
              "Name": "EnablePruning",
              "Type": "Bool",
              "Desc": "Enable post-training pruning to avoid overfitting. (a validation set is required)",
              "Aliases": [
                "pruning"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "UseTolerantPruning",
              "Type": "Bool",
              "Desc": "Use window and tolerance for pruning",
              "Aliases": [
                "prtol"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "PruningThreshold",
              "Type": "Float",
              "Desc": "The tolerance threshold for pruning",
              "Aliases": [
                "prth"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.004
            },
            {
              "Name": "PruningWindowSize",
              "Type": "Int",
              "Desc": "The moving window size for pruning",
              "Aliases": [
                "prws"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 5
            },
            {
              "Name": "Shrinkage",
              "Type": "Float",
              "Desc": "Shrinkage",
              "Aliases": [
                "shrk"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1.0,
              "SweepRange": {
                "RangeType": "Float",
                "Min": 0.025,
                "Max": 4.0,
                "IsLogScale": true
              }
            },
            {
              "Name": "DropoutRate",
              "Type": "Float",
              "Desc": "Dropout rate for tree regularization",
              "Aliases": [
                "tdrop"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0,
              "SweepRange": {
                "RangeType": "Discrete",
                "Values": [
                  0.0,
                  1E-09,
                  0.05,
                  0.1,
                  0.2
                ]
              }
            },
            {
              "Name": "GetDerivativesSampleRate",
              "Type": "Int",
              "Desc": "Sample each query 1 in k times in the GetDerivatives function",
              "Aliases": [
                "sr"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1
            },
            {
              "Name": "WriteLastEnsemble",
              "Type": "Bool",
              "Desc": "Write the last ensemble instead of the one determined by early stopping",
              "Aliases": [
                "hl"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "MaxTreeOutput",
              "Type": "Float",
              "Desc": "Upper bound on absolute value of single tree output",
              "Aliases": [
                "mo"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 100.0
            },
            {
              "Name": "RandomStart",
              "Type": "Bool",
              "Desc": "Training starts from random ordering (determined by /r1)",
              "Aliases": [
                "rs"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "FilterZeroLambdas",
              "Type": "Bool",
              "Desc": "Filter zero lambdas during training",
              "Aliases": [
                "fzl"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "BaselineScoresFormula",
              "Type": "String",
              "Desc": "Freeform defining the scores that should be used as the baseline ranker",
              "Aliases": [
                "basescores"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": null
            },
            {
              "Name": "BaselineAlphaRisk",
              "Type": "String",
              "Desc": "Baseline alpha for tradeoffs of risk (0 is normal training)",
              "Aliases": [
                "basealpha"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": null
            },
            {
              "Name": "PositionDiscountFreeform",
              "Type": "String",
              "Desc": "The discount freeform which specifies the per position discounts of documents in a query (uses a single variable P for position where P=0 is first position)",
              "Aliases": [
                "pdff"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": null
            },
            {
              "Name": "ParallelTrainer",
              "Type": {
                "Kind": "Component",
                "ComponentKind": "ParallelTraining"
              },
              "Desc": "Allows to choose Parallel FastTree Learning Algorithm",
              "Aliases": [
                "parag"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": {
                "Name": "Single"
              }
            },
            {
              "Name": "NumThreads",
              "Type": "Int",
              "Desc": "The number of threads to use",
              "Aliases": [
                "t"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": true,
              "Default": null
            },
            {
              "Name": "RngSeed",
              "Type": "Int",
              "Desc": "The seed of the random number generator",
              "Aliases": [
                "r1"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 123
            },
            {
              "Name": "FeatureSelectSeed",
              "Type": "Int",
              "Desc": "The seed of the active feature selection",
              "Aliases": [
                "r3"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 123
            },
            {
              "Name": "EntropyCoefficient",
              "Type": "Float",
              "Desc": "The entropy (regularization) coefficient between 0 and 1",
              "Aliases": [
                "e"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "HistogramPoolSize",
              "Type": "Int",
              "Desc": "The number of histograms in the pool (between 2 and numLeaves)",
              "Aliases": [
                "ps"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": -1
            },
            {
              "Name": "DiskTranspose",
              "Type": "Bool",
              "Desc": "Whether to utilize the disk or the data's native transposition facilities (where applicable) when performing the transpose",
              "Aliases": [
                "dt"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": true,
              "Default": null
            },
            {
              "Name": "FeatureFlocks",
              "Type": "Bool",
              "Desc": "Whether to collectivize features during dataset preparation to speed up training",
              "Aliases": [
                "flocks"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": true
            },
            {
              "Name": "CategoricalSplit",
              "Type": "Bool",
              "Desc": "Whether to do split based on multiple categorical feature values.",
              "Aliases": [
                "cat"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "MaxCategoricalGroupsPerNode",
              "Type": "Int",
              "Desc": "Maximum categorical split groups to consider when splitting on a categorical feature. Split groups are a collection of split points. This is used to reduce overfitting when there many categorical features.",
              "Aliases": [
                "mcg"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 64
            },
            {
              "Name": "MaxCategoricalSplitPoints",
              "Type": "Int",
              "Desc": "Maximum categorical split points to consider when splitting on a categorical feature.",
              "Aliases": [
                "maxcat"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 64
            },
            {
              "Name": "MinDocsPercentageForCategoricalSplit",
              "Type": "Float",
              "Desc": "Minimum categorical docs percentage in a bin to consider for a split.",
              "Aliases": [
                "mdop"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.001
            },
            {
              "Name": "MinDocsForCategoricalSplit",
              "Type": "Int",
              "Desc": "Minimum categorical doc count in a bin to consider for a split.",
              "Aliases": [
                "mdo"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 100
            },
            {
              "Name": "Bias",
              "Type": "Float",
              "Desc": "Bias for calculating gradient for each feature bin for a categorical feature.",
              "Aliases": [
                "bias"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "Bundling",
              "Type": {
                "Kind": "Enum",
                "Values": [
                  "None",
                  "AggregateLowPopulation",
                  "Adjacent"
                ]
              },
              "Desc": "Bundle low population bins. Bundle.None(0): no bundling, Bundle.AggregateLowPopulation(1): Bundle low population, Bundle.Adjacent(2): Neighbor low population bundle.",
              "Aliases": [
                "bundle"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": "None"
            },
            {
              "Name": "MaxBins",
              "Type": "Int",
              "Desc": "Maximum number of distinct values (bins) per feature",
              "Aliases": [
                "mb"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 255
            },
            {
              "Name": "SparsifyThreshold",
              "Type": "Float",
              "Desc": "Sparsity level needed to use sparse feature representation",
              "Aliases": [
                "sp"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.7
            },
            {
              "Name": "FeatureFirstUsePenalty",
              "Type": "Float",
              "Desc": "The feature first use penalty coefficient",
              "Aliases": [
                "ffup"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "FeatureReusePenalty",
              "Type": "Float",
              "Desc": "The feature re-use penalty (regularization) coefficient",
              "Aliases": [
                "frup"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "GainConfidenceLevel",
              "Type": "Float",
              "Desc": "Tree fitting gain confidence requirement (should be in the range [0,1) ).",
              "Aliases": [
                "gainconf"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "SoftmaxTemperature",
              "Type": "Float",
              "Desc": "The temperature of the randomized softmax distribution for choosing the feature",
              "Aliases": [
                "smtemp"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "ExecutionTimes",
              "Type": "Bool",
              "Desc": "Print execution time breakdown to stdout",
              "Aliases": [
                "et"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "FeatureFraction",
              "Type": "Float",
              "Desc": "The fraction of features (chosen randomly) to use on each iteration",
              "Aliases": [
                "ff"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1.0
            },
            {
              "Name": "BaggingSize",
              "Type": "Int",
              "Desc": "Number of trees in each bag (0 for disabling bagging)",
              "Aliases": [
                "bag"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0
            },
            {
              "Name": "BaggingTrainFraction",
              "Type": "Float",
              "Desc": "Percentage of training examples used in each bag",
              "Aliases": [
                "bagfrac"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.7
            },
            {
              "Name": "SplitFraction",
              "Type": "Float",
              "Desc": "The fraction of features (chosen randomly) to use on each split",
              "Aliases": [
                "sf"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1.0
            },
            {
              "Name": "Smoothing",
              "Type": "Float",
              "Desc": "Smoothing paramter for tree regularization",
              "Aliases": [
                "s"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "AllowEmptyTrees",
              "Type": "Bool",
              "Desc": "When a root split is impossible, allow training to proceed",
              "Aliases": [
                "allowempty",
                "dummies"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": true
            },
            {
              "Name": "FeatureCompressionLevel",
              "Type": "Int",
              "Desc": "The level of feature compression to use",
              "Aliases": [
                "fcomp"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1
            },
            {
              "Name": "CompressEnsemble",
              "Type": "Bool",
              "Desc": "Compress the tree Ensemble",
              "Aliases": [
                "cmp"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "MaxTreesAfterCompression",
              "Type": "Int",
              "Desc": "Maximum Number of trees after compression",
              "Aliases": [
                "cmpmax"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": -1
            },
            {
              "Name": "PrintTestGraph",
              "Type": "Bool",
              "Desc": "Print metrics graph for the first test set",
              "Aliases": [
                "graph"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "PrintTrainValidGraph",
              "Type": "Bool",
              "Desc": "Print Train and Validation metrics in graph",
              "Aliases": [
                "graphtv"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "TestFrequency",
              "Type": "Int",
              "Desc": "Calculate metric values for train/valid/test every k rounds",
              "Aliases": [
                "tf"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 2147483647
            }
          ]
        },
        {
          "Name": "FastTreeRegression",
          "Desc": "Trains gradient boosted decision trees to fit target values using least-squares.",
          "FriendlyName": "FastTree (Boosted Trees) Regression",
          "Settings": [
            {
              "Name": "NumTrees",
              "Type": "Int",
              "Desc": "Number of weak hypotheses in the ensemble",
              "Aliases": [
                "iter"
              ],
              "Required": false,
              "SortOrder": 1.0,
              "IsNullable": false,
              "Default": 100,
              "SweepRange": {
                "RangeType": "Discrete",
                "Values": [
                  20,
                  100,
                  500
                ]
              }
            },
            {
              "Name": "TrainingData",
              "Type": "DataView",
              "Desc": "The data to be used for training",
              "Aliases": [
                "data"
              ],
              "Required": true,
              "SortOrder": 1.0,
              "IsNullable": false
            },
            {
              "Name": "NumLeaves",
              "Type": "Int",
              "Desc": "The max number of leaves in each regression tree",
              "Aliases": [
                "nl"
              ],
              "Required": false,
              "SortOrder": 2.0,
              "IsNullable": false,
              "Default": 20,
              "SweepRange": {
                "RangeType": "Long",
                "Min": 2,
                "Max": 128,
                "StepSize": 4.0,
                "IsLogScale": true
              }
            },
            {
              "Name": "FeatureColumn",
              "Type": "String",
              "Desc": "Column to use for features",
              "Aliases": [
                "feat"
              ],
              "Required": false,
              "SortOrder": 2.0,
              "IsNullable": false,
              "Default": "Features"
            },
            {
              "Name": "MinDocumentsInLeafs",
              "Type": "Int",
              "Desc": "The minimal number of documents allowed in a leaf of a regression tree, out of the subsampled data",
              "Aliases": [
                "mil"
              ],
              "Required": false,
              "SortOrder": 3.0,
              "IsNullable": false,
              "Default": 10,
              "SweepRange": {
                "RangeType": "Discrete",
                "Values": [
                  1,
                  10,
                  50
                ]
              }
            },
            {
              "Name": "LabelColumn",
              "Type": "String",
              "Desc": "Column to use for labels",
              "Aliases": [
                "lab"
              ],
              "Required": false,
              "SortOrder": 3.0,
              "IsNullable": false,
              "Default": "Label"
            },
            {
              "Name": "LearningRates",
              "Type": "Float",
              "Desc": "The learning rate",
              "Aliases": [
                "lr"
              ],
              "Required": false,
              "SortOrder": 4.0,
              "IsNullable": false,
              "Default": 0.2,
              "SweepRange": {
                "RangeType": "Float",
                "Min": 0.025,
                "Max": 0.4,
                "IsLogScale": true
              }
            },
            {
              "Name": "WeightColumn",
              "Type": "String",
              "Desc": "Column to use for example weight",
              "Aliases": [
                "weight"
              ],
              "Required": false,
              "SortOrder": 4.0,
              "IsNullable": false,
              "Default": "Weight"
            },
            {
              "Name": "GroupIdColumn",
              "Type": "String",
              "Desc": "Column to use for example groupId",
              "Aliases": [
                "groupId"
              ],
              "Required": false,
              "SortOrder": 5.0,
              "IsNullable": false,
              "Default": "GroupId"
            },
            {
              "Name": "NormalizeFeatures",
              "Type": {
                "Kind": "Enum",
                "Values": [
                  "No",
                  "Warn",
                  "Auto",
                  "Yes"
                ]
              },
              "Desc": "Normalize option for the feature column",
              "Aliases": [
                "norm"
              ],
              "Required": false,
              "SortOrder": 5.0,
              "IsNullable": false,
              "Default": "Auto"
            },
            {
              "Name": "Caching",
              "Type": {
                "Kind": "Enum",
                "Values": [
                  "Auto",
                  "Memory",
                  "Disk",
                  "None"
                ]
              },
              "Desc": "Whether learner should cache input training data",
              "Aliases": [
                "cache"
              ],
              "Required": false,
              "SortOrder": 6.0,
              "IsNullable": false,
              "Default": "Auto"
            },
            {
              "Name": "BestStepRankingRegressionTrees",
              "Type": "Bool",
              "Desc": "Use best regression step trees?",
              "Aliases": [
                "bsr"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "UseLineSearch",
              "Type": "Bool",
              "Desc": "Should we use line search for a step size",
              "Aliases": [
                "ls"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "NumPostBracketSteps",
              "Type": "Int",
              "Desc": "Number of post-bracket line search steps",
              "Aliases": [
                "lssteps"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0
            },
            {
              "Name": "MinStepSize",
              "Type": "Float",
              "Desc": "Minimum line search step size",
              "Aliases": [
                "minstep"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "OptimizationAlgorithm",
              "Type": {
                "Kind": "Enum",
                "Values": [
                  "GradientDescent",
                  "AcceleratedGradientDescent",
                  "ConjugateGradientDescent"
                ]
              },
              "Desc": "Optimization algorithm to be used (GradientDescent, AcceleratedGradientDescent)",
              "Aliases": [
                "oa"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": "GradientDescent"
            },
            {
              "Name": "EarlyStoppingRule",
              "Type": {
                "Kind": "Component",
                "ComponentKind": "EarlyStoppingCriterion"
              },
              "Desc": "Early stopping rule. (Validation set (/valid) is required.)",
              "Aliases": [
                "esr"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": null
            },
            {
              "Name": "EarlyStoppingMetrics",
              "Type": "Int",
              "Desc": "Early stopping metrics. (For regression, 1: L1, 2:L2; for ranking, 1:NDCG@1, 3:NDCG@3)",
              "Aliases": [
                "esmt"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1
            },
            {
              "Name": "EnablePruning",
              "Type": "Bool",
              "Desc": "Enable post-training pruning to avoid overfitting. (a validation set is required)",
              "Aliases": [
                "pruning"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "UseTolerantPruning",
              "Type": "Bool",
              "Desc": "Use window and tolerance for pruning",
              "Aliases": [
                "prtol"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "PruningThreshold",
              "Type": "Float",
              "Desc": "The tolerance threshold for pruning",
              "Aliases": [
                "prth"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.004
            },
            {
              "Name": "PruningWindowSize",
              "Type": "Int",
              "Desc": "The moving window size for pruning",
              "Aliases": [
                "prws"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 5
            },
            {
              "Name": "Shrinkage",
              "Type": "Float",
              "Desc": "Shrinkage",
              "Aliases": [
                "shrk"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1.0,
              "SweepRange": {
                "RangeType": "Float",
                "Min": 0.025,
                "Max": 4.0,
                "IsLogScale": true
              }
            },
            {
              "Name": "DropoutRate",
              "Type": "Float",
              "Desc": "Dropout rate for tree regularization",
              "Aliases": [
                "tdrop"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0,
              "SweepRange": {
                "RangeType": "Discrete",
                "Values": [
                  0.0,
                  1E-09,
                  0.05,
                  0.1,
                  0.2
                ]
              }
            },
            {
              "Name": "GetDerivativesSampleRate",
              "Type": "Int",
              "Desc": "Sample each query 1 in k times in the GetDerivatives function",
              "Aliases": [
                "sr"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1
            },
            {
              "Name": "WriteLastEnsemble",
              "Type": "Bool",
              "Desc": "Write the last ensemble instead of the one determined by early stopping",
              "Aliases": [
                "hl"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "MaxTreeOutput",
              "Type": "Float",
              "Desc": "Upper bound on absolute value of single tree output",
              "Aliases": [
                "mo"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 100.0
            },
            {
              "Name": "RandomStart",
              "Type": "Bool",
              "Desc": "Training starts from random ordering (determined by /r1)",
              "Aliases": [
                "rs"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "FilterZeroLambdas",
              "Type": "Bool",
              "Desc": "Filter zero lambdas during training",
              "Aliases": [
                "fzl"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "BaselineScoresFormula",
              "Type": "String",
              "Desc": "Freeform defining the scores that should be used as the baseline ranker",
              "Aliases": [
                "basescores"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": null
            },
            {
              "Name": "BaselineAlphaRisk",
              "Type": "String",
              "Desc": "Baseline alpha for tradeoffs of risk (0 is normal training)",
              "Aliases": [
                "basealpha"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": null
            },
            {
              "Name": "PositionDiscountFreeform",
              "Type": "String",
              "Desc": "The discount freeform which specifies the per position discounts of documents in a query (uses a single variable P for position where P=0 is first position)",
              "Aliases": [
                "pdff"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": null
            },
            {
              "Name": "ParallelTrainer",
              "Type": {
                "Kind": "Component",
                "ComponentKind": "ParallelTraining"
              },
              "Desc": "Allows to choose Parallel FastTree Learning Algorithm",
              "Aliases": [
                "parag"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": {
                "Name": "Single"
              }
            },
            {
              "Name": "NumThreads",
              "Type": "Int",
              "Desc": "The number of threads to use",
              "Aliases": [
                "t"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": true,
              "Default": null
            },
            {
              "Name": "RngSeed",
              "Type": "Int",
              "Desc": "The seed of the random number generator",
              "Aliases": [
                "r1"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 123
            },
            {
              "Name": "FeatureSelectSeed",
              "Type": "Int",
              "Desc": "The seed of the active feature selection",
              "Aliases": [
                "r3"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 123
            },
            {
              "Name": "EntropyCoefficient",
              "Type": "Float",
              "Desc": "The entropy (regularization) coefficient between 0 and 1",
              "Aliases": [
                "e"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "HistogramPoolSize",
              "Type": "Int",
              "Desc": "The number of histograms in the pool (between 2 and numLeaves)",
              "Aliases": [
                "ps"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": -1
            },
            {
              "Name": "DiskTranspose",
              "Type": "Bool",
              "Desc": "Whether to utilize the disk or the data's native transposition facilities (where applicable) when performing the transpose",
              "Aliases": [
                "dt"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": true,
              "Default": null
            },
            {
              "Name": "FeatureFlocks",
              "Type": "Bool",
              "Desc": "Whether to collectivize features during dataset preparation to speed up training",
              "Aliases": [
                "flocks"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": true
            },
            {
              "Name": "CategoricalSplit",
              "Type": "Bool",
              "Desc": "Whether to do split based on multiple categorical feature values.",
              "Aliases": [
                "cat"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "MaxCategoricalGroupsPerNode",
              "Type": "Int",
              "Desc": "Maximum categorical split groups to consider when splitting on a categorical feature. Split groups are a collection of split points. This is used to reduce overfitting when there many categorical features.",
              "Aliases": [
                "mcg"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 64
            },
            {
              "Name": "MaxCategoricalSplitPoints",
              "Type": "Int",
              "Desc": "Maximum categorical split points to consider when splitting on a categorical feature.",
              "Aliases": [
                "maxcat"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 64
            },
            {
              "Name": "MinDocsPercentageForCategoricalSplit",
              "Type": "Float",
              "Desc": "Minimum categorical docs percentage in a bin to consider for a split.",
              "Aliases": [
                "mdop"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.001
            },
            {
              "Name": "MinDocsForCategoricalSplit",
              "Type": "Int",
              "Desc": "Minimum categorical doc count in a bin to consider for a split.",
              "Aliases": [
                "mdo"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 100
            },
            {
              "Name": "Bias",
              "Type": "Float",
              "Desc": "Bias for calculating gradient for each feature bin for a categorical feature.",
              "Aliases": [
                "bias"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "Bundling",
              "Type": {
                "Kind": "Enum",
                "Values": [
                  "None",
                  "AggregateLowPopulation",
                  "Adjacent"
                ]
              },
              "Desc": "Bundle low population bins. Bundle.None(0): no bundling, Bundle.AggregateLowPopulation(1): Bundle low population, Bundle.Adjacent(2): Neighbor low population bundle.",
              "Aliases": [
                "bundle"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": "None"
            },
            {
              "Name": "MaxBins",
              "Type": "Int",
              "Desc": "Maximum number of distinct values (bins) per feature",
              "Aliases": [
                "mb"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 255
            },
            {
              "Name": "SparsifyThreshold",
              "Type": "Float",
              "Desc": "Sparsity level needed to use sparse feature representation",
              "Aliases": [
                "sp"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.7
            },
            {
              "Name": "FeatureFirstUsePenalty",
              "Type": "Float",
              "Desc": "The feature first use penalty coefficient",
              "Aliases": [
                "ffup"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "FeatureReusePenalty",
              "Type": "Float",
              "Desc": "The feature re-use penalty (regularization) coefficient",
              "Aliases": [
                "frup"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "GainConfidenceLevel",
              "Type": "Float",
              "Desc": "Tree fitting gain confidence requirement (should be in the range [0,1) ).",
              "Aliases": [
                "gainconf"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "SoftmaxTemperature",
              "Type": "Float",
              "Desc": "The temperature of the randomized softmax distribution for choosing the feature",
              "Aliases": [
                "smtemp"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "ExecutionTimes",
              "Type": "Bool",
              "Desc": "Print execution time breakdown to stdout",
              "Aliases": [
                "et"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "FeatureFraction",
              "Type": "Float",
              "Desc": "The fraction of features (chosen randomly) to use on each iteration",
              "Aliases": [
                "ff"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1.0
            },
            {
              "Name": "BaggingSize",
              "Type": "Int",
              "Desc": "Number of trees in each bag (0 for disabling bagging)",
              "Aliases": [
                "bag"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0
            },
            {
              "Name": "BaggingTrainFraction",
              "Type": "Float",
              "Desc": "Percentage of training examples used in each bag",
              "Aliases": [
                "bagfrac"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.7
            },
            {
              "Name": "SplitFraction",
              "Type": "Float",
              "Desc": "The fraction of features (chosen randomly) to use on each split",
              "Aliases": [
                "sf"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1.0
            },
            {
              "Name": "Smoothing",
              "Type": "Float",
              "Desc": "Smoothing paramter for tree regularization",
              "Aliases": [
                "s"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "AllowEmptyTrees",
              "Type": "Bool",
              "Desc": "When a root split is impossible, allow training to proceed",
              "Aliases": [
                "allowempty",
                "dummies"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": true
            },
            {
              "Name": "FeatureCompressionLevel",
              "Type": "Int",
              "Desc": "The level of feature compression to use",
              "Aliases": [
                "fcomp"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1
            },
            {
              "Name": "CompressEnsemble",
              "Type": "Bool",
              "Desc": "Compress the tree Ensemble",
              "Aliases": [
                "cmp"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "MaxTreesAfterCompression",
              "Type": "Int",
              "Desc": "Maximum Number of trees after compression",
              "Aliases": [
                "cmpmax"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": -1
            },
            {
              "Name": "PrintTestGraph",
              "Type": "Bool",
              "Desc": "Print metrics graph for the first test set",
              "Aliases": [
                "graph"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "PrintTrainValidGraph",
              "Type": "Bool",
              "Desc": "Print Train and Validation metrics in graph",
              "Aliases": [
                "graphtv"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "TestFrequency",
              "Type": "Int",
              "Desc": "Calculate metric values for train/valid/test every k rounds",
              "Aliases": [
                "tf"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 2147483647
            }
          ]
        },
        {
          "Name": "FastTreeTweedieRegression",
          "Desc": "Trains gradient boosted decision trees to fit target values using a Tweedie loss function. This learner is a generalization of Poisson, compound Poisson, and gamma regression.",
          "FriendlyName": "FastTree (Boosted Trees) Tweedie Regression",
          "Settings": [
            {
              "Name": "NumTrees",
              "Type": "Int",
              "Desc": "Number of weak hypotheses in the ensemble",
              "Aliases": [
                "iter"
              ],
              "Required": false,
              "SortOrder": 1.0,
              "IsNullable": false,
              "Default": 100,
              "SweepRange": {
                "RangeType": "Discrete",
                "Values": [
                  20,
                  100,
                  500
                ]
              }
            },
            {
              "Name": "TrainingData",
              "Type": "DataView",
              "Desc": "The data to be used for training",
              "Aliases": [
                "data"
              ],
              "Required": true,
              "SortOrder": 1.0,
              "IsNullable": false
            },
            {
              "Name": "NumLeaves",
              "Type": "Int",
              "Desc": "The max number of leaves in each regression tree",
              "Aliases": [
                "nl"
              ],
              "Required": false,
              "SortOrder": 2.0,
              "IsNullable": false,
              "Default": 20,
              "SweepRange": {
                "RangeType": "Long",
                "Min": 2,
                "Max": 128,
                "StepSize": 4.0,
                "IsLogScale": true
              }
            },
            {
              "Name": "FeatureColumn",
              "Type": "String",
              "Desc": "Column to use for features",
              "Aliases": [
                "feat"
              ],
              "Required": false,
              "SortOrder": 2.0,
              "IsNullable": false,
              "Default": "Features"
            },
            {
              "Name": "MinDocumentsInLeafs",
              "Type": "Int",
              "Desc": "The minimal number of documents allowed in a leaf of a regression tree, out of the subsampled data",
              "Aliases": [
                "mil"
              ],
              "Required": false,
              "SortOrder": 3.0,
              "IsNullable": false,
              "Default": 10,
              "SweepRange": {
                "RangeType": "Discrete",
                "Values": [
                  1,
                  10,
                  50
                ]
              }
            },
            {
              "Name": "LabelColumn",
              "Type": "String",
              "Desc": "Column to use for labels",
              "Aliases": [
                "lab"
              ],
              "Required": false,
              "SortOrder": 3.0,
              "IsNullable": false,
              "Default": "Label"
            },
            {
              "Name": "LearningRates",
              "Type": "Float",
              "Desc": "The learning rate",
              "Aliases": [
                "lr"
              ],
              "Required": false,
              "SortOrder": 4.0,
              "IsNullable": false,
              "Default": 0.2,
              "SweepRange": {
                "RangeType": "Float",
                "Min": 0.025,
                "Max": 0.4,
                "IsLogScale": true
              }
            },
            {
              "Name": "WeightColumn",
              "Type": "String",
              "Desc": "Column to use for example weight",
              "Aliases": [
                "weight"
              ],
              "Required": false,
              "SortOrder": 4.0,
              "IsNullable": false,
              "Default": "Weight"
            },
            {
              "Name": "GroupIdColumn",
              "Type": "String",
              "Desc": "Column to use for example groupId",
              "Aliases": [
                "groupId"
              ],
              "Required": false,
              "SortOrder": 5.0,
              "IsNullable": false,
              "Default": "GroupId"
            },
            {
              "Name": "NormalizeFeatures",
              "Type": {
                "Kind": "Enum",
                "Values": [
                  "No",
                  "Warn",
                  "Auto",
                  "Yes"
                ]
              },
              "Desc": "Normalize option for the feature column",
              "Aliases": [
                "norm"
              ],
              "Required": false,
              "SortOrder": 5.0,
              "IsNullable": false,
              "Default": "Auto"
            },
            {
              "Name": "Caching",
              "Type": {
                "Kind": "Enum",
                "Values": [
                  "Auto",
                  "Memory",
                  "Disk",
                  "None"
                ]
              },
              "Desc": "Whether learner should cache input training data",
              "Aliases": [
                "cache"
              ],
              "Required": false,
              "SortOrder": 6.0,
              "IsNullable": false,
              "Default": "Auto"
            },
            {
              "Name": "Index",
              "Type": "Float",
              "Desc": "Index parameter for the Tweedie distribution, in the range [1, 2]. 1 is Poisson loss, 2 is gamma loss, and intermediate values are compound Poisson loss.",
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1.5
            },
            {
              "Name": "BestStepRankingRegressionTrees",
              "Type": "Bool",
              "Desc": "Use best regression step trees?",
              "Aliases": [
                "bsr"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "UseLineSearch",
              "Type": "Bool",
              "Desc": "Should we use line search for a step size",
              "Aliases": [
                "ls"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "NumPostBracketSteps",
              "Type": "Int",
              "Desc": "Number of post-bracket line search steps",
              "Aliases": [
                "lssteps"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0
            },
            {
              "Name": "MinStepSize",
              "Type": "Float",
              "Desc": "Minimum line search step size",
              "Aliases": [
                "minstep"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "OptimizationAlgorithm",
              "Type": {
                "Kind": "Enum",
                "Values": [
                  "GradientDescent",
                  "AcceleratedGradientDescent",
                  "ConjugateGradientDescent"
                ]
              },
              "Desc": "Optimization algorithm to be used (GradientDescent, AcceleratedGradientDescent)",
              "Aliases": [
                "oa"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": "GradientDescent"
            },
            {
              "Name": "EarlyStoppingRule",
              "Type": {
                "Kind": "Component",
                "ComponentKind": "EarlyStoppingCriterion"
              },
              "Desc": "Early stopping rule. (Validation set (/valid) is required.)",
              "Aliases": [
                "esr"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": null
            },
            {
              "Name": "EarlyStoppingMetrics",
              "Type": "Int",
              "Desc": "Early stopping metrics. (For regression, 1: L1, 2:L2; for ranking, 1:NDCG@1, 3:NDCG@3)",
              "Aliases": [
                "esmt"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0
            },
            {
              "Name": "EnablePruning",
              "Type": "Bool",
              "Desc": "Enable post-training pruning to avoid overfitting. (a validation set is required)",
              "Aliases": [
                "pruning"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "UseTolerantPruning",
              "Type": "Bool",
              "Desc": "Use window and tolerance for pruning",
              "Aliases": [
                "prtol"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "PruningThreshold",
              "Type": "Float",
              "Desc": "The tolerance threshold for pruning",
              "Aliases": [
                "prth"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.004
            },
            {
              "Name": "PruningWindowSize",
              "Type": "Int",
              "Desc": "The moving window size for pruning",
              "Aliases": [
                "prws"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 5
            },
            {
              "Name": "Shrinkage",
              "Type": "Float",
              "Desc": "Shrinkage",
              "Aliases": [
                "shrk"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1.0,
              "SweepRange": {
                "RangeType": "Float",
                "Min": 0.025,
                "Max": 4.0,
                "IsLogScale": true
              }
            },
            {
              "Name": "DropoutRate",
              "Type": "Float",
              "Desc": "Dropout rate for tree regularization",
              "Aliases": [
                "tdrop"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0,
              "SweepRange": {
                "RangeType": "Discrete",
                "Values": [
                  0.0,
                  1E-09,
                  0.05,
                  0.1,
                  0.2
                ]
              }
            },
            {
              "Name": "GetDerivativesSampleRate",
              "Type": "Int",
              "Desc": "Sample each query 1 in k times in the GetDerivatives function",
              "Aliases": [
                "sr"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1
            },
            {
              "Name": "WriteLastEnsemble",
              "Type": "Bool",
              "Desc": "Write the last ensemble instead of the one determined by early stopping",
              "Aliases": [
                "hl"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "MaxTreeOutput",
              "Type": "Float",
              "Desc": "Upper bound on absolute value of single tree output",
              "Aliases": [
                "mo"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 100.0
            },
            {
              "Name": "RandomStart",
              "Type": "Bool",
              "Desc": "Training starts from random ordering (determined by /r1)",
              "Aliases": [
                "rs"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "FilterZeroLambdas",
              "Type": "Bool",
              "Desc": "Filter zero lambdas during training",
              "Aliases": [
                "fzl"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "BaselineScoresFormula",
              "Type": "String",
              "Desc": "Freeform defining the scores that should be used as the baseline ranker",
              "Aliases": [
                "basescores"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": null
            },
            {
              "Name": "BaselineAlphaRisk",
              "Type": "String",
              "Desc": "Baseline alpha for tradeoffs of risk (0 is normal training)",
              "Aliases": [
                "basealpha"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": null
            },
            {
              "Name": "PositionDiscountFreeform",
              "Type": "String",
              "Desc": "The discount freeform which specifies the per position discounts of documents in a query (uses a single variable P for position where P=0 is first position)",
              "Aliases": [
                "pdff"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": null
            },
            {
              "Name": "ParallelTrainer",
              "Type": {
                "Kind": "Component",
                "ComponentKind": "ParallelTraining"
              },
              "Desc": "Allows to choose Parallel FastTree Learning Algorithm",
              "Aliases": [
                "parag"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": {
                "Name": "Single"
              }
            },
            {
              "Name": "NumThreads",
              "Type": "Int",
              "Desc": "The number of threads to use",
              "Aliases": [
                "t"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": true,
              "Default": null
            },
            {
              "Name": "RngSeed",
              "Type": "Int",
              "Desc": "The seed of the random number generator",
              "Aliases": [
                "r1"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 123
            },
            {
              "Name": "FeatureSelectSeed",
              "Type": "Int",
              "Desc": "The seed of the active feature selection",
              "Aliases": [
                "r3"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 123
            },
            {
              "Name": "EntropyCoefficient",
              "Type": "Float",
              "Desc": "The entropy (regularization) coefficient between 0 and 1",
              "Aliases": [
                "e"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "HistogramPoolSize",
              "Type": "Int",
              "Desc": "The number of histograms in the pool (between 2 and numLeaves)",
              "Aliases": [
                "ps"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": -1
            },
            {
              "Name": "DiskTranspose",
              "Type": "Bool",
              "Desc": "Whether to utilize the disk or the data's native transposition facilities (where applicable) when performing the transpose",
              "Aliases": [
                "dt"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": true,
              "Default": null
            },
            {
              "Name": "FeatureFlocks",
              "Type": "Bool",
              "Desc": "Whether to collectivize features during dataset preparation to speed up training",
              "Aliases": [
                "flocks"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": true
            },
            {
              "Name": "CategoricalSplit",
              "Type": "Bool",
              "Desc": "Whether to do split based on multiple categorical feature values.",
              "Aliases": [
                "cat"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "MaxCategoricalGroupsPerNode",
              "Type": "Int",
              "Desc": "Maximum categorical split groups to consider when splitting on a categorical feature. Split groups are a collection of split points. This is used to reduce overfitting when there many categorical features.",
              "Aliases": [
                "mcg"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 64
            },
            {
              "Name": "MaxCategoricalSplitPoints",
              "Type": "Int",
              "Desc": "Maximum categorical split points to consider when splitting on a categorical feature.",
              "Aliases": [
                "maxcat"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 64
            },
            {
              "Name": "MinDocsPercentageForCategoricalSplit",
              "Type": "Float",
              "Desc": "Minimum categorical docs percentage in a bin to consider for a split.",
              "Aliases": [
                "mdop"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.001
            },
            {
              "Name": "MinDocsForCategoricalSplit",
              "Type": "Int",
              "Desc": "Minimum categorical doc count in a bin to consider for a split.",
              "Aliases": [
                "mdo"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 100
            },
            {
              "Name": "Bias",
              "Type": "Float",
              "Desc": "Bias for calculating gradient for each feature bin for a categorical feature.",
              "Aliases": [
                "bias"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "Bundling",
              "Type": {
                "Kind": "Enum",
                "Values": [
                  "None",
                  "AggregateLowPopulation",
                  "Adjacent"
                ]
              },
              "Desc": "Bundle low population bins. Bundle.None(0): no bundling, Bundle.AggregateLowPopulation(1): Bundle low population, Bundle.Adjacent(2): Neighbor low population bundle.",
              "Aliases": [
                "bundle"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": "None"
            },
            {
              "Name": "MaxBins",
              "Type": "Int",
              "Desc": "Maximum number of distinct values (bins) per feature",
              "Aliases": [
                "mb"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 255
            },
            {
              "Name": "SparsifyThreshold",
              "Type": "Float",
              "Desc": "Sparsity level needed to use sparse feature representation",
              "Aliases": [
                "sp"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.7
            },
            {
              "Name": "FeatureFirstUsePenalty",
              "Type": "Float",
              "Desc": "The feature first use penalty coefficient",
              "Aliases": [
                "ffup"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "FeatureReusePenalty",
              "Type": "Float",
              "Desc": "The feature re-use penalty (regularization) coefficient",
              "Aliases": [
                "frup"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "GainConfidenceLevel",
              "Type": "Float",
              "Desc": "Tree fitting gain confidence requirement (should be in the range [0,1) ).",
              "Aliases": [
                "gainconf"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "SoftmaxTemperature",
              "Type": "Float",
              "Desc": "The temperature of the randomized softmax distribution for choosing the feature",
              "Aliases": [
                "smtemp"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "ExecutionTimes",
              "Type": "Bool",
              "Desc": "Print execution time breakdown to stdout",
              "Aliases": [
                "et"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "FeatureFraction",
              "Type": "Float",
              "Desc": "The fraction of features (chosen randomly) to use on each iteration",
              "Aliases": [
                "ff"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1.0
            },
            {
              "Name": "BaggingSize",
              "Type": "Int",
              "Desc": "Number of trees in each bag (0 for disabling bagging)",
              "Aliases": [
                "bag"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0
            },
            {
              "Name": "BaggingTrainFraction",
              "Type": "Float",
              "Desc": "Percentage of training examples used in each bag",
              "Aliases": [
                "bagfrac"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.7
            },
            {
              "Name": "SplitFraction",
              "Type": "Float",
              "Desc": "The fraction of features (chosen randomly) to use on each split",
              "Aliases": [
                "sf"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1.0
            },
            {
              "Name": "Smoothing",
              "Type": "Float",
              "Desc": "Smoothing paramter for tree regularization",
              "Aliases": [
                "s"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0.0
            },
            {
              "Name": "AllowEmptyTrees",
              "Type": "Bool",
              "Desc": "When a root split is impossible, allow training to proceed",
              "Aliases": [
                "allowempty",
                "dummies"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": true
            },
            {
              "Name": "FeatureCompressionLevel",
              "Type": "Int",
              "Desc": "The level of feature compression to use",
              "Aliases": [
                "fcomp"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1
            },
            {
              "Name": "CompressEnsemble",
              "Type": "Bool",
              "Desc": "Compress the tree Ensemble",
              "Aliases": [
                "cmp"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "MaxTreesAfterCompression",
              "Type": "Int",
              "Desc": "Maximum Number of trees after compression",
              "Aliases": [
                "cmpmax"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": -1
            },
            {
              "Name": "PrintTestGraph",
              "Type": "Bool",
              "Desc": "Print metrics graph for the first test set",
              "Aliases": [
                "graph"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "PrintTrainValidGraph",
              "Type": "Bool",
              "Desc": "Print Train and Validation metrics in graph",
              "Aliases": [
                "graphtv"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": false
            },
            {
              "Name": "TestFrequency",
              "Type": "Int",
              "Desc": "Calculate metric values for train/valid/test every k rounds",
              "Aliases": [
                "tf"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 2147483647
            }
          ]
        }
      ]
    },
    {
      "Kind": "NgramExtractor",
      "Components": [
        {
          "Name": "NGram",
          "Desc": "Extracts NGrams from text and convert them to vector using dictionary.",
          "FriendlyName": "NGram Extractor Transform",
          "Aliases": [
            "NGramExtractorTransform",
            "NGramExtractor"
          ],
          "Settings": [
            {
              "Name": "NgramLength",
              "Type": "Int",
              "Desc": "Ngram length",
              "Aliases": [
                "ngram"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1
            },
            {
              "Name": "SkipLength",
              "Type": "Int",
              "Desc": "Maximum number of tokens to skip when constructing an ngram",
              "Aliases": [
                "skips"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0
            },
            {
              "Name": "AllLengths",
              "Type": "Bool",
              "Desc": "Whether to include all ngram lengths up to NgramLength or only NgramLength",
              "Aliases": [
                "all"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": true
            },
            {
              "Name": "MaxNumTerms",
              "Type": {
                "Kind": "Array",
                "ItemType": "Int"
              },
              "Desc": "Maximum number of ngrams to store in the dictionary",
              "Aliases": [
                "max"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": [
                10000000
              ]
            },
            {
              "Name": "Weighting",
              "Type": {
                "Kind": "Enum",
                "Values": [
                  "Tf",
                  "Idf",
                  "TfIdf"
                ]
              },
              "Desc": "The weighting criteria",
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": "Tf"
            }
          ]
        },
        {
          "Name": "NGramHash",
          "Desc": "Extracts NGrams from text and convert them to vector using hashing trick.",
          "FriendlyName": "NGram Hash Extractor Transform",
          "Aliases": [
            "NGramHashExtractorTransform",
            "NGramHashExtractor"
          ],
          "Settings": [
            {
              "Name": "HashBits",
              "Type": "Int",
              "Desc": "Number of bits to hash into. Must be between 1 and 30, inclusive.",
              "Aliases": [
                "bits"
              ],
              "Required": false,
              "SortOrder": 2.0,
              "IsNullable": false,
              "Default": 16
            },
            {
              "Name": "NgramLength",
              "Type": "Int",
              "Desc": "Ngram length",
              "Aliases": [
                "ngram"
              ],
              "Required": false,
              "SortOrder": 3.0,
              "IsNullable": false,
              "Default": 1
            },
            {
              "Name": "SkipLength",
              "Type": "Int",
              "Desc": "Maximum number of tokens to skip when constructing an ngram",
              "Aliases": [
                "skips"
              ],
              "Required": false,
              "SortOrder": 4.0,
              "IsNullable": false,
              "Default": 0
            },
            {
              "Name": "AllLengths",
              "Type": "Bool",
              "Desc": "Whether to include all ngram lengths up to ngramLength or only ngramLength",
              "Aliases": [
                "all"
              ],
              "Required": false,
              "SortOrder": 4.0,
              "IsNullable": false,
              "Default": true
            },
            {
              "Name": "Seed",
              "Type": "UInt",
              "Desc": "Hashing seed",
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 314489979
            },
            {
              "Name": "Ordered",
              "Type": "Bool",
              "Desc": "Whether the position of each source column should be included in the hash (when there are multiple source columns).",
              "Aliases": [
                "ord"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": true
            },
            {
              "Name": "InvertHash",
              "Type": "Int",
              "Desc": "Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.",
              "Aliases": [
                "ih"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0
            }
          ]
        }
      ]
    },
    {
      "Kind": "ParallelTraining",
      "Components": [
        {
          "Name": "Single",
          "Desc": "Single node machine learning process.",
          "FriendlyName": "Single",
          "Settings": []
        }
      ]
    },
    {
      "Kind": "RegressionLossFunction",
      "Components": [
        {
          "Name": "PoissonLoss",
          "Desc": "Poisson loss.",
          "FriendlyName": "Poisson Loss",
          "Settings": []
        },
        {
          "Name": "SquaredLoss",
          "Desc": "Squared loss.",
          "FriendlyName": "Squared Loss",
          "Aliases": [
            "L2"
          ],
          "Settings": []
        },
        {
          "Name": "TweedieLoss",
          "Desc": "Tweedie loss.",
          "FriendlyName": "Tweedie Loss",
          "Aliases": [
            "tweedie"
          ],
          "Settings": [
            {
              "Name": "Index",
              "Type": "Float",
              "Desc": "Index parameter for the Tweedie distribution, in the range [1, 2]. 1 is Poisson loss, 2 is gamma loss, and intermediate values are compound Poisson loss.",
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1.5
            }
          ]
        }
      ]
    },
    {
      "Kind": "SDCAClassificationLossFunction",
      "Components": [
        {
          "Name": "HingeLoss",
          "Desc": "Hinge loss.",
          "FriendlyName": "Hinge loss",
          "Aliases": [
            "Hinge"
          ],
          "Settings": [
            {
              "Name": "Margin",
              "Type": "Float",
              "Desc": "Margin value",
              "Aliases": [
                "marg"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1.0
            }
          ]
        },
        {
          "Name": "LogLoss",
          "Desc": "Log loss.",
          "FriendlyName": "Log loss",
          "Aliases": [
            "Logistic",
            "CrossEntropy"
          ],
          "Settings": []
        },
        {
          "Name": "SmoothedHingeLoss",
          "Desc": "Smoothed Hinge loss.",
          "FriendlyName": "Smoothed Hinge Loss",
          "Aliases": [
            "SmoothedHinge"
          ],
          "Settings": [
            {
              "Name": "SmoothingConst",
              "Type": "Float",
              "Desc": "Smoothing constant",
              "Aliases": [
                "smooth"
              ],
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 1.0
            }
          ]
        }
      ]
    },
    {
      "Kind": "SDCARegressionLossFunction",
      "Components": [
        {
          "Name": "SquaredLoss",
          "Desc": "Squared loss.",
          "FriendlyName": "Squared Loss",
          "Aliases": [
            "L2"
          ],
          "Settings": []
        }
      ]
    },
    {
      "Kind": "SearchTerminator",
      "Components": [
        {
          "Name": "IterationLimited",
          "Desc": "Terminators a sweep based on total number of iterations.",
          "FriendlyName": "Pipeline Sweep Iteration Terminator",
          "Settings": [
            {
              "Name": "FinalHistoryLength",
              "Type": "Int",
              "Desc": "Total number of iterations.",
              "Aliases": [
                "length"
              ],
              "Required": true,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": 0
            }
          ]
        }
      ]
    },
    {
      "Kind": "StopWordsRemover",
      "Components": [
        {
          "Name": "Custom",
          "Desc": "Remover with list of stopwords specified by the user.",
          "FriendlyName": "Custom Stopwords Remover",
          "Aliases": [
            "CustomStopWordsRemover",
            "CustomStopWords"
          ],
          "Settings": [
            {
              "Name": "Stopword",
              "Type": {
                "Kind": "Array",
                "ItemType": "String"
              },
              "Desc": "List of stopwords",
              "Required": false,
              "SortOrder": 150.0,
              "IsNullable": false,
              "Default": null
            }
          ]
        },
        {
          "Name": "Predefined",
          "Desc": "Remover with predefined list of stop words.",
          "FriendlyName": "Predefined Stopwords List Remover",
          "Aliases": [
            "PredefinedStopWordsRemover",
            "PredefinedStopWords"
          ],
          "Settings": []
        }
      ]
    }
  ],
  "EntryPointKinds": [
    {
      "Kind": "IAnomalyDetectionOutput",
      "Settings": []
    },
    {
      "Kind": "IBinaryClassificationOutput",
      "Settings": []
    },
    {
      "Kind": "ICalibratorInput",
      "Settings": [
        {
          "Name": "UncalibratedPredictorModel",
          "Type": "PredictorModel"
        },
        {
          "Name": "MaxRows",
          "Type": "Int"
        },
        {
          "Name": "Data",
          "Type": "DataView"
        }
      ]
    },
    {
      "Kind": "ICalibratorOutput",
      "Settings": []
    },
    {
      "Kind": "IClassificationEvaluatorOutput",
      "Settings": [
        {
          "Name": "ConfusionMatrix",
          "Type": "DataView"
        },
        {
          "Name": "Warnings",
          "Type": "DataView"
        },
        {
          "Name": "OverallMetrics",
          "Type": "DataView"
        },
        {
          "Name": "PerInstanceMetrics",
          "Type": "DataView"
        }
      ]
    },
    {
      "Kind": "IClusteringOutput",
      "Settings": []
    },
    {
      "Kind": "IEvaluatorInput",
      "Settings": [
        {
          "Name": "Data",
          "Type": "DataView"
        },
        {
          "Name": "NameColumn",
          "Type": "String"
        }
      ]
    },
    {
      "Kind": "IEvaluatorOutput",
      "Settings": [
        {
          "Name": "Warnings",
          "Type": "DataView"
        },
        {
          "Name": "OverallMetrics",
          "Type": "DataView"
        },
        {
          "Name": "PerInstanceMetrics",
          "Type": "DataView"
        }
      ]
    },
    {
      "Kind": "IFeaturizerInput",
      "Settings": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel"
        },
        {
          "Name": "Data",
          "Type": "DataView"
        }
      ]
    },
    {
      "Kind": "ILearningPipelineLoader",
      "Settings": []
    },
    {
      "Kind": "IMulticlassClassificationOutput",
      "Settings": []
    },
    {
      "Kind": "IRankingOutput",
      "Settings": []
    },
    {
      "Kind": "IRegressionOutput",
      "Settings": []
    },
    {
      "Kind": "ITrainerInput",
      "Settings": [
        {
          "Name": "TrainingData",
          "Type": "DataView"
        },
        {
          "Name": "FeatureColumn",
          "Type": "String"
        }
      ]
    },
    {
      "Kind": "ITrainerInputWithGroupId",
      "Settings": [
        {
          "Name": "GroupIdColumn",
          "Type": "String"
        },
        {
          "Name": "WeightColumn",
          "Type": "String"
        },
        {
          "Name": "LabelColumn",
          "Type": "String"
        },
        {
          "Name": "TrainingData",
          "Type": "DataView"
        },
        {
          "Name": "FeatureColumn",
          "Type": "String"
        }
      ]
    },
    {
      "Kind": "ITrainerInputWithLabel",
      "Settings": [
        {
          "Name": "LabelColumn",
          "Type": "String"
        },
        {
          "Name": "TrainingData",
          "Type": "DataView"
        },
        {
          "Name": "FeatureColumn",
          "Type": "String"
        }
      ]
    },
    {
      "Kind": "ITrainerInputWithWeight",
      "Settings": [
        {
          "Name": "WeightColumn",
          "Type": "String"
        },
        {
          "Name": "LabelColumn",
          "Type": "String"
        },
        {
          "Name": "TrainingData",
          "Type": "DataView"
        },
        {
          "Name": "FeatureColumn",
          "Type": "String"
        }
      ]
    },
    {
      "Kind": "ITrainerOutput",
      "Settings": [
        {
          "Name": "PredictorModel",
          "Type": "PredictorModel"
        }
      ]
    },
    {
      "Kind": "ITransformInput",
      "Settings": [
        {
          "Name": "Data",
          "Type": "DataView"
        }
      ]
    },
    {
      "Kind": "ITransformOutput",
      "Settings": [
        {
          "Name": "OutputData",
          "Type": "DataView"
        },
        {
          "Name": "Model",
          "Type": "TransformModel"
        }
      ]
    }
  ]
}