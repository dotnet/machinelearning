I4: x => "hello" // StrLit
# 0
$
I4: x => 3
#
    0
    5
$
I4: x => x ^ 2 * x
#
    -1
    0
    2
    3
    1024
$
I4: x : x ^ 2 ^ 3
#
    2
    12
    -8
$
I4,I8: // Promotion
(x,y) => x+y
#
    3,5
    2147483647,5
    3,9223372036854775807
    3,9223372036854775804
    -3,9223372036854775807
$
I4,R4: // Promotion
(x,y) => x+y
#
    3,5
    2147483647,5
    3,9223372036854775807
    3,1e30
$
I4,R8: // Promotion
(x,y) => x+y
#
    3,5
    2147483647,5
    3,9223372036854775807
    3,1e30
$
I4: // Unresolved identifier
x => y
$
BL: // Bad number with minus
x => -x
$
I4: // Bad bool with not
x => !x
$
I4: // Not on constant bool
x => !(5 < 3 < x)
#
    17
$
R4: // Constant fold minus
x => -(0.0/0) ?? -3 + -x
#
    0
    ?
    3
$
R8: // Constant fold minus
x => -(0.0/0L) ?? -3L + -x
#
    0
    ?
    3
$
R4: // Constant fold minus
x => -(0f/0f) ?? -3f + -x
#
    0
    ?
    3
$
R8: // Constant fold minus
x => -(0d/0d) ?? -3d + -x
#
    0
    ?
    3
$
I4,BL:
(x,y) => x < y
$
R4,BL:
(x,y) => x < y
$
I4:
x => "hello" == x
$
I4,BL:
(x,y) => (y ?? x) + (x ?? y) + ("hello" ?? x)
$
BL:
x => (x ?? "hello") || ("hello" ?? x)
$
I4: x => "whatever" ?? "hello"
# 0
$
BL:
x => 1000 * (int(true || x) + int(x || true))
    + 100 * (int(true) + int(true))
    + 10 * (int(not(false && x)) + int(not(x && false)))
    + 1 * (int(true) + int(true))
#
    true
    false
    ?
$
BL:
x => 100 * (int(0.0/0 == 1 ? x : false) + 1 == 1 ? 2 : 3) + 10 * (int(!(false ? x : false)) + 1 == 1 ? 2 : 3) + 1 * (int(true ? false : x) + 1 > 0 ? 3 : 1)
#
    true
    false
    ?
$
BL:
x => x + "hello"
$
BL,I4,I8,R4,R8:
(a,b,c,d,e) =>
    isna(a + b) || isna(b + a) ||
    isna(a + c) || isna(c + a) ||
    isna(a + d) || isna(d + a) ||
    isna(a + e) || isna(e + a)
$
BL,I4,I8,R4,R8:
(a,b,c,d,e) =>
    10000 * int(!isna(true ?? a)) +
    1000 * int(!isna(1 ?? b)) +
    100 * int(!isna(1 ?? c)) +
    10 * int(!isna(1 ?? d)) +
    1 * int(!isna(1 ?? e))
#
    ?,?,?,?,?
    true,3,3,3,3
$
I4: x => x + (17 - 31)
#
    1
    2147483647
    -2147483633
    -2147483634
    ?
$
I4: s => // Constant folding I4
    s == 0 ? 37 % 5 :
    s == 1 ? 37 % -5 :
    s == 2 ? -37 % -5 :
    s == 3 ? -37 % 5 :
    0
#
    0
    1
    2
    3
$
I4: s => // Constant folding I8
    s == 10 ? 45L + -53 :
    s == 11 ? 9223372036854775807L + 1 :
    s == 12 ? 9223372036854775807L + -1 :
    s == 13 ? -9223372036854775807L + 1 :
    s == 14 ? -9223372036854775807L + -1 :

    s == 20 ? 45L - -53 :
    s == 21 ? 9223372036854775807L - 1 :
    s == 22 ? 9223372036854775807L - -1 :
    s == 23 ? -9223372036854775807L - 1 :
    s == 24 ? -9223372036854775807L - -1 :

    s == 30 ? 45L * -53 :
    s == 31 ? 9000000000000000000L * 2 :
    s == 32 ? 9000000000000000000L * -1 :

    s == 40 ? 37L % 5 :
    s == 41 ? 37L % -5 :
    s == 42 ? -37L % -5 :
    s == 43 ? -37L % 5 :

    s == 50 ? 2L^3 :
    s == 51 ? (-2L)^5 :

    0
#
    10
    11
    12
    13
    14
    15
    16

    20
    21
    22
    23
    24
    25
    26

    30
    31
    32
    33
    34

    40
    41
    42
    43

    50
    51
    52
    53
    54
    55
    56
    57
    58
$
I4: s => // Constant folding R4
    s == 10 ? 3f + 5 :
    s == 11 ? 0f/0 + 5 :
    s == 12 ? 5 + 0f/0 :

    s == 20 ? 3f - 5 :
    s == 21 ? 0f/0 - 5 :
    s == 22 ? 5 - 0f/0 :

    s == 30 ? 3f * 5 :
    s == 31 ? (0f/0) * 5 :
    s == 32 ? 5 * (0f/0) :

    s == 40 ? 3f / 5 :
    s == 41 ? (0f/0) / 5 :
    s == 42 ? 5 / (0f/0) :

    s == 50 ? 37f % 5 :
    s == 51 ? 37f % -5 :
    s == 52 ? -37f % -5 :
    s == 53 ? -37f % 5 :
    s == 54 ? (0f/0) % 5 :
    s == 55 ? 35 % (0f/0) :

    s == 60 ? 2f ^ 3 :
    s == 61 ? 2 ^ 3.5f :
    s == 62 ? (0f/0) ^ 3 :
    s == 63 ? 2f ^ (0f/0) :

    0
#
    10
    11
    12

    20
    21
    22

    30
    31
    32

    40
    41
    42

    50
    51
    52
    53
    54
    55

    60
    61
    62
    63
$
I4: s => // Constant folding R8
    s == 10 ? 3d + 5 :
    s == 11 ? 0d/0 + 5 :
    s == 12 ? 5 + 0d/0 :

    s == 20 ? 3d - 5 :
    s == 21 ? 0d/0 - 5 :
    s == 22 ? 5 - 0d/0 :

    s == 30 ? 3d * 5 :
    s == 31 ? (0d/0) * 5 :
    s == 32 ? 5 * (0d/0) :

    s == 40 ? 3d / 5 :
    s == 41 ? (0d/0) / 5 :
    s == 42 ? 5 / (0d/0) :

    s == 50 ? 37d % 5 :
    s == 51 ? 37d % -5 :
    s == 52 ? -37d % -5 :
    s == 53 ? -37d % 5 :
    s == 54 ? (0d/0) % 5 :
    s == 55 ? 35 % (0d/0) :

    s == 60 ? 2d ^ 3 :
    s == 61 ? 2 ^ 3.5d :
    s == 62 ? (0d/0) ^ 3 :
    s == 63 ? 2d ^ (0d/0) :

    0
#
    10
    11
    12

    20
    21
    22

    30
    31
    32

    40
    41
    42

    50
    51
    52
    53
    54
    55

    60
    61
    62
    63
$
I4:
x => 17 >= 12 > x
#
    3
    11
    12
    121
    ?
$
I4,I4,I4:
(s,x,y) =>
    s == 0 ? 3 != 5 != 3 != x != y :
    s == 1 ? 3 != 3 != 5 != x != y :
    s == 2 ? 3 != 5 != -2 != x != y :
    na(0.0) == 1
#
    0,1,2
    0,?,2
    1,1,2
    1,1,?
    2,1,2
    2,1,3
    2,-2,1
    2,?,1
    2,1,?
$
I4,I4:
(s,x) =>
    s == 0 ? int(3 < 5 <= 5 <= 6) :
    s == 1 ? int(3 < 5 <= na(0.0) <= 6 <= x) :
    -1
#
    0,-12
    1,-12
$
BL,BL:
(x,y) => x <= y
$
BL: x => abs(x)
$
I4: s =>
    s == 2 ? abs(-3L) :
    s == 3 ? abs(-9223372036854775807) :
    -1
#
    0
    1
    2
    3
$
I4: s => // R4
    s == 10 ? abs(0f/0) :
    s == 11 ? abs(-3.5f) :
    s == 12 ? abs(-1f/0) :

    s == 20 ? log(0f/0) :
    s == 21 ? log(0f) :
    s == 22 ? log(1f) :
    s == 23 ? ln(2f) :
    s == 24 ? log(-3.5f) :
    s == 25 ? log(1f/0) :

    s == 30 ? log(0f/0, 2) :
    s == 31 ? log(0f, 2) :
    s == 32 ? log(1f, 2) :
    s == 33 ? log(2f, 2) :
    s == 34 ? log(-3.5f, 2) :
    s == 35 ? log(1f/0, 2) :
    s == 36 ? log(9f, 3) :

    -1
#
    10
    11
    12

    20
    21
    22
    23
    24
    25

    30
    31
    32
    33
    34
    35
    36
$
I4: s => // R8
    s == 10 ? abs(0d/0) :
    s == 11 ? abs(-3.5d) :
    s == 12 ? abs(-1d/0) :

    s == 20 ? log(0d/0) :
    s == 21 ? log(0d) :
    s == 22 ? log(1d) :
    s == 23 ? ln(2d) :
    s == 24 ? log(-3.5d) :
    s == 25 ? log(1d/0) :

    s == 30 ? log(0d/0, 2) :
    s == 31 ? log(0d, 2) :
    s == 32 ? log(1d, 2) :
    s == 33 ? log(2d, 2) :
    s == 34 ? log(-3.5d, 2) :
    s == 35 ? log(1d/0, 2) :
    s == 36 ? log(9d, 3) :

    -1
#
    10
    11
    12

    20
    21
    22
    23
    24
    25

    30
    31
    32
    33
    34
    35
    36
$
I4: x => isna(x, 3)
$
R4: x => log() + log(x,x,x) + log(x,true) + log(true,x)
$
I4,R4:
(s,x) =>
    s == 0 ? exp(x) :
    s == 1 ? sin(x) :
    s == 2 ? cos(x) :
    s == 3 ? tan(x) :
    s == 4 ? sind(x) :
    s == 5 ? cosd(x) :
    s == 6 ? tand(x) :
    s == 7 ? sinh(x) :
    s == 8 ? cosh(x) :
    s == 9 ? tanh(x) :
    s == 10 ? asin(x) :
    s == 11 ? acos(x) :
    s == 12 ? atan(x) :
    s == 13 ? sqrt(x) :
    -100
#
    0,0
    0,-1
    0,1
    0,1000000
    0,?
    1,0
    1,0.52359877559829887307710723054658
    1,1.0471975511965977461542144610932
    1,-0.52359877559829887307710723054658
    1,1e30
    1,1e1000
    1,?
    2,0
    2,0.52359877559829887307710723054658
    2,1.0471975511965977461542144610932
    2,-0.52359877559829887307710723054658
    2,1e30
    2,1e1000
    2,?
    3,0
    3,0.52359877559829887307710723054658
    3,1.0471975511965977461542144610932
    3,-0.52359877559829887307710723054658
    3,1e30
    3,1e1000
    3,?
    4,0
    4,30
    4,60
    4,-30
    4,1e30
    4,1e1000
    4,?
    5,0
    5,30
    5,60
    5,-30
    5,1e30
    5,1e1000
    5,?
    6,0
    6,30
    6,60
    6,-30
    6,1e30
    6,1e1000
    6,?
    7,0
    7,1
    7,-1
    7,-1e30
    7,1e1000
    7,?
    8,0
    8,1
    8,-1
    8,-1e30
    8,1e1000
    8,?
    9,0
    9,1
    9,-1
    9,-1e30
    9,1e1000
    9,?
    10,0
    10,0.5
    10,-0.5
    10,1
    10,-2
    10,?
    11,0
    11,0.5
    11,-0.5
    11,1
    11,-2
    11,?
    12,0
    12,1
    12,-1
    12,-1e1000
    12,1e1000
    12,?
    13,0
    13,1
    13,2
    13,25
    13,1e1000
    13,-1
    13,?
$
I4,R8:
(s,x) =>
    s == 0 ? exp(x) :
    s == 1 ? sin(x) :
    s == 2 ? cos(x) :
    s == 3 ? tan(x) :
    s == 4 ? sind(x) :
    s == 5 ? cosd(x) :
    s == 6 ? tand(x) :
    s == 7 ? sinh(x) :
    s == 8 ? cosh(x) :
    s == 9 ? tanh(x) :
    s == 10 ? asin(x) :
    s == 11 ? acos(x) :
    s == 12 ? atan(x) :
    s == 13 ? sqrt(x) :
    -100
#
    0,0
    0,-1
    0,1
    0,1000000
    0,?
    1,0
    1,0.52359877559829887307710723054658
    1,1.0471975511965977461542144610932
    1,-0.52359877559829887307710723054658
    1,1e30
    1,1e1000
    1,?
    2,0
    2,0.52359877559829887307710723054658
    2,1.0471975511965977461542144610932
    2,-0.52359877559829887307710723054658
    2,1e30
    2,1e1000
    2,?
    3,0
    3,0.52359877559829887307710723054658
    3,1.0471975511965977461542144610932
    3,-0.52359877559829887307710723054658
    3,1e30
    3,1e1000
    3,?
    4,0
    4,30
    4,60
    4,-30
    4,1e30
    4,1e1000
    4,?
    5,0
    5,30
    5,60
    5,-30
    5,1e30
    5,1e1000
    5,?
    6,0
    6,30
    6,60
    6,-30
    6,1e30
    6,1e1000
    6,?
    7,0
    7,1
    7,-1
    7,-1e30
    7,1e1000
    7,?
    8,0
    8,1
    8,-1
    8,-1e30
    8,1e1000
    8,?
    9,0
    9,1
    9,-1
    9,-1e30
    9,1e1000
    9,?
    10,0
    10,0.5
    10,-0.5
    10,1
    10,-2
    10,?
    11,0
    11,0.5
    11,-0.5
    11,1
    11,-2
    11,?
    12,0
    12,1
    12,-1
    12,-1e1000
    12,1e1000
    12,?
    13,0
    13,1
    13,2
    13,25
    13,1e1000
    13,-1
    13,?
$
R4: x => sin(x,x) + sin(x == x)
$
R4: x => sind(30f) + cosd(60d) + tand(45) + cos(0)
#
    0
$
BL: x => int(x,x) + long(x,x) + single(x,x) + float(x,x) + double(x,x)
$
BL: x => int(x) + long(x) + single(x) + float(x) + double(x)
#
    false
    true
    ?
$
I4:
x =>
    100000 * int(3) +
    10000 * int(7L) +
    1000 * int(3.5f) +
    100 * int(3.5d) +
    10 * int(false) +
    1 * int(isna(float(10000000000)) && isna(float(-10000000000)))
#
    0
$
I4:
x =>
    100000 * long(3) +
    10000 * long(7L) +
    1000 * long(3.5f) +
    100 * long(3.5d) +
    10 * long(false) +
    1 * long(isna(float(1e100d)) && isna(float(-1e100d)) && isna(na(0.0)) && isna(float(na(0.0) == 1)))
#
    0
$
I4:
x =>
    100000 * single(3) +
    10000 * single(7L) +
    1000 * single(3f) +
    100 * single(3.00000000001d) +
    10 * single(false) +
    1 * single(isna(single(0.0)) && isna(single(na(0.0))) && isna(single(na(0.0) == 1)))
#
    0
$
I4:
x =>
    100000 * double(3) +
    10000 * double(7L) +
    1000 * double(3f) +
    100 * double(3.00000000001d) +
    10 * double(false) +
    1 * double(isna(double(0.0/0)) && isna(double(0.0/0)) && isna(double(0.0/0 == 1)))
#
    0
$
I4,R4:
(x,y) => 100 + 10 * int(x == y) + 1 * int(single(x) == y)
#
    1,1
    123456789,123456789
    123456792,123456789
$
BL:
x =>
    (x ? x : 3) + (x ? 3 : x) +
    (x ? x : 3L) + (x ? 3L : x) +
    (x ? x : 3f) + (x ? 3f : x) +
    (x ? x : 3d) + (x ? 3d : x) +
    (x ? x : "hi") + (x ? "hi" : x) +
    (x ? -"hi" : x) + (x ? -"hi" : -"bye")
$
I4: s =>
    1000000000 +
    100000000 * (float(true ? false : true) ?? 2) +
    10000000 * (float(false ? false : true) ?? 2) +
    1000000 * (float(0.0/0 == 1 ? false : true) ?? 2) +
    100000 * (float(true ? 0 : 1) ?? 2) +
    10000 * (float(false ? 0 : 1) ?? 2) +
    1000 * (float(0.0/0 == 1 ? 0 : 1) ?? 2) +
    100 * (float(true ? 0L : 1L) ?? 2) +
    10 * (float(false ? 0L : 1L) ?? 2) +
    1 * (float(0.0/0 == 1 ? 0L : 1L) ?? 2)
#
    0
$
I4: s =>
    1000000 +
    100000 * (float(true ? 0f : 1f) ?? 2) +
    10000 * (float(false ? 0f : 1f) ?? 2) +
    1000 * (float(0.0/0 == 1 ? 0f : 1f) ?? 2) +
    100 * (float(true ? 0d : 1d) ?? 2) +
    10 * (float(false ? 0d : 1d) ?? 2) +
    1 * (float(0.0/0 == 1 ? 0d : 1d) ?? 2)
#
    0
$
I4:
x => foo(x)
$
I4:
x => -"hi" < 3 <= x
$
I4: s =>
     (false == false) &&
    !(false == true ) &&
    !(false != false) &&
     (false != true ) &&
     ( 3  ==  3 ) &&
     ( 3L ==  3L) &&
     ( 3F ==  3F) &&
     ( 3D ==  3D) &&
     ("3" == "3") &&
    !( 3  ==  4 ) &&
    !( 3L ==  4L) &&
    !( 3F ==  4F) &&
    !( 3D ==  4D) &&
    !("3" == "4") &&
    !( 3  !=  3 ) &&
    !( 3L !=  3L) &&
    !( 3F !=  3F) &&
    !( 3D !=  3D) &&
    !("3" != "3") &&
     ( 3  !=  4 ) &&
     ( 3L !=  4L) &&
     ( 3F !=  4F) &&
     ( 3D !=  4D) &&
     ("3" != "4") &&
    true
#
    0
$
I4: s =>
    !( 3  <  3 ) &&
    !( 3L <  3L) &&
    !( 3F <  3F) &&
    !( 3D <  3D) &&
     ( 3  <  4 ) &&
     ( 3L <  4L) &&
     ( 3F <  4F) &&
     ( 3D <  4D) &&
     ( 3  <= 3 ) &&
     ( 3L <= 3L) &&
     ( 3F <= 3F) &&
     ( 3D <= 3D) &&
     ( 3  <= 4 ) &&
     ( 3L <= 4L) &&
     ( 3F <= 4F) &&
     ( 3D <= 4D) &&
    !( 3  <= 2 ) &&
    !( 3L <= 2L) &&
    !( 3F <= 2F) &&
    !( 3D <= 2D) &&
    true
#
    0
$
I4: s =>
    !( 3  >  3 ) &&
    !( 3L >  3L) &&
    !( 3F >  3F) &&
    !( 3D >  3D) &&
     ( 3  >  2 ) &&
     ( 3L >  2L) &&
     ( 3F >  2F) &&
     ( 3D >  2D) &&
     ( 3  >= 3 ) &&
     ( 3L >= 3L) &&
     ( 3F >= 3F) &&
     ( 3D >= 3D) &&
    !( 3  >= 4 ) &&
    !( 3L >= 4L) &&
    !( 3F >= 4F) &&
    !( 3D >= 4D) &&
     ( 3  >= 2 ) &&
     ( 3L >= 2L) &&
     ( 3F >= 2F) &&
     ( 3D >= 2D) &&
    true
#
    0
$
TX: x => x
#
    hello
    goodbye
$
BL: x => x ? "a" : "b"
#
    false
    true
    ?
$
BL: x => 0 == 1 ? "a" : "b"
#
    0
$
BL: x => 0.0/0 == 1 ? "a" : "b"
#
    0
$
BL: x => (x ? "a" : "b") == "a"
#
    0
    1
    ?
$
BL,TX: (s,x) => lower(s ? x : x)
#
    1,Hello
    1,hElLo
    0,BlaH
    0,
    ?,Whatever
$
BL,TX: (s,x) => upper(s ? x : x)
#
    1,Hello
    1,hElLo
    0,BlaH
    0,
    ?,Whatever
$
I4: s =>
    s == 0 ? lower("hElLo") :
    s == 1 ? lower("") :
    s == 2 ? lower(0.0/0 == 1 ? "a" : "b") :
    "BAD"
#
    0
    1
    2
$
I4: s =>
    s == 0 ? upper("hElLo") :
    s == 1 ? upper("") :
    s == 2 ? upper(0.0/0 == 1 ? "a" : "b") :
    "bad"
#
    0
    1
    2
$
I4: s =>
    s == 0 ? concat("Hello", " There", " Tom") :
    s == 1 ? concat("Howdy ", "Nizar") :
    s == 2 ? concat("Hola", " NA!", 0.0/0 == 1 ? "x" : "y") :
    s == 3 ? concat() :
    s == 4 ? concat("Hola", "\t", "Whoever") :
    "bad"
#
    0
    1
    2
    3
    4
$
TX,TX,TX:
(a,b,c) => concat(concat(a), "|", b, concat("|", c))
#
    Mary,Joe,Tom
    Cat,Dog,Zebra
    Cat,,Zebra
    Cat,_,Zebra
$
TX,I4:
(x,y) => concat(x,y)
$
I4: x => pi()
#
    0
$
R8: x => asin(x) * 180 / pi()
#
    0
    0.5
    1
    -0.5
    -1
    ?
$
R8: x => asin(sqrt(x) / 2) * 180 / pi()
#
    0
    1
    2
    3
    4
    ?
$
R8: x => lower(x) + upper(x, x)
$
I4,TX:
(x,y) => y ?? "hello"
#
    0,Joe
    0,
    0,_
$
I4,TX:
(x,y) => float(y)
#
    0,0
    0,1
    0,1.5
    0,-1
    0,?
    0,Joe
    0,
    0,_
$
I4,BL,TX:
(a,b,c) => (blah(a) ?? a) + (blah(b) ?? b) + (blah(c) ?? c) + (blah(a) ?? blah(b))
$
I4:
a => (0.0/0 == 0.0/0 ? "a" : "b") == "b" ? "b" : "c"
#
    0
$
BL:
x => x ? blah(3) : "hello"
$
BL:
x => x || true ? "a" : "b"
#
    0
$
BL:
x => int(blah(x)) + long(blah(x)) + single(blah(x)) + double(blah(x))
$
TX:
x => isna(x) || isna("hello") || !isna(0.0/0 == 1 ? "a" : "b")
#
    x
    y
    _
$
R4:
x => pi(x)
$
BL: x => na(x)
#
    0
$
I4: x => na(x)
#
    0
$
I8: x => na(x)
#
    0
$
R4: x => na(x)
#
    0
$
R8: x => na(x)
#
    0
$
TX: x => na(x)
#
    0
$
BL: x => na(blah(x))
#
    0
$
BL: x => default(x)
#
    0
$
I4: x => default(x)
#
    0
$
I8: x => default(x)
#
    0
$
R4: x => default(x)
#
    0
$
R8: x => default(x)
#
    0
$
TX: x => default(x)
#
    0
$
BL: x => default(blah(x))
#
    0
$
BL: x => bool() && bool(x, x) && bool(int(x)) && bool(3)
$
BL: x => bool(x)
#
    0
    1
    ?
$
TX: x => bool(x)
#
    false
    yes
    ?
$
BL: x => x ? bool(true) : bool(false)
#
    F
    Y
    NA
$
BL: x => x ? bool("true") : bool("false")
#
    0
    1
    ?
$
BL: x => concat(text(), text(x, x), text(blah(x)))
$
BL: x => concat(text(true), "|", text(-3), "|", text(17L), "|", text(2.5f), "|", text(-3.25d), "|", text("end"))
#
    0
$
I4: x => _dump(x)
#
    17
    ?
$
I4: x => _dump("Hello from _dump: {0}", x)
#
    17
    ?
$
I4: x => _dump()
$
I4: x => _dump("a", 1, 2)
$
TX,I4: (x,y) => _dump(x, y)
$
I4,I4: (x,y) => _dump(x, y)
$
I4: y => _dump(1, y)
$
I4: y => with(x = 1; _dump(x, y))
$
I4: y => with(x = "Hello from _dump: {0}"; _dump(x, y))
#
    -17
    ?
$
I4: x => with(y = _dump("  Eval[y]: {0}", x + 1), z = _dump("  Eval[z]: {0}", y + 1); z)
#
    0
    17
    -2
    ?
$
I4:
a => with(b = _dump(a + 1); b * b)
#
    0
    -1
    1
    2
    ?
$
I4:
a => with(
  b = _dump("  Eval[b]: {0}", a * a),
  c = b * b,
  d = c * c,
  q = "?"
  ;
  concat(text(a) ?? q, "|", text(b) ?? q, "|", text(c) ?? q, "|", text(d) ?? q)
)
#
    0
    1
    2
    -2
    10
    14
    15
    1000
    ?
$
I4:
x => concat(text(with(x = x * x, x = x * x, x = x * x ; x))??"?", "|", text(with(x = x + x, y = x + x, x = y + y ; x))??"?")
#
    0
    1
    2
    3
    10
    14
    15
    100
    1000
    ?
$
TX: x => len("yo")
#
    hello
$
TX: x => len(na("")) ?? -12345
#
    hello
$
TX,I8: (x,y) => len(x)
#
    hello,1
    _,2
    ,3
$
I4: x => concat(right("hello", 2), "|", left("hello", -3), "|", mid("hello", -4, 3))
#
    0
$
I4: x => concat(right("hello", x), "|", left("hello", x), "|", mid("hello", x, 3))
#
    1
    ?
    -2
$
I4: x => concat(right(na(""), x) ?? "?", "|", left(na(""), x) ?? "?", "|", mid(na(""), x, 3) ?? "?")
#
    1
$
TX: x => concat(right(x, na(0)) ?? "?", "|", left(x, na(0)) ?? "?", "|", mid(x, na(0), 3) ?? "?", "|", mid(x, 1, na(0)) ?? "?")
#
    hello
$
TX, I4: (t,i) => len()==0 && len(i)==0 && len(t,i)==0
$
TX, I4: (t,i) => concat(right(), right(t), right(i,t), right(t,t), right(t,i,i))
$
TX, I4: (t,i) => concat(left(), left(t), left(i,t), left(t,t), left(t,i,i))
$
TX, I4: (t,i) => concat(mid(), mid(t), mid(i,t,i), mid(t,t,i), mid(t,i,t), mid(t,i), mid(t,i,i,i))
$
BL: x => false || x
#
    0
    1
    ?
$
BL: x => true && x
#
    0
    1
    ?
$
BL: x => x && true
#
    0
    1
    ?
$
BL: x => float(0.0/0 == 1) ?? float(0 == 1)
#
    0
    1
    ?
$
BL: x => float(0.0/0 == 1) ?? float(x)
#
    0
    1
    ?
$
TX: x => isna(float("hello")) ? "hello" : x
#
    hi
    bye
    _
$
TX: x => x ?? na("hello")
#
    hi
    bye
    _
$
I4: x => na(x) + x
#
    2
    -2
    ?
$
I4: x => x + na(x)
#
    2
    -2
    ?
$
I4: x => 1/3 + x
#
    2
    -2
    ?
$
I4: x => x + 1/3
#
    2
    -2
    ?
$
I4: x => na(x) * x
#
    2
    -2
    ?
$
I4: x => x * na(x)
#
    2
    -2
    ?
$
I4: x => (3 / 2) * x * (3 / 2)
#
    2
    -2
    ?
$
I4: x => na(x) % x
#
    2
    -2
    ?
$
I4: x => x / na(x)
#
    2
    -2
    ?
$
R4: x => x ?? na(x)
#
    2
    -2
    ?
$
I8: x => na(x) + x
#
    2
    -2
    ?
$
I8: x => x + na(x)
#
    2
    -2
    ?
$
I8: x => 1/3 + x
#
    2
    -2
    ?
$
I8: x => x + 1/3
#
    2
    -2
    ?
$
I8: x => na(x) * x
#
    2
    -2
    ?
$
I8: x => x * na(x)
#
    2
    -2
    ?
$
I8: x => (3 / 2) * x * (3 / 2)
#
    2
    -2
    ?
$
I8: x => na(x) % x
#
    2
    -2
    ?
$
I8: x => x / na(x)
#
    2
    -2
    ?
$
R8: x => x ?? na(x)
#
    2
    -2
    ?
$
R4: x => na(x) + x
#
    2
    -2
    ?
$
R4: x => x + na(x)
#
    2
    -2
    ?
$
R4: x => 1/3 + x
#
    2
    -2
    ?
$
R4: x => x + 1/3
#
    2
    -2
    ?
$
R4: x => na(x) * x
#
    2
    -2
    ?
$
R4: x => x * na(x)
#
    2
    -2
    ?
$
R4: x => (3 / 2) * x * (3 / 2)
#
    2
    -2
    ?
$
R4: x => na(x) % x
#
    2
    -2
    ?
$
R4: x => x / na(x)
#
    2
    -2
    ?
$
R4: x => x ?? na(x)
#
    2
    -2
    ?
$
R8: x => na(x) + x
#
    2
    -2
    ?
$
R8: x => x + na(x)
#
    2
    -2
    ?
$
R8: x => 1/3 + x
#
    2
    -2
    ?
$
R8: x => x + 1/3
#
    2
    -2
    ?
$
R8: x => na(x) * x
#
    2
    -2
    ?
$
R8: x => x * na(x)
#
    2
    -2
    ?
$
R8: x => (3 / 2) * x * (3 / 2)
#
    2
    -2
    ?
$
R8: x => na(x) % x
#
    2
    -2
    ?
$
R8: x => x / na(x)
#
    2
    -2
    ?
$
R8: x => x ?? na(x)
#
    2
    -2
    ?
$
I8: x => 1L ?? 2L
#
    ?
$
I8: x => na(1L) ?? 2L
#
    ?
$
R4: x => 1f ?? 2f
#
    ?
$
R4: x => na(1f) ?? 2f
#
    ?
$
R8: x => 1d ?? 2d
#
    ?
$
R8: x => na(1d) ?? 2d
#
    ?
$
I4: x => x < na(x) < 3
#
    1
$
I4: x => na(x, x)
$
