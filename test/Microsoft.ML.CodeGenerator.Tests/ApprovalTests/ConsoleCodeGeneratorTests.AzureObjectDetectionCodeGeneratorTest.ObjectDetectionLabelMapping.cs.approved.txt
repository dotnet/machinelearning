// This file was auto-generated by ML.NET Model Builder. 

using Microsoft.ML.Data;
using Microsoft.ML.Transforms;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace CodeGenTest.Model
{
    [CustomMappingFactoryAttribute(nameof(ObjectDetectionLabelMapping))]
    public class ObjectDetectionLabelMapping : CustomMappingFactory<ObjectDetectionLabelMappingInput, ObjectDetectionLabelMappingOutput>
    {
        public static string[] Label = new string[] { "label1", "label2", "label3", };

        public static void Mapping(ObjectDetectionLabelMappingInput input, ObjectDetectionLabelMappingOutput output)
        {
            long[] oldLabels = input.Labels.GetValues().ToArray();
            output.Labels = new string[oldLabels.Length];
            output.Scores = input.Scores.GetValues().ToArray();
            output.Boxes = input.Boxes.GetValues().ToArray();
            for (int i = 0; i < oldLabels.Length; i++)
            {
                output.Labels[i] = Label[oldLabels[i]];
            }
        }

        // This factory method will be called when loading the model to get the mapping operation.
        public override Action<ObjectDetectionLabelMappingInput, ObjectDetectionLabelMappingOutput> GetMapping()
        {
            return Mapping;
        }
    }

    public class ObjectDetectionLabelMappingInput
    {
        [ColumnName("labels")]
        public VBuffer<long> Labels;

        [ColumnName("scores")]
        public VBuffer<float> Scores;

        [ColumnName("boxes")]
        public VBuffer<float> Boxes;
    }



    public class ObjectDetectionLabelMappingOutput
    {
        [ColumnName("boxes")]
        public float[] Boxes;

        [ColumnName("PredictedLabels")]
        public string[] Labels;

        [ColumnName("scores")]
        public float[] Scores;

        private BoundingBox[] BoundingBoxes
        {
            get
            {
                var boundingBoxes = new List<BoundingBox>();
                return boundingBoxes.ToArray();
            }
        }

        public BoundingBox[] GetBoundingBoxes()
        {
            return this.BoundingBoxes;
        }

        public override string ToString()
        {
            var sb = new StringBuilder();

            foreach (var box in this.BoundingBoxes)
            {
                sb.AppendLine(box.ToString());
            }

            return sb.ToString();
        }
    }
}
