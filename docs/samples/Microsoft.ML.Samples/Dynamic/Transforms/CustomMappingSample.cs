using System;
using Microsoft.ML.Data;

namespace Microsoft.ML.Samples.Dynamic
{
    public static class CustomMapping
    {
        public static void Example()
        {
            // Create a new ML context, for ML.NET operations. It can be used for exception tracking and logging, 
            // as well as the source of randomness.
            var mlContext = new MLContext();

            // Get a small dataset as an IEnumerable and convert it to an IDataView.
            var data = SamplesUtils.DatasetUtils.GetInfertData();
            var trainData = mlContext.Data.LoadFromEnumerable(data);

            // Preview of the data.
            //  Age     RowNum  Education   ...
            //  26       0       0-5yrs     ...
            //  42       1       0-5yrs     ...
            //  39       2       12+yrs     ...
            //  34       3       0-5yrs     ...
            //  35       4       6-11yrs    ...

            // We define the custom mapping between input and output rows that will be applied by the transformation.
            Action<SamplesUtils.DatasetUtils.SampleInfertData, OutputRow> mapping =
                (input, output) => output.IsUnderThirty = input.Age < 30;

            // Custom transformations can be used to transform data directly, or as part of a pipeline. Below we transform data directly.
            var estimator = mlContext.Transforms.CustomMapping(mapping, null);
            var transformedData = estimator.Fit(trainData).Transform(trainData);

            // Preview 5 lines of the transformed data.
            transformedData = mlContext.Data.TakeRows(transformedData, 5);
            var dataEnumerable = mlContext.Data.CreateEnumerable<SampleInfertDataTransformed>(transformedData, reuseRowObject: true);
            Console.WriteLine("IsUnderThirty\t Age\t RowNum\t Education\t ...");
            foreach (var row in dataEnumerable)
                Console.WriteLine($"{row.IsUnderThirty}\t {row.Age}\t {row.RowNum}\t {row.Education}\t ...");
            // Expected output:
            //  IsUnderThirty   Age     RowNum  Education       ...
            //  True            26      0       0-5yrs   ...
            //  False           42      1       0-5yrs   ...
            //  False           39      2       12+yrs   ...
            //  False           34      3       0-5yrs   ...
            //  False           35      4       6-11yrs  ...


            // Here instead we use it as part of a pipeline of estimators.
            var pipeline = mlContext.Transforms.CustomMapping(mapping, null)
                .Append(mlContext.Transforms.Concatenate(outputColumnName: "Features", inputColumnNames: new[] { "Parity", "Induced" }))
                // It is useful to add a caching checkpoint before a trainer that does several passes over the data.
                .AppendCacheCheckpoint(mlContext)
                // We use binary FastTree to predict the label column that was generated by the custom mapping at the first step of the pipeline.
                .Append(mlContext.BinaryClassification.Trainers.FastTree(labelColumnName: "IsUnderThirty"));

            // We can train the pipeline and use it to transform data.
            transformedData = pipeline.Fit(trainData).Transform(trainData);
        }

        // This defines only the column to be generated by the transformation in addition to the columns already present.
        public class OutputRow
        {
            public bool IsUnderThirty { get; set; }
        }

        // Represents the transformed infertility dataset.
        public class SampleInfertDataTransformed
        {
            public bool IsUnderThirty { get; set; }
            public float Age { get; set; }
            public int RowNum { get; set; }
            public string Education { get; set; }
            public float Parity { get; set; }
            public float Induced { get; set; }
            public float Case { get; set; }
            public float Spontaneous { get; set; }
            public float Stratum { get; set; }
            public float PooledStratum { get; set; }
        }
    }
}
