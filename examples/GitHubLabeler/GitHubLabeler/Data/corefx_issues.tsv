ID	Area	Title	Description
29338	area-System.Net	Include fragment and query in Uri.LocalPath on Unix	While testing XmlUriResolver, @pjanotti discovered that any segments of a file path following a '#' symbol will be cut out of Uri.LocalPath on Unix. Based on additional tests, this also occurs for the '?' symbol. This is happening because the Unix specific case for local path only uses the path component of the URI:  https://github.com/dotnet/corefx/blob/9e8d443ff78c4f0a9a6bedf7f95961cf96ceff0a/src/System.Private.Uri/src/System/Uri.cs#L1032-L1037    The fix here is to include the fragment and query in LocalPath in the Unix path specific case. This PR enables the test case in XmlUriResolver that uncovered this issues, and adds some additional cases to our URI tests.    Fixes: #28486 
29337	area-System.Net	Unify setting null CookieContainer behavior on HttpClientHandler	For HttpClientHandler layer (above the WinHttpHandler layer on Windows), we should be consistent and throw the exception in the CookieContainer setter when null value is provided, to match .NET Framework's behavior.  This would keep the same behavior across all platforms for the setter of the HttpClientHandler.CookieContainer property.    Close: #3205
29334	area-System.Net	Check URI scheme length only after verifying the scheme contains valid characters	"URI construction is failing on valid URIs under the following conditions:  - An absolute URI is constructed using the `Uri(Uri absolute, string relative)` constructor.  - The relative string begins with 1024+ characters, followed by a colon.  - The relative string contains but does not begin with a forward or back slash.    See the test added in this PR for an example URI.    The fix is to check the scheme length _after_ validating that the potential scheme contains only legal characters (ie, not a forward or back slash). This keeps us from running into the situation above, where the relative URI contains a colon that is unambiguously not a scheme separator because the ""scheme"" is actually just a path that contains a colon.    This fix improves the correctness of our relative path parsing at the cost of an additional stacalloc in the case where the relative part of the URI is really an absolute URI with a scheme length >= 1024.    Fixes: #29011     Details below:  ---------  When we construct an absolute URI from a relative URI, the first thing we try to do is parse the relative URI as an absolute URI. That parsing process returns an error code that we use to determine what happens next. The parsing errors are as follows:  https://github.com/dotnet/corefx/blob/bffef76f6af208e2042a2f27bc081ee908bb390b/src/System.Private.Uri/src/System/UriEnumTypes.cs#L67-L93    If we successfully parse an absolute URI (error = None), we return that URI and ignore the absolute URI we were passed.   That might seem a little odd, but it's a useful behavior in practice.    If we get an error that is less than `LastRelativeUriOkErrIndex`(see the code above), we attempt to create a relative URI from the string and then root it with the absolute URI provided.    If we return any other error, we believe that the string is neither a valid relative or absolute URI and throw an exception. In this case, PrivateParseMinimal is returning the error `SchemeLimit`, which indicates that we have too large of a scheme. As documented in the code above, this isn't considered a recoverable error.    The relative string provided has some characters that are clearly invalid in a scheme, so the real error we should be returning from TryParse is `InvalidScheme`. Since `InvalidScheme` is less than `LastRelativeUriOkErrIndex`, we will then be able to create a relative URI. Fixing the returned parsing error allows this URI to be constructed successfully."
29331	area-Infrastructure	"[Perf] Ubuntu16.04 runs blocked by multiple ""PE file is already strong-name signed."" errors"	[perf_ubuntu16.04_release](https://ci2.dot.net/job/dotnet_corefx/job/perf/job/master/job/perf_ubuntu16.04_release/1715/consoleText)    ```bash  bash ./build-managed.sh -release -tests -- /p:Performance=true /p:TargetOS=Linux /m:1 /p:LogToBenchview=true /p:BenchviewRunType=rolling /p:PerformanceType=Profile  ```  ...    /home/administrator/jenkins/w/dotnet_corefx/perf/master/perf_ubuntu16.04_release/Tools/sign.targets(113,5): error : /home/administrator/jenkins/w/dotnet_corefx/perf/master/perf_ubuntu16.04_release/bin/obj/ref/System.Threading.Tasks.Dataflow/4.6.3.0/netstandard/System.Threading.Tasks.Dataflow.dll: PE file is already strong-name signed. [/home/administrator/jenkins/w/dotnet_corefx/perf/master/perf_ubuntu16.04_release/src/System.Threading.Tasks.Dataflow/ref/System.Threading.Tasks.Dataflow.csproj]      0 Warning(s)      32 Error(s)
29329	area-System.ComponentModel	Port System.ComponentModel.Composition.Registration (MEF1) to .NET Core	Greetings,    regarding [Port System.ComponentModel.Composition (MEF1) to .NET Core](https://github.com/dotnet/corefx/issues/11857) the following is still missing:    - `System.ComponentModel.Composition.Registration.RegistrationBuilder`  - `System.ComponentModel.Composition.Registration.PartBuilder`  - `System.ComponentModel.Composition.Registration.PartBuilder<>`    See also https://github.com/dotnet/corefx/issues/11857#issuecomment-382342975    edit by @ViktorHofer: fixed link.
29328	area-Infrastructure	Port LTTng fix for rootfs from CoreCLR	Port https://github.com/dotnet/coreclr/pull/17762 to CoreFx.
29327	area-System.Security	Enable EnvelopedCms to work with an external private key	There are two scenarios that are not currently possible with the EnvelopedCms class.    1) Decrypting the contents of an EnvelopedCms with an unattached/unattachable key (a la RSAKeyVault).  2) Being able to prove which certificate+key were used for the decryption operation, because the existing members all dive into the CurrentUser\My certificate store looking for other candidate certs+keys.  (https://stackoverflow.com/questions/49815448/can-envelopedcms-be-used-to-identify-the-encryption-certificate)    The strawman suggestion is a new Decrypt overload which does not initiate a store search, and happens to allow specifying a private key.    ```diff  public partial class EnvelopedCms  {  +    public void Decrypt(X509Certificate2 certificate, AsymmetricAlgorithm privateKey) => throw null;  }  ```    Maybe it also makes sense for the RecipientInfo overload.    Verifying the private key really belongs to the public key is a little trickier.  Maybe it's not important for Decrypt, since the certificate finds the matching recipient key info and the private key turns that back into the symmetric key... it either works or it doesn't.    Maybe this would be `TryDecrypt`, and returns false if the cert matches no recipients?
29325	area-System.Runtime	The type initializer for 'TimeZoneConverter.TZConvert' threw an exception.	"I got this error on aws lambda.  The type initializer for 'TimeZoneConverter.TZConvert' threw an exception.  ""errorMessage"": ""An item with the same key has already been added. Key: Canada/East-Saskatchewan"","
29324	area-Infrastructure	Remove manual typeforwards to S.P.CoreLib for now exposed types.	Relates to https://github.com/dotnet/coreclr/pull/17185    @safern I would like to get rid off the ValueTuple typeforwards and with that get rid of the whole manual shim for mscorlib. That requires that we compile against a newer netfx version where ValueTuples are inbox.     cc @jkotas
29323	area-System.IO	MacOS - Special hidden folders	Dear corefx team,  We have encountered a special case of hidden folders in MacOs based machines.    When using DirectoryInfo to map the users machine, we are interested in knowing which folders are hidden, therefore checking the `FileAttributes.Hidden` attribute, which is determined if the file\directory name starts with a dot - '.'  Sadly, we found out that in MacOS uses additional file system flags to mark folders as - **hidden**.    We can check it by using the Terminal, or iTerm in my case and navigating to the home folder of a user and using `ls -l` to output the file dir.  ![image](https://user-images.githubusercontent.com/32832019/39242329-5a3d57e2-4892-11e8-9bc8-ff8420d9090d.png)    as we can see there are no UNIX hidden folders which starts with a dot.  But `Library` is a hidden folder.  If we would pass the `O` flag to show file flags (-O is a flag only in MacOS)  ![image](https://user-images.githubusercontent.com/32832019/39242842-2db4ced8-4894-11e8-8f83-d4d867522b45.png)    As we can see there are additional flags that mark a folder as hidden.  to set or unset the flag we use `chflags` with the `hidden` or `nohidden` arguments.    .NET Core info  ```  .NET Command Line Tools (2.0.0)    Product Information:   Version:            2.0.0   Commit SHA-1 hash:  cdcd1928c9    Runtime Environment:   OS Name:     Mac OS X   OS Version:  10.13   OS Platform: Darwin   RID:         osx.10.12-x64   Base Path:   /usr/local/share/dotnet/sdk/2.0.0/    Microsoft .NET Core Shared Framework Host      Version  : 2.0.0    Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d  ```    Is there anything we can do to workaround this?  I've poked around corefx + coreclr and saw that the DirectoryEntry struct only uses iNodeType to determine multiple attributes.  Is there a plan to support flags in the future?    Thank you very much,  Hagai.    
29322	area-System.Runtime	Remove hashtable & friends compiled files from System.Runtime.Extensions	This commit needs to be reverted when the new uapaot build (that contains the hashtable changes) is ingested: https://github.com/dotnet/corefx/commit/2e34bf9d93e23c2fdf978e457543b95906226721.    cc @jkotas
29321	area-System.Xml	[System.Private.Xml.Linq] Rename FunctionalTests classes	It allows to fix build issues and makes easier import System.Private.Xml.Linq tests to Mono (https://github.com/mono/mono/issues/8122).
29320	area-System.Collections	Test failure: System.Collections.Concurrent.Tests.PartitionerStaticTests/TestStaticPartitioningArray	Opened on behalf of @Sunny-pu  The test `System.Collections.Concurrent.Tests.PartitionerStaticTests/TestStaticPartitioningArray` has failed.  System.AggregateException : One or more errors occurred. (Assert.Throws() Failure\r     Expected: typeof(System.InvalidOperationException)\r     Actual:   typeof(System.Exception): Cannot create a file when that file already exists. (Exception from HRESULT: 0x800700B7))\r     ---- Assert.Throws() Failure\r     Expected: typeof(System.InvalidOperationException)\r     Actual:   typeof(System.Exception): Cannot create a file when that file already exists. (Exception from HRESULT: 0x800700B7)          Stack Trace:             at System.Threading.Tasks.Task.WaitAllCore(Task[] tasks, Int32 millisecondsTimeout, CancellationToken cancellationToken)        at System.Collections.Concurrent.Tests.PartitionerStaticTests.TestPartitioningCore(Int32 dataSize, Int32 partitionCount, Int32[] data, Boolean staticPartitioning, IEnumerator`1[] partitions) in E:\A\_work\4\s\corefx\src\System.Collections.Concurrent\tests\PartitionerStaticTests.cs:line 288        at System.Collections.Concurrent.Tests.PartitionerStaticTests.RunTestWithAlgorithm(Int32 dataSize, Int32 partitionCount, Int32 algorithm) in E:\A\_work\4\s\corefx\src\System.Collections.Concurrent\tests\PartitionerStaticTests.cs:line 186        at System.Collections.Concurrent.Tests.PartitionerStaticTests.TestStaticPartitioningArray() in E:\A\_work\4\s\corefx\src\System.Collections.Concurrent\tests\PartitionerStaticTests.cs:line 29     ----- Inner Stack Trace -----        at Windows.ApplicationModel.Resources.Core.ResourceContext.Clone()        at System.Resources.WindowsRuntimeResourceManager.Initialize(String libpath, String reswFilename, PRIExceptionInfo& exceptionInfo) in E:\A\_work\4\s\corefx\src\System.Runtime.WindowsRuntime\src\System\Resources\WindowsRuntimeResourceManager.cs:line 401        at System.Resources.ResourceManager.SetAppXConfiguration()        at System.Resources.ResourceManager..ctor(Type resourceSource)        at System.SR.get_ResourceManager() in E:\A\_work\4\s\corefx\src\Common\src\System\SR.cs:line 15        at System.SR.GetResourceString(String resourceKey, String defaultString) in E:\A\_work\4\s\corefx\src\Common\src\System\SR.cs:line 27        at System.Collections.Concurrent.Partitioner.StaticIndexRangePartitionForArray`1.get_Current() in E:\A\_work\4\s\corefx\src\System.Collections.Concurrent\src\System\Collections\Concurrent\PartitionerStatic.cs:line 1614        at System.Collections.Concurrent.Tests.PartitionerStaticTests.<>c__DisplayClass11_1.<TestPartitioningCore>b__1() in E:\A\_work\4\s\corefx\src\System.Collections.Concurrent\tests\PartitionerStaticTests.cs:line 253 Build : Master - 20180425.01 (UWP F5 Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x64   - Release  Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fuwp~2F/build/20180425.01/workItem/System.Collections.Concurrent.Tests/analysis/xunit/System.Collections.Concurrent.Tests.PartitionerStaticTests~2FTestStaticPartitioningArray
29319	area-System.Runtime	Cleanup some System.Runtime.WindowsRuntime.* dependencies on CoreLib internals	Contributes to https://github.com/dotnet/coreclr/issues/17768
29318	area-System.Net	Bug in HttpWebRequest when call an endpoint that returns 302	"@mrquake commented on [Mon Apr 23 2018](https://github.com/dotnet/core/issues/1473)  # Issue Title    When you call an endpoint that returns 302 the redirection url will have backslashes instead of forward slashes in ""localpath"".    # General    For example when you call Azure API using Fiddler or any other web debugging tool: ""https://management.azure.com/subscriptions/xxx-xxx-xxx-xxxx/providers/Microsoft.Commerce/RateCard"" with property parameters, token, etc...    It will return 302 and redirect to: https://ratecard.blob.core.windows.net/ratecards/xxxx-xxxx-xxxxx-xxxxx/MS-AZR-0017P/USD/en-US/False/2015-06-01-preview/yyyy-yyyyy-yyyyy-yyyyy.json    No problem whatsoever...    But when you make the request using .NET Core 1.1/2.0 HttpWebRequest...   The redirection tries to call something like that:    https://ratecard.blob.core.windows.net/ratecards/xxxx-xxxx-xxxx-xxxxx%5CMS-AZR-0017P%5CUSD%5Cen-US%5CFalse/2015-06-01-preview/yyyy-yyyy-yyyy-yyyy-yyyy.json    With encoded backslashes instead of forward slashes....   "
29317	area-System.Net	Re-enable the SocketsHttpHandler microbenchmarks	"The perf tests were wholesale disabled due to port exhaustion errors.  Those errors are just coming from the ""connectionPerRequest"" tests, which are inherently flawed in this regard, so I've just deleted them.    Closes #29308  cc: @jorive, @geoffkizer  "
29316	area-System.Threading	Test that AsyncLocal<class> changed event is not raised multiple times for one change in value	- Depends on and tests https://github.com/dotnet/coreclr/pull/17767  - Tests for and closes https://github.com/dotnet/coreclr/issues/17758
29315	area-System.IO	Added Filters Property to FileSystemWatcher class	Fixes https://github.com/dotnet/corefx/issues/29273    This property will help to use multiple filters for FileSystemWatcher.  The tests are built against netstandard, so have to add the tests to new files with .netcoreapp.    @JeremyKuhne  should I need to copy all the tests for all the operations like DirectoryChanged, DIrectoryDelete etc,. Currently I have just added a test for CreateDirectory Operation.  
29314	area-Infrastructure	Update the Release Notes link for NuGet packages to point to .NET Core 2.1	Currently, the release notes link in the published packages point to [.NET Core 2.0.4](https://go.microsoft.com/fwlink/?LinkID=799421):  https://github.com/dotnet/corefx/blob/a985f20d1a04d49ad086e3ef066565d05701cdaa/Packaging.props#L14    For example, see the preview2 System.Memory package which links to old release notes:  https://www.nuget.org/packages/System.Memory/4.5.0-preview2-26406-04    We should update it to point to the .NET Core 2.1 release notes (once they are a available). We have preview1/preview2 notes at the moment in:  https://github.com/dotnet/core/tree/master/release-notes/2.1    cc @ericstj, @joshfree, @weshaggard, @leecow, @danmosemsft, @karelz  
29313	area-System.Security	Keep SSL error queue clean	Closing #29244 that covered only X509 and tracking all required changes in this issue. The APIs listed below were selected after a scrub of the CryptoNative_* APIs by me and @bartonjs.    [EDIT 1: Removing deadcode ones, will address later]    /cc @karelz      - [ ] CryptoNative_Asn1OctetStringNew => single call, needs ERR_clear_error   - [ ] CryptoNative_Asn1OctetStringSet => single call, needs ERR_clear_error   - [ ] CryptoNative_BigNumFromBinary => single call, missing clean up check calltree but likely clear on call site Cleanup (only reports OOM)   - [ ] CryptoNative_BioNewFile => handful of calls, need to check call tree for AddCachedCrl, DownloadAndAddCrl, and LoadMachineStores   - [ ] CryptoNative_BioRead => all call sites protected but some taking only last error (perhaps we should ensure queue is clear)   - [ ] CryptoNative_BioSeek => ops, I missed two locations of this one in previous change   - [ ] CryptoNative_BioTell => debug assert but no clean up in case of error   - [ ] CryptoNative_BioWrite => Some calls not fully protected, other only last error   - [ ] CryptoNative_CreateMemoryBio => some calls not cleaned, need to check call tree Cleanup (only reports OOM)   - [ ] CryptoNative_DecodeAsn1TypeBytes => single call, needs ERR_clear_error   - [ ] CryptoNative_DecodeX509Crl => single location, missing clean up at usage, check caller   - [ ] CryptoNative_DecodeX509Name => single location, missing clean up at usage, check caller   - [ ] CryptoNative_DsaKeyCreateByExplicitParameters => error on managed side is handled, but potential errors in SetDsaParameter on native are not (Needs native cleanup)   - [ ] CryptoNative_DsaVerify => single call not protected on the caller, need to check calltree (probably only theoretical)   - [ ] CryptoNative_EcDsaSize => two locations need to check for 0 return and throw in such cases Cleanup (only reports OOM)   - [ ] CryptoNative_EcDsaVerify => single call, needs clear error, double-check call tree but seems simple (probably only theoretical)   - [ ] CryptoNative_EcKeyCreateByExplicitParameters => 3 calls, relatively large native code, seems covered on managed side need to check if native can return success but leave errors on queue. #if   HAVE_OPENSSL_EC2M check seems wrong (if char2 was requested and no char2 is present it passes to GFp and hopes that fails).  No check that G, gxBn, gyBn, orderBn, cofactorBn didn't fail (which might produce an error and continue-with-bad-data)   (Needs native cleanup)   - [ ] CryptoNative_EcKeyCreateByOid => 2 calls (plus a handful in tests), needs error clean up   - [ ] CryptoNative_EncodeAsn1Integer => single location, assert checks no error but for safety error needs to be cleaned in OpenSslEncode   src\Common\src\Interop\Unix\System.Security.Cryptography.Native\Interop.Encode.cs (probably only theoretical)   - [ ] CryptoNative_EncodePkcs12 => single call, 2nd parameter of OpenSslEncode, not covered (probably only theoretical)   - [ ] CryptoNative_EncodePkcs7 => single call, 2nd parameter of OpenSslEncode, not covered (probably only theoretical)   - [ ] CryptoNative_EncodeX509 => single location, assert checks no error but for safety error needs to be cleaned in OpenSslEncode   src\Common\src\Interop\Unix\System.Security.Cryptography.Native\Interop.Encode.cs (probably only theoretical)   - [ ] CryptoNative_EncodeX509SubjectPublicKeyInfo => single location, assert checks no error but for safety error needs to be cleaned in OpenSslEncode   src\Common\src\Interop\Unix\System.Security.Cryptography.Native\Interop.Encode.cs (probably only theoretical)   - [ ] CryptoNative_GetDsaParameters => doesn't seem to touch ERR_, single call, throws exception, should clean up the queue   - [ ] CryptoNative_GetObjectDefinitionByName => calls other natives, error clean-up can be made on native side   - [ ] CryptoNative_GetRsaParameters => single call, throws CryptographicException, needs error cleanup   - [ ] CryptoNative_GetSslConnectionInfo => single call, will be covered if CreateSslException cleans up the error queue   - [ ] CryptoNative_LookupFriendlyNameByOid => single call, protected on managed but logic on native indicates that it may leave errors on the queue   - [ ] CryptoNative_ObjSn2Nid => single call, there is CryptographicException but needs error clean up   - [ ] CryptoNative_ObjTxt2Obj => single call, being covered by same change to cover Asn1OctetStringNew (prototype of tactical change)   - [ ] CryptoNative_PemReadBioX509Crl => two locations, need to check from callers, likely need clean up   - [ ] CryptoNative_PemWriteBioX509Crl => single call, return code not checked, add clean up   - [ ] CryptoNative_RsaVerify => single call, in VerifyHash seems to need to clear error before return   - [ ] CryptoNative_SetEncryptionPolicy => single call, missing clean up   - [ ] CryptoNative_SetProtocolOptions => 2 calls, doesn't check return but it seems function doesn't log error, need to double check   - [ ] CryptoNative_SetRsaParameters => single call, it seems to only set fields, likely doesn't log error, need to double check   - [ ] CryptoNative_SslAddExtraChainCert => single call, not cleared, per docs SSL_CTX_add_extra_chain_cert can leave error on queue   - [ ] CryptoNative_SslCtxCheckPrivateKey => single call, will be protected by fixing CreateSslException   - [ ] CryptoNative_SslCtxCreate => single call, will be protected by fixing CreateSslException   - [ ] CryptoNative_SslCtxSetAlpnProtos => single call, will be protected by fixing CreateSslException   - [ ] CryptoNative_SslCtxUseCertificate => single call, will be protected by fixing CreateSslException,  but likely doesn't set errors anyway   - [ ] CryptoNative_SslCtxUsePrivateKey => single call, will be protected by fixing CreateSslException   - [ ] CryptoNative_SslSessionReused => single call, call log error per docs, may need specific clean up   - [ ] CryptoNative_SslSetTlsExtHostName => single call, docs not clear, return value ignored, for safety we should clean up error queue   - [ ] CryptoNative_X509ExtensionCreateByObj => single call not covered, caller FormatNative in src\System.Security.Cryptography.Encoding\src\Internal\Cryptography\OpenSslAsnFormatter.cs   - [ ] CryptoNative_X509IssuerNameHash => single call returns hash, likely doesn't log errorif we pass valid argument, https://github.com/dotnet/corefx/issues/28724   - [ ] CryptoNative_X509V3ExtPrint => single call not covered, caller FormatNative in src\System.Security.Cryptography.Encoding\src\Internal\Cryptography\OpenSslAsnFormatter.cs   - [ ] CryptoNative_X509VerifyCert => 2 calls one not covered in VerifyCertChain in src\System.Net.Http\src\System\Net\Http\CurlHandler\CurlHandler.SslProvider.Linux.cs  
29311	area-Infrastructure	"Removing initialization of ""AgentToolsPath"""	The agent pool will have the environment variable defined.
29308	area-System.Net	[Benchmark][Windows] One or more tests failed while running tests from 'System.Net.Http.Performance.Tests'	The specified benchmark has been broken for few days now, and it's blocking uploading performance results on Windows.    System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, connectionPerRequest: True, chunkedResponse: False, responseLength: 1): Only one usage of each socket address (protocol/network address/port) is normally permitted    ```log  [4/23/2018 1:30:50 PM][INF] Running 16 [Benchmark]s    [4/23/2018 1:30:50 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, connectionPerRequest: True, chunkedResponse: False, responseLength: 100000)    [4/23/2018 1:30:56 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, connectionPerRequest: False, chunkedResponse: True, responseLength: 1)    [4/23/2018 1:30:57 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, connectionPerRequest: False, chunkedResponse: True, responseLength: 1)    [4/23/2018 1:30:58 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, connectionPerRequest: True, chunkedResponse: False, responseLength: 1)    [4/23/2018 1:31:05 PM][ERR] System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, connectionPerRequest: True, chunkedResponse: False, responseLength: 1): Only one usage of each socket address (protocol/network address/port) is normally permitted    [4/23/2018 1:31:05 PM][ERR]    at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ConnectHelper.cs:line 86       at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 342       at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 484       at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 275       at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\RedirectHandler.cs:line 32       at System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(Boolean ssl, Boolean connectionPerRequest, Boolean chunkedResponse, Int32 responseLength) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\tests\Performance\Perf.SocketsHttpHandler.cs:line 107       at Microsoft.Xunit.Performance.BenchmarkTestInvoker.<>c__DisplayClass1_0.<<CallTestMethod>b__0>d.MoveNext()    --- End of stack trace from previous location where exception was thrown ---       at Microsoft.Xunit.Performance.Internal.BenchmarkIterator.RunAsync(Func`1 testMethod)       at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass46_1.<<InvokeTestMethodAsync>b__1>d.MoveNext() in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:line 227    --- End of stack trace from previous location where exception was thrown ---       at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func`1 asyncAction) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.execution\Sdk\Frameworks\ExecutionTimer.cs:line 48       at Xunit.Sdk.ExceptionAggregator.RunAsync(Func`1 code) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.core\Sdk\ExceptionAggregator.cs:line 90    [4/23/2018 1:31:05 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, connectionPerRequest: True, chunkedResponse: True, responseLength: 100000)    [4/23/2018 1:31:11 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, connectionPerRequest: True, chunkedResponse: True, responseLength: 1)    [4/23/2018 1:31:17 PM][ERR] System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, connectionPerRequest: True, chunkedResponse: True, responseLength: 1): Only one usage of each socket address (protocol/network address/port) is normally permitted    [4/23/2018 1:31:17 PM][ERR]    at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ConnectHelper.cs:line 86       at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 342       at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 484       at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 275       at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\RedirectHandler.cs:line 32       at System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(Boolean ssl, Boolean connectionPerRequest, Boolean chunkedResponse, Int32 responseLength) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\tests\Performance\Perf.SocketsHttpHandler.cs:line 107       at Microsoft.Xunit.Performance.BenchmarkTestInvoker.<>c__DisplayClass1_0.<<CallTestMethod>b__0>d.MoveNext()    --- End of stack trace from previous location where exception was thrown ---       at Microsoft.Xunit.Performance.Internal.BenchmarkIterator.RunAsync(Func`1 testMethod)       at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass46_1.<<InvokeTestMethodAsync>b__1>d.MoveNext() in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:line 227    --- End of stack trace from previous location where exception was thrown ---       at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func`1 asyncAction) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.execution\Sdk\Frameworks\ExecutionTimer.cs:line 48       at Xunit.Sdk.ExceptionAggregator.RunAsync(Func`1 code) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.core\Sdk\ExceptionAggregator.cs:line 90    [4/23/2018 1:31:17 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, connectionPerRequest: True, chunkedResponse: True, responseLength: 100000)    [4/23/2018 1:31:29 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, connectionPerRequest: False, chunkedResponse: False, responseLength: 1)    [4/23/2018 1:31:29 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, connectionPerRequest: False, chunkedResponse: False, responseLength: 100000)    [4/23/2018 1:31:34 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, connectionPerRequest: False, chunkedResponse: True, responseLength: 100000)    [4/23/2018 1:31:37 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, connectionPerRequest: True, chunkedResponse: False, responseLength: 100000)    [4/23/2018 1:31:39 PM][ERR] System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, connectionPerRequest: True, chunkedResponse: False, responseLength: 100000): Only one usage of each socket address (protocol/network address/port) is normally permitted    [4/23/2018 1:31:39 PM][ERR]    at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ConnectHelper.cs:line 86       at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 342       at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 484       at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 275       at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\RedirectHandler.cs:line 32       at System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(Boolean ssl, Boolean connectionPerRequest, Boolean chunkedResponse, Int32 responseLength) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\tests\Performance\Perf.SocketsHttpHandler.cs:line 107       at Microsoft.Xunit.Performance.BenchmarkTestInvoker.<>c__DisplayClass1_0.<<CallTestMethod>b__0>d.MoveNext()    --- End of stack trace from previous location where exception was thrown ---       at Microsoft.Xunit.Performance.Internal.BenchmarkIterator.RunAsync(Func`1 testMethod)       at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass46_1.<<InvokeTestMethodAsync>b__1>d.MoveNext() in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:line 227    --- End of stack trace from previous location where exception was thrown ---       at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func`1 asyncAction) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.execution\Sdk\Frameworks\ExecutionTimer.cs:line 48       at Xunit.Sdk.ExceptionAggregator.RunAsync(Func`1 code) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.core\Sdk\ExceptionAggregator.cs:line 90    [4/23/2018 1:31:39 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, connectionPerRequest: False, chunkedResponse: False, responseLength: 1)    [4/23/2018 1:31:40 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, connectionPerRequest: True, chunkedResponse: False, responseLength: 1)    [4/23/2018 1:31:42 PM][ERR] System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, connectionPerRequest: True, chunkedResponse: False, responseLength: 1): Only one usage of each socket address (protocol/network address/port) is normally permitted    [4/23/2018 1:31:42 PM][ERR]    at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ConnectHelper.cs:line 86       at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 342       at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 484       at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 275       at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\RedirectHandler.cs:line 32       at System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(Boolean ssl, Boolean connectionPerRequest, Boolean chunkedResponse, Int32 responseLength) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\tests\Performance\Perf.SocketsHttpHandler.cs:line 107       at Microsoft.Xunit.Performance.BenchmarkTestInvoker.<>c__DisplayClass1_0.<<CallTestMethod>b__0>d.MoveNext()    --- End of stack trace from previous location where exception was thrown ---       at Microsoft.Xunit.Performance.Internal.BenchmarkIterator.RunAsync(Func`1 testMethod)       at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass46_1.<<InvokeTestMethodAsync>b__1>d.MoveNext() in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:line 227    --- End of stack trace from previous location where exception was thrown ---       at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func`1 asyncAction) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.execution\Sdk\Frameworks\ExecutionTimer.cs:line 48       at Xunit.Sdk.ExceptionAggregator.RunAsync(Func`1 code) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.core\Sdk\ExceptionAggregator.cs:line 90    [4/23/2018 1:31:42 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, connectionPerRequest: False, chunkedResponse: False, responseLength: 100000)    [4/23/2018 1:31:45 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, connectionPerRequest: True, chunkedResponse: True, responseLength: 1)    [4/23/2018 1:31:47 PM][ERR] System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, connectionPerRequest: True, chunkedResponse: True, responseLength: 1): Only one usage of each socket address (protocol/network address/port) is normally permitted    [4/23/2018 1:31:47 PM][ERR]    at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ConnectHelper.cs:line 86       at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 342       at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 484       at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 275       at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\RedirectHandler.cs:line 32       at System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(Boolean ssl, Boolean connectionPerRequest, Boolean chunkedResponse, Int32 responseLength) in C:\J\w\perf_windows_---356c2fc4\src\System.Net.Http\tests\Performance\Perf.SocketsHttpHandler.cs:line 107       at Microsoft.Xunit.Performance.BenchmarkTestInvoker.<>c__DisplayClass1_0.<<CallTestMethod>b__0>d.MoveNext()    --- End of stack trace from previous location where exception was thrown ---       at Microsoft.Xunit.Performance.Internal.BenchmarkIterator.RunAsync(Func`1 testMethod)       at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass46_1.<<InvokeTestMethodAsync>b__1>d.MoveNext() in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:line 227    --- End of stack trace from previous location where exception was thrown ---       at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func`1 asyncAction) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.execution\Sdk\Frameworks\ExecutionTimer.cs:line 48       at Xunit.Sdk.ExceptionAggregator.RunAsync(Func`1 code) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.core\Sdk\ExceptionAggregator.cs:line 90    [4/23/2018 1:31:47 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, connectionPerRequest: False, chunkedResponse: True, responseLength: 100000)    [4/23/2018 1:31:52 PM][INF] Finished 16 tests in 62.075s (5 failed, 0 skipped)    [ERROR] Benchmark execution failed.      System.Exception: 5 benchmark(s) failed to execute.       at Microsoft.Xunit.Performance.Api.XunitPerformanceHarness.<RunBenchmarks>g__xUnitAction8_0(String assemblyPath)       at Microsoft.Xunit.Performance.Api.ETWProfiler.Record(XUnitPerformanceSessionData xUnitPerformanceSessionData, XUnitPerformanceMetricData xUnitPerformanceMetricData, Action action)       at Microsoft.Xunit.Performance.Api.XunitPerformanceHarness.RunBenchmarks(String assemblyFileName)       at PerfHarness.Main(String[] args) in C:\J\w\perf_windows_---356c2fc4\src\Common\perf\PerfRunner\PerfRunner.cs:line 19    ```
29305	area-System.Reflection	Add tests for Invoke of ref-returning members	https://github.com/dotnet/corefx/issues/15960
29303	area-System.Net	[release/2.1] Always use DnsEndPoint in SocketHttpHandler's ConnectAsync (#29286)	Port of #29286
29302	area-System.Net	Clean dead code System.Net*	Contributes to #17905
29301	area-System.Runtime	Optionally disabling AggregateException from showing other Exception messages in its own Message?	I've noticed that `AggregateException`'s `Message` property always shows the messages of the exceptions within it in parentheses after the `AggregateException`'s own `Message`.  Is there any chance that a change will be made to allow the customisation of this behaviour, such as setting whether to display the `Message` of the `AggregateException` only without the messages of its `InnerExceptions`?    I've read that this was changed a while back to make `AggregateException` messages more descriptive, but sometimes I want to have the `Message` of an `AggregateException` remain as I entered it.
29298	area-System.Memory	Rollforward from .NET Core 2.0 to 2.1 throws with MissingMethodException when System.Memory package is referenced	"**Conditions**    An application that is:   - compiled against netcoreapp2.0   - has a package reference to System.Memory (v4.5.0-rc1-26423-06)   - runs on a machine **without** Microsoft.NETCore.App 2.0.x installed, but has a Microsoft.NETCore.App 2.1.0 version...     **Result**  The application   - rolls to execute on Microsoft.NETCore.App 2.1 ✅ , but   - some System.IO apis throw MissingMethodException :x:    ```  System.MissingMethodException: Method not found: '!!0 ByRef System.Runtime.InteropServices.MemoryMarshal.GetReference(System.Span`1<!!0>)'.     at Interop.Sys.LStat(ReadOnlySpan`1 path, FileStatus& output)     at System.IO.FileStatus.Refresh(ReadOnlySpan`1 path)     at System.IO.FileStatus.EnsureStatInitialized(ReadOnlySpan`1 path, Boolean continueOnError)     at System.IO.FileStatus.GetAttributes(ReadOnlySpan`1 path, ReadOnlySpan`1 fileName)     at System.IO.FileSystemInfo.get_Attributes()     at System.IO.FileInfo.get_Length()  ```    **Repro**  In a directory, create 3 files, `Dockerfile`, `program.cs`, and `test.csproj` and run `docker build .`:    ```Dockerfile  FROM microsoft/dotnet:2.0-sdk as builder  WORKDIR /code  COPY Program.cs .  COPY test.csproj .  RUN dotnet publish -o pub/    FROM microsoft/dotnet-nightly:2.1-runtime  WORKDIR /app  COPY --from=builder /code/pub .  RUN dotnet test.dll  ```  ```xml  <!-- test.csproj-->  <Project Sdk=""Microsoft.NET.Sdk"">      <PropertyGroup>      <OutputType>Exe</OutputType>      <TargetFramework>netcoreapp2.0</TargetFramework>      <LangVersion>7.1</LangVersion>      <RestoreSources>        https://dotnet.myget.org/F/dotnet-core/api/v3/index.json;        https://api.nuget.org/v3/index.json;      </RestoreSources>    </PropertyGroup>      <ItemGroup>      <PackageReference Include=""System.Memory"" Version=""4.5.0-rc1-26423-06"" />    </ItemGroup>    </Project>  ```  ```csharp  // Program.cs  using System;  using System.IO;    class Program  {      public static int Main(string[] args)      {          try          {              var path = Path.Combine(AppContext.BaseDirectory, ""test.txt"");              File.WriteAllText(path, ""hello"");              var fileinfo = new FileInfo(path);              Console.WriteLine(""System.IO.File.Exists = "" + File.Exists(path));              Console.WriteLine(""System.IO.FileInfo.Exists = "" + fileinfo.Exists);              Console.WriteLine(""System.IO.FileInfo.FullName = "" + fileinfo.FullName);              Console.WriteLine(""System.IO.FileInfo.Length = "" + fileinfo.Length);              return 0;          }          catch (Exception ex)          {              Console.Error.WriteLine(ex.ToString());              return 1;          }      }  }  ```    **Details**  Inside the container:  ```  dotnet --info    Host (useful for support):    Version: 2.1.0-rc1-26419-02    Commit:  515f580aa0    .NET Core SDKs installed:    No SDKs were found.    .NET Core runtimes installed:    Microsoft.NETCore.App 2.1.0-rc1-26419-02 [/usr/share/dotnet/shared/Microsoft.NETCore.App]  ```"
29296	area-System.Diagnostics	Disable StartInfo_TextFile_ShellExecute for NETFX	Relates to https://github.com/dotnet/corefx/issues/20388    It's now disabled for several platforms, and for 3 frameworks, but still has value running for netcoreapp where it seems to be stable currently.    Multiple ActiveIssue attributes are allowed.
29294	area-System.Security	Test failure: System.Security.Cryptography.X509Certificates.Tests.CertificateCreation.CertificateRequestChainTests/CreateChain_Hybrid	The test `System.Security.Cryptography.X509Certificates.Tests.CertificateCreation.CertificateRequestChainTests/CreateChain_Hybrid` has failed. ``` Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException : An internal consistency check failed          Stack Trace:             at System.Security.Cryptography.CngKeyLite.GenerateNewExportableKey(String algorithm, Int32 keySize) in E:\A\_work\2\s\corefx\src\System.Security.Cryptography.Algorithms\src\System\Security\Cryptography\CngKeyLite.cs:line 138        at System.Security.Cryptography.RSAImplementation.RSACng.GetDuplicatedKeyHandle() in E:\A\_work\2\s\corefx\src\System.Security.Cryptography.Algorithms\src\System\Security\Cryptography\RSACng.cs:line 34        at System.Security.Cryptography.RSAImplementation.RSACng.ExportKeyBlob(Boolean includePrivateParameters) in E:\A\_work\2\s\corefx\src\System.Security.Cryptography.Algorithms\src\System\Security\Cryptography\RSACng.cs:line 48        at System.Security.Cryptography.RSAImplementation.RSACng.ExportParameters(Boolean includePrivateParameters) in E:\A\_work\2\s\corefx\src\Common\src\System\Security\Cryptography\RSACng.ImportExport.cs:line 118        at System.Security.Cryptography.X509Certificates.RSAPkcs1X509SignatureGenerator.BuildPublicKey(RSA rsa) in E:\A\_work\2\s\corefx\src\System.Security.Cryptography.X509Certificates\src\System\Security\Cryptography\X509Certificates\RSAPkcs1X509SignatureGenerator.cs:line 33        at System.Security.Cryptography.X509Certificates.RSAPkcs1X509SignatureGenerator.BuildPublicKey() in E:\A\_work\2\s\corefx\src\System.Security.Cryptography.X509Certificates\src\System\Security\Cryptography\X509Certificates\RSAPkcs1X509SignatureGenerator.cs:line 28        at System.Security.Cryptography.X509Certificates.CertificateRequest..ctor(String subjectName, RSA key, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) in E:\A\_work\2\s\corefx\src\System.Security.Cryptography.X509Certificates\src\System\Security\Cryptography\X509Certificates\CertificateRequest.cs:line 136        at System.Security.Cryptography.X509Certificates.Tests.CertificateCreation.CertificateRequestChainTests.OpenCertRequest(String dn, AsymmetricAlgorithm key, HashAlgorithmName hashAlgorithm) in E:\A\_work\2\s\corefx\src\System.Security.Cryptography.X509Certificates\tests\CertificateCreation\CertificateRequestChainTests.cs:line 210        at System.Security.Cryptography.X509Certificates.Tests.CertificateCreation.CertificateRequestChainTests.CreateChainRequest(String dn, AsymmetricAlgorithm key, HashAlgorithmName hashAlgorithm, Boolean isCa, Nullable`1 pathLen) in E:\A\_work\2\s\corefx\src\System.Security.Cryptography.X509Certificates\tests\CertificateCreation\CertificateRequestChainTests.cs:line 252        at System.Security.Cryptography.X509Certificates.Tests.CertificateCreation.CertificateRequestChainTests.CreateAndTestChain(AsymmetricAlgorithm rootPrivKey, AsymmetricAlgorithm intermed1PrivKey, AsymmetricAlgorithm intermed2PrivKey, AsymmetricAlgorithm leafPubKey) in E:\A\_work\2\s\corefx\src\System.Security.Cryptography.X509Certificates\tests\CertificateCreation\CertificateRequestChainTests.cs:line 361        at System.Security.Cryptography.X509Certificates.Tests.CertificateCreation.CertificateRequestChainTests.CreateChain_Hybrid() in E:\A\_work\2\s\corefx\src\System.Security.Cryptography.X509Certificates\tests\CertificateCreation\CertificateRequestChainTests.cs:line 60 Build : Master - 20180423.04 (Core Tests) ``` Failing configurations: - Windows.81.Amd64-x86   - Release
29293	area-System.Net	[arm32] corefx System.Net.NameResolution.Pal.Tests fails	_From @BruceForstall on April 23, 2018 21:46_  https://ci.dot.net/job/dotnet_coreclr/job/dev_unix_test_workflow/job/jitstress/job/arm_cross_checked_ubuntu_corefx_baseline_tst_prtest/3/consoleText    ```  Running tests in /ssd/j/workspace/dotnet_coreclr/dev_unix_test_workflow/jitstress/arm_cross_checked_ubuntu_corefx_baseline_tst_prtest/_/fx/bin/tests/System.Net.NameResolution.Pal.Tests/netcoreapp-Linux-Release-arm  ./RunTests.sh /ssd/j/workspace/dotnet_coreclr/dev_unix_test_workflow/jitstress/arm_cross_checked_ubuntu_corefx_baseline_tst_prtest/_/fx/bin/testhost/netcoreapp-Linux-Release-arm    ----- start 04:53:57 =============== To repro directly: =====================================================  pushd .  #!/usr/bin/env bash  chmod +x /ssd/j/workspace/dotnet_coreclr/dev_unix_test_workflow/jitstress/arm_cross_checked_ubuntu_corefx_baseline_tst_prtest/_/fx/bin/testhost/netcoreapp-Linux-Release-arm/dotnet  /ssd/j/workspace/dotnet_coreclr/dev_unix_test_workflow/jitstress/arm_cross_checked_ubuntu_corefx_baseline_tst_prtest/_/fx/bin/testhost/netcoreapp-Linux-Release-arm/dotnet xunit.console.netcore.exe System.Net.NameResolution.Pal.Tests.dll  -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests  -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing  popd  ===========================================================================================================  /ssd/j/workspace/dotnet_coreclr/dev_unix_test_workflow/jitstress/arm_cross_checked_ubuntu_corefx_baseline_tst_prtest/_/fx/bin/tests/System.Net.NameResolution.Pal.Tests/netcoreapp-Linux-Release-arm /ssd/j/workspace/dotnet_coreclr/dev_unix_test_workflow/jitstress/arm_cross_checked_ubuntu_corefx_baseline_tst_prtest/_/fx/bin/tests/System.Net.NameResolution.Pal.Tests/netcoreapp-Linux-Release-arm  xUnit.net console test runner (32-bit .NET Core)  Copyright (C) 2014 Outercurve Foundation.    Discovering: System.Net.NameResolution.Pal.Tests  Discovered:  System.Net.NameResolution.Pal.Tests  Starting:    System.Net.NameResolution.Pal.Tests     System.Net.NameResolution.PalTests.NameResolutionPalTests.TryGetNameInfo_LocalHost_IPv6_TryGetAddrInfo [FAIL]        Assert.Equal() Failure        Expected: Success        Actual:   HostNotFound        Stack Trace:           /mnt/j/workspace/dotnet_coreclr/dev_unix_test_workflow/jitstress/arm_cross_checked_ubuntu_corefx_baseline_prtest/_/fx/src/System.Net.NameResolution/tests/PalTests/NameResolutionPalTests.cs(161,0): at System.Net.NameResolution.PalTests.NameResolutionPalTests.TryGetNameInfo_LocalHost_IPv6_TryGetAddrInfo()     System.Net.NameResolution.PalTests.NameResolutionPalTests.TryGetNameInfo_LocalHost_IPv6 [FAIL]        Assert.Equal() Failure        Expected: Success        Actual:   HostNotFound        Stack Trace:           /mnt/j/workspace/dotnet_coreclr/dev_unix_test_workflow/jitstress/arm_cross_checked_ubuntu_corefx_baseline_prtest/_/fx/src/System.Net.NameResolution/tests/PalTests/NameResolutionPalTests.cs(77,0): at System.Net.NameResolution.PalTests.NameResolutionPalTests.TryGetNameInfo_LocalHost_IPv6()  Finished:    System.Net.NameResolution.Pal.Tests    === TEST EXECUTION SUMMARY ===     System.Net.NameResolution.Pal.Tests  Total: 10, Errors: 0, Failed: 2, Skipped: 0, Time: 4.381s  /ssd/j/workspace/dotnet_coreclr/dev_unix_test_workflow/jitstress/arm_cross_checked_ubuntu_corefx_baseline_tst_prtest/_/fx/bin/tests/System.Net.NameResolution.Pal.Tests/netcoreapp-Linux-Release-arm  ----- end 04:54:07 ----- exit code 1 ----------------------------------------------------------  ```    _Copied from original issue: dotnet/coreclr#17740_
29292	area-System.Net	[arm32] corefx System.Net.Http.Functional.Tests fails	_From @BruceForstall on April 23, 2018 21:44_  60 failures in this test suite:    https://ci.dot.net/job/dotnet_coreclr/job/dev_unix_test_workflow/job/jitstress/job/arm_cross_checked_ubuntu_corefx_baseline_tst_prtest/3/consoleText    Some seem like timeout (which is probably just too tight):  ```  System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_Cancellation_Test.GetAsync_CancelDuringResponseHeadersReceived_TaskCanceledQuickly(chunkedTransfer: True, connectionClose: True, mode: Token) [FAIL]        Elapsed time 00:00:31.6604110 should be less than 30 seconds, was 31.660411        Expected: True        Actual:   False  ```    There are many other error modes, though, e.g.,  ```        Assert.Throws() Failure        Expected: typeof(System.Net.Http.HttpRequestException)        Actual:   typeof(System.Threading.Tasks.TaskCanceledException): A task was canceled.  ```    _Copied from original issue: dotnet/coreclr#17739_
29290	area-System.IO	Add UTF-8 match algorithm for FileSystemName?	A UTF-8 implementation of [`FileSystemName.MatchesSimpleExpression`](https://github.com/dotnet/corefx/blob/master/src/System.IO.FileSystem/src/System/IO/Enumeration/FileSystemName.cs#L95) would allow matching Unix/Mac data without having to first convert to UTF-16. Something like this perhaps:    ``` C#  namespace System.IO.Enumeration  {      // name is UTF-8      public static bool MatchesSimpleExpression(ReadOnlySpan<char> expression, ReadOnlySpan<byte> name, bool ignoreCase = true)  }  ```    This could potentially improve performance. We currently convert from UTF-8 into a temporary UTF-16 buffer on the stack- it may also be that improvements here don't register against the cost of I/O. https://github.com/dotnet/corefx/blob/master/src/System.IO.FileSystem/src/System/IO/Enumeration/FileSystemEntry.Unix.cs#L88-L103    If anyone has a particular interest in this they are welcome to try and implement. If we find there is, in fact, a measurable benefit we can look at making a formal API proposal at that point.
29289	area-System.Runtime	Add Iran Timezone test case	
29288	area-System.IO	FileSystemWatcher does not need to allocate strings until they pass the filter	This change was already done for Windows: https://github.com/dotnet/corefx/commit/11a12e6538a0a024c3adfb944c3983c0d66c3768    The Unix/MacOS implementations can do the same sort of optimization by converting the UTF-8 bytes into a temporary buffer that is passed to the filter method before converting to string.
29287	area-System.Security	* NO MERGE * example of tactical changes to ensure SSL error queue is kept clean	Addressed the following native calls that were pending from initial list:    CryptoNative_Asn1OctetStringNew  CryptoNative_Asn1OctetStringSet  CryptoNative_BigNumFromBinary  CryptoNative_BioDestroy  CryptoNative_BioNewFile  CryptoNative_BioRead  CryptoNative_BioSeek  CryptoNative_BioTell  CryptoNative_BioWrite  CryptoNative_CreateMemoryBio  CryptoNative_DecodeAsn1OctetString  CryptoNative_DecodeAsn1TypeBytes    If the native failure is ignored on managed I opted to clear the queue on native.  Some of the functions, typically set or related may actually have no chance of returning error assuming we pass good parameters.  
29286	area-System.Net	Always use DnsEndPoint in SocketHttpHandler's ConnectAsync	We had a minor optimization here, but there's a long-standing issue with Socket.ConnectAsync where it's leaving for finalization a socket when the connect with an IP address fails.  It's more important to address that issue, and using DnsEndPoint does so (it's also the code we want, anyway).    Contributes to https://github.com/dotnet/corefx/issues/26517  Contributes to https://github.com/dotnet/corefx/issues/29285    cc: @geoffkizer, @davidsh 
29285	area-System.Net	Socket.ConnectAsync with an IPAddress and a failed connection leaves a Socket for finalization	"The static Socket.ConnectAsync method creates one or more Sockets to use to establish the connection, and that Socket is then returned when the connection is made successfully.  When the connection fails, it's supposed to Dispose of the created Socket(s).  But it's failing to do so when something other than a DnsEndPoint is supplied, hitting this code path:  https://github.com/dotnet/corefx/blob/4fc38265fb35fd6bfc982b8e35a2545502e596b3/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs#L3975-L3976  that creates the Socket but then uses the public `ConnectAsync(SocketAsyncEventArgs)`, which can't Dispose of the Socket because it doesn't know that it's one internally created (since it's a public method and the caller owns the Socket instance).  This ends up leaking a socket handle / file descriptor until the Socket / SafeHandle's finalizer runs to close it, eventually.    This issue exists in both .NET Core and .NET Framework, and appears to have existed for a long time.  However, it's showing up as an issue for SocketsHttpHandler, due to this optimization:  https://github.com/dotnet/corefx/blob/4fc38265fb35fd6bfc982b8e35a2545502e596b3/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/ConnectHelper.cs#L57-L59  where SocketsHttpHandler is trying to take the more optimized IPEndPoint path when an IP address is supplied.  This then means that HttpClient failed connects end up leaking a handle / file descriptor similarly until the finalizer runs, which if lots of requests are being made, could result in ""too many open files"" errors on Unix.    I'm marking this as a 2.1 issue just for the SocketsHttpHandler fix, as it's a new issue in 2.1.  The Sockets issue should be addressed, but it's long-standing and can be deferred to 2.2."
29278	area-System.Net	"Test System.Net.Security.Tests.SslStreamSniTest.SslStream_ServerCallbackNotSet_UsesLocalCertificateSelection(hostName: \""a\"") failed with ""System.ComponentModel.Win32Exception"""	"Test: System.Net.Security.Tests.SslStreamSniTest.SslStream_ServerCallbackNotSet_UsesLocalCertificateSelection(hostName: \""a\"") (from (empty)) has failed.    MESSAGE:  System.ComponentModel.Win32Exception : The client and server cannot communicate, because they do not possess a common algorithm  ~~~  +++++++++++++++++++  STACK TRACE:  at System.Net.SSPIWrapper.AcquireCredentialsHandle(SSPIInterface secModule, String package, CredentialUse intent, SCHANNEL_CRED scc) in D:\j\workspace\outerloop_net---92764178\src\Common\src\Interop\Windows\sspicli\SSPIWrapper.cs:line 170 at System.Net.Security.SslStreamPal.AcquireCredentialsHandle(CredentialUse credUsage, SCHANNEL_CRED secureCredential) in D:\j\workspace\outerloop_net---92764178\src\System.Net.Security\src\System\Net\Security\SslStreamPal.Windows.cs:line 472 at System.Net.Security.SslStreamPal.AcquireCredentialsHandle(X509Certificate certificate, SslProtocols protocols, EncryptionPolicy policy, Boolean isServer) in D:\j\workspace\outerloop_net---92764178\src\System.Net.Security\src\System\Net\Security\SslStreamPal.Windows.cs:line 177 at System.Net.Security.SecureChannel.AcquireServerCredentials(Byte[]& thumbPrint, Byte[] clientHello) in D:\j\workspace\outerloop_net---92764178\src\System.Net.Security\src\System\Net\Security\SecureChannel.cs:line 699 at System.Net.Security.SecureChannel.GenerateToken(Byte[] input, Int32 offset, Int32 count, Byte[]& output) in D:\j\workspace\outerloop_net---92764178\src\System.Net.Security\src\System\Net\Security\SecureChannel.cs:line 802 at System.Net.Security.SecureChannel.NextMessage(Byte[] incoming, Int32 offset, Int32 count) in D:\j\workspace\outerloop_net---92764178\src\System.Net.Security\src\System\Net\Security\SecureChannel.cs:line 725 at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest) in D:\j\workspace\outerloop_net---92764178\src\System.Net.Security\src\System\Net\Security\SslState.cs:line 744 at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest) in D:\j\workspace\outerloop_net---92764178\src\System.Net.Security\src\System\Net\Security\SslState.cs:line 959 at System.Net.Security.SslState.ReadFrameCallback(AsyncProtocolRequest asyncRequest) in D:\j\workspace\outerloop_net---92764178\src\System.Net.Security\src\System\Net\Security\SslState.cs:line 1125 --- End of stack trace from previous location where exception was thrown --- at System.Net.Security.SslState.ThrowIfExceptional() in D:\j\workspace\outerloop_net---92764178\src\System.Net.Security\src\System\Net\Security\SslState.cs:line 96 at System.Net.Security.SslState.InternalEndProcessAuthentication(LazyAsyncResult lazyResult) in D:\j\workspace\outerloop_net---92764178\src\System.Net.Security\src\System\Net\Security\SslState.cs:line 735 at System.Net.Security.SslState.EndProcessAuthentication(IAsyncResult result) in D:\j\workspace\outerloop_net---92764178\src\System.Net.Security\src\System\Net\Security\SslState.cs:line 705 at System.Net.Security.SslStream.EndAuthenticateAsServer(IAsyncResult asyncResult) in D:\j\workspace\outerloop_net---92764178\src\System.Net.Security\src\System\Net\Security\SslStream.cs:line 271 at System.Net.Security.SslStream.<>c.<AuthenticateAsServerAsync>b__51_1(IAsyncResult iar) in D:\j\workspace\outerloop_net---92764178\src\System.Net.Security\src\System\Net\Security\SslStream.cs:line 430 at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization) in E:\A\_work\48\s\src\mscorlib\src\System\Threading\Tasks\FutureFactory.cs:line 533 --- End of stack trace from previous location where exception was thrown --- at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks) in D:\j\workspace\outerloop_net---92764178\src\Common\tests\System\Threading\Tasks\TaskTimeoutExtensions.cs:line 64 at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks) in D:\j\workspace\outerloop_net---92764178\src\Common\tests\System\Threading\Tasks\TaskTimeoutExtensions.cs:line 92 at System.Net.Security.Tests.SslStreamSniTest.SslStream_ServerCallbackNotSet_UsesLocalCertificateSelection(String hostName) in D:\j\workspace\outerloop_net---92764178\src\System.Net.Security\tests\FunctionalTests\SslStreamSniTest.cs:line 133  ~~~  Details:  https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_win7_debug/474/testReport/System.Net.Security.Tests/SslStreamSniTest/SslStream_ServerCallbackNotSet_UsesLocalCertificateSelection_hostName____a___/"
29277	area-System.Memory	How to run System.Memory performance tests for netfx TargetGroup	I added performance test for Span.IndexOf with comparisonType parameter. See https://github.com/dotnet/corefx/pull/29263 PR.    I want to run them for netfx TargetGroup but next command `msbuild /t:BuildAndTest /p:Performance=true /p:ConfigurationGroup=Release /p:TargetOS=Windows_NT /p:TargetGroup=netfx` doesn't run performance tests for netfx TargetGroup.    I need run them for netfx TargetGroup because I need test portable span methods.
29275	area-System.IO	FileSecurity fails accessing file with path >= 260 characters	"Under .NET Core 2.1.104 (Windows 10 / 64-bit), [FileSecurity](https://github.com/dotnet/corefx/blob/master/src/System.IO.FileSystem.AccessControl/src/System/Security/AccessControl/FileSecurity.cs#L606) fails to read permissions from file that have a path length exceeding 259 characters.    Stack trace snippet:  ```  Parameter name: name  at System.Security.AccessControl.NativeObjectSecurity.CreateInternal(ResourceType resourceType, Boolean isContainer, String name, SafeHandle handle, AccessControlSections includeSections, Boolean createByName, ExceptionFromErrorCode exceptionFromErrorCode, Object exceptionContext)  at System.Security.AccessControl.FileSystemSecurity..ctor(Boolean isContainer, String name, AccessControlSections includeSections, Boolean isDirectory)  at System.Security.AccessControl.FileSecurity..ctor(String fileName, AccessControlSections includeSections)  ```  [Sample code demostrating this](https://gist.github.com/scovetta/01a6bca7881d3772a2b7bcf71cecf6aa)    A workaround for this is to prefix the path with `\\?\`, as shown below:  ```  // Fails  var fs = new FileSecurity(@""c:\temp\really-long-name.txt"", AccessControlSections.All);  // Succeeds  var fs = new FileSecurity(@""\\?\c:\temp\really-long-name.txt"", AccessControlSections.All);  ```    It would be useful if the FileSecurity class (and probably others) could do this on the caller's behalf, or if that could cause breakage, then updating the FileSecurity [documentation](https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Security.AccessControl/FileSecurity.xml) to describe this (or if there's a better workaround).  "
29274	area-System.Diagnostics	Add FileLogTraceListener, Log and Asp​Log classes to .Net Core	FileLogTraceListener class is available in .net framework in the Microsoft.VisualBasic.Logging namespace. It has some useful features that are not available in other TraceListeners, as descried here:  https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualbasic.logging.filelogtracelistener?view=netframework-4.7.2    This class is not available in .Net Core, so I suggest you add it and make it available to both VB.NET and C#.  And I suggest the same for Log Class  https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualbasic.logging.log?view=netframework-4.7.2  and Asp​Log Class:  https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualbasic.logging.asplog?view=netframework-4.7.2  
29273	area-System.IO	Add FileSystem.Watcher.FilterList Property	"# Rationale  Currently there is no support for using multiple regex filters to monitor the file system using FileSystemWatcher Class. eg. If we want to monitor files with two extensions (.dll and .pdb), we wont be able to directly to due it.    There are 2 ways to work around this issue but non of them is optimal.    1. Create an instance of fileSystemWatcher class and listen to all the files using ```""*"" ``` filter and then prune the files manually in the event handler.  ```  eg. If (filename.endswith(""*.txt"") || filename.endswith(""*.csv""))     // do   ```    This approach is highly inefficient because first of all we are listening to all files and then user have to manually filter the files which defeats the purpose of having the ```Filter``` in the first place. Here are some links where people asked for this new functionality but has to settle down for this approach    https://stackoverflow.com/questions/6965184/how-to-set-filter-for-filesystemwatcher-for-multiple-file-types  https://social.msdn.microsoft.com/Forums/vstudio/en-US/91ebc868-2661-4477-b825-5b796d020ab1/how-do-i-setup-filewatcher-filter-for-multiple-document-types?forum=csharpgeneral  https://stackoverflow.com/questions/38467389/filter-to-not-include-multiple-extensions    2. The Second approach is two create multiple instances of FileSystemWatcher with different regex filters and hook them to the same event handlers.    # Proposed API  ``` C#  namespace System.IO  {      public class FileSystemWatcher      {          public Collection<string> FilterList { get; set; }      }  }  ```    Currently we use ```string _filter``` as a backing field for ```Filter``` property. I suggest using ```Collection<string> _filterList``` as a backing field for both the ```Filter and FilterList Property```.    Filter property will always return the first element of the list (In Case of multiple Filters too)     # Implementation Branch  https://github.com/Anipik/corefx/tree/Filter  This is the rough implementation of the api and how it will modify the ```constructor and Filter property```.    >what happens when you set Filter?     It just sets the first element and does not reduce the size of collection.     >What happens if you set FilterList to null or empty or clear it or removeall items using removeAt?    In all the above cases, we change it to the collection with just only one element i.e ```*```    >What do we do if an element in Filters is null or empty? If we match everything, can/should we optimize?    We never have a ```null or empty element``` in the collection. We always replace it with ```*``` while adding to the collection  >If we match everything, can/should we optimize?    We can optimise by not going further through the collection of the list if we encounter ```*```.    >What about a constructor overload that takes the filters?    we can use Initializer to initialize the FilterList   ```  var watcher3 = new FileSystemWatcher() { FilterList = new Collection<string> { ""*.pdb"", "".exe"", "".doc"" } };  Assert.Equal(3, watcher3.FilterList.Count);  ```   It will be breaking change as ```FileSystemWatcher(""path"", null)``` will be ambiguous call for ```FileSystemWater(string path, IEnumnerable<string> FilterList)```    # Usage  ``` C#  var watcher = new FileSystemWatcher();  watcher.FilterList[0] = ""*.pdb"";  watcher.FilterList.Add(""*.exe"");  watcher.FilterList.Add(""*.dll"");  Assert.Equal(3, watcher.FilterList.Count);    var watcher2 = new FileSystemWatcher( @""C:\git\corefx"",""*.pdb"");  watcher2.FilterList.Add(""*.exe"");  watcher2.FilterList.Add(""*.dll"");  Assert.Equal(3, watcher2.FilterList.Count);    var watcher3 = new FileSystemWatcher() { FilterList = new Collection<string> { ""*.pdb"", "".exe"", "".doc"" } };  Assert.Equal(3, watcher3.FilterList.Count);    var watcher4 = new FileSystemWatcher() { FilterList = null };  Assert.Equal(1, watcher4.FilterList.Count);    var watcher5 = new FileSystemWatcher() { FilterList = new Collection<string> { null } };  Assert.Equal(""*"", watcher5.Filter);    var watcher6 = new FileSystemWatcher();  watcher6.FilterList = new Collection<string> { ""*.pdb"", "".exe"", "".doc"" };  Assert.Equal(3, watcher6.FilterList.Count);  ```    cc @danmosemsft @JeremyKuhne "
29271	area-Serialization	DataContractJsonSerializer: I-JSON Option Request	Related: https://github.com/javaee/jsonb-spec/issues/80
29270	area-Infrastructure	Dumpling documentation points to empty website	https://github.com/dotnet/corefx/blob/master/Documentation/debugging/crash-dumps.md has link to https://dumpling.azurewebsites.net/ . This is a empty website.    What is the up to date way to get dumpling crash dumps for corefx?
29269	area-System.Drawing	SystemColors values wrong	Hi guys,    I noticed that the values of SystemColors are wrong in 2.0, so I checked with 2.1 and they were alright.  It looks like SystemColors is exposed in different places for 2.0/2.1 and I don't get where things go wrong.    ### NET Core 2.0  ```  SystemColors.ActiveBorder            = Color [AliceBlue]  SystemColors.ActiveCaption           = Color [AntiqueWhite]  SystemColors.ActiveCaptionText       = Color [Aqua]  SystemColors.AppWorkspace            = Color [Aquamarine]  SystemColors.ButtonFace              = Color []  SystemColors.ButtonHighlight         = Color []  SystemColors.ButtonShadow            = Color []  SystemColors.Control                 = Color [Azure]  SystemColors.ControlDark             = Color [Beige]  SystemColors.ControlDarkDark         = Color [Bisque]  SystemColors.ControlLight            = Color [Black]  SystemColors.ControlLightLight       = Color [BlanchedAlmond]  SystemColors.ControlText             = Color [Blue]  SystemColors.Desktop                 = Color [BlueViolet]  SystemColors.GradientActiveCaption   = Color []  SystemColors.GradientInactiveCaption = Color []  SystemColors.GrayText                = Color [Brown]  SystemColors.Highlight               = Color [BurlyWood]  SystemColors.HighlightText           = Color [CadetBlue]  SystemColors.HotTrack                = Color [Chartreuse]  SystemColors.InactiveBorder          = Color [Chocolate]  SystemColors.InactiveCaption         = Color [Coral]  SystemColors.InactiveCaptionText     = Color [CornflowerBlue]  SystemColors.Info                    = Color [Cornsilk]  SystemColors.InfoText                = Color [Crimson]  SystemColors.Menu                    = Color [Cyan]  SystemColors.MenuBar                 = Color []  SystemColors.MenuHighlight           = Color []  SystemColors.MenuText                = Color [DarkBlue]  SystemColors.ScrollBar               = Color [DarkCyan]  SystemColors.Window                  = Color [DarkGoldenrod]  SystemColors.WindowFrame             = Color [DarkGray]  SystemColors.WindowText              = Color [DarkGreen]  ```    ### NET Core 2.1 (Preview)  ```  SystemColors.ActiveBorder            = Color [ActiveBorder]  SystemColors.ActiveCaption           = Color [ActiveCaption]  SystemColors.ActiveCaptionText       = Color [ActiveCaptionText]  SystemColors.AppWorkspace            = Color [AppWorkspace]  SystemColors.ButtonFace              = Color [ButtonFace]  SystemColors.ButtonHighlight         = Color [ButtonHighlight]  SystemColors.ButtonShadow            = Color [ButtonShadow]  SystemColors.Control                 = Color [Control]  SystemColors.ControlDark             = Color [ControlDark]  SystemColors.ControlDarkDark         = Color [ControlDarkDark]  SystemColors.ControlLight            = Color [ControlLight]  SystemColors.ControlLightLight       = Color [ControlLightLight]  SystemColors.ControlText             = Color [ControlText]  SystemColors.Desktop                 = Color [Desktop]  SystemColors.GradientActiveCaption   = Color [GradientActiveCaption]  SystemColors.GradientInactiveCaption = Color [GradientInactiveCaption]  SystemColors.GrayText                = Color [GrayText]  SystemColors.Highlight               = Color [Highlight]  SystemColors.HighlightText           = Color [HighlightText]  SystemColors.HotTrack                = Color [HotTrack]  SystemColors.InactiveBorder          = Color [InactiveBorder]  SystemColors.InactiveCaption         = Color [InactiveCaption]  SystemColors.InactiveCaptionText     = Color [InactiveCaptionText]  SystemColors.Info                    = Color [Info]  SystemColors.InfoText                = Color [InfoText]  SystemColors.Menu                    = Color [Menu]  SystemColors.MenuBar                 = Color [MenuBar]  SystemColors.MenuHighlight           = Color [MenuHighlight]  SystemColors.MenuText                = Color [MenuText]  SystemColors.ScrollBar               = Color [ScrollBar]  SystemColors.Window                  = Color [Window]  SystemColors.WindowFrame             = Color [WindowFrame]  SystemColors.WindowText              = Color [WindowText]  ```
29268	area-Meta	Fix crossfs build for armel jessie	The source list was incorrectly containing stable/main sources in addition  to the jessie/main. That caused the openssl 1.1 to creep in and the  build with such crossfs was failing since we were trying to compile  against ssl 1.1 headers.  The reason why it was working in the past is that the stable branch used  to be something older and so it didn't have this issue.  The stable repo reference most likely came from coreclr where it was   needed to get the lldb-dev package.
29266	area-System.Reflection	Reflection.Emit.ILGeneration.Tests test fails in CI for OSX	"From https://github.com/dotnet/corefx/pull/29259  https://mc.dot.net/#/user/dotnet-maestro-bot/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/b2c471b57bdf01d46ed9c2855b460880d2fc1c12/workItem/System.Reflection.Emit.ILGeneration.Tests/wilogs  OSX.1012.Amd64.Open-x64:Debug   System.Reflection.Emit.ILGeneration.Tests  ```text  2018-04-21 07:07:20,391: INFO: proc(54): run_and_log_output: Output: Discovering: System.Reflection.Emit.ILGeneration.Tests  2018-04-21 07:07:20,532: INFO: proc(54): run_and_log_output: Output: Discovered:  System.Reflection.Emit.ILGeneration.Tests  2018-04-21 07:07:20,595: INFO: proc(54): run_and_log_output: Output: Starting:    System.Reflection.Emit.ILGeneration.Tests  2018-04-21 07:07:20,824: INFO: proc(54): run_and_log_output: Output: 0  2018-04-21 07:07:20,824: INFO: proc(54): run_and_log_output: Output: emitWriteLine  2018-04-21 07:07:20,824: INFO: proc(54): run_and_log_output: Output: False  2018-04-21 07:07:26,786: INFO: proc(54): run_and_log_output: Output: /Users/dotnet-bot/dotnetbuild/work/e9b67638-12f9-4fe2-9c10-da8dac0aea76/Work/bf31de7e-072c-41df-a5da-15dd5fe59d9c/Unzip/RunTests.sh: line 129: 87728 Segmentation fault: 11  (core dumped) $RUNTIME_PATH/dotnet xunit.console.netcore.exe System.Reflection.Emit.ILGeneration.Tests.dll -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonosxtests -notrait category=OuterLoop -notrait category=failing  2018-04-21 07:07:27,085: INFO: proc(54): run_and_log_output: Output: Traceback (most recent call last):  2018-04-21 07:07:27,085: INFO: proc(54): run_and_log_output: Output:   File ""/Users/dotnet-bot/.dumpling/dumpling.py"", line 33, in <module>  2018-04-21 07:07:27,085: INFO: proc(54): run_and_log_output: Output:     import psutil  2018-04-21 07:07:27,085: INFO: proc(54): run_and_log_output: Output: ImportError: No module named psutil  2018-04-21 07:07:27,096: INFO: proc(54): run_and_log_output: Output: Trying to find crash dumps for project: System.Reflection.Emit.ILGeneration.Tests  2018-04-21 07:07:27,096: INFO: proc(54): run_and_log_output: Output: Uploading dump file: /Users/dotnet-bot/dotnetbuild/work/e9b67638-12f9-4fe2-9c10-da8dac0aea76/Work/bf31de7e-072c-41df-a5da-15dd5fe59d9c/Unzip/core.87728  2018-04-21 07:07:27,103: INFO: proc(54): run_and_log_output: Output: ~/dotnetbuild/work/e9b67638-12f9-4fe2-9c10-da8dac0aea76/Work/bf31de7e-072c-41df-a5da-15dd5fe59d9c/Unzip  2018-04-21 07:07:27,107: INFO: proc(54): run_and_log_output: Output: ----- end 07:07:27 ----- exit code 139 ----------------------------------------------------------  2018-04-21 07:07:27,107: INFO: proc(54): run_and_log_output: Output: exit code 139 means SIGSEGV Illegal memory access. Deref invalid pointer, overrunning buffer, stack overflow etc. Core dumped.  2018-04-21 07:07:27,111: INFO: proc(58): run_and_log_output: Exit Code: 139  2018-04-21 07:07:27,111: ERROR: scriptrunner(91): _main: Error: No exception thrown, but XUnit results not created  2018-04-21 07:07:27,111: ERROR: helix_test_execution(83): report_error: Error running xunit None  ```"
29265	area-System.Diagnostics	System.Diagnostics.Activity does not use Correlation-Context: Id in GetRootId	While `Activity` is implementing the hierarchical request id spec, in the case of a mixed hierarchical and non-hierarchical scenario, if the parent service only supports the flat request id, but it sets the `Correlation-Context: Id` header, then that `Id` should have made it into the baggage and would be available to pull from.    I think `Activity.RootId` should also check the baggage keys in addition to the `Id` and `ParentId`.    @lmolkova as an author of the spec and `Activity` implementation.
29264	area-Infrastructure	Build for netfx does not run tests if tests source files was not changed	To run `netfx` tests for `System.Memory` library I use next command `..\..\build . -framework:netfx` in `src\System.Memory ` folder.    If source files for tests are not changed than this command does not start tests. It only build library.  To run tests I should change some source file in `src\System.Memory\tests` folder.    If run `build` command without  `-framework:netfx` option it will run tests always. But I want run tests for `netfx` without touching tests source files.    Can it be fixed?      
29263	area-System.Memory	Portable Span IndexOf for OrdinalIgnoreCase	I added Portable Span IndexOf for OrdinalIgnoreCase. Close https://github.com/dotnet/corefx/issues/28336 issue.     I did not found any performance tests for any Span methods with OrdinalIgnoreCase comparison.    Should I add such test inly for Span IndexOf or for other Span methods also?
29262	area-System.Memory	Refactoring ReadOnlySequence tests	I refactored ReadOnlySequence tests to remove code duplicates and to not duplicate tests in future. It was part of https://github.com/dotnet/corefx/pull/29231 PR
29260	area-System.Xml	About 40% regression or the XmlDocument performance test Create()	"_From @maryamariyan on April 21, 2018 1:43_  The Regression for the XmlDocument performance test [Create()](https://github.com/dotnet/corefx/blob/697e2b910e6cccbc1f3d58be111e309db4823ab7/src/System.Private.Xml/tests/XmlDocument/Performance/Perf.XmlDocument.cs#L16) is illustrated in the chart below.    <img width=""1062"" alt=""screen shot 2018-04-20 at 6 03 33 pm"" src=""https://user-images.githubusercontent.com/5897654/39078880-32feeb30-44c5-11e8-9886-3b5f311fb9c5.png"">    Refer to [benchview](https://benchview/trendline?build_selector=latest&count=2000&aggregate=arithmeticMean&filterTail=one&filterVal=100&interval=INTERVAL_MIN_MAX&rtids=[957]&archids=[23]&mpids=[1292]&cfgids=[2785,2706]&testids=[61756]&jobid=94550&) for more details.    @krwq I was looking at the Marvin hashcode commit dotnet/corefx@697e2b9 you submitted in January and it seems when instantiating XmlDocument it suddenly regressed. Was this by design or not intentional?    Overall the regression is about 45% on Linux (and around 30% on Windows). Although the regression seems to have started from January, there have been some ups and downs since so not exactly sure if I can find the exact root cause for the overall regression here in a straightforward way.    The test Create() as seen [here](https://github.com/dotnet/corefx/blob/697e2b910e6cccbc1f3d58be111e309db4823ab7/src/System.Private.Xml/tests/XmlDocument/Performance/Perf.XmlDocument.cs#L16), just attempts to create new XmlDocument() multiple times.    cc: @kouvel @danmosemsft  _Copied from original issue: dotnet/coreclr#17715_"
29258	area-System.Runtime	API Proposal: RuntimeFeature.HasJit	# Rationale  The most efficient patterns for reflection depend on the current runtime. On .NET Core, ```System.Reflection.  Emit``` or LINQ Expressions are usually most efficient because the JIT compiles them at runtime. However, for .NET Native, CoreRT, (and I believe Mono AoT), ```System.Reflection.Emit``` isn't available and LINQ Expressions are interpreted. Mono has progress on an interpreter that could make ```System.Reflection.Emit``` work, but it would still likely be less efficient than using reflection APIs directly. Library developers occasionally ask for a way to find out what will both work and be efficient on the current runtime.     This has come up in #10470 and https://github.com/aspnet/Home/issues/3079.    # Proposed API  Add ```HasJit``` ~~and ```CanEmitIL```~~ properties to the existing ```System.Runtime.CompilerServices.RuntimeFeature``` class:  ```  public class RuntimeFeature  {      public static bool HasJit { get; }  }  ```    ```HasJit``` is true if the current runtime can emit optimized native code at runtime. ~~CanEmitIL is true if System.Reflection.Emit works at all, whether it's implemented by a JIT or an interpreter.~~    # Example Usage  Serializers or dependency injection frameworks often have methods that construct an object with some knowledge of its signature. With this API, it could be optimized to look something like this:  ```  T CreateInstance<T>(int ctorParameter)  {      if (RuntimeFeature.HasJit)      {          // Since this runtime has a JIT, use refemit to construct a specialized method          if(cachedFactoryMethodDelegate == null)          {              DynamicMethod factoryMethod = new DynamicMethod(...);              // Emit some IL to instantiate T              cachedFactoryMethodDelegate = (Func<int, T>)factoryMethod.CreateDelegate(typeof(Func<int, T>));           }           return cachedFactoryMethodDelegate(ctorParameter);      }      else      {          // No JIT, just use reflection          ConstructorInfo ctorInfo = typeof(T).GetConstructor(new Type[] { typeof(int)});          return (T)ctorInfo.Invoke(ctorParameter);       }  }
29257	area-System.Memory	Enable Create From Pinned Array Slice tests for core	~Depends on new coreclr build.~    Enabling tests added in https://github.com/dotnet/corefx/pull/29246    cc @stephentoub, @GrabYourPitchforks, @joshfree, @KrzysztofCwalina 
29254	area-System.Reflection	System.Reflection.Emit: ILGenerator.Emit(OpCodes.Ldtoken, <MethodInfo>) produces incorrect metadata for methods with C# 7.2 `in` parameters in generic types	"@TAGC recently noted in https://github.com/castleproject/Core/issues/339#issuecomment-372605885 that DynamicProxy-based mocking libraries (e.g. Moq, NSubstitute) appear to have problems mocking the following generic interface:    > ```csharp  > public interface IGenericStructByRefConsumer<T>  > {  >     T Consume(in Struct message);  > }  > ```    Mocking such a type will typically result in a `MissingMethodException`. It only seems to occur with generic types/methods, and in the presence of a C# 7.2 `in` parameter modifier.    I've been able to track this down to what appears to be a bug in System.Reflection.Emit. A brief description follows below; if more detail or code is required, I can probably provide it... please ask.    ---    Given this C# 7.2+ interface:    ```csharp  public interface WithIn<T>  {      void Method(in int arg);  }  ```    <details>  <summary>(Expand to see the equivalent type definition in IL.)</summary>    ```  .class public abstract interface auto ansi WithIn`1<T>  {    .method public hidebysig newslot abstract virtual instance void Method([in] int32& modreq([mscorlib]System.Runtime.InteropServices.InAttribute) arg) cil managed    {      .param [1]      .custom instance void [mscorlib]System.Runtime.CompilerServices.IsReadOnlyAttribute::.ctor() = ( 01 00 00 00 )     }  }  ```  </details>  <br>    DynamicProxy would need to generate the following IL instruction sequence using a `System.Reflection.Emit.ILGenerator` (because it caches `MethodInfo` for proxied methods):    ```  ldtoken    method instance void class WithIn`1<int32>::Method(int32& modreq([mscorlib]System.Runtime.InteropServices.InAttribute))  ldtoken    class WithIn`1<int32>  call       class [mscorlib]System.Reflection.MethodBase   ```    This is how one would supposedly do it with `ILGenerator`:    ```csharp  var methodType = typeof(WithIn<int>);  var method = methodType.GetMethod(""Method"");  var getMethodFromHandle = typeof(MethodBase).GetMethod(""GetMethodFromHandle"", new[] { typeof(RuntimeMethodHandle), typeof(RuntimeTypeHandle) });    ilGenerator.Emit(OpCodes.Ldtoken, method);  // <-- !!!  ilGenerator.Emit(OpCodes.Ldtoken, methodType);  ilGenerator.EmitCall(OpCodes.Call, getMethodFromHandle, null);  ```    I've verified (by saving the dynamic assembly to disk using the .NET Framework 4.7, then dumping it with ILDASM) that the following IL is generated instead:    ```  ldtoken    method instance void class WithIn`1<int32>::Method(int32&)  ldtoken    class WithIn`1<int32>  call       class [mscorlib]System.Reflection.MethodBase [mscorlib]System.Reflection.MethodBase::GetMethodFromHandle(valuetype [mscorlib]System.RuntimeMethodHandle,  ```    Note the absence of the `modreq` in the first instruction's method reference. This will result in a `MissingMethodException` (because method signatures don't match) when the generated code is run:    > System.MissingMethodException: Method not found: 'Void IWithIn`1.Method(Int32 ByRef)'.    The same `MissingMethodException` occurs with .NET Core 2.0, so I suspect it inherited the exact same problem from the .NET Framework. If you'd rather have repro code for .NET Core, you'll find it below.    <details>  <summary>(Expand for an error reproduction on .NET Core.)</summary>    ```csharp  using System;  using System.Diagnostics;  using System.Reflection;  using System.Reflection.Emit;    public interface WithIn<T>  {      void Method(in int arg);  }    class Program  {      static void Main()      {          var methodType = typeof(WithIn<int>);          var method = methodType.GetMethod(""Method"");          var getMethodFromHandle = typeof(MethodBase).GetMethod(""GetMethodFromHandle"", new[] { typeof(RuntimeMethodHandle), typeof(RuntimeTypeHandle) });            var assemblyBuilder = AssemblyBuilder.DefineDynamicAssembly(new AssemblyName(""DynamicAssembly""), AssemblyBuilderAccess.Run);          var moduleBuilder = assemblyBuilder.DefineDynamicModule(""DynamicModule"");          var typeBuilder = moduleBuilder.DefineType(""DynamicType"", TypeAttributes.Public | TypeAttributes.Abstract | TypeAttributes.Class);            var methodBuilder = typeBuilder.DefineMethod(""Get"", MethodAttributes.Public | MethodAttributes.Static, typeof(MethodBase), new Type[0]);          var ilBuilder = methodBuilder.GetILGenerator();          ilBuilder.Emit(OpCodes.Ldtoken, method);          ilBuilder.Emit(OpCodes.Ldtoken, methodType);          ilBuilder.EmitCall(OpCodes.Call, getMethodFromHandle, null);          ilBuilder.Emit(OpCodes.Ret);            var type = typeBuilder.CreateType();            var il = type.GetMethod(""Get"").GetMethodBody().GetILAsByteArray();          Debug.Assert(il[0] == OpCodes.Ldtoken.Value, ""First op-code is not `ldtoken`."");            var ilMethodMetadataToken = BitConverter.ToInt32(il, 1);          Debug.Assert(type.Module.ResolveMethod(ilMethodMetadataToken) == method, ""First `ldtoken` does not refer to the correct method."");      }  }  ```  </details>  <br>    Note again that this problem only occurs for methods in generic types/methods, and in the presence of an `in` parameter modifier.    /cc @jonorossi (for DynamicProxy), @zvirja (for NSubstitute), @thomaslevesque (for FakeItEasy)"
29252	area-System.Memory	[release/2.1] Port Preserve pinned flag in {ReadOnly}Memory<T>.Slice (#29246)	Fixes #29239 (port of PR #29246 in master)    cc @joshfree, @GrabYourPitchforks, @geoffkizer, @stephentoub, @benaadams, @davidfowl  
29251	area-System.Memory	Add tests to check Memory<T>.Slice doesn't reset the high-bit in length	Addendum to https://github.com/dotnet/corefx/pull/29246    cc @stephentoub, @GrabYourPitchforks, @joshfree, @KrzysztofCwalina 
29250	area-System.Memory	Coudn't build System.Memory for netfx TargetGroup	Next command `msbuild /t:Build /p:ConfigurationGroup=Debug /p:TargetGroup=netfx` return next errors in log:  ```  ReportConfigurationErrorMessage:    C:\Code\corefx\src\System.Runtime\ref\System.Runtime.csproj ConfigurationErrorMessage: Could not find a compatible configuration for BuildConfiguration 'netfx-Windows_NT-Debug-x64' from BuildConfigurations ';netcoreapp;uap;;'.  Considered netfx-Windows_NT;net461-Windows_NT;net46-Windows_NT;net451-Windows_NT;net45-Windows_NT;netstandard-Windows_NT;netstandard2.0-Windows_NT;netstandard1.6-Windows_NT;netstandard1.5-Windows_NT;netstandard1.4-Windows_NT;netstandard1.3-Windows_NT;netstandard1.2-Windows_NT;netstandard1.1-Windows_NT;netstandard1.0-Windows_NT;netfx;netfx-AnyOS;net461;net461-AnyOS;net46;net46-AnyOS;net451;net451-AnyOS;net45;net45-AnyOS;netstandard;netstandard-AnyOS;netstandard2.0;netstandard2.0-AnyOS;netstandard1.6;netstandard1.6-AnyOS;netstandard1.5;netstandard1.5-AnyOS;netstandard1.4;netstandard1.4-AnyOS;netstandard1.3;netstandard1.3-AnyOS;netstandard1.2;netstandard1.2-AnyOS;netstandard1.1;netstandard1.1-AnyOS;netstandard1.0;netstandard1.0-AnyOS.Could not find a value for TargetGroup from Configuration ''.  ```    There is no error for `uap` and `netcoreapp` TargetGroup  only for `netfx`.    Also build from root is successful `build -framework=netfx` 
29249	area-Infrastructure	Remove workaround in package testing	See https://github.com/dotnet/corefx/pull/29241#issuecomment-383237638    We're walking the closure of packages that build on top of netcoreapp2.1.  Those build using live references but the current package testing infrastructure tests against an LKG framework package.  As a result when we bump reference versions every package will see a break until we get an updated LKG with the new reference assemblies.    Once we have a new Microsoft.NETCore.App we can remove this closure exception.  
29248	area-Infrastructure	Run mirror between corefx release/2.1 and coreclr release/2.1	We have noticed there are several commits missing in the coreclr release/2.1 branch that exists in corefx release/2.1 branch.    This means the mirror is not running on the release/2.1 branch and only runs on master.    This could lead to unexpected bugs in the product. For example, this PR just got opened for master, but corefx/2.1 and coreclr/2.1 are out of sync: https://github.com/dotnet/coreclr/pull/17709    cc @weshaggard, @RussKeldorph, @joshfree, @Anipik, @safern  
29247	area-System.Runtime	Considering merging Intel HW Intrinsics for SSE and SSE2	This was discussed during the API design (https://github.com/dotnet/corefx/pull/23489#issuecomment-326433485) but has come under discussion again in the context of https://github.com/dotnet/coreclr/pull/17691.    A related issue is, if the APIs remain separate, how to deal with an API, e.g. `SetZeroVector128` that provides support for float vectors in SSE, but supports the full range of generic types in SSE2.
29246	area-System.Memory	Preserve pinned flag in {ReadOnly}Memory<T>.Slice	Fixes https://github.com/dotnet/corefx/issues/29239      cc @joshfree, @GrabYourPitchforks, @geoffkizer, @stephentoub, @benaadams      This change will need to be mirrored to coreclr. cc @Anipik, @safern 
29245	area-System.Runtime	TimeZoneInfo.ConvertTimeFromUtc makes ToUnixTimeMilliseconds wrong in linux	"```  Console.WriteLine(new DateTimeOffset(DateTime.UtcNow).ToUnixTimeMilliseconds());  Console.WriteLine(new DateTimeOffset(DateTime.Now).ToUnixTimeMilliseconds());  Console.WriteLine(new DateTimeOffset(TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById(""America/New_York""))).ToUnixTimeMilliseconds());  ```    the 3rd line generates different value than the previous 2 in linux  "
29244	area-System.Security	Clean SSL error queue: X509 related functions	This is a continuation of #25676 clean up, also related to #29188. Below is an assessment of the native functions from CryptoNative related to X509 (80 functions) and suggested actions.     - [x] CryptoNative_CheckX509Hostname => Relatively large native, likely leaving errors on queue  - [x] CryptoNative_CheckX509IpAddress => Relatively large native, likely leaving errors on queue  - [X] CryptoNative_DecodeX509 - covered in push to clean up error queue  - [X] CryptoNative_DecodeX509BasicConstraints2Extension - Relatively large native, errors left on queue cleaned on managed side in case of error  - [ ] CryptoNative_DecodeX509Crl => single location, missing clean up at usage, check caller  - [ ] CryptoNative_DecodeX509Name => single location, missing clean up at usage, check caller  - [ ] CryptoNative_EncodeX509 => single location, assert checks no error but for safety error needs to be cleaned in OpenSslEncode src\Common\src\Interop\Unix\System.Security.Cryptography.Native\Interop.Encode.cs  - [ ] CryptoNative_EncodeX509SubjectPublicKeyInfo => single location, assert checks no error but for safety error needs to be cleaned in OpenSslEncode src\Common\src\Interop\Unix\System.Security.Cryptography.Native\Interop.Encode.cs  - [x] CryptoNative_GetX509CrlNextUpdate => single call, didn't find doc, we should check for null and clean up just in case  - [X] CryptoNative_GetX509DerSize - single call, error cleaned in OpenSslEncode  - [X] CryptoNative_GetX509EkuField - single call covered by throw Interop.Crypto.CreateOpenSslCryptographicException in case of failure  - [X] CryptoNative_GetX509EkuFieldCount - single call, return does not indicate error or not, assuming that it doesn't log errorif we pass valid argument  - [X] CryptoNative_GetX509EvpPublicKey - single call covered by CheckValidOpenSslHandle  - [x] CryptoNative_GetX509NameEntry => called via GetX509NameEntry_private in GetX509NameEntry, check if caller or SafeInteriorHandle.OpenInteriorHandle handle error  - [x] CryptoNative_GetX509NameEntryCount => single call,  we should check for negative and clean up just in case  - [x] CryptoNative_GetX509NameEntryData => called via GetX509NameEntryData_private in GetX509NameEntryData, check if caller or SafeInteriorHandle.OpenInteriorHandle handle error  - [x] CryptoNative_GetX509NameEntryOid => called via GetX509NameEntryOid_private in GetX509NameEntryOid, check if caller or SafeInteriorHandle.OpenInteriorHandle handle error  - [x] CryptoNative_GetX509NameInfo => single call not covered, needs to clean up error queue  - [X] CryptoNative_GetX509NameRawBytes - no actual call to lib  - [x] CryptoNative_GetX509NameStackField => called via GetX509NameStackField_private in GetX509NameStackField, check if caller or SafeInteriorHandle.OpenInteriorHandle handle error  - [x] CryptoNative_GetX509NameStackFieldCount => single call, didn't find doc, we should check for negative and clean up just in case  - [X] CryptoNative_GetX509NotAfter - no actual call to lib  - [X] CryptoNative_GetX509NotBefore - no actual call to lib  - [X] CryptoNative_GetX509PublicKeyAlgorithm - no actual call to lib  - [X] CryptoNative_GetX509PublicKeyBytes - no actual call to lib  - [x] CryptoNative_GetX509PublicKeyParameterBytes => two calls, need to check callers of KeyAlgorithmParameters property, and also relatively large native code  - [x] CryptoNative_GetX509RootStoreFile => called via GetX509RootStoreFile_private in GetX509RootStoreFile, needs error clean up in one location  - [x] CryptoNative_GetX509RootStorePath => same as above  - [X] CryptoNative_GetX509SignatureAlgorithm - no actual call to lib  - [x] CryptoNative_GetX509StackField => several calls, cleaned in single one, need to check callers before adding throw for them  - [X] CryptoNative_GetX509StackFieldCount - single call, didn't find doc, assuming that it doesn't log errorif we pass valid argument  - [X] CryptoNative_GetX509SubjectPublicKeyInfoDerSize - single call covered by OpenSslEncode  - [X] CryptoNative_GetX509Thumbprint - single call covered in GetDynamicBuffer  - [x] CryptoNative_GetX509Version => single call throws CryptographicException without cleaning the error queue (should we throw more detailed exception?)  - [x] CryptoNative_NewX509NameStack => DEADCODE  - [x] CryptoNative_NewX509Stack => two calls, call in ExportPfx needs to be double checked (it is covered if handle reaches PushHandle but need deeper check)  - [ ] CryptoNative_PemReadBioX509Crl => two locations, need to check from callers, likely need clean up  - [X] CryptoNative_PemReadX509FromBio - covered in push to clean up error queue  - [ ] CryptoNative_PemWriteBioX509Crl => single call, return code not checked, add clean up  - [x] CryptoNative_PushX509NameStackField => DEADCODE  - [X] CryptoNative_PushX509StackField - two calls, covered by CreateOpenSslCryptographicException()  - [X] CryptoNative_ReadX509AsDerFromBio - covered in push to clean up error queue  - [X] CryptoNative_RecursiveFreeX509NameStack - single call, void,  assuming that it doesn't log errorif we pass valid argument   - [X] CryptoNative_RecursiveFreeX509Stack - single call, void,  assuming that it doesn't log errorif we pass valid argument   - [X] CryptoNative_SetX509ChainVerifyTime - manager wrapper throw in case of failure  - [x] CryptoNative_X509CheckIssued => single call not covered, needs to clean up error queue  - [X] CryptoNative_X509CheckPurpose - single call covered by throw CreateOpenSslCryptographicException  - [X] CryptoNative_X509CrlDestroy - actually calls X509_CRL_free ensuring the argument is not null, single call, it is void, assuming that it doesn't log error if we pass valid argument  - [X] CryptoNative_X509Destroy - actually calls X509_free ensuring the argument is not null, single call, it is void, assuming that it doesn't log error if we pass valid argument  - [ ] CryptoNative_X509Duplicate => DEADCODE  - [ ] CryptoNative_X509ExtensionCreateByObj => single call not covered, caller FormatNative in C:\s\github\pjanotti\corefx\src\System.Security.Cryptography.Encoding\src\Internal\Cryptography\OpenSslAsnFormatter.cs  - [X] CryptoNative_X509ExtensionDestroy - actually calls X509_EXTENSION_free ensuring the argument is not null, single call, it is void, assuming that it doesn't log error if we pass valid argument  - [X] CryptoNative_X509ExtensionGetCritical - single call, return does not indicate error or not, assuming that it doesn't log errorif we pass valid argument  - [X] CryptoNative_X509ExtensionGetData - single call covered by CheckValidOpenSslHandle  - [X] CryptoNative_X509ExtensionGetOid - single call covered by CheckValidOpenSslHandle  - [X] CryptoNative_X509GetExt - single call covered by CheckValidOpenSslHandle  - [X] CryptoNative_X509GetExtCount - single call, return does not indicate error or not, assuming that it doesn't log errorif we pass valid argument  - [X] CryptoNative_X509GetIssuerName - single call covered by ChecckValidOpenSslHandle in LoadX500Name  - [x] CryptoNative_X509GetSerialNumber => called via X509GetSerialNumber_private in X509GetSerialNumber, check if caller or SafeInteriorHandle.OpenInteriorHandle handle error  - [X] CryptoNative_X509GetSubjectName - single call covered by ChecckValidOpenSslHandle in LoadX500Name  - [ ] CryptoNative_X509IssuerNameHash => single call returns hash, likely doesn't log errorif we pass valid argument, https://github.com/dotnet/corefx/issues/28724  - [X] CryptoNative_X509NameDestroy - actually calls X509_NAME_free ensuring the argument is not null, single call, it is void, assuming that it doesn't log error if we pass valid argument  - [X] CryptoNative_X509StoreAddCert - single call covered by throw Interop.Crypto.CreateOpenSslCryptographicException in case of failure  - [X] CryptoNative_X509StoreAddCrl - covered in push to clean up error queue  - [X] CryptoNative_X509StoreCreate - single call covered by CheckValidOpenSslHandle  - [X] CryptoNative_X509StoreCtxCreate - single call covered by CheckValidOpenSslHandle  - [X] CryptoNative_X509StoreCtxDestroy - actually calls X509_STORE_CTX_free ensuring the argument is not null, single call, it is void, assuming that it doesn't log error if we pass valid argument  - [x] CryptoNative_X509StoreCtxGetChain => single call not covered, although calling method throws CryptographicException on other points  - [x] CryptoNative_X509StoreCtxGetError => single call returns code, likely doesn't log errorif we pass valid argument  - [x] CryptoNative_X509StoreCtxGetErrorDepth => single call returns code, likely doesn't log errorif we pass valid argument  - [X] CryptoNative_X509StoreCtxGetSharedUntrusted - no actual call to lib  - [X] CryptoNative_X509StoreCtxGetTargetCert - no actual call to lib  - [X] CryptoNative_X509StoreCtxInit - single call covered by throw Interop.Crypto.CreateOpenSslCryptographicException in case of failure  - [X] CryptoNative_X509StoreCtxSetVerifyCallback- single call, it is void, assuming that it doesn't log error if we pass valid argument  - [X] CryptoNative_X509StoreDestoryactually - calls X509_STORE_free ensuring the argument is not null, single call, it is void, assuming that it doesn't log error if we pass valid argument  - [X] CryptoNative_X509StoreSetRevocationFlag - single call covered by throw Interop.Crypto.CreateOpenSslCryptographicException in case of failure  - [X] CryptoNative_X509UpRef - called in many places,  internally calls CRYPTO_add, assuming that it doesn't log error if we pass valid argument  - [ ] CryptoNative_X509V3ExtPrint => single call not covered, caller FormatNative in C:\s\github\pjanotti\corefx\src\System.Security.Cryptography.Encoding\src\Internal\Cryptography\OpenSslAsnFormatter.cs  - [ ] CryptoNative_X509VerifyCert => 2 calls one not covered in VerifyCertChain in C:\s\github\pjanotti\corefx\src\System.Net.Http\src\System\Net\Http\CurlHandler\CurlHandler.SslProvider.Linux.cs  - [X] CryptoNative_X509VerifyCertErrorString - single call, returns string for error code, likely doesn't log errorif we pass valid error code
29243	area-System.Net	Add DecompressionMethods.All?	The addition of `System.Net.DecompressionMethods.Brotli` was [recently approved](https://github.com/dotnet/corefx/issues/26995). I have been writing `DecompressionMethods.Deflate | DecompressionMethods.GZip` in my source automatically; since I don't want to exclude the possibility of Brotli, I'm going to be writing `DecompressionMethods.Deflate | DecompressionMethods.GZip | DecompressionMethods.Brotli`.    I am very interested in an `All` member, since that sums up exactly what I care about.     ```diff  namespace System.Net  {      [Flags]      public enum DecompressionMethods      {          None = 0,          GZip = 1,          Deflate = 2,          Brotli = 4,  +       All = ~None      }  }  ```    Would you please review this possibility?
29242	area-Infrastructure	Post 2.1 RTM: update packageindex to account for 2.1 and harvest all locked reference assemblies	/cc @weshaggard @joperezr 
29239	area-System.Memory	"Memory<T>.Slice doesn't preserve ""this buffer is already pinned"" flag"	See https://github.com/aspnet/KestrelHttpServer/issues/2510.
29238	area-System.Net	Several Http test fixes to hopefully improve test reliability	- Add “Connection: close\r\n” response header in more cases where the loopback server explicitly closes a connection, and in particular where the client makes multiple connections.  - Change several Task.WaitAlls on paired tasks to instead use our WhenAllOrAnyFailed helper.    Fixes https://github.com/dotnet/corefx/issues/27064 (hopefully).    The failure from https://github.com/dotnet/corefx/issues/9543 also appears to now be much more deterministic; at least with WinHttpHandler the failure now repros for me every time.    cc: @davidsh, @geoffkizer 
29236	area-System.Net	Invalid HttpListener.Stop() behaviour	"SDK   Version:   2.1.300-preview2-008533   Commit:    996eb6c92c    Runtime   OS Name:     Windows   OS Version:  10.0.16299   OS Platform: Windows   RID:         win10-x64    Host (useful for support):    Version: 2.1.0-preview2-26406-04    Commit:  6833f3026b    Method description says ""Causes this instance to stop receiving incoming requests.""     In fact after this call all client connections created with specified HttpListener being closed with error.  ```  Error System.Net.WebSockets.WebSocketException (0x80004005): An internal WebSocket error occurred. Please see the innerException, if present, for more details.  ---> System.Net.HttpListenerException (995): Операция ввода/вывода была прервана из-за завершения потока команд или по запросу приложения     at System.Net.WebSockets.WebSocketHttpListenerDuplexStream.ReadAsyncCore(Byte[] buffer, Int32 offset, Int32 count, CancellationToken cancellationToken)     at System.Net.WebSockets.WebSocketBase.WebSocketOperation.Process(Nullable`1 buffer, CancellationToken cancellationToken)     at System.Net.WebSockets.WebSocketBase.ReceiveAsyncCore(ArraySegment`1 buffer, CancellationToken cancellationToken)     at System.Net.WebSockets.WebSocketBase.ThrowIfConvertibleException(String methodName, Exception exception, CancellationToken cancellationToken, Boolean aborted)     at System.Net.WebSockets.WebSocketBase.ReceiveAsyncCore(ArraySegment`1 buffer, CancellationToken cancellationToken)     at WSTest.Program.Reader(WebSocket webSocket) in C:\Projects\Globo\skillgames\BRANCH\dev\UpDAU\tests\WSTest\Program.cs:line 49  ```    In addition after HttpListener.Stop() call opened ClientWebSocket connection has ""Open"" state but if ClientWebSocket .Close() call performed exception being thrown.    ```  Close failed System.IO.IOException: Unable to read data from the transport connection: Удаленный хост принудительно разорвал существующее подключение. ---> System.Net.Sockets.SocketException: Удаленный хост принудительно разорвал существующее подключение     --- End of inner exception stack trace ---     at System.Net.WebSockets.ManagedWebSocket.SendCloseFrameAsync(WebSocketCloseStatus closeStatus, String closeStatusDescription, CancellationToken cancellationToken)     at System.Net.WebSockets.ManagedWebSocket.CloseAsyncPrivate(WebSocketCloseStatus closeStatus, String statusDescription, CancellationToken cancellationToken)     at WSTest.Program.Test() in C:\Projects\Globo\skillgames\BRANCH\dev\UpDAU\tests\WSTest\Program.cs:line 94  ```    Here is code I've used to test this case.     ```c#  using System;  using System.Net;  using System.Net.WebSockets;  using System.Threading;  using System.Threading.Tasks;    namespace WSTest {   class Program {    static HttpListener listener = new HttpListener();      static void RunLiStenerAsync(string enpoint) {     TaskCompletionSource<bool> tcs = new TaskCompletionSource<bool>();     Task.Run(async () => {      try {       listener.Prefixes.Add($""http://{enpoint}/"");       listener.Start();       tcs.SetResult(true);       while (listener.IsListening) {        HttpListenerContext context = listener.GetContext();        if (!context.Request.IsWebSocketRequest) {         context.Response.Close();        } else {         WebSocket ws = (await context.AcceptWebSocketAsync(null)).WebSocket;         Console.WriteLine(""Got client connection"");         // start reader async         StartReaderAsync(ws);          }       }       Console.WriteLine($""Stop listen at ws://{enpoint}"");      } catch (Exception ex) {       Console.WriteLine($""Server failed {ex.ToString()}"");      }     });     tcs.Task.Wait();     Console.WriteLine($""Listen at ws://{enpoint}"");    }      static void StartReaderAsync(WebSocket webSocket) {     Task.Run(async () => {      await Reader(webSocket);     });    }      static async Task Reader(WebSocket webSocket) {     int received = 0;     while (true) {      try {       WebSocketReceiveResult result = await webSocket.ReceiveAsync(new ArraySegment<byte>(new byte[1024]), CancellationToken.None);       switch (result.MessageType) {        case WebSocketMessageType.Text:        case WebSocketMessageType.Binary:         // chunked packets assembling here         received += result.Count;         if (result.EndOfMessage == true) {          Console.WriteLine($""Received packet {received} bytes"");          received = 0;         } else {          Console.WriteLine($""Received chunk {result.Count} bytes"");         }         break;        case WebSocketMessageType.Close:         Console.WriteLine($""Client disconected"");         await webSocket.CloseAsync(WebSocketCloseStatus.Empty, null, CancellationToken.None);         return;       }      } catch (Exception ex) {       Console.WriteLine($""Error {ex.ToString()}"");       return;      }     }    }      static async Task Test() {     string enpoint = ""localhost:9002"";     // listening     RunLiStenerAsync(enpoint);     // create large buffer to send     byte[] buf = new byte[4096];     // connecting     ClientWebSocket cws = new ClientWebSocket();     await cws.ConnectAsync(new Uri($""ws://{enpoint}/""), CancellationToken.None);     // sending     await cws.SendAsync(new ArraySegment<byte>(buf), WebSocketMessageType.Binary, true, CancellationToken.None);     // wait for data     await Task.Delay(500);     // dispose listener     listener.Stop();     // wait for stop     await Task.Delay(500);     try {      // closing      if (cws.State == WebSocketState.Open) {       await cws.CloseAsync(WebSocketCloseStatus.Empty, null, CancellationToken.None);       Console.WriteLine(""Closed"");      } else {       Console.WriteLine(""Already closed"");      }     } catch (Exception ex) {      // pokemon exception handling      Console.WriteLine($""Close failed {ex.ToString()}"");     }    }      static void Main(string[] args) {     Test().Wait();    }   }  }  ```    Perhaps this is also linked to #28169    [EDIT] Add C# syntax highlighting by @karelz"
29233	area-System.Net	[release/2.1] Ensure LocalCertificateSelectionCallback is still called with AuthenticateAsServerAsync	In .NET Core 2.0, we call LocalCertificateSelectionCallback to choose the certificate during AuthenticateAsServerAsync. As part of adding support for SNI, this functionality was removed. However, some users have already implemented SNI using LocalCertificateSelectionCallback, and we should aim to maintain compatibility for them.    This change ensures that we maintain the old behavior of LocalCertificateSelectionCallback when the new SNI callback is not set.    The fix has been merged into master in [this commit](https://github.com/dotnet/corefx/commit/eeea6babf28188887f99aa0b459dc5877b39f31e).    See issue #29110 for details.    cc: @karelz     
29232	area-System.Diagnostics	Add cross platform support for CLR Runtime counters (JIT, GC)	The recent addition of PerformanceCounters to 2.1 only supports Windows.  It would be great to offer a cross platform solution that worked on OSX & Linux as well.    The main categories that come to mind are .NET CLR Memory (Gen[0-2,Large] Heap Size, % Time in GC, etc...), .NET CLR LocksAndThreads, .NET CLR Jit, .NET CLR Exceptions, and Process.
29231	area-System.Memory	Created ReadOnlySequence GetPositionAndSliceAreEqual test and fixed where was not	Created ReadOnlySequence GetPositionAndSliceAreEqual test to test that all GetPosition methods and Slice methods return the same result for the same input parameters. Fixed where was not.
29230	area-System.Runtime	Update ApiCompatBaseline for uapaot for System.Runtime	Leftover from https://github.com/dotnet/corefx/pull/29138.    cc @jkotas, @morganbr
29227	area-System.IO	Cut string allocations for filtered watcher files	This changes the Win32 watcher code to not allocate strings until after we've matched the name and know that we're going to actually fire an event.    Unix code can be changed to encode into a temporary buffer to get a similar reduction. I'll open an up-for-grabs issue on it.    Flip a test to have expected in the expected argument.    cc: @danmosemsft, @Anipik 
29226	area-Meta	De-duplicate resource ID's to make Mono merge easier	"When Mono pulls in CoreFX code they factor their assemblies like .NET Framework. This means .resx files from multiple libraries must get merged. When those libraries have resources with the same ID, and the string is not identical, this will not merge.    Below is a list I grepped out of all cases where we use a resource ID for multiple distinct string values. In some cases the difference is whitespace so it isn't visible.     1. Where it's a trivial spacing/punctuation/quoting difference we should keep the ID and make the strings the same  1. Where the string is clearly intended to be distinct, we should disambiguate the ID's and update the code to match.    Some, like `InternalError`, could just be simplified (eg to just `Internal error.`) so they are no longer distinct.    @marek-safar     Key | Value  -- | --  ADP_InvalidMultipartName | {0}   '{1}'.  ADP_InvalidMultipartName | {0}   ""{1}"".  ADP_InvalidMultipartNameQuoteUsage | {0} '{1}', incorrect usage of   quotes.  ADP_InvalidMultipartNameQuoteUsage | {0}   ""{1}"", incorrect usage of quotes.  ADP_InvalidMultipartNameToManyParts | {0} '{1}', the current limit of   '{2}' is insufficient.  ADP_InvalidMultipartNameToManyParts | {0}   ""{1}"", the current limit of ""{2}"" is insufficient.  Arg_ArrayPlusOffTooSmall | Array is not long enough. Check   array index and length.  Arg_ArrayPlusOffTooSmall | Destination   array is not long enough to copy all the items in the collection. Check array   index and length.  Arg_EnumIllegalVal | Illegal enum value: {0}.  Arg_EnumIllegalVal | Illegal   enum value: {0}  Arg_HTCapacityOverflow | Capacity overflowed and went   negative.  Arg_HTCapacityOverflow | Hashtable's   capacity overflowed and went negative. Check load factor, capacity and the   current size of the table.  Arg_InvalidSearchPattern | Arg_InvalidSearchPattern {0}  Arg_InvalidSearchPattern | Search   pattern cannot contain '..' to move up directories and can be contained only   internally in file/directory names, as in 'a..b'.  Argument_AddingDuplicate | An entry with the same key   already exists.  Argument_AddingDuplicate | An   item with the same key has already been added. Key: {0}  Argument_InvalidHandle | handle' has been disposed or is   an invalid handle.  Argument_InvalidHandle | Invalid   handle.  Argument_InvalidPathChars | Argument_InvalidPathChars {0}  Argument_InvalidPathChars | Illegal   characters in path '{0}'.  Argument_InvalidValue | Argument {0} should be larger   than {1}.  Argument_InvalidValue | Arguments   are not valid.  Argument_InvalidValue | Value was invalid.  ArgumentOutOfRange_BiggerThanCollection | Larger   than collection size.  ArgumentOutOfRange_BiggerThanCollection | Must be less than or equal to   the size of the collection.  ArgumentOutOfRange_GenericPositive | Number   must be positive.  ArgumentOutOfRange_GenericPositive | Value must be positive.  ArgumentOutOfRange_Index | Index   was out of range.  Must be non-negative   and less than the size of the collection.  ArgumentOutOfRange_Index | Index was out of range. Must be   non-negative and less than the size of the collection.  ArgumentOutOfRange_NeedNonNegNum | Index   is less than zero.  ArgumentOutOfRange_NeedNonNegNum | Non negative number is required.  ArgumentOutOfRange_NeedNonNegNum | Non-negative   number required.  ArgumentOutOfRange_NeedValidPipeAccessRights | Invalid PipeAccessRights value.  ArgumentOutOfRange_NeedValidPipeAccessRights | Need   valid PipeAccessRights value.  ArrayTypeIsNotSupported | An internal error has occurred.   '{0}[]' is not supported when generating code for serialization.  ArrayTypeIsNotSupported | Array   of type {0} is not supported.  CardinalityMismatch_TooManyExports | Only one export for the contract   '{0}' is allowed, multiple implementations were found.  CardinalityMismatch_TooManyExports | More   than one export was found that matches the constraint: {0}  Cryptography_InvalidCurveOid | The specified Oid is not valid.   The Oid.FriendlyName or Oid.Value property must be set.  Cryptography_InvalidCurveOid | The   specified Oid is not valid. The Oid.FriendlyName property must be set, or be   determined from Oid.Value.  IndexOutOfRange_IORaceCondition | Probable I/O race condition   detected while copying memory.  The I/O   package is not thread safe by default.    In multithreaded applications, a stream must be accessed in a thread-safe   way, such as a thread-safe wrapper returned by TextReader's or TextWriter's   Synchronized methods.  This also   applies to classes like StreamWriter and StreamReader.  IndexOutOfRange_IORaceCondition | Probable   I/O race condition detected while copying memory. The I/O package is not   thread safe by default. In multithreaded applications, a stream must be   accessed in a thread-safe way, such as a thread-safe wrapper returned by   TextReader's or TextWriter's Synchronized methods. This also applies to   classes like StreamWriter and StreamReader.  InternalError | Internal error in ScanRegex.  InternalError | Internal   error in the Microsoft Visual Basic runtime.  InternalError | Internal Error  InvalidArgument | {1}'   is not a valid value for '{0}'.  InvalidArgument | Value of '{1}' is not valid for   '{0}'.  InvalidArgument | The   argument is invalid.  InvalidOperation_EnumFailedVersion | Collection was modified after   the enumerator was instantiated.  InvalidOperation_EnumFailedVersion | Collection   was modified; enumeration operation may not execute.  InvalidOperation_EnumNotStarted | Enumeration has not   started.  Call MoveNext.  InvalidOperation_EnumNotStarted | Enumeration   has not started. Call MoveNext.  InvalidOperation_EnumOpCantHappen | Enumeration has either not   started or has already finished.  InvalidOperation_EnumOpCantHappen | Enumerator   is positioned before the first element or after the last element of the   collection.  InvalidOperation_PipeNotYetConnected | Pipe hasn't been connected yet.  InvalidOperation_PipeNotYetConnected | Pipe   is not connected.  InvalidParameter | Invalid value '{1}' for   parameter '{0}'.  InvalidParameter | Invalid   value {1} for parameter {0}.  InvalidPdbChecksumDataFormat | Invalid PDB Checksum data data   format.  InvalidPdbChecksumDataFormat | Invalid   PDB Checksum data format.  InvalidPrimitiveType | Invalid Primitive Type: {0}.   Consider using CodeObjectCreateExpression.  InvalidPrimitiveType | Type   '{0}' is not a valid serializable type.  InvalidToken | A token is not valid. Refer to   RFC 2616 for correct grammar of content types.  InvalidToken | Invalid   token.  IO_AlreadyExists_Name | Cannot create '{0}' because a   file or directory with the same name already exists.  IO_AlreadyExists_Name | Cannot   create \""{0}\"" because a file or directory with the same name   already exists.  IO_FileExists_Name | The file '{0}' already exists.  IO_FileNotFound | Unable   to find the specified file.  IO_FileNotFound_FileName | Could not find file '{0}'.  IO_OperationAborted | IO   operation was aborted unexpectedly.  IO_OperationAborted | The I/O operation has been   aborted because of either a thread exit or an application request.  IO_PathNotFound_NoPathName | Could   not find a part of the path.  IO_PathNotFound_Path | Could not find a part of the   path '{0}'.  IO_PathTooLong | The   specified file name or path is too long, or a component of the specified path   is too long.  IO_PathTooLong | The specified port name is too   long.  The port name must be less than   260 characters.  IO_PathTooLong_Path | The   path '{0}' is too long, or a component of the specified path is too long.  IO_PathTooLong_Path | The specified port name '{0}' is   too long.  The port name must be less   than 260 characters.  IO_SharingViolation_File | The   process cannot access the file '{0}' because it is being used by another   process.  IO_SharingViolation_File | The process cannot access the   port '{0}' because it is being used by another process.  IO_SharingViolation_NoFileName | The   process cannot access the file because it is being used by another process.  IO_SharingViolation_NoFileName | The process cannot access the   port because it is being used by another process.  MDF_UnsupportedVersion | requested collection ({0}) is not supported   by this version of the provider.  MDF_UnsupportedVersion | The requested collection ({0})   is not supported by this version of the provider.  net_context_buffer_too_small | Insufficient   buffer space. Required: {0} Actual: {1}.  net_context_buffer_too_small | Insufficient buffer space.   Required: {0} Actual: {1}  net_gssapi_operation_failed | GSSAPI   operation failed with status: {0} (Minor status: {1}).  net_gssapi_operation_failed | GSSAPI operation failed with   status: {0} (Minor status: {1})  net_gssapi_operation_failed_detailed | Gss   api operation failed with error : {0} ({1}).  net_gssapi_operation_failed_detailed | GSSAPI operation failed with   error - {0} ({1}).  net_nego_not_supported_empty_target_with_defaultcreds | Target   name should be non empty if default credentials are passed.  net_nego_not_supported_empty_target_with_defaultcreds | Target name should be non-empty   if default credentials are passed.  net_nego_protection_level_not_supported | Requested   protection level is not supported with the GSSAPI implementation currently   installed.  net_nego_protection_level_not_supported | Requested protection level is   not supported with the gssapi implementation currently installed.  net_nego_server_not_supported | Server   implementation is not supported.  net_nego_server_not_supported | Server implementation is not   supported  NoNegativeTime | A   negative value is not permitted for the replication interval.  NoNegativeTime | A negative value is not   permitted for the time limit.  NotSupported | Not   supported on this platform.  NotSupported | This operation is not supported.  ObjectDisposed_StreamClosed | Can   not access a closed Stream.  ObjectDisposed_StreamClosed | Cannot access a closed Stream.  Serialization_MissingKeys | The   keys for this dictionary are missing.  Serialization_MissingKeys | The Keys for this Hashtable are   missing.  Serialization_MissingValues | The   values for this dictionary are missing.  Serialization_MissingValues | The Values for this Hashtable   are missing.  SqlConvert_ConvertFailed | Cannot convert object of type '{0}' to   object of type '{1}'.  SqlConvert_ConvertFailed | Cannot convert object of type   '{0}' to object of type '{1}'.  SupportedPlatforms | System.DirectoryServices.Protocols   namespace is only supported on Windows 2000 and later operating systems.  SupportedPlatforms | The   System.DirectoryServices.ActiveDirectory namespace is only supported on   computers running Windows 2000 and later operating systems.  UnauthorizedAccess_IODenied_NoPathName | Access   to the path is denied.  UnauthorizedAccess_IODenied_NoPathName | Access to the port is denied.  UnauthorizedAccess_IODenied_NoPathName | UnauthorizedAccess_IODenied_NoPathName  UnauthorizedAccess_IODenied_Path | Access to the path '{0}' is   denied.  UnauthorizedAccess_IODenied_Path | Access   to the port '{0}' is denied.  UnauthorizedAccess_IODenied_Path | UnauthorizedAccess_IODenied_Path   {0}  UnknownConstantType | Internal   Error: Unrecognized constant type {0}.  UnknownConstantType | Unrecognized constant type   '{0}'.  Xml_InvalidPrefix | Prefixes   beginning with ""xml"" (regardless of whether the characters are   uppercase, lowercase, or some combination thereof) are reserved for use by   XML.  Xml_InvalidPrefix | Prefix '{0}' is not valid,   because it contains special characters.  XmlInvalidEncoding | Referenced   type '{0}' is only valid for encoded SOAP.  XmlInvalidEncoding | XML encoding must be   'UTF-8'.  "
29224	area-Infrastructure	arm32 and clang 5.0	Due to bugs in clang3.9 on arm, coreclr changed builds to require >=clang4.0, and official build and CI system docker container was updated to use clang5.0. It seems like corefx should match this.    The coreclr change: https://github.com/dotnet/coreclr/pull/17422  
29223	area-System.Reflection	Wrong debug directory entry in some .NET Core 2.1 preview1 libraries	"@KKatsnel commented on [Thu Mar 29 2018](https://github.com/dotnet/core/issues/1392)  Here two possible versions of the data format of a debug directory are described:  https://github.com/dotnet/corefx/blob/master/src/System.Reflection.Metadata/specs/PE-COFF.md   However, there are two Debug Directory Entries in the ""System.IO.FileSystem.dll"" library of 4.1.1.0 version (it's from .NET Core 2.1 preview1):  - Major = 0x0100, Minor = 0x504d that corresponds to the Portable PDB format, and  - Major = 0x0100, Minor = 0, that doesn't correspond to any version.    As far as I understand the second entry is wrong, isn't it?    ---  @Petermarcu commented on [Thu Mar 29 2018](https://github.com/dotnet/core/issues/1392#issuecomment-377456884)  @tmat   "
29222	area-Infrastructure	Add missing call operator	Add missing call operator to execute powershell begin/end.ps1
29218	area-Infrastructure	CoreFx needs to version assemblies in the shared framework past those which are OOB and have different surface area	"Previously whenever we added API to a contract or moved types down we had to version the assembly.  This was necessary because the contract was meant to be a portable representation along a single timeline of the API.    Up to this point we haven't cared about the assembly version when adding .NETCore-specific API.  This was because we were viewing .NETCore as a ""fork"" of the contract.  We could imagine .NETCore having more API than the portable view of the contract since the portable view was constrained by what was in other frameworks/netstandard.    Not caring about this was OK because there was never the case that someone would be getting a different assembly when targeting .NETCore: all those .NETCore specific assemblies were in the same package and/or in the framework package for targeting .NETCore.    This has changed since we started allowing framework roll-forward.  Framework roll-forward allows for a snapshot of the asset resolution for an older framework to be used on a newer framework.  This breaks the assumption I mentioned above.    This will cause a problem whenever we   1. Permit a package to provide an asset on a previous version of  .NETCore.  2. The same assembly in that package has significantly different API that would have caused us to version the contract in the newer version of .NETCore:    a. Added API    b. Forwarded API in the reference assembly.    c. *Forwarded API in the implementation assembly* - I need to think through this more to understand if this is an issue.  My gut feel is that it is, since some other assembly might be compiling against implementation assemblies and expect the type to exist at the forwarded location.  In practice we may be able to rely on B in order to force things that might compile against  implementation into non-oob mode.    This need not be in two different versions of the package and indeed is a problem at steady state.    Consider the System.Memory issue https://github.com/dotnet/corefx/issues/29032.  We build a netstandard2.0 version of System.Memory that defines all the types as living in System.Memory.  We build a netcoreapp2.1 version that has forwarded the types down to System.Runtime.  Today these have the same assembly version, and if they are from the same build have the same file version as well.  An application uses System.Memory and targets netcoreapp2.0.  At runtime the application is rolled forward to netcoreapp2.1.  Today if the version is the same the applocal copy will be preferred.  I'll assert that is a bug and inconsistent with the way build works: https://github.com/dotnet/core-setup/issues/4047.  Ignoring that, if a newer package of System.Memory was used the same will happen.  This is a problem.  At steady state the System.Memory package will contain a netstandard2.0 asset and nothing in our current versioning policy will cause us to bump the inbox version.    To address this issue I propose that we need to increase the assembly version of the implementation assembly in NETCoreApp whenever the netcoreapp version will have different API than another reference in the same package.  This is more than is needed: technically the only requirement is that we do this whenever the older API surface would have been oob-able to a previous roll-forward capable framework but that feels like too specific of a rule to maintain.    Perhaps we can implement the more specific rule in 2.1 to limit the churn, then start following the generic rule in 2.2.    /cc @weshaggard     "
29216	area-System.Memory	Port fixes to remove use of unsafe in ReadOnlySequence APIs and fix bounds checks on Slice	Fixes https://github.com/dotnet/corefx/issues/28920    Grabbing changes from https://github.com/dotnet/corefx/pull/29135 / https://github.com/dotnet/corefx/pull/29109    As part of the fix to remove use of Unsafe.As and add proper input validation, the goal was to minimize regression to Kestrel and and the HttpParser benchmarks. There should be little to no regression. This was confirmed in https://github.com/dotnet/corefx/pull/29135#issuecomment-381816589.    cc @pakrym, @joshfree 
29215	area-System.Memory	ReadOnlySequence ToString optimization	Made small ReadOnlySequence ToString optimization
29214	area-System.Diagnostics	Fix TraceSource handling of GetEntryAssembly	Check that GetEntryAssembly doesn't return null before dereferencing it.    Fixes https://github.com/dotnet/corefx/issues/29196    @jkotas, I tried to trace through the source to see why GetEntryAssembly might return null, but the conditions that would cause that weren't clear to me.  I'd like to write a test for this.  Suggestions?    cc: @brianrob, @valenis
29213	area-System.Net	System.Net.Http.Native: correct hex for libcurl versions	I encountered a bug in native bindings for libcurl.     Sometimes there is a version check to know if an option (for example h2 multiplexing support) is available. In code version constants are specified as hex values. However they are converted to hex in a wrong way: 7.43.0 becomes 0x074300 but it should be 0x072B00.    I found two places affected by this issue, but maybe there are more. @janvorli please take a look.
29212	area-Serialization	DataContractJsonSerializer.CanonicalizeObject() 	There is an alternative to https://tools.ietf.org/id/draft-erdtman-jose-cleartext-jws-00.html in preparation which in addition to ES6 compatible string and number generation (https://github.com/dotnet/corefx/issues/5647), also requires that property names are _sorted_ as described in: https://cyberphone.github.io/doc/security/draft-rundgren-json-canonicalization-scheme.html.    This is trivial to accomplish in **Json.NET** through an extra parameter to the serializer (https://github.com/cyberphone/json-canonicalization/blob/master/dotnet/newtonsoft/Program.cs#L32), but using the DataContractJsonSerializer I'm stuck.    One way to achieve this would be to add a specific method` CanonicalizeObject()` , that would be identical to `WriteObject()` except for property order.  Well, it would enforce ES6 compatible string and number generation as well.
29211	area-System.Data	"Test System.Data.SqlTypes.Tests.SqlStringSortingTest.SqlStringValidComparisonTest(cultureName: \""el-GR\"", localeId: 1032) failed in CI."	"Tests System.Data.SqlTypes.Tests.SqlStringSortingTest.SqlStringValidComparisonTest(cultureName: \""el-GR\"", localeId: 1032) had failed.    Message:   FAILED: (SqlString Operator Comparison): SqlStrings are out of order\nExpected: True\nActual: False  ~~~  STACK TRACE:  at System.Data.SqlTypes.Tests.SqlStringSortingTest.VerifySortedSqlStringList(SortedList`2 items, SqlCompareOptions compareOption, CultureInfo cInfo) in /mnt/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_ubuntu14.04_debug/src/System.Data.Common/tests/System/Data/SqlTypes/SqlStringSortingTest.cs:line 162 at System.Data.SqlTypes.Tests.SqlStringSortingTest.SqlStringCompareTest(Int32 numberOfItems, SqlCompareOptions compareOption, CultureInfo cInfo, Int32 localeID) in /mnt/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_ubuntu14.04_debug/src/System.Data.Common/tests/System/Data/SqlTypes/SqlStringSortingTest.cs:line 104 at System.Data.SqlTypes.Tests.SqlStringSortingTest.SqlStringValidComparisonTest(String cultureName, Int32 localeId) in /mnt/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_ubuntu14.04_debug/src/System.Data.Common/tests/System/Data/SqlTypes/SqlStringSortingTest.cs:line 63  ~~~    Details: https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_ubuntu14.04_debug/383/testReport/System.Data.SqlTypes.Tests/SqlStringSortingTest/SqlStringValidComparisonTest_cultureName____el_GR____localeId__1032_/"
29210	area-System.Net	How to trace System.Net ?	I am following the similar steps of [Network Tracing in .NET Framework](https://docs.microsoft.com/en-us/dotnet/framework/network-programming/network-tracing) for CoreClr web app.    However, I don't see the `network.log` getting generated.  When I do the same steps in .Net Framework web app, it does generate the log file.    Sample coreclr web app with config file : [TraceSystemNetCoreClrNotWorking.zip](https://github.com/dotnet/corefx/files/1926810/TraceSystemNetCoreClrNotWorking.zip)  Sample .Net Framework project which is working : [TraceSystemNetNetFrameworkWorking.zip](https://github.com/dotnet/corefx/files/1926818/TraceSystemNetNetFrameworkWorking.zip)    Note : Change the absolute path in `WebApplication1.web.config` while trying above app locally.    I need this so that i can debug the network connection failures in production.    
29209	area-Infrastructure	Debuging hung test with lldb	This PR is just for testing purposes. so no review is required
29208	area-System.Diagnostics	Introduce public setter for Activity 	See #29207
29207	area-System.Diagnostics	Public setter for System.Diagnostics.Activity.Current	"# Motivation     `Activity` represents a context for distributed operation tracing.  It is created when an operation (e.g. Http request) starts and flows with async calls within a process.      `Activity.Current` is `AsyncLocal` static variable that any logger/tracing system can use to stamp logs and telemetry with 'correlation ids'.    `Activity.Current` could be set via calling `Activity.Start` or `Activity.Stop` which are enough as long as managed  asyncronous flow is guaranteed which is not always the case.    Typical example is ASP.NET application hosed with IIS where hop from managed to native thread chould happen at any step in the request execution pipeline. ASP.NET propagates `HttpContext` through such hops.    With current API, it is not possible to assign Current Activity 'back' to what it was before the hop.    # Proposed API    Add public setter for `Activity.Current`.     # Usage  Such method could be called from the certain points in the request execution pipeline:  ```csharp  public void RestoreActivityIfNeeded(HttpContext context)  {      if (Activity.Current == null)      {          var storedActivity = (Activity)context.Items[""AspNetActivityKey""];          if (storedActivity != null)          {              Activity.Current = storedActivity; //!!!          }      }  }  ```    # Details  * stopped/not started Activities *should not* be allowed as it makes Current stack *invalid*. E.g.    ```csharp      Activity.Current = stopped;      Activity.Current.Stop();  // Noop, never changes Current to Parent  ```    ```csharp      Activity.Current = notStarted;      notStarted.Stop() // Noop, never changes Current to Parent  ```    * arguably, Activity.Current = null is valid. E.g. fork a background task with no context without stopping all stack    ```csharp    Activity a = new Activity(""incoming request"").Start();    Task.Run(() => {      Activity.Current = null;      // start long-running task  });    // continune execution in the same context  ```    # Pull Request   Proposed changes: #29208    cc @vancem            "
29205	area-System.Memory	Fix bug in ReadOnlySequence Slice(SequencePosition start, long length) for null next segment	cc @pakrym, @AlexRadch 
29204	area-System.Memory	Remove unused private helper method GetTypeAndIndices on ReadOnlySequence.	Related to https://github.com/dotnet/corefx/pull/29109#discussion_r182328045    cc @pakrym, @AlexRadch 
29199	area-Infrastructure	Adding begin/end steps to build definitions and removing deprecated cleanup step	
29198	area-Infrastructure	Adding begin/end steps to build definitions	
29197	area-Infrastructure	Adding default initialization of variable AgentToolsPath	
29196	area-System.Diagnostics	TraceInternal fails with null reference exception	We publish Microsoft.SqlServer.SqlManagementObjects to Nuget.Org with NetStandard2.0 binaries. One of our customers built an app and runs it on Ubuntu with netcore-hosting and the app crashes:  ```  Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.     at System.Diagnostics.TraceInternal.get_AppName()     at System.Diagnostics.TraceInternal.TraceEvent(TraceEventType eventType, Int32 id, String format, Object[] args)     at Microsoft.SqlServer.Management.Smo.ExecutionManager.GetEnumeratorData(Request req)     at Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetDbCollation(String dbname)     at Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetDbComparer(Boolean inServer)     at Microsoft.SqlServer.Management.Smo.SqlSmoObject.InitializeStringComparer()     at Microsoft.SqlServer.Management.Smo.SqlSmoObject.get_StringComparer()     at Microsoft.SqlServer.Management.Smo.SimpleObjectCollectionBase.InitInnerCollection()     at Microsoft.SqlServer.Management.Smo.SmoCollectionBase.InitializeChildCollection(Boolean refresh, ScriptingPreferences sp, String filterQuery, IEnumerable`1 extraFields)     at Microsoft.SqlServer.Management.Smo.SmoCollectionBase.GetEnumerator(ScriptingPreferences sp)     at SMOLib.GetDatabases() in C:\temp\demo_SMOLib\SMOLib\SMOLib\Program.cs:line 42  ```    Looking at the code for TraceInternal, it appears to use `GetEntryAssembly().GetName().Name`, but from looking around the repo it appears GetEntryAssembly() can return null in some cases.   Is there a workaround the customer could put in his app to make this work? It seems like TraceInternal.AppName should be checking for null and using something else for its value.
29195	area-Infrastructure	Adding default initialization for AgentToolsPath	
29194	area-System.Security	Port: More SSL error queue cleaning (#29171)	* Cleaning up more instances leaving errors on SSL queue    * Fixes #25676    * PR merged into master is #29171 
29193	area-System.Data	System.Data.SqlClient .NET Core 2.1.3 Preview 2 - Unable to open connection to the database	"Unable to use System.Data.SqlClient to open a connection in .NET Core 2.1.3 Preview 2. I also tried previous versions of .NET Core 2 and encountered the same issue. I also manually updated to use the latest preview version of System.Data.SqlClient and same outcome.     **DB in question is SQL Server 2008 R2 running in 2000 compatibility mode, though this has never been an issue previously**    **UPDATE: Querying the 2008 instance as a linked server through a SQL Server 2016 instance DOES work.**    # **Code**  ```c#  public IEnumerable<string> Get()  {      using (var db = new SqlConnection(@""valid conn string""))      {          try          {              db.Open();              db.Close();          }          catch (Exception e)          {              var trace = e.StackTrace;          }      }      return new string[] { };  }  ```    # **Environment**    - Running locally on Win 10 when this happens    # **Exception**  ```  System.Data.SqlClient.SqlException (0x80131904): A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: SQL Network Interfaces, error: 26 - Error Locating Server/Instance Specified)     at System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, Boolean applyTransientFaultHandling)     at System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)     at System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)     at System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)     at System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)     at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)     at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)     at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)     at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)     at System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)     at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)     at System.Data.SqlClient.SqlConnection.Open()     at MyDumbAPI.Controllers.ValuesController.Get() in C:\dev\MyDumbAPI\Controllers\ValuesController.cs:line 19  ClientConnectionId:00000000-0000-0000-0000-000000000000  Error Number:-1,State:0,Class:20  ```    # **Reproduce**    - Create new .NET Core console or web application  - Try and use SqlClient API to open a connection to a SQL Server database    # **dotnet --info**  ```  .NET Core SDK (reflecting any global.json):   Version:   2.1.300-preview2-008530   Commit:    822ae6d43a    Runtime Environment:   OS Name:     Windows   OS Version:  10.0.16299   OS Platform: Windows   RID:         win10-x64   Base Path:   C:\Program Files\dotnet\sdk\2.1.300-preview2-008530\    Host (useful for support):    Version: 2.1.0-preview2-26406-04    Commit:  6833f3026b    .NET Core SDKs installed:    1.0.0-preview2-003121 [C:\Program Files\dotnet\sdk]    1.0.0-preview2.1-003155 [C:\Program Files\dotnet\sdk]    1.0.3 [C:\Program Files\dotnet\sdk]    1.0.4 [C:\Program Files\dotnet\sdk]    1.1.0 [C:\Program Files\dotnet\sdk]    2.0.0 [C:\Program Files\dotnet\sdk]    2.0.2 [C:\Program Files\dotnet\sdk]    2.0.3 [C:\Program Files\dotnet\sdk]    2.1.4 [C:\Program Files\dotnet\sdk]    2.1.101 [C:\Program Files\dotnet\sdk]    2.1.102 [C:\Program Files\dotnet\sdk]    2.1.104 [C:\Program Files\dotnet\sdk]    2.1.300-preview2-008530 [C:\Program Files\dotnet\sdk]    .NET Core runtimes installed:    Microsoft.AspNetCore.All 2.1.0-preview2-final [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]    Microsoft.AspNetCore.App 2.1.0-preview2-final [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]    Microsoft.NETCore.App 1.0.0 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]    Microsoft.NETCore.App 1.0.4 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]    Microsoft.NETCore.App 1.0.5 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]    Microsoft.NETCore.App 1.1.0-preview1-001100-00 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]    Microsoft.NETCore.App 1.1.1 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]    Microsoft.NETCore.App 1.1.2 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]    Microsoft.NETCore.App 2.0.0 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]    Microsoft.NETCore.App 2.0.3 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]    Microsoft.NETCore.App 2.0.5 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]    Microsoft.NETCore.App 2.0.6 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]    Microsoft.NETCore.App 2.1.0-preview2-26406-04 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]  ```    "
29192	area-System.Runtime	Support time zone 'n' Julian day POSIX format 	"On Linux when we read the time zone data files, we support parsing the POSIX format for specifying the adjustment rules. e.g.:    ```  std offset[dst[offset][,start[/time],end[/time]]]  ```  http://man7.org/linux/man-pages/man3/tzset.3.html    The ""start"" and the ""end"" in the format can be specified by Julian day. one format which we support is is ""Jn"" but we don't support the 'n' Julian day format. The reason is we didn't encounter this case so far and also, we'll need to handle this as a new rule type. we have this issue to track supporting 'n' format.     https://github.com/dotnet/coreclr/issues/17393  https://github.com/dotnet/coreclr/pull/17635  "
29191	area-Infrastructure	Enable closure validation on desktop frameworks during package testing	Essentially remove this comment: https://github.com/dotnet/corefx/blob/6b2a3fe8ec3ab26627f5e8eb7abaace03eafa185/pkg/test/frameworkSettings/net/settings.targets#L4-L5    To do this we need to make sure we can  handle cycles that exist in the desktop assemblies and we ignore all intentional dangling references in the desktop facades and reference assemblies themselves.
29190	area-Microsoft.CSharp	RuntimeBinder MethodTypeInferrer should handle pointer types	The method type inference for the C# runtime binder should be able to handle pointer types.  With the introduction of `T : unmanaged` constraints, it became possible to have pointers as type arguments.    Source: https://github.com/dotnet/corefx/blob/master/src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Semantics/MethodTypeInferrer.cs  Feature Spec: https://github.com/dotnet/csharplang/blob/master/proposals/csharp-7.3/blittable.md  Related to: https://github.com/dotnet/roslyn/issues/25654
29188	area-System.Net	Add config to force OpenSsl error queue cleanup before Encrypt/Decrypt	The optimization done in #25646 is risky per OpenSsl documentation: [The current thread's error queue must be empty before the TLS/SSL I/O operation is attempted, or SSL_get_error() will not work reliably.](https://www.openssl.org/docs/man1.0.2/ssl/SSL_get_error.html). We have fixed various locations in which CoreFX code was leaving errors on the SSL error queue, but it is possible that some locations were missid, and also 3rd party libraries may interact with OpenSsl leaving errors on the queue. Adding a config is an escape valve in case the optimization of removing the calls to ERR_clear_error() for each SSL_write/SSL_read causes troubles. There will be a performance impact but depending on the scenario it can be a desired trade-off.    PR #29186 addresses the issue in 2.2.
29187	area-System.IO	System.IO.FileSystem.DriveInfo.Tests hung on RHEL73	@Anipik shouldn't this have dumped a stack for us?    https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180418.02/workItem/System.IO.FileSystem.DriveInfo.Tests/wilogs
29186	area-System.Security	Add config to force OpenSsl error queue cleanup before Encrypt/Decrypt	"This is an escape valve in case the optimization of removing the calls to ERR_clear_error() for each SSL_write/SSL_read causes troubles. There will be a performance impact but depending on the scenario it can be a desired trade-off.    The AppContext switch is ""System.Net.Security.SslStream.ForceOpenSslErrorQueueCleanupBeforeEncryptDecrypt""  The env var is ""DOTNET_FORCE_OPENSSL_ERROR_QUEUE_CLEANUP_BEFORE_ENCRYPT_DECRYPT""    Any naming suggestion is appreciated... "
29184	area-System.Memory	Port 'Remove != and == from SequencePosition (#29115)' to release	https://github.com/dotnet/corefx/issues/29001
29183	area-System.Numerics	Lock Vectors reference assembly to 4.1.3.0 and don't OOB it on netcoreapp2.0	System.Numerics.Vectors was made inbox in netcoreapp2.0, we were still allowing distribution  in the package, however the package was applying the netstandard2.0 implementation to  netcoreapp2.0.    Now that we've disabled oobing the netcoreapp2.1 build (since many types were moved into  corelib) it no longer makes sense for us to mantain the ability to oob the netcoreapp2.0 build.    Doing so not only degrades the inbox version (by not using the framework's MathF  implementation) but also creates type-unfication issues on rollforward: app targets 2.0  carries OOB copy of Vectors with higher version than 2.1, rolls forward to 2.1 and host will  use the OOB copy, no longer unifying to the types in corelib.    Master branch version of https://github.com/dotnet/corefx/pull/29182.    We should only merge in master if we're certain we're taking the release side of the fix.
29182	area-System.Numerics	[release/2.1] Lock Vectors reference assembly to 4.1.3.0 and don't OOB it on netcoreapp2.0	System.Numerics.Vectors was made inbox in netcoreapp2.0, we were still allowing distribution  in the package, however the package was applying the netstandard2.0 implementation to  netcoreapp2.0.    Now that we've disabled oobing the netcoreapp2.1 build (since many types were moved into  corelib) it no longer makes sense for us to mantain the ability to oob the netcoreapp2.0 build.    Doing so not only degrades the inbox version (by not using the framework's MathF  implementation) but also creates type-unfication issues on roll forward: app targets 2.0  carries OOB copy of Vectors with higher version than 2.1, rolls forward to 2.1 and host will  use the OOB copy, no longer unifying to the types in corelib.    Fixes #29162 
29181	area-System.Data	SqlDataReader.Close blocks in SNIReadSyncOverAsync after early breaking from reading large dataset	"SqlDataReader is taking unproportionaly long time to Dispose if you are early breaking enumeration through large data set.    I can observer order of magnitude difference in Dispose time depending on number in top clause in select statement, but regardless of the number of rows actually selected.     Let's have the following code:            public static void Test()          {              IEnumerable<int> en1 = EnumerateLargeData(1000);              // log time here              foreach (int i in en1)              { }              // log time here                IEnumerable<int> en2 = EnumerateLargeData(2000000000);              foreach (int i in en2)              { }              // log time here          }            public static IEnumerable<int> EnumerateLargeData(int maxCount)          {              using (SqlConnection sqlConnection = new SqlConnection(connectionString))              {                  sqlConnection.Open();                  using (SqlCommand getDataCommand = new SqlCommand(""[dbo].[GetLargeData_SP]"", sqlConnection))                  {                      getDataCommand.CommandTimeout = 0;                      getDataCommand.CommandType = CommandType.StoredProcedure;                      getDataCommand.Parameters.AddWithValue(""@MaxCount"", maxCount);                        using (var reader = getDataCommand.ExecuteReader())                      {                          int recordsCount = 0;                          while (reader.Read())                          {                              yield return 1;                              if (recordsCount++ > 100)                              {                                  //Here is where issue happens                                  break;                              }                          }                      }                  }              }          }    Where SP is selecting data from some very large table:     CREATE procedure [dbo].[GetLargeData_SP]    @MaxCount INT   AS   BEGIN    SELECT TOP (@MaxCount)     [DataPoint]    FROM      [dbo].[LargeDataTable] WITH(NOLOCK)   END    You will see a very large difference in Dispose time depending on the `maxCount` argument - especially when pulling data over slower netwrok.  In my scenario I'm done fetching data in few hundreds milliseconds but then stuck in Dispose for 2 minutes. Exactly in this stack:    ![image](https://user-images.githubusercontent.com/3809076/38944056-2f6f0cc2-4333-11e8-965c-720662314d43.png)      "
29180	area-System.Security	Conditional access support in IIdentity	"This is not a feature request, more raising an issue for possible consideration.    When logging in from a new IP address, a new device or other criteria a identity provider could flag the authentication as limited.    The `IIdentity` interface could be extended with a property to communicate this information. Perhaps a boolean, possibly named `IsAuthenticationLimited` or something.    ## Rationale and Usage  Allows you to hide/reduce functionality in case of any uncertainty in the authentication.  ```cshtml  @if (User.Identity.IsAuthenticationLimited)  {      <video src=""movie_720p.webm"" />  }  else  {      <video src=""movie_4k.webm"" />  }  ```    ```cshtml  @if (!User.Identity.IsAuthenticationLimited)  {      <button class=""btn btn-danger"" type=""submit"">Delete data and close my account</button>  }  ```    ```cs  [HttpPost]  public IActionResult DeleteAccount()  {      if (User.Identity.IsAuthenticationLimited)      {          return BadRequest();      }      await _userManager.DeleteAsync(User);      return View();  }  ```    ## Proposed API  ```cs      public interface IIdentity      {          string Name { get; }          string AuthenticationType { get; }          bool IsAuthenticated { get; }          bool IsAuthenticationLimited { get; } // The possible addition      }  ```    ## Open Questions  * Does any identity provider communicate this?  * Is this standardized in any authentication protocol such as OAuth or OpenID Connect?"
29179	area-System.Text	Disable regex cache tests using reflection for uapaot	Fixes https://github.com/dotnet/corefx/issues/29019    & remove dead code I overlooked last time.
29178	area-System.Text	Porting roslyn regex tests to corefx	Fixes https://github.com/dotnet/corefx/issues/28508  Fixes https://github.com/dotnet/corefx/issues/27618    - Adding InternalsVisibleTo to src assembly as we need to access internals to test the RegexParser thoroughly.  - Adding internal `RegexParseException` that derives from ArgumentException to provide internal error information `RegexParseError`.  - Porting test cases from the roslyn PR over to corefx and changing them to InlineData instead of a method per test case.  - Asserting on the specific `RegexParseError` for negative tests to be more precise (existing tests + roslyn tests)    TODO:  - [x] Adding sub expression checks (probably without asserting on the specific RegexParseError)  - [x] Refine RegexParseError options and add comments to each.
29175	area-System.Net	AuthenticateAsClientAsync hangs on core 1.1.4 [Question]	Here's my stack overflow post with all the investigation I have done thus far:  https://stackoverflow.com/questions/49891249/tcp-close-wait-apple-apns    It seems like this api hangs on .net core 1. I tried it on 1.1.4 and 1.1.8 without any success.
29174	area-System.Memory	Correctness checking and perf improvements on ReadOnlySequence	Currently APIs like `ReadOnlySequence<T>.Slice(SequencePosition, ...)` cannot validate certain aspects of their input parameters (such as that the provided _SequencePosition_ parameters are actually within the _this_ object) without incurring an O(n) traversal through the linked list of segments, where _n_ is the number of segments in the list. One option is to forego validation of the input parameters in this respect, but at the cost of the developer encountering undefined behavior in their application. A better solution would be to make validation constant-time so that the developer gets the benefit of parameter validation with minimal cost.    One potential way to do this would be to add a `public object Tag { get; protected set; }` property on the `ReadOnlySequenceSegment<T>` type. The general idea is that the tag identifies the linked list that this segment belongs to, and every segment within that linked list should reference the same tag object. The onus is on the creator of the individual segments to set the correct value. (By convention I'd recommend that _Tag_ point to the last segment in the linked list, but the particular implementation doesn't matter as long as the tags for each segment have referential equality.) When the developer calls any API on `ReadOnlySequence<T>` that accepts a `SequencePosition` parameter, the API would check that the parameter's backing `ReadOnlySequenceSegment<T>.Tag` object has referential equality to the `ReadOnlySequence<T>.Start`'s own backing `ReadOnlySequenceSegment<T>.Tag`. If the tags don't match, then the provided _SequencePosition_ doesn't belong to this instance, and the API should throw.    Additionally, as a potential optimization, the `ReadOnlySequence<T>` type could forego its existing logic of trying to special-case `T[]` vs. `string` vs `MemoryManager<T>` vs `ReadOnlySequenceSegment<T>` and could say simply that its own _SequencePosition_ instances are _always_ backed by a `ReadOnlySequenceSegment<T>`. In some cases this may result in an allocation internally, but this may pay for itself by resulting in much simpler / faster logic in `Slice` and other routines. The allocation penalty could also be optimized by having a custom internal `ReadOnlySequenceSegment<T>`-derived type with a finalizer and pulling a pooling trick [similar to what `PinnableBufferCache` does](https://referencesource.microsoft.com/#System/parent/parent/parent/InternalApis/NDP_Common/inc/PinnableBufferCache.cs,4a9f14fd83c457e5). It also has the added benefit that `ReadOnlySequence<T>` would no longer try to reach into `Memory<T>`'s internals, which could provide better support in the future if we add a direct `void*` constructor to that type.    This latter optimization would be purely an implementation detail of `ReadOnlySequence<T>` and wouldn't change the public API surface. When combined with the _Tag_ proposal mentioned earlier, I think this is compelling in that it provides fast, robust parameter validation and simpler runtime logic for common operations.
29172	area-System.Reflection	Add High level System.Reflection.Metadata API	Please add high-level APIs that can be used without having to deference/follow all the pointers/handles.  I would love to just load an assembly and loop through the tree.
29171	area-System.Security	More SSL error queue cleaning	Another batch of cleaning SSL error queue. Trying to be minimize the extension of the changes while ensuring the SSL error queue is clean of typical errors without affecting exceptions currently throw by the code. In interest of keeping the perf unchanged calls to cleanup the queue are ideally only added in case of errors and preferably via ERR_clear_error.    The targets addressed on this change were identified via debugger by selecting calls that were putting errors on the SSL queue. The removal of the active issue is at this point still tentative: I can't be sure that it is going to pass reliable on Outerloop and I do not have any more local repros.    Contributes to #25676.
29170	area-System.Memory	MemoryExtensions.Equals with StringComparison	I'm trying to check for certain file extensions with the new `Span` APIs. I came across some odd behavior. Here's where I started, which, of course, only works for case-insensitive cases (i.e. Linux):    ```  foreach (var extension in _extensionsToWatch)  {      if (Path.GetExtension(entry.FileName).SequenceEqual(extension))          return true;  }  ```    `SequenceEqual` doesn't have a case-insensitive overload, so I found     `if (MemoryExtensions.Equals(Path.GetExtension(entry.FileName), extension, StringComparison.OrdinalIgnoreCase))` which works.    But I like to call extension methods as extension methods, so I rewrite this as    `if (Path.GetExtension(entry.FileName).Equals(extension, StringComparison.OrdinalIgnoreCase))`    But now I get a compiler error    > Member 'object.Equals(object, object)' cannot be accessed with an instance reference; qualify it with a type name instead    OK, that's odd. Shouldn't it have picked up the `MemoryExtensions` extension method used above?    Now this next one I stumbled into on accident    `if (Path.GetExtension(entry.FileName).Equals((extension, StringComparison.OrdinalIgnoreCase)))`    The difference is subtle, but all I did was add some redundant(?) parentheses. No compiler error, but I get a runtime error    > System.NotSupportedException: 'Equals() on Span and ReadOnlySpan is not supported. Use operator== instead.'    So now it is telling me to use the `==` operator, which, I assume, will do a case-sensitive comparison, which is the opposite of what I want, and is not valid replacement for `StringComparison`.    Why are things not working like I think they should?  
29169	area-System.Data	Compilation errors while linking corefx\src\Common\src\Interop\Windows\NtDll\Interop.NtCreateFile.cs	I am getting the following compilation errors when linking [Interop.NtCreateFile.cs](https://github.com/dotnet/corefx/blob/a28a2cdda67c024126f690bbe1331174a194f9ce/src/Common/src/Interop/Windows/NtDll/Interop.NtCreateFile.cs) in `System.Data.SqlClient` project.   [FileSystemEnumerator.Win32.cs](https://github.com/dotnet/corefx/blob/dd4519d0373e26789905a4836c3fc88a9257cc1c/src/System.IO.FileSystem/src/System/IO/Enumeration/FileSystemEnumerator.Win32.cs#L54) includes a call to `Interop.NtDll.CreateFile` method and no compilation issues are observer with this project.    Could someone kindly help me with the following:  - Are issues 1,2,3 and 5 are being resolved in the correct manner, if not is there a better solution ?  - How can I resolve Issue 4 (*CS0029*) ?  I have added my comments and an excerpt from the log below, the logs are after including the mentioned changes.    | No      |Error Code          | Description        | Project  | File | Comments |  |:------------- |:-------------|:------------------|:---------|:-----|:-----|  | 1.     | CS0208 | Cannot take the address of, get the size of, or declare a pointer to a managed type ('Interop.UNICODE_STRING') | System.Data.SqlClient | [Interop.NtCreateFile.cs](https://github.com/dotnet/corefx/blob/a28a2cdda67c024126f690bbe1331174a194f9ce/src/Common/src/Interop/Windows/NtDll/Interop.NtCreateFile.cs#L84) | Removing the `*` operator resolves the compilation error.|  | 2.     | CS0208      |  Cannot take the address of, get the size of, or declare a pointer to a managed type ('Interop.UNICODE_STRING') | System.Data.SqlClient | [Interop.NtCreateFile.cs](https://github.com/dotnet/corefx/blob/a28a2cdda67c024126f690bbe1331174a194f9ce/src/Common/src/Interop/Windows/NtDll/Interop.NtCreateFile.cs#L102) | Removing the `*` operator resolves the compilation error.|  | 3.     | BCL0015      |   ntdll.dll!NtCreateFile is not supported on one\more targeted platforms. |  System.Data.SqlClient |   [Interop.NtCreateFile.cs](https://github.com/dotnet/corefx/blob/a28a2cdda67c024126f690bbe1331174a194f9ce/src/Common/src/Interop/Windows/NtDll/Interop.NtCreateFile.cs#L14) | This error can be removed by suppressing the warning `#pragma warning disable BCL0015 // Invalid Pinvoke call.` Is there a better way to do this ?|  | 4.     | CS0029      |   Cannot implicitly convert type 'System.IntPtr' to 'string' |   System.Data.SqlClient |   [Interop.NtCreateFile.cs](https://github.com/dotnet/corefx/blob/a28a2cdda67c024126f690bbe1331174a194f9ce/src/Common/src/Interop/Windows/NtDll/Interop.NtCreateFile.cs#L44) | Changing this to `Buffer = new string( c )` resolves the `intellisense` error, however the compilation error `convert type 'string' to 'System.IntPtr'` is observed.   |  | 5.     | CS0208      |   Cannot take the address of, get the size of, or declare a pointer to a managed type ('Interop.UNICODE_STRING') |   System.Data.SqlClient |   [Interop.NtCreateFile.cs](https://github.com/dotnet/corefx/blob/a28a2cdda67c024126f690bbe1331174a194f9ce/src/Common/src/Interop/Windows/NtDll/Interop.NtCreateFile.cs#L48) | Removing the `&` operator resolves the compilation error. |      ```cmd  System.Linq.Expressions -> D:\dotNetCore\corefx\bin\Windows_NT.AnyCPU.Debug\System.Linq.Expressions\netcoreapp\System    .Linq.Expressions.dll    System.Private.Xml.Linq -> D:\dotNetCore\corefx\bin\Windows_NT.AnyCPU.Debug\System.Private.Xml.Linq\netcoreapp\System    .Private.Xml.Linq.dll    System.Xml.XmlDocument -> D:\dotNetCore\corefx\bin\Windows_NT.AnyCPU.Debug\System.Xml.XmlDocument\netcoreapp\System.X    ml.XmlDocument.dll    System.Xml.XPath -> D:\dotNetCore\corefx\bin\Windows_NT.AnyCPU.Debug\System.Xml.XPath\netcoreapp\System.Xml.XPath.dll    System.Xml.ReaderWriter -> D:\dotNetCore\corefx\bin\Windows_NT.AnyCPU.Debug\System.Xml.ReaderWriter\netcoreapp\System    .Xml.ReaderWriter.dll    System.Xml.XmlSerializer -> D:\dotNetCore\corefx\bin\Windows_NT.AnyCPU.Debug\System.Xml.XmlSerializer\netcoreapp\Syst    em.Xml.XmlSerializer.dll    System.Xml.XPath.XDocument -> D:\dotNetCore\corefx\bin\Windows_NT.AnyCPU.Debug\System.Xml.XPath.XDocument\netcoreapp\    System.Xml.XPath.XDocument.dll    System.Xml.XDocument -> D:\dotNetCore\corefx\bin\Windows_NT.AnyCPU.Debug\System.Xml.XDocument\netcoreapp\System.Xml.X    Document.dll    Build FAILED.    D:\dotNetCore\corefx\src\Common\src\Interop\Windows\NtDll\Interop.NtCreateFile.cs(46,30): error CS0029: Cannot implicit  ly convert type 'string' to 'System.IntPtr' [D:\dotNetCore\corefx\src\System.IO.FileSystem\src\System.IO.FileSystem.csp  roj]      0 Warning(s)      1 Error(s)    Time Elapsed 00:02:26.71  Command execution failed with exit code 1.      ```    cc @saurabh500 @AfsanehR 
29167	area-System.Net	Ensure LocalCertificateSelectionCallback is still called with AuthenticateAsServerAsync	In .NET Core 2.0, we call `LocalCertificateSelectionCallback` to choose the certificate during `AuthenticateAsServerAsync`. As part of adding support for SNI, this functionality was removed. However, some users have already implemented SNI using `LocalCertificateSelectionCallback`, and we should aim to maintain compatibility for them.    This change ensures that we maintain the old behavior of `LocalCertificateSelectionCallback` when the new SNI callback is not set. When both are set, we default to the new behavior. I also added two tests to verify this behavior.    Fixes: #29110
29163	area-System.Net	ClientWebSocket does not provide upgrade request error details 	"Related to #13773     ClientWebSocket on .NET Core does not provide the upgrade request errors in the exception details as it does on the .NET Framework.    ### Repro code     ```csharp  var client = new ClientWebSocket();    client.ConnectAsync(new Uri(""wss://speech.platform.bing.com/speech/recognition/interactive/cognitiveservices/v1""), CancellationToken.None).GetAwaiter().GetResult();  ```    ### Behavior on .NET 462  ```  Unhandled Exception: System.Net.WebSockets.WebSocketException: Unable to connect to the remote server ---> System.Net.WebException: The remote server returned an error: (403) Forbidden.     at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)     at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Net.WebSockets.ClientWebSocket.<ConnectAsyncCore>d__21.MoveNext()     --- End of inner exception stack trace ---     at System.Net.WebSockets.ClientWebSocket.<ConnectAsyncCore>d__21.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.GetResult()     at ConsoleApp1.Program.Main(String[] args)  ```    ### Behavior on .NET Core 2.1 preview 2  ```     Unhandled Exception: System.Net.WebSockets.WebSocketException: Unable to connect to the remote server     at System.Net.WebSockets.WebSocketHandle.ConnectAsyncCore(Uri uri, CancellationToken cancellationToken, ClientWebSocketOptions options)     at System.Net.WebSockets.ClientWebSocket.ConnectAsyncCore(Uri uri, CancellationToken cancellationToken)     at ConsoleApp1.Program.Main(String[] args)  ```    As you can see on .NET 462, the inner exception is a ```WebException``` with the error details.    ### Proposed Fix  Create an inner exception of type ```WebException``` in a similar fashion to   https://github.com/dotnet/corefx/blob/6acd74dda7bc4f585d2c4006da4a8b2deb0261ad/src/System.Net.Requests/src/System/Net/HttpWebRequest.cs#L1211   and throw if the response is not 200.     The original WebException in .NET framework was thrown from```HttpWebRequest.GetResponseAsync()```, so I think the exception needs to be bubbled up in a similar way.  "
29162	area-System.Numerics	System.Numerics.Vectors is applying oob netstandard2.0 assembly to NETCoreApp2.0	The netstandard2.0 assembly doesn't have the same characteristics as the netcoreapp2.0 implementation that's in the shared framework.  For example: it uses a private copy of MathF rather than the framework implementation.  This could cause performance issues when the OOB implementation is used.    Since we've already set the pattern starting in netcoreapp2.1 that we don't want the package to apply an OOB implementation we should make that apply from netcoreapp2.0 where the assembly first went inbox.    /cc @weshaggard 
29159	area-System.Net	Fix ClientWebSocket error message when endpoint is not a real websocket	Close: #20360
29158	area-System.Runtime	About 30% performance regression for GetTypeCode() test	About 30% performance regression for GetTypeCode() test as seen in the chart below    ![capture01](https://user-images.githubusercontent.com/5897654/38884709-3eccc95c-4225-11e8-8e08-c7edaf349619.PNG)    Correction:  Below is the corefx diff from early March:  https://github.com/dotnet/corefx/compare/e1f304886a8315fd3303ff0e75dc7595c42b8cd0...dotnet:5cc8f36bec8ee6e67f8576bdc698bef1a280e9b9    Refer to [benchview](https://benchview/trendline?build_selector=latest&count=2000&aggregate=arithmeticMean&filterTail=one&filterVal=100&interval=INTERVAL_MIN_MAX&rtids=[957]&archids=[23]&mpids=[1292]&cfgids=[2706]&testids=[102192]&jobid=98308&) for more details.    cc: @kouvel @danmosemsft
29157	area-System.IO	File.OpenRead () calls Win32 apis when running on Linux.	This is an issue @jmacato has come across on Kubuntu and Ubuntu.    (I cant reproduce on my system, so must be something confusing .net runtime. specific to his system.)    to repro make a console application and call File.OpenRead()    the exception:  ```  Unhandled Exception: System.AggregateException: One or more errors occurred. (Could not find file '/mscorlib.dll'.) ---> System.IO.FileNotFoundException: Could not find file '/mscorlib.dll'.     at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)     at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)     at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptionsoptions)     at Roslyn.Utilities.FileUtilities.OpenFileStream(String path)  ```    here is the affected systems environment incase it helps:    ```  KDE_MULTIHEAD=false  CLUTTER_IM_MODULE=xim  GS_LIB=/home/<redacted>/.fonts  KDE_FULL_SESSION=true  LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:  LESSCLOSE=/usr/bin/lesspipe %s %s  LANG=en_PH.UTF-8  DISPLAY=:0  COLORTERM=truecolor  XDG_VTNR=7  PAM_KWALLET5_LOGIN=  QT_QUICK_CONTROLS_STYLE=org.kde.desktop  SSH_AUTH_SOCK=  MANDATORY_PATH=/usr/share/gconf//usr/share/xsessions/plasma.mandatory.path  XDG_SESSION_ID=3  USER=<redacted>  DESKTOP_SESSION=/usr/share/xsessions/plasma  QT4_IM_MODULE=xim  TEXTDOMAINDIR=/usr/share/locale/  GTK2_RC_FILES=/etc/gtk-2.0/gtkrc:/home/<redacted>/.gtkrc-2.0:/home/<redacted>/.config/gtkrc-2.0  DEFAULTS_PATH=/usr/share/gconf//usr/share/xsessions/plasma.default.path  PWD=/home/<redacted>/Desktop  HOME=/home/<redacted>  TEXTDOMAIN=im-config  SSH_AGENT_PID=1202  QT_ACCESSIBILITY=1  XDG_SESSION_TYPE=x11  XDG_DATA_DIRS=/usr/share//usr/share/xsessions/plasma:/usr/local/share:/usr/share:/var/lib/snapd/desktop  XDG_SESSION_DESKTOP=KDE  TERM=xterm-termite  SHELL=/bin/bash  VTE_VERSION=4802  XDG_SESSION_CLASS=user  XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat0  QT_IM_MODULE=xim  XMODIFIERS=@im=fcitx  IM_CONFIG_PHASE=2  XCURSOR_THEME=breeze_cursors  XDG_CURRENT_DESKTOP=KDE  DOTNET_CLI_TELEMETRY_OPTOUT=1  XDG_SEAT=seat0  SHLVL=1  LANGUAGE=en_US:en_GB  GTK_RC_FILES=/etc/gtk/gtkrc:/home/<redacted>/.gtkrc:/home/<redacted>/.config/gtkrc  WINDOWID=96468995  LOGNAME=<redacted>  DBUS_SESSION_BUS_ADDRESS=unix:abstract=/tmp/dbus-oLdDcAMVfg,guid=89c25e66de149eef77c1405a5ad5b765  XDG_RUNTIME_DIR=/run/user/1000  PAM_KWALLET_LOGIN=/run/user/1000/kwallet.socket  XAUTHORITY=/tmp/xauth-1000-_0  XDG_SESSION_PATH=/org/freedesktop/DisplayManager/Session1  QT_AUTO_SCREEN_SCALE_FACTOR=0  XDG_CONFIG_DIRS=/etc/xdg/xdg-/usr/share/xsessions/plasma:/etc/xdg:/usr/share/kubuntu-default-settings/kf5-settings  PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin  KDE_SESSION_UID=1000  KDE_SESSION_VERSION=5  SESSION_MANAGER=local/n550jk:@/tmp/.ICE-unix/1257,unix/n550jk:/tmp/.ICE-unix/1257  LESSOPEN=| /usr/bin/lesspipe %s  GTK_IM_MODULE=xim  OLDPWD=/home/<redacted>/Desktop/AvalonStudio/AvalonStudio/AvalonStudio/bin/Debug/netcoreapp2.0/debian.8-x64/publish  _=/usr/bin/printenv  ```    Any further information we can get to help debug the issue?  
29156	area-System.Globalization	DateTime format with CultureInfo differences	"Hello,     I've got simple Core2.0 console application, which produces different outputs on different platforms.    ```  static void Main(string[] args)  {      var d = new DateTime(2018, 3, 13, 0, 0, 0, DateTimeKind.Utc);      Console.WriteLine(d.ToString(""d"", new CultureInfo(""fa-IR"")));  }  ```    Windows 10: (expected output)  22/12/1396    Windows Server 2012 R2: (not converted into persian calendar)  13/03/2018    Both platforms have runtime 2.0.6 installed.  ```  Microsoft .NET Core Shared Framework Host      Version  : 2.0.6    Build    : 74b1c703813c8910df5b96f304b0f2b78cdf194d  ```    Desired culture is available on both platforms, checked with this piece of code.    ```  var cultures = CultureInfo.GetCultures(CultureTypes.AllCultures);  foreach (var culture in cultures) {      Console.WriteLine($""{culture.Name} - {culture.DisplayName}"");  }    ```    Please what can I do to make it work as desired?  Thank you.    Martin"
29155	area-System.IO	Populate the original path when creating directories	The DirectoryInfo class should be the same when calling Directory.Create() as  it would be creating DirectoryInfo directly then calling create on it.
29154	area-Infrastructure	Add command line install	
29152	area-Serialization	Enable DCS_TypeWithPrimitiveKnownTypes test on uapaot	Enable DCS_TypeWithPrimitiveKnownTypes on Uapaot  since the original issue #24265 has been fixed.  Fix #28978     @mconnew @zhenlan @yujayee @Lxiamail 
29150	area-System.Data	new SqlDouble(NaN) is only allowed on NETFX	SqlDouble has a weird platform difference:  ```cs          public SqlDouble(double value)          {  #if !netfx              if (!double.IsFinite(value))  #else              if (double.IsInfinity(value) || double.IsNaN(value))  #endif              {                  throw new OverflowException(SQLResource.ArithOverflowMessage);              }              else              {                  m_value = value;                  m_fNotNull = true;              }          }  ```  https://github.com/dotnet/corefx/blob/master/src/System.Data.Common/src/System/Data/SQLTypes/SQLDouble.cs#L40    This means I can insert NaN values when not using the .NET Framework, but when running the same code on a different platform, I get a crash here.  Easy to reproduce:  ```  new SqlDouble(double.NaN); //Crashes on NETFX  ```    This is rather problematic because NaN is commonly used in the SqlGeometry and SqlGeography datatypes to represent Z and M values, where for instance a line generally contains Z measurements, but on some vertices they might not be available. The behavior is described in [Microsoft SQL Server CLR Types Serialization Formats ](https://msdn.microsoft.com/en-us/library/ee320529(v=sql.105).aspx) on Page 9:    ![image](https://user-images.githubusercontent.com/1378165/38840339-f587cb66-4193-11e8-8ea6-ed0038daaded.png)  
29149	area-Infrastructure	Dependency bug with System.Memory in net461	Repro project: https://github.com/anurse/SpanDependencyBug    Steps:  1. Create `net461` project  2. Reference `System.Memory`  3. Use `Span<T>.IndexOf`    Expected Result: You get the index!    Actual Result:    ```  Unhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly 'System.Numerics.Vectors, Version=4.1.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.     at System.SpanHelpers.IndexOf(Char& searchSpace, Char value, Int32 length)     at System.MemoryExtensions.IndexOf[T](ReadOnlySpan`1 span, T value)     at SpanDependencyBug.Program.Main(String[] args)  ```    I believe this is cause by the fact that System.Memory depends on the following for `net45` (see https://dotnet.myget.org/feed/dotnet-core/package/nuget/System.Memory).    * System.Buffers (>= 4.4.0)  * System.Runtime.CompilerServices.Unsafe (>= 4.5.0-preview3-26416-06)    We are building for `net461` in the sample, but the `net45` dependencies are chosen over the `netstandard2.0` ones because NuGet finds an exact target framework name match (**unless this logic has changed since I last knew how this worked ;)**).    At runtime, `System.Memory` only provides a `netstandard2.0` binary, so it loads that binary, which references `System.Numerics.Vectors`, and thus blows up. System.Memory's references:    ```  // netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51  // System.Numerics.Vectors, Version=4.1.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a  // System.Runtime.CompilerServices.Unsafe, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a  // System.Buffers, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51  // mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089  ```
29148	area-Infrastructure	Bump versions for 2.2	PTAL @ericstj     This change bumps the minor version of all the packages we produce as well as bumps the patch version of all the assemblies that ship in an individual package.     If a library only ships in the platform package (aka Microsoft.NETCore.App/UAP) then we aren't bumping the assembly version at this time.   
29147	area-System.Data	SqlConnection.Open() throws System.InvalidOperationException: Internal connection fatal error on alpine	I get the error below when connecting to a SQL Server 2008R2 using the microsoft/dotnet:2.1.0-preview2-runtime-alpine docker image, but it works fine with microsoft/dotnet:2.1.0-preview2-runtime.    ```  System.InvalidOperationException: Internal connection fatal error.     at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)     at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)     at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)     at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)     at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)     at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)     at System.Data.SqlClient.SqlConnection.Open()  [...my code..]  System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)     at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)     at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)     at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)     at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)     at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)     at System.Data.SqlClient.SqlConnection.Open()  [...my code..]  Boolean TryGetConnection(System.Data.Common.DbConnection, UInt32, Boolean, Boolean, System.Data.Common.DbConnectionOptions, System.Data.ProviderBase.DbConnectionInternal ByRef)  ```  
29144	area-Infrastructure	NuGet build failures in 'prodcon/corefx/master/' - '20180416.01'	@dotnet-mc-bot commented on [Sun Apr 15 2018](https://github.com/dotnet/core-eng/issues/3292)    There were a set of failures during this build. Here is a summary of these:  * https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1594896    - **Agent:** DDVSOLINUXAGE007    - **Error log:** /root/corefx-1594896/external/runtime/runtime.depproj : error NU1102: - Found 414 version(s) in https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json [ Nearest version: 2.1.0-preview3-26416-01 ]...    @mmitche       
29143	area-Meta	.net core  dll as a reference behaves differently from .net	"create a .net standard dll , name it as Paas dll, and change the output path ..\Output\    add a class logger like below-    ```c#  public class Logger       {          public void LogMessage()          {              Console.Write(""test"");          }      }  ```    Now create another .net core console project in solution and add dll as a refrence ( not project refrence) for pass.dll and make copy local to false.    Also change output directory of console app to ..\Output\    add below code in console app -     ```c#  var logger = new Logger();    logger.LogMessage();    Console.Read();  ```    Build and run .net core app, but now application goes in break mode with below error    ```  Could not load file or assembly 'Paas, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'. The system cannot find the file specified.  ```    But if you perform same steps with .net framework 4.6.1 projects it works, why this different behavior with .net core exists and how to fix it?    Github project for more clarity -  https://github.com/ankgupta067/DependencyInjection    [EDIT] Change code & exception formatting by @karelz"
29142	area-System.Memory	Fixed ReadOnlySequence Slice performance tests	I fixed ReadOnlySequence Slice tests. Now it tests slicing with different positions and lengths.  But positions are prepared before measurements.   Also I added generator with requested number of segments. Using it I added tests for sequences with 10 and 100 segments. 
29139	area-System.Data	SqlClient UDT support needs an assembly-plugin model	I built a .NET Standard implementation of the `Microsoft.SqlServer.Types` classes. This works great for insertion, but when deserializing I'll get an exception like this:  ![image](https://user-images.githubusercontent.com/1378165/38794079-b34e7df2-4108-11e8-9ca1-7631c9c50840.png)    Instead I have to write something like:    ```cs  var binvalue = reader.GetSqlBytes(rowid);  var g = SqlGeometry.Deserialize(binvalue);  ```    This makes sense, because SqlClient has no idea I provided an implementation it could use. Assembly redirect only works for assemblies with the same name and public key, so that's not really an option.  How do we across all the different platforms allow us to use UDT in assemblies defined on each platform, and get the SqlClient to import the types?    The issue is somewhat called out in the doc:  > SqlClient may fail to load a UDT in the event of mismatched UDT versions or other problems. [(1)](https://docs.microsoft.com/en-us/sql/relational-databases/clr-integration-database-objects-user-defined-types/accessing-user-defined-types-retrieving-udt-data?view=sql-server-2017)    > A local copy of the UDT assembly must be available to the client project. [(2)](https://docs.microsoft.com/en-us/sql/relational-databases/clr-integration-database-objects-user-defined-types/accessing-user-defined-types-retrieving-udt-data?view=sql-server-2017#using-udts-in-query-parameters)    > The assembly loaded in SQL Server and the assembly on the client must be compatible in order for the UDT to be created on the client. For UDTs defined with the Native serialization format, the assemblies must be structurally compatible. For assemblies defined with the UserDefined format, the assembly must be available on the client.  > You do not need a copy of the UDT assembly on the client in order to retrieve the raw data from a UDT column in a table. [(3)](https://docs.microsoft.com/en-us/sql/relational-databases/clr-integration-database-objects-user-defined-types/accessing-user-defined-types-retrieving-udt-data?view=sql-server-2017#requirements-for-using-udts-in-adonet)    > In some situations, you may want to retrieve the raw data from the UDT column. Perhaps the type is not available locally [(4)](https://docs.microsoft.com/en-us/sql/relational-databases/clr-integration-database-objects-user-defined-types/accessing-user-defined-types-retrieving-udt-data?view=sql-server-2017#binding-udts-as-bytes)    > [Warning about client side usage of GEOMETRY, GEOGRAPHY and HIERARCHYID](https://msdn.microsoft.com/en-us/library/dn236441(v=sql.120).aspx)    A .NET Standard Implementation of the geometry types for reference which can be used as an example (just tweak unit tests to call `GetValue` instead of `GetSqlBytes` on the data reader):   https://github.com/dotMorten/Microsoft.SqlServer.Types/blob/89c5e6158867d9603d93fde6286a0f32f01fa96d/src/Microsoft.SqlServer.Types.Tests/DBTests.cs#L81
29138	area-System.Runtime	Update ApiCompatBaseline for uap and uapaot for System.Runtime	cc @jkotas, @weshaggard 
29137	area-System.Memory	Update xml comment for {ReadOnly}Memory.Pin method	See https://github.com/dotnet/coreclr/pull/17269#discussion_r177602812 for context.    This will need to get mirrored to coreclr (cc @Anipik)
29136	area-System.Memory	Add comments clarifying the logc in ReadOnlySequence GetFirstBuffer	See https://github.com/dotnet/corefx/pull/29051#discussion_r181122012 for context  
29135	area-System.Memory	Attempt at winning back performance regression from additional checks in ReadOnlySequence.Slice	Builds on top of the changes in https://github.com/dotnet/corefx/pull/29054 (which added necessary bounds checks/input validation and tests). Focus on optimization to win back **most** of the performance regression.    We are now **actually faster** than what was in master previously in almost all cases (by up to 15%). The major outliers which still regressed are:  ```C#  Slice(SequencePosition start); // only for multi segment sequence  Slice(SequencePosition start, SequencePosition end); // only for multi segment sequence  ```    This is predominantly because _correct_ bounds checking for multi-segment sequences is inherently more complex. There may still be some room for clever tricks here.    Using the performance tests from https://github.com/dotnet/corefx/pull/29133:  ![image](https://user-images.githubusercontent.com/6527137/38789869-046d5e36-40f2-11e8-99b0-dd11f1de2e23.png)    Also includes changes from https://github.com/dotnet/corefx/pull/29072 / https://github.com/dotnet/corefx/pull/29088    cc @pakrym, @AlexRadch, @KrzysztofCwalina, @davidfowl  
29134	area-System.Memory	Marshaling of Default and Empty ReadOnlySequence	Early ReadOnlySequences works incorrect with default value. Now it is fixed except marshaling methods.    Now if we try to marshal Default ROS it will be converted to Default ReadOnlyMemory. But if we try to create ROS for default ReadOnlyMemory then Empty ROS will be created.    So marshaling change Default ROS to Empty ROS. Is it issue?    If we try to marshal Empty ROS it can be marshaled and ArraySegment or ReadOnlyMemory with length equal to 0. And if we create ROS for ArraySegment or ReadOnlyMemory then Empty ROS will be created. So both ways are correct.
29133	area-System.Memory	Update the ReadOnlySequence Slice performance tests to only measure the Slice method	cc @pakrym, @AlexRadch 
29132	area-System.Net	change sync timeout handling back to use actual sync timeouts	Fixes #29040     We made a change in 2.1 (#22588) to force sync operations with timeout to go through the sync-over-async path.  This caused a nontrivial perf hit.      This change reverts (mostly) the previous change and fixes the original issue by checking explicitly for blocking mode and not retrying when a timeout is exceeded.    Also, remove timeout handling from accept and connect operations since it is never used.    @stephentoub @dotnet/ncl 
29131	area-System.Net	Delete faulty assert in SslStreamInternal	We're hitting an assert when a ReadAsync call is made on SslStream after the underlying stream encounters EOF.  When calling FillBufferAsync, we've already allocated the read buffer, and we may not have any data in the buffer; if we then hit EOF, we've still not got any data in the buffer and we return.  Then when ReadAsync is called again, the assert trips over the buffer being allocated and also being empty.    The fix is to call ReturnReadBufferIfEmpty when we hit EOF, so that we promptly free the buffer.  But I'm also deleting the failing assert, as it seems like we could hit this in other situations as well.    Fixes https://github.com/dotnet/corefx/issues/29127  cc: @geoffkizer, @Drawaes, @davidsh 
29130	area-System.Net	Fix nestedRead tracking in SslStreamInternal.ReadAsyncInternal	_nestedRead is getting reset back to 0 at the end of an iteration of the loop, but it may be looping back around again to do more reading.  If we're going to try to protect against concurrent reads, we should at least do it right :)    cc: @Drawaes, @geoffkizer, @davidsh
29129	area-System.IO	FileStream.Windows useAsync WriteAsync calls blocking apis	e.g SetEndOfFile in the async path is 50% of the time and it doesn't need to be called (as WriteFile will expand the File).     SetEndOfFile is also a blocking api itself; so expanding the file using it blocks the thread for as much time (or more) as the async saves blocking.    ---  Previous    Seen in https://github.com/electricessence/AsyncFileWriter/pull/1 (Windows 10; netcoreapp2.0 and netcoreapp2.1)    Non-async (just for `FileStream.Write`)  ```  AsyncFileWriterTester>dotnet run -c Release  100,000 bounded capacity.  Total Time: 2.3680831 seconds  Total Bytes: 115,888,890  Total Wait Time: 00:00:02.6254878  ------------------------    10,000 bounded capacity.  Total Time: 2.0399536 seconds  Total Bytes: 115,888,890  Total Wait Time: 00:00:02.3390593  ------------------------    1,000 bounded capacity.  Total Time: 2.1499109 seconds  Total Bytes: 115,888,890  Total Wait Time: 00:00:02.3699012  ------------------------    100 bounded capacity.  Total Time: 2.0656293 seconds  Total Bytes: 115,888,890  Total Wait Time: 00:00:03.0224013  ------------------------    Press ENTER to continue.  ```  Making the change https://github.com/electricessence/AsyncFileWriter/commit/752f7efd40b560ff40b13bd387466d9e298db343    `useAsync = true` and `fs.Write(` => `await fs.WriteAsync(`    Causes a dramatic slow down:  ```  AsyncFileWriterTester>dotnet run -c Release  100,000 bounded capacity.  Total Time: 4.1238278 seconds  Total Bytes: 115,888,890  Total Wait Time: 00:00:14.3291113  ------------------------    10,000 bounded capacity.  Total Time: 4.370184 seconds  Total Bytes: 115,888,890  Total Wait Time: 00:00:19.3693952  ------------------------    1,000 bounded capacity.  Total Time: 4.1362524 seconds  Total Bytes: 115,888,890  Total Wait Time: 00:00:19.0104628  ------------------------    100 bounded capacity.  Total Time: 4.2608508 seconds  Total Bytes: 115,888,890  Total Wait Time: 00:00:20.4615956  ------------------------    Press ENTER to continue.  ```  Seems to use a lot of threads, though maybe that's Channels
29127	area-System.Net	Failed SslStream assert in new HttpClient perf tests on Unix	This appears to be happening consistently across all distros/versions, Linux and macOS.  ```  2018-04-15 12:54:25,475: INFO: proc(54): run_and_log_output: Output: Assertion Failed  2018-04-15 12:54:25,475: INFO: proc(54): run_and_log_output: Output:   2018-04-15 12:54:25,476: INFO: proc(54): run_and_log_output: Output:    at System.Net.Security.SslStreamInternal.ResetReadBuffer() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_true_prtest/src/System.Net.Security/src/System/Net/Security/SslStreamInternal.cs:line 185  2018-04-15 12:54:25,476: INFO: proc(54): run_and_log_output: Output:    at System.Net.Security.SslStreamInternal.ReadAsyncInternal[TReadAdapter](TReadAdapter adapter, Memory`1 buffer) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_true_prtest/src/System.Net.Security/src/System/Net/Security/SslStreamInternal.cs:line 256  2018-04-15 12:54:25,476: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 930  2018-04-15 12:54:25,476: INFO: proc(54): run_and_log_output: Output:    at System.Net.Security.SslStreamInternal.ReadAsyncInternal[TReadAdapter](TReadAdapter adapter, Memory`1 buffer)  2018-04-15 12:54:25,477: INFO: proc(54): run_and_log_output: Output:    at System.Net.Security.SslStreamInternal.ReadAsync(Memory`1 buffer, CancellationToken cancellationToken) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_true_prtest/src/System.Net.Security/src/System/Net/Security/SslStreamInternal.cs:line 158  2018-04-15 12:54:25,477: INFO: proc(54): run_and_log_output: Output:    at System.Net.Security.SslStream.ReadAsync(Memory`1 buffer, CancellationToken cancellationToken) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_true_prtest/src/System.Net.Security/src/System/Net/Security/SslStream.cs:line 739  2018-04-15 12:54:25,477: INFO: proc(54): run_and_log_output: Output:    at System.IO.StreamReader.ReadBufferAsync() in /Users/buildagent/agent/_work/147/s/src/mscorlib/shared/System/IO/StreamReader.cs:line 1328  2018-04-15 12:54:25,478: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 930  2018-04-15 12:54:25,478: INFO: proc(54): run_and_log_output: Output:    at System.IO.StreamReader.ReadBufferAsync()  2018-04-15 12:54:25,478: INFO: proc(54): run_and_log_output: Output:    at System.IO.StreamReader.ReadLineAsyncInternal() in /Users/buildagent/agent/_work/147/s/src/mscorlib/shared/System/IO/StreamReader.cs:line 888  2018-04-15 12:54:25,478: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 930  2018-04-15 12:54:25,479: INFO: proc(54): run_and_log_output: Output:    at System.IO.StreamReader.ReadLineAsyncInternal()  2018-04-15 12:54:25,479: INFO: proc(54): run_and_log_output: Output:    at System.IO.StreamReader.ReadLineAsync() in /Users/buildagent/agent/_work/147/s/src/mscorlib/shared/System/IO/StreamReader.cs:line 878  2018-04-15 12:54:25,479: INFO: proc(54): run_and_log_output: Output:    at System.Net.Http.Tests.SocketsHttpHandlerPerfTest.<>c__DisplayClass2_3.<<Get>b__0>d.MoveNext() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_true_prtest/src/System.Net.Http/tests/Performance/Perf.SocketsHttpHandler.cs:line 68  2018-04-15 12:54:25,479: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/buildagent/agent/_work/147/s/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 167  2018-04-15 12:54:25,480: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 559  2018-04-15 12:54:25,480: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Threading/Tasks/TaskContinuation.cs:line 798  2018-04-15 12:54:25,480: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 3275  2018-04-15 12:54:25,481: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Threading/Tasks/future.cs:line 421  2018-04-15 12:54:25,481: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 639  2018-04-15 12:54:25,481: INFO: proc(54): run_and_log_output: Output:    at System.IO.StreamReader.ReadLineAsyncInternal() in /Users/buildagent/agent/_work/147/s/src/mscorlib/shared/System/IO/StreamReader.cs:line 948  2018-04-15 12:54:25,481: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/buildagent/agent/_work/147/s/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 167  2018-04-15 12:54:25,482: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 559  2018-04-15 12:54:25,482: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Threading/Tasks/TaskContinuation.cs:line 798  2018-04-15 12:54:25,482: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 3275  2018-04-15 12:54:25,482: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Threading/Tasks/future.cs:line 421  2018-04-15 12:54:25,483: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 639  2018-04-15 12:54:25,483: INFO: proc(54): run_and_log_output: Output:    at System.IO.StreamReader.ReadBufferAsync() in /Users/buildagent/agent/_work/147/s/src/mscorlib/shared/System/IO/StreamReader.cs:line 1361  2018-04-15 12:54:25,483: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/buildagent/agent/_work/147/s/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 167  2018-04-15 12:54:25,483: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 559  2018-04-15 12:54:25,484: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Threading/Tasks/TaskContinuation.cs:line 798  2018-04-15 12:54:25,484: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 3275  2018-04-15 12:54:25,484: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Threading/Tasks/future.cs:line 421  2018-04-15 12:54:25,485: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 639  2018-04-15 12:54:25,485: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetResult(TResult result) in /Users/buildagent/agent/_work/147/s/src/mscorlib/shared/System/Runtime/CompilerServices/AsyncValueTaskMethodBuilder.cs:line 169  2018-04-15 12:54:25,485: INFO: proc(54): run_and_log_output: Output:    at System.Net.Security.SslStreamInternal.ReadAsyncInternal[TReadAdapter](TReadAdapter adapter, Memory`1 buffer) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_true_prtest/src/System.Net.Security/src/System/Net/Security/SslStreamInternal.cs:line 339  2018-04-15 12:54:25,486: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/buildagent/agent/_work/147/s/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 167  2018-04-15 12:54:25,486: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 559  2018-04-15 12:54:25,486: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Threading/Tasks/TaskContinuation.cs:line 798  2018-04-15 12:54:25,487: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 3275  2018-04-15 12:54:25,487: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Threading/Tasks/future.cs:line 421  2018-04-15 12:54:25,487: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 639  2018-04-15 12:54:25,487: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(TResult result) in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 629  2018-04-15 12:54:25,488: INFO: proc(54): run_and_log_output: Output:    at System.Net.Security.SslStreamInternal.<FillBufferAsync>g__InternalFillBufferAsync|38_0[TReadAdapter](TReadAdapter adap, ValueTask`1 task, Int32 min, Int32 initial) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_true_prtest/src/System.Net.Security/src/System/Net/Security/SslStreamInternal.cs:line 516  2018-04-15 12:54:25,488: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/buildagent/agent/_work/147/s/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 167  2018-04-15 12:54:25,488: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 559  2018-04-15 12:54:25,489: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.InvokeContinuation(Action`1 continuation, Object state, Boolean forceAsync) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_true_prtest/src/System.Net.Sockets/src/System/Net/Sockets/Socket.Tasks.cs:line 1038  2018-04-15 12:54:25,489: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.OnCompleted(SocketAsyncEventArgs _) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_true_prtest/src/System.Net.Sockets/src/System/Net/Sockets/Socket.Tasks.cs:line 869  2018-04-15 12:54:25,490: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.SocketAsyncEventArgs.FinishOperationAsyncSuccess(Int32 bytesTransferred, SocketFlags flags) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_true_prtest/src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs:line 780  2018-04-15 12:54:25,490: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.SocketAsyncEventArgs.CompletionCallback(Int32 bytesTransferred, SocketFlags flags, SocketError socketError) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_true_prtest/src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.Unix.cs:line 402  2018-04-15 12:54:25,491: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.SocketAsyncEventArgs.TransferCompletionCallbackCore(Int32 bytesTransferred, Byte[] socketAddress, Int32 socketAddressSize, SocketFlags receivedFlags, SocketError socketError) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_true_prtest/src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.Unix.cs:line 121  2018-04-15 12:54:25,491: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.SocketAsyncContext.BufferMemoryReceiveOperation.InvokeCallback(Boolean allowPooling) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_true_prtest/src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncContext.Unix.cs:line 463  2018-04-15 12:54:25,491: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.SocketAsyncContext.OperationQueue`1.ProcessAsyncOperation(TOperation op) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_true_prtest/src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncContext.Unix.cs:line 853  2018-04-15 12:54:25,492: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.SocketAsyncContext.OperationQueue`1.<>c.<.cctor>b__18_0(Object op) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_true_prtest/src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncContext.Unix.cs:line 697  2018-04-15 12:54:25,492: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ThreadPoolWorkQueue.Dispatch() in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Threading/ThreadPool.cs:line 588  ```
29124	area-System.Drawing	System.Drawing / Vector conversion?	Just pointing out that I think it would be a fantastic idea to implement implicit conversion to and from things like PointF, RectangleF to Vector2 and Vector4.
29123	area-System.Diagnostics	Exception when launching a process	On 2.1 preview 2 built for linux-arm (raspbian jessie), I get this after a few hours of spawning and exiting processes.  ```  System.ArgumentException: An item with the same key has already been added. Key: 29932     at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, Insertion  Behavior behavior)     at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)     at System.Diagnostics.ProcessWaitState.AddRef(Int32 processId, Boolean isNewChild)     at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)     at System.Diagnostics.Process.Start()     at System.Diagnostics.Process.Start(ProcessStartInfo startInfo)  ```  It's just a guess, but could it be the dictionary is not properly reaped before a new process reuses the pid ?  
29122	area-System.Reflection	How can I use the APIs in the System.Reflection.Metadata namespace?	Hi! I'm developing a programming language of my own using the expression tree API and want to debug programs written in Expresso(which is the name of the programming language) in VS Code.  To do that, I need to first generate *PDB/MDB* files and I found and heard that one can generate Portable PDB files by using APIs from the `System.Reflection.Metadata` namespace. But I just can't find any documentations on or about it, nor source codes that apparently use them.  So, is here the right place to ask it? If so, would you mind if I ask how to use the APIs?
29121	area-System.ComponentModel	Added AssociatedMetadataTypeTypeDescriptionProvider & MetadataTypeAttribute to C.CM.DA #22469 #16101	Let me know if any change is required.  Thanks for your efforts (-:
29120	area-System.Runtime	ApiProposal: string.Create method which takes an additional Span as data parameter	"With the new ``Span<>`` based Apis an additional method to create strings was added which takes the length and an action + state as parameter to allow alloc-free modification of the string based on the action.  The signature is:  ```csharp   public static string Create<TState>(int length, TState state, SpanAction<char, TState> action)  ```  An example of the usage is in @stephentoub's article https://msdn.microsoft.com/en-us/magazine/mt814808.aspx    I propose an additional method taking a ``ReadonlySpan<char>`` as parameter to be able to populate the new string more easily. It is currently not possible to use a custom TState with ``ReadOnlySpan<char>`` as a field, because such byref structs can't be type parameters, so the current method does not solve the problem.    **Rationale and Usage**  With span it is easy to create a substring and trim and such apis are included with ``Span``. Sometimes it might be useful to simply remove certain characters from a string, where you know the new length of the string in advance. One example is unescaping data, see the code snippet below for usage, the new length of the string can be easily calculated in advance, so a fixed size buffer is enough.    **Proposed API**    ```csharp   public delegate void SpanDataAction<T, in TArg>(Span<T> span, in ReadOnlySpan<T> data, TArg arg);   public static string Create<TState>(int length, in ReadOnlySpan<char> data, TState state, SpanDataAction<char, TState> action);  ```  The new delegate is necessary to be able to use the data in the action.    **Example usage**  A shortened example of how to unescape a possible JSON span, in this example state is not used, but I imagine that State will be equally useful as in the original string.Create, so it is included in the proposal.  ```csharp  ReadOnlySpan<char> data = ""Hello\\nWorld""; // escaped newline  int length = data.Length - 1;  var output = Create(length, data, new State(),      delegate(Span<char> span, in ReadOnlySpan<char> input, State state)      {          var counter = 0;          for (int i = 0; i < input.Length; i++)          {              var c = input[i];              if (c == '\\')              {                  i++;                  c = input[i];                  switch (c)                  {                      case 'n':                          c = '\n';                          break;                  }              }                span[counter++] = c;          }      });  private readonly struct State {}   ```    **Proposed Implementation**    Modified from the existing string.Create  ```csharp  public static string Create<TState>(int length, in ReadOnlySpan<char> data, TState state, SpanDataAction<char, TState> action)  {      if (action == null)          throw new ArgumentNullException(nameof(action));        if (length <= 0)      {          if (length == 0)              return string.Empty;          throw new ArgumentOutOfRangeException(nameof(length));      }        //Span<char> span = stackalloc char[length];      //action(span, data, state);      //return span.ToString();      string result = FastAllocateString(length);      action(new Span<char>(ref result.GetRawStringData(), length), data, state);      return result;  }  ```    **Impact**  Currently, as to my knowledge, you need to use either unsafe pointer logic and/or Unsafe.Write methods to replace the existing chars in the string.    **Open Questions**  * Better name for the delegate  * Better workarounds than unsafe logic?    "
29119	area-System.Memory	Add unmanaged constraint to MemoryMarshal.Cast	With C# 7.3 there's now the [unmanaged generic constraint](https://github.com/dotnet/csharplang/blob/master/proposals/csharp-7.3/blittable.md) and it looks like it should be applied to [MemoryMarshal.Cast](https://github.com/dotnet/corefx/blob/27149e4a86ba5827229b8294f1dd19f3f7d58184/src/Common/src/CoreLib/System/Runtime/InteropServices/MemoryMarshal.Fast.cs#L115-L116) before that becomes a breaking change
29118	area-System.Net	Outbound connections time out with new managed sockets	When upgrading from 2.1 preview 1 to preview 2, all of a sudden all the outbound calls from my asp.net core app (except Azure SQL calls for some reason) seem to hang and eventually timeout. I'm seeing this behavior with both an HttpClient and using the latest Azure Storage SDK.    Based on the release notes, I suspected it's due to the switch to managed sockets and confirmed this by setting `DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER` to 0 and noticing the calls working again.    I'm running on Azure App Services using self-contained deployment.
29117	area-System.Net	Add test for socket sync-over-async thread usage	To help validate that synchronous operations aren't requiring a secondary thread pool thread.    Contributes to https://github.com/dotnet/corefx/issues/29029  cc: @geoffkizer 
29116	area-System.Runtime	Binary serialization exceptions should help debugging by mentioning type / member information	The following exception does not identify which type / member it's referring to, forcing the user to either debug and forage through `System.TypedReference.MakeTypedReference` or to manually walk the object graph in search of the offending type.    ```  System.ArgumentException : Field in TypedReferences cannot be static or init only.     at System.TypedReference.MakeTypedReference(Object target, FieldInfo[] flds)     at System.Runtime.Serialization.ObjectManager.DoValueTypeFixup(FieldInfo memberToFix, ObjectHolder holder, Object value)     at System.Runtime.Serialization.ObjectManager.CompleteObject(ObjectHolder holder, Boolean bObjectFullyComplete)     at System.Runtime.Serialization.ObjectManager.DoNewlyRegisteredObjectFixups(ObjectHolder holder)     at System.Runtime.Serialization.ObjectManager.RegisterObject(Object obj, Int64 objectID, SerializationInfo info, Int64 idOfContainingObj, MemberInfo member, Int32[] arrayIndex)     at System.Runtime.Serialization.Formatters.Binary.ObjectReader.RegisterObject(Object obj, ParseRecord pr, ParseRecord objectPr, Boolean bIsString)     at System.Runtime.Serialization.Formatters.Binary.ObjectReader.ParseObjectEnd(ParseRecord pr)     at System.Runtime.Serialization.Formatters.Binary.__BinaryParser.Run()     at System.Runtime.Serialization.Formatters.Binary.ObjectReader.Deserialize(HeaderHandler handler, __BinaryParser serParser, Boolean fCheck, Boolean isCrossAppDomain, IMethodCallMessage methodCallMessage)     at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream serializationStream, HeaderHandler handler, Boolean fCheck, Boolean isCrossAppDomain, IMethodCallMessage methodCallMessage)     at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream serializationStream)  ```
29115	area-System.Memory	Remove != and == from SequencePosition	https://github.com/dotnet/corefx/issues/29001
29114	area-System.Memory	Added unsafe casting for ReadOnlyMemory<char> in ReadOnlySequence	Small performance suggestion.
29113	area-Infrastructure	Windows builds should always be portable	See dotnet/coreclr#17533.
29111	area-System.Linq	Extend ICollection<T> and IList<T> handling in LINQ All/Any/First methods	
29110	area-System.Net	SslStream LocalCertificateSelectionCallback	The LocalCertificateSelectionCallback of SslStream is not called anymore on .Net Core 2.1 Preview. I looked in the code and it seems someone was trying to replace it with another callback but didn't finish the implementation.     We need this for SNI, please fix this for the release.
29109	area-System.Memory	Removed unsafe casting in ReadOnlySequence TryGetXXX methods	Removed unsafe casting in ReadOnlySequence TryGetXXX methods. Part of #28920
29108	area-System.Memory	IBufferWriter should have a Length property	This should be return the amount of buffered bytes. I was thinking that it would be simple to add this to PipeWriter but we actually should have this on `IBufferWriter<T>`. It's required for writing out length prefixed protocols:    ```C#  public void WriteMessage(Message message, IBufferWriter<byte> output)  {        // Always a 4 byte length prefix       Span<byte> prefix = output.GetSpan();       output.Advance(4);         long oldLength = output.Length;         // Write message to a buffer so we can get its length       WriteMessageCore(message, output);         long written = output.Length - oldLength;         // Fill in the length prefix afterwards       BinaryPrimitives.WriteInt32BigEndian(prefix, (int)written);  }  ```    /cc @KrzysztofCwalina @pakrym 
29106	area-Infrastructure	[1.1] Misc linux fixes	Makes some misc fixes to get the portable linux bootstrap CLI completely working on 1.1
29105	area-System.Net	Add basic GET SocketsHttpHandler perf tests	Tests for:  - http vs https  - connection: close vs keep-alive  - chunked vs content-length response  - various response lengths    These are not meant to be end-to-end tests, just basic perf tests to help get a quick read on regressions and the like.    cc: @geoffkizer, @wfurt, @davidsh    Example output on my machine (with a bunch of other stuff going on, so don't pay too much attention to the numbers):     System.Net.Http.Performance.Tests.dll                                                                                                         | Metric   | Unit | Iterations |  Average | STDEV.S |      Min |      Max  :--------------------------------------------------------------------------------------------------------------------------------------------- |:-------- |:----:|:----------:| --------:| -------:| --------:| --------:   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, connectionPerRequest: False, chunkedResponse: False, responseLength: 1)      | Duration | msec |    100     |   83.455 |   6.179 |   74.239 |  128.440   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, connectionPerRequest: False, chunkedResponse: False, responseLength: 100000) | Duration | msec |     21     |  491.563 |  43.112 |  421.577 |  592.187   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, connectionPerRequest: False, chunkedResponse: True, responseLength: 1)       | Duration | msec |    100     |   79.547 |   7.700 |   65.360 |  105.538   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, connectionPerRequest: False, chunkedResponse: True, responseLength: 100000)  | Duration | msec |     22     |  463.553 |  13.256 |  433.116 |  498.969   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, connectionPerRequest: True, chunkedResponse: False, responseLength: 1)       | Duration | msec |     18     |  586.871 |  63.070 |  489.314 |  719.751   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, connectionPerRequest: True, chunkedResponse: False, responseLength: 100000)  | Duration | msec |     7      | 1448.363 | 295.026 | 1220.242 | 2023.730   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, connectionPerRequest: True, chunkedResponse: True, responseLength: 1)        | Duration | msec |     18     |  560.555 |  50.207 |  472.637 |  671.757   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, connectionPerRequest: True, chunkedResponse: True, responseLength: 100000)   | Duration | msec |     8      | 1309.533 |  39.894 | 1257.887 | 1372.492   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, connectionPerRequest: False, chunkedResponse: False, responseLength: 1)       | Duration | msec |     78     |  128.654 |  25.640 |  101.723 |  248.124   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, connectionPerRequest: False, chunkedResponse: False, responseLength: 100000)  | Duration | msec |     19     |  530.344 |  13.028 |  504.011 |  556.610   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, connectionPerRequest: False, chunkedResponse: True, responseLength: 1)        | Duration | msec |     93     |  108.198 |  13.686 |   90.941 |  166.983   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, connectionPerRequest: False, chunkedResponse: True, responseLength: 100000)   | Duration | msec |     18     |  570.010 |  49.106 |  527.718 |  711.297   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, connectionPerRequest: True, chunkedResponse: False, responseLength: 1)        | Duration | msec |     3      | 3726.067 | 207.902 | 3553.084 | 3956.715   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, connectionPerRequest: True, chunkedResponse: False, responseLength: 100000)   | Duration | msec |     2      | 5714.703 | 577.583 | 5306.290 | 6123.116   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, connectionPerRequest: True, chunkedResponse: True, responseLength: 1)         | Duration | msec |     3      | 3467.903 |  34.445 | 3446.754 | 3507.649   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, connectionPerRequest: True, chunkedResponse: True, responseLength: 100000)    | Duration | msec |     3      | 4173.551 |  46.385 | 4122.404 | 4212.891  
29104	area-Infrastructure	Adding begin/end to build definitions	Continuation of this PR: https://github.com/dotnet/corefx/pull/28624    Related to this issue: https://github.com/dotnet/core-eng/issues/2964
29103	area-Infrastructure	Update CoreClr, CoreFx, CoreSetup, Standard to preview2-26406-07, preview2-26406-04, preview2-26406-04, servicing-26409-02, respectively (release/2.1)	
29102	area-System.Runtime	GC.RegisterForFullGCNotification requires spinning up a thread for events	GC.RegisterForFullGCNotification, and the WaitForFullGCApproach/Complete APIs require spinning up a thread for tracking. It would be nice to have     It would be nice to provide an API that doesn't require spinning up a new thread and holding onto it. Perhaps a callback that we fire back on a threadpool thread (or maybe even on the finalizer thread)? Such a thing would have potentially been useful in ArrayPool cleanup.    cc: @vancem, @Maoni0 
29100	area-System.Security	Remove unused TestHelper.AsReadOnlySpan	Missed one file from https://github.com/dotnet/corefx/pull/28962
29099	area-System.Runtime	Fix default style argument to Double/Single/Decimal.Parse	Copy-and-paste error while adding in the Span-based overload led to these having the wrong default style.  This wasn't caught by tests because a) the existing string-based tests were using the wrong default style (probably also a copy-and-paste error) such that the relevant string-based overloads weren't actually being tested as thought, and b) that code wasn't added to the span-based tests anyway.  I've fixed the ref, fixed the string-based tests, and copied/modified the tests for the span-based overloads as well.    Fixes https://github.com/dotnet/coreclr/issues/17553  Related to https://github.com/dotnet/coreclr/pull/17556  cc: @jkotas 
29098	area-Infrastructure	WIP Test tiered compilation in CI	
29097	area-System.Net	Sockets: dispatch sync op handling back to calling thread to avoid thread starvation	Fixes #29029     This change ended up a little more involved than I'd hoped, unfortunately.    The main change is to handling of queued sync operations.  Instead of dispatching a threadpool item to process these, we instead signal the waiting thread to process the IO itself.  This solves the starvation issue.    Related to this, I also changed how cancellation for timeout on sync operations works.  The problem was that if a sync operation timed out, we'd still leave its operation in the queue.  So when we received a readiness notification, we'd try to signal the associated blocked thread -- but it would be no longer waiting because it timed out.  Instead, actually remove the timed out item from the queue, and handle any queue state fixup necessary from this.    @stephentoub @dotnet/ncl 
29096	area-Infrastructure	Run docker commands in a container without a local filesystem mounted volume	Fixes https://github.com/dotnet/core-eng/issues/2918    Note, It's possible that this could cause build failures if it's submitted before some manual agent cleanup occurs.  ie, This change enables VSTS build agent cleanup, and that step will fail (Permission Denied) if it tries to cleanup any build which was run using the previous model.     @weshaggard @mmitche I'd like to manually cleanup all the current Corefx builds off of the Linux agents before submitting this change.  The alternative way to deal with this is to leave in the previous cleanup model (change permissions and then delete) for about a week after the rest of this change goes in and then transition to using VSTS's cleanup system.
29095	area-System.IO	Directory.EnumerateDirectories doesn't return directory list on rhel7.2	_From @jainaashish on April 7, 2018 0:18_  I've created a simple application to demonstrate the issue where `Directory.EnumerateDirectories` api doesn't return the list of child directories on rhel 7.2, although it works fine on Windows or Ubuntu.     Sample Project - https://github.com/jainaashish/CoreClrIssue/tree/master/EnumerateDirectoriesIssue/EnumerateDirectoriesIssue    _Copied from original issue: dotnet/coreclr#17465_
29094	area-System.Memory	System.Memory APICompat issue	Opened on behalf of @weshaggard  Warnings: 1 Status Message: failed  Build : ProdCon - Master - 20180413.02 (Product Build) Failing configurations: - Windows   - AllConfigurations-x64   - uapaot-x86   - uapaot-x64   - uapaot-arm64   - uapaot-arm   - uap-x86   - uap-x64   - uap-arm   - netcoreapp-x86   - netcoreapp-x64   - netcoreapp-arm64   - netcoreapp-arm [Mission Control Build Info](https://mc.dot.net/#/product/netcore/prodconmaster/source/prodcon~2Fcorefx~2Fmaster~2F/type/build~2Fproduct~2F/build/20180413.02/workItem/Orchestration/analysis/external/Link)
29093	area-System.Security	Add private, parameterless constructor	Most serializers require classes to have parameterless constructors. During de-serialization an empty class is created and then populated. By keeping the constructor private misuse should be minimal.
29091	area-System.Net	Remap EBADF in SocketErrorPal.Unix.cs to OperationAborted	"Due to the way async operations on Socket are implemented on Unix, it's possible that a socket file descriptor could be closed and subsequent calls to methods like recvmsg as part of the async operation could report EBADF, meaning ""The argument sockfd is an invalid descriptor.""  As part of our PAL layer, we currently map this error to SocketError.InvalidArgument, as that's the most direct equivalent, but in practice since this only ever occurs when the socket file descriptor was valid and has been closed to become invalid, it's more logically associated with OperationAborted, with the operation having been effectively canceled due to the socket having been closed.  This matters for two reasons: 1) the resulting error message is more informative to the developer to help track down the cause (""Invalid argument"" can be misleading), and 2) code in various places checks for OperationAborted as a signal of cancellation / socket closure and would end up missing these cases.  This commit just updates that mapping.    Fixes https://github.com/dotnet/corefx/issues/29075  Related to https://github.com/dotnet/corefx/issues/24677  cc: @tmds, @geoffkizer, @benaadams "
29089	area-System.Collections	Microsoft.Windows.Compatibility breaks Dictionary binary deserialization	I have .NET Core 2.0 project with following code:  ```csharp      public class Program {          static void Main(string[] args) {              using (var stream = new MemoryStream()) {                  var formatter = new BinaryFormatter();                  formatter.Serialize(stream, new Dictionary<string, string>());                  stream.Seek(0, SeekOrigin.Begin);                  formatter.Deserialize(stream);              }          }      }  ```  When run, it works fine. But when I add Microsoft.Windows.Compatibility as dependency, deserialization fails with exception:  ```  Unhandled Exception: System.InvalidCastException: Object must implement IConvertible.     at System.Convert.ChangeType(Object value, Type conversionType, IFormatProvider provider)     at System.Runtime.Serialization.FormatterConverter.Convert(Object value, Type type)     at System.Runtime.Serialization.SerializationInfo.GetValue(String name, Type type)     at System.Collections.Generic.Dictionary`2.OnDeserialization(Object sender)     at System.Runtime.Serialization.ObjectManager.RaiseDeserializationEvent()     at System.Runtime.Serialization.Formatters.Binary.ObjectReader.Deserialize(BinaryParser serParser, Boolean fCheck)     at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream serializationStream, Boolean check)     at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream serializationStream)     at ConsoleApp1.Program.Main(String[] args) in C:\devel\core\ConsoleApp1\Program.cs:line 13  ```  Just added as dependency, not used for anything (yet). And breaks the deserialization of Dictionary<string,string>.    I was able to narrow the package to Microsoft.Windows.Compatibility.Shims - add just this one as dependency and it breaks.
29088	area-System.Memory	Replaced ReadOnlySequence unsafe casting to safe casting in Seek method	Replaced ReadOnlySequence unsafe casting to safe casting in Seek method. Part of #28920
29087	area-System.Net	Unhandled Exception: System.Net.Mail.SmtpException On Linux	"***smtp ehlo***    ```sh  $ telnet mail-proxy.mycompanydomain.com 25  Trying xx.xx.xx.xx...  Connected to mail-proxy.mycompanydomain.com.  Escape character is '^]'.  220 mail.mycompanydomain.com Microsoft ESMTP MAIL Service ready at Fri, 13 Apr 2018 17:52:12 +0800  EHLO  250-mail.mycompanydomain.com Hello [xx.xx.xx.xx]  250-SIZE 209715200  250-PIPELINING  250-DSN  250-ENHANCEDSTATUSCODES  250-STARTTLS  250-AUTH GSSAPI NTLM LOGIN  250-8BITMIME  250-BINARYMIME  250 CHUNKING  ```    ***Stacktrace***    ```txt  Unhandled Exception: System.Net.Mail.SmtpException: Failure sending mail. ---> System.ComponentModel.Win32Exception: GSSAPI operation failed with error - An invalid status code was supplied (Cannot find KDC for realm ""mycompanydomain.com"").     at System.Net.Security.NegotiateStreamPal.AcquireCredentialsHandle(String package, Boolean isServer, NetworkCredential credential)     at System.Net.NTAuthentication.Initialize(Boolean isServer, String package, NetworkCredential credential, String spn, ContextFlagsPal requestedContextFlags, ChannelBinding channelBinding)     at System.Net.Mail.SmtpNegotiateAuthenticationModule.Authenticate(String challenge, NetworkCredential credential, Object sessionCookie, String spn, ChannelBinding channelBindingToken)     at System.Net.Mail.SmtpConnection.SetContextAndTryAuthenticate(ISmtpAuthenticationModule module, NetworkCredential credential, ContextAwareResult context)     at System.Net.Mail.SmtpConnection.GetConnection(String host, Int32 port)     at System.Net.Mail.SmtpTransport.GetConnection(String host, Int32 port)     at System.Net.Mail.SmtpClient.GetConnection()     at System.Net.Mail.SmtpClient.Send(MailMessage message)     --- End of inner exception stack trace ---     at System.Net.Mail.SmtpClient.Send(MailMessage message)  ```    ***dotnet --info***    ```sh  $ dotnet --info  .NET Command Line Tools (2.1.300-preview1-008174)    Product Information:   Version:            2.1.300-preview1-008174   Commit SHA-1 hash:  b8df89a54f    Runtime Environment:   OS Name:     debian   OS Version:  9   OS Platform: Linux   RID:         linux-x64   Base Path:   /usr/share/dotnet/sdk/2.1.300-preview1-008174/    Microsoft .NET Core Shared Framework Host      Version  : 2.1.0-preview1-26216-03    Build    : f2c3216183d20416568a4bbf5bb7d153e826f153  ```    ***Program.cs***    ```cs  using System;  using System.Net;  using System.Net.Mail;    namespace ConsoleApp1  {      class Program      {          static void Main(string[] args)          {              var host = ""mail-proxy.mycompanydomain.com"";              var user = ""user@mycompanydomain.com"";              var password = ""xxxxxxxxxxxxx"";              var from = ""fromuser@mycompanydomain.com"";              var to = ""touser@mycompanydomain.com"";                var client = new SmtpClient(host, 25);              client.UseDefaultCredentials = true;                  client.Credentials = new NetworkCredential(user, password);              //  client.Credentials = new NetworkCredential(user, password).GetCredential(host, 25, ""NLTM"");                var msg = new MailMessage(from, to);              msg.Subject = ""Hello 世界"";              msg.Body = ""Hello World"" + DateTime.Now.ToString();                client.Send(msg);                  Console.WriteLine(""Hello World!"");          }      }  }    "
29085	area-System.Diagnostics	.Net Core Process.Start on Linux	"I am facing the following issue when running my .Net Core 2.0 application on Linux as a SCD.    I am attempting to start another .Net Core project (Console Application) though the Aspnet Core project.   The exception below is thrown when I call `Start()`.  The permissions on the file and folders have been set to `777` but still no luck.    Exception:  ```  System.ComponentModel.Win32Exception (0x80004005): Permission denied     at Interop.Sys.ForkAndExecProcess(String filename, String[] argv, String[] envp, String cwd, Boolean redirectStdin, Boolean redirectStdout, Boolean redirectStderr, Int32& lpChildPid, Int32& stdinFd, Int32& stdoutFd, Int32& stderrFd)     at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)     at System.Diagnostics.Process.Start()     at Ombi.Schedule.Jobs.Ombi.OmbiAutomaticUpdater.<Update>d__18.MoveNext() in C:\projects\requestplex\src\Ombi.Schedule\Jobs\Ombi\OmbiAutomaticUpdater.cs:line 218  ```    Code to reproduce:    ```  var updaterFile = Path.Combine(Path.GetDirectoryName(Assembly.GetEntryAssembly().Location),       ""TempUpdate"", $""Ombi.Updater"");    var start = new ProcessStartInfo  {      UseShellExecute = false,      CreateNoWindow = true,      FileName = updaterFile,      Arguments = GetArgs(settings), // This just gets some command line arguments for the app i am attempting to launch      WorkingDirectory = Path.Combine(Path.GetDirectoryName(Assembly.GetEntryAssembly().Location), ""TempUpdate""),  };    using (var proc = new Process { StartInfo = start })  {      proc.Start();  }  ```"
29084	area-System.Memory	Re-enable test to use span in a fixed statement after we upgrade to C# 7.3	See https://github.com/dotnet/corefx/pull/29003 for details    Requires a newer roslyn compiler as well (2.8.0-beta4-62810-06 or higher).
29081	area-System.Net	Address some SocketsHttpHandler feedback	- We were using WriteAsciiStringAsync in one place we shouldn't have been.  Change it to WriteStringAsync.  - We were potentially overflowing in a multiplication on MaxResponseHeadersLength if it was set to a very large value.  Changed it to use long multiplication and to cap the max length at int.MaxValue.  - We were accidentally using DateTimeOffset.Now instead of UtcNow when getting the current time during stale pool removal.  Change to UtcNow.  - We had an unnecessary/unreachable catch block.  Remove it.  - In a race condition where the handler and thus its pool manager was disposed while the cleaning timer callback was in flight (either already queued or already running), we could potentially dispose of the timer and then the callback attempt to change the timer and incur an ObjectDisposedException that would go unhandled on a thread pool thread.  One fix would be to track disposal under the same lock that's used to mutate the cleaning timer, but that incurs the cost of tracking disposal and taking a lock on disposal in order to deal with a rare race condition (that we've never actually seen happen).  Instead, I opt to simply catch and eat any ODEs that occur.  - If either of the connection lifetime values are set at 0, we avoid putting connections back into a pool and thus also avoid creating the cleaning timer.  But we're still putting the created pool into the pools collection, which in theory in an extreme case could be a leak.  The fix is simply to not store the pool into the pools in this case.    cc: @GrabYourPitchforks, @geoffkizer, @davidsh
29080	area-System.Net	HttpClient.Post sends separate TCP packets for Header and Body	"This is a general issue with .net I am assuming.    Using Microsoft Message Analyzer, I can see that post data using the HttpClient is being sent in two tcp packets. One for the header, then one for the post body. This data could easily fit into one packet, however it is being split into two. I have explicitly turned on nagling and expect 100 continue off using the ServicePointManager, though, it doesn't seem to help.    ```  public void TestRequest()      {          var uri = new Uri(""http://www.webscantest.com/"");          ServicePointManager.Expect100Continue = false;          ServicePointManager.UseNagleAlgorithm = true;          var p = ServicePointManager.FindServicePoint(uri);          p.Expect100Continue = false;          p.UseNagleAlgorithm = true;          HttpClient client = new HttpClient();          client.DefaultRequestHeaders.Add(""Connection"", ""close"");            var values = new Dictionary<string, string>          {              { ""thing1"", ""hello"" },              { ""thing2"", ""world"" }          };            var content = new FormUrlEncodedContent(values);            var response = client.PostAsync(""http://www.webscantest.com/"", content, CancellationToken.None).Result;      }  ```  I raised this on [stackoverflow](https://stackoverflow.com/questions/49727720/c-sharp-httpclient-post-force-single-packet/49788340#49788340) and did some research to find the problem. "
29078	area-Meta	Collapse leftover AsSpan().Slice(...) into AsSpan(...)	Leftover from https://github.com/dotnet/corefx/issues/27330    Mainly updating usage pattern in tests.    cc @tarekgh 
29077	area-System.Memory	Remove Memory.CreateFromPinnedArray from the ref assemblies	Leftover cleanup that fixes https://github.com/dotnet/corefx/issues/28954    Depends on https://github.com/dotnet/coreclr/pull/17532 going in first (along with the mirror PR) for NETFX.    Related PR: https://github.com/dotnet/corefx/pull/28992
29076	area-System.Data	Add tests for System.Data.Common.RowUpdatedEventArgs and RowUpdatingEventArgs	I wanted to contribute something, so I tried to add some unit tests. I'll probably add more after this, but I want to know if what I'm doing is correct before continuing :)
29075	area-System.Net	AwaitableSocketAsyncEventArgs: Strange error message	Odd error message on Kestrel Ubuntu 16.04 Release Build CI https://github.com/aspnet/KestrelHttpServer/pull/2488#issuecomment-380946151  ```  RejectsConnectionsWhenLimitReached [FAIL]  Failed   RejectsConnectionsWhenLimitReached  Error Message:   System.IO.IOException : Unable to read data from the transport connection: Invalid argument.  ---- System.Net.Sockets.SocketException : Invalid argument  Stack Trace:     at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error)     at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.GetResult(Int16 token)     at System.IO.StreamReader.ReadBufferAsync()     at System.IO.StreamReader.ReadAsyncInternal(Memory`1 buffer, CancellationToken cancellationToken)     at Microsoft.AspNetCore.Testing.TaskExtensions.TimeoutAfter[T](Task`1 task, TimeSpan timeout, String filePath, Int32 lineNumber)     at Microsoft.AspNetCore.Testing.TestConnection.Receive(String[] lines) in /_/test/shared/TestConnection.cs:line 131     at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.ConnectionLimitTests.RejectsConnectionsWhenLimitReached() in /_/test/Kestrel.FunctionalTests/ConnectionLimitTests.cs:line 113  --- End of stack trace from previous location where exception was thrown ---  ```    /cc @stephentoub 
29074	area-System.Diagnostics	Mass spawning of processes slower than with mono	"Continuing discussion from #26291 :    I know it's in the enhancement department, but since I felt a significant difference testing mono and .Net Core I decided to time it.    The following snip takes 15s vs 10s in .Net Core 2.1 preview 2 vs. mono 5.8.1 :  ```c#  var stopwatch = Stopwatch.StartNew();  for (int i = 0; i < 10000; i++)          Process.Start(""echo"", i.ToString());  Console.WriteLine(""Took "" + stopwatch.Elapsed);  ```  33% slower launch times for processes seems significant to me.    (I'm on Darwin. You know best if this concerns all *nix)    [EDIT] Add C# syntax highlighting by @karelz"
29073	area-Meta	One more issue in ECMA-335	Hi!    I found an issue in ECMA-335 and want to know how you deal with it.  In III.3.6 bge.<length> section there are contradictory statements (https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf):  > The effect is identical to performing a clt.un instruction followed by a brfalse target    and    > The effect of a “bge target” instruction is identical to:  > * If stack operands are integers, then clt followed by a brfalse target  > * If stack operands are floating-point, then clt.un followed by a brfalse target    So there you can see a discrepancy in case of integer operands. Could you pls say me what did you do with this?  I was going to submit a report to someone interested in it (probably not you) but can't find the right persons.    cc: @tmat @nguerrera 
29072	area-System.Memory	Replaced ReadOnlySequence unsafe casting to safe casting in GetLength method	Replaced ReadOnlySequence unsafe casting to safe casting in GetLength method. Part of https://github.com/dotnet/corefx/issues/28920  
29069	area-System.Numerics	Suggestion: System.Math Performance improvement	In Performance Critical code System.Math is lacking following operators. (Natively supported by Gcc and Visual studios C++ compiler but slow in C#)    **Fused Multiply Add**  ```  x * y + z //Not natively compiled by compiler to single Instruction  Math.Fadd(x,y,z) //Math operator for that  ```    **Fused Division and Modulus with ValueTuple** (Handy for 1D array with 2D indices) updated for Valuetuple which is faster than out + return.  ```  //p.x = index / 3;  //p.y = index % 3;    var (x, y) = Math.DivRem(index,3)  //ValueTuple<int, int>DivMod(int a, int b)  ```    **Support for Float Square Root** (Very Handy and badly needed in 3d apps where we dont want to cast to double and back for a single sqrt)    `float root = Math.Sqrt(float nr)`  
29068	area-System.Security	Build failures in 'official/corefx/release/2.0.0-msrc/' - '20180411.01'	Test test test
29067	area-System.Memory	Build failures in 'prodcon/corefx/master/' - '20180411.05'	@dotnet-mc-bot commented on [Wed Apr 11 2018](https://github.com/dotnet/core-eng/issues/3237)  There were a set of failures during this build. Here is a summary of these:  * https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1582339    - **Agent:** DDVSOLINUXAGE010    - **Error log:** /root/corefx-1582339/Tools/ApiCompat.targets(0,0): error : MembersMustExist : Member 'System.Memory<T>..ctor(System.Buffers.MemoryManager<T>, System.Int32, System.Int32)' does not exist in the implementation but it does exist in t...    * https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1582341    - **Agent:** DDVSOLINUXAGE013    - **Error log:** /root/corefx-1582341/Tools/ApiCompat.targets(0,0): error : MembersMustExist : Member 'System.Memory<T>..ctor(System.Buffers.MemoryManager<T>, System.Int32, System.Int32)' does not exist in the implementation but it does exist in t...    * https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1582344    - **Agent:** DDVSOMACAGE008    - **Error log:** /Users/buildagent/agent/_work/0/s/corefx/Tools/ApiCompat.targets(0,0): error : MembersMustExist : Member 'System.Memory<T>..ctor(System.Buffers.MemoryManager<T>, System.Int32, System.Int32)' does not exist in the implementation bu...    
29065	area-System.Net	Http Client performance drop in preview-2	"@rahul10992 commented on [Thu Apr 12 2018](https://github.com/dotnet/core/issues/1437)  Hello. I was trying out HttpClient benchmarking for net core 2.1 and well, I am seeing a serious drop in the HttpClient provided in preview 2.    for simple Get requests between 2 Windows Server 2016 VMs set up with network acceleration in Azure,   1. for Preview-1 with the ""AppContext.SetSwitch(""System.Net.Http.UseManagedHttpClientHandler"", true);"" I get 75,000 requests/second  2. For preview-2 using the SocketsHttpHandler, the performance drops to 43,000 requests/second    Is there a reason for this performance drop?  "
29064	area-System.Security	SSlStream on OSX High Sierra throws AuthenticationException when certificate revocation checking is enabled and the server’s certificate extensions includes a CRL but not OCSP 	"**Overview**  A .Net Core 2.0 application running on OSX High Sierra cannot connect to a server using SSLStream with certificate revocation checking enabled. The server’s certificate has extensions for CRLs but not OCSP. If one builds this application on Linux or Windows, the application will connect (to the same server) without any problems. Additionally, using the same certificate chain to host a web server via openssl s_server, Safari is able to connect on OSX without any problems.    **Exception details**  AuthenticationException message: Remote certificate is invalid according to the validation procedure.   The sole X509ChainStatus in the X509Chain is on the leaf certificate: ""An incomplete certificate revocation check has occurred.""  The corresponding Apple error code is errSecIncompleteCertRevocationCheck (-67635) (https://developer.apple.com/documentation/security/errsecincompletecertrevocationcheck).    **Workaround**  1. If one can retarget the application to .NET Core 1.1 (which uses OpenSSL instead of the Apple Security Framework), the application will connect without problems. Note: the root certificate will have to be installed for OpenSSL.  2. An alternative is to disable certificate revocation checking in SSLStream, but this has security implications.    **Interesting observations**   1. The Apple result code is listed under ""OCSP result code"" (https://developer.apple.com/documentation/security/1542001-security_framework_result_codes), and the certificates I was using did not support OCSP.   2. However, when connecting to a server ""B"" whose certificate chain did support OCSP as well as CRLs, I was able to connect without any problems. For completeness's sake, Server B's certificate also had the following X509v3 extensions that the first server ""A"" did not: X509v3 Subject Alternative Name, X509v3 Key Usage, X509v3 Extended Key Usage, X509v3 Certificate Policies, Authority Information Access, CT Precertificate SCTs.    **Additional thoughts**  I am admittedly a little uncertain if the problem is on Apple's end: i.e. the Apple Security Framework has additional restrictions (compared to CNG and OpenSSL) on what it considers to be a well-formed chain. My only hint that indicates otherwise is that that Safari is able to connect a webserver utilizing the same set of certificates.     **Reproduction steps**     Create a chain of certificates that mimics a certificate signed by DigiCert SHA2 Secure Server CA.    The following are the steps I used:   1. Create a self-signed root CA such that ""X509v3 Key Usage: Digital Signature, Certificate Sign, CRL Sign"".  2. Generate a CRL for the root CA, taking care that the CRL does _not_ have a X509v3 Issuing Distribution Point.  3. Create an intermediate certificate authority with the same key usage as the root CA and with a X509v3 Issuing Distribution Point (IDP) pointing to the CRL generated in step 2.  4. Generate a CRL for the intermediate CA. This CRL should contain an X509v3 IDP.  5. Create the server certificate ""A"" signed by the intermediate CA. This certificate should have an X509v3 IDP that matches the CRL generated in step 4.   6. Install the root CA certificate. On OSX, I used Keychain Access, adding the certificate to the login keychain. (I also tried adding the certificate to the system keychain).  7. Host a test server using openssl s_server  ""openssl s_server -port 44330 -key keyA.pem -cert certA.pem -CAfile intermediatecert.pem""   8. Create a test app that connects to the OpenSSL s_server using SslStream, calling AuthenticateAsClient with checkCertificateRevocation: true.     On Windows and Linux (after installing the root CA certificate), the  test app will connect without any problems, whereas the application will fail to connect on OSX.  However, as previously noted, if you use the same certificate to host a webserver (e.g.   ""openssl s_server -port 44330 -key keyA.pem -cert certA.pem -CAfile intermediatecert.pem -www""),   then Safari will be able to connect to that webserver without any problems.    I have reproduced this with the app targeting .NET Core 2.0 as well as 2.1 preview, using .NET Core SDK 2.1.300-preview1-008174. This also occurs when using SDK 2.1.104 (targeting .NET Core 2.0 only).    I've included my test app below for convenience:    ```c#  // Program.cs  using System;  using Ssl;  namespace crl_test_app {      class Program {          static void Main(string[] args) {              string serverCertificateName = ""tyche"";              string machineName = ""tyche"";              while (true) {                  Console.WriteLine(""Press enter to connect and send a message."");                  Console.ReadLine();                  Console.WriteLine(""Attempting to connect..."");                  SslTcpClient.RunClient(machineName, serverCertificateName);              }          }      }  }    // Ssl.cs  using System;  using System.IO;  using System.Linq;  using System.Net.Security;  using System.Net.Sockets;  using System.Security.Authentication;  using System.Security.Cryptography.X509Certificates;  using System.Text;    namespace Ssl {      public class SslTcpClient {             // Purely for debugging purposes, not needed          public static bool ValidateServerCertificate(                  object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) {              var errors = chain.ChainStatus.Aggregate("""", (str, x) => str + "","" + x.Status);              Console.WriteLine($""SslPolicyError: {sslPolicyErrors} {errors}"");                 foreach (var item in chain.ChainElements) foreach (var elemStatus in item.ChainElementStatus)                 Console.WriteLine(item.Certificate.Subject + ""->"" + elemStatus.StatusInformation);              return true;          }             public static void RunClient(string machineName, string serverName)  {              var socket = new Socket(SocketType.Stream, ProtocolType.Tcp);              socket.Connect(serverName, 44330);              Console.WriteLine(""Client connected."");                  using (var stream = new NetworkStream(socket)) {                                  var sslStream = new SslStream(innerStream: stream, leaveInnerStreamOpen: false,                      userCertificateValidationCallback: ValidateServerCertificate);                            try {                      sslStream.AuthenticateAsClientAsync(serverName, new X509Certificate2Collection(),                          SslProtocols.Tls12, checkCertificateRevocation: true).GetAwaiter().GetResult();                  } catch (AuthenticationException e) {                      Console.WriteLine(""Exception: {0}"", e.Message);                      if (e.InnerException != null)                          Console.WriteLine(""Inner exception: {0}"", e.InnerException.Message);                         Console.WriteLine(""Authentication failed - closing the connection."");                          return;                  }                     var w = new StreamWriter(sslStream);                  w.WriteLine(""Hello from the client."");                  w.Flush();                                      var serverMessage = ReadLine(new StreamReader(sslStream));                  Console.WriteLine(""Server says: {0}"", serverMessage);                  Console.WriteLine(""Press enter to close the connection."");                  Console.ReadLine();                               }                 socket.Dispose();              Console.WriteLine(""Client closed."");          }             static string ReadLine(StreamReader reader) => reader.ReadLine();             static void SendMessage(SslStream sslStream, string s=""Hello from the client."") =>              sslStream.Write(Encoding.UTF8.GetBytes(s));          }  }  ```  [edit: whitespace, typos]  [EDIT] Add C# syntax highlighting by @karelz  "
29063	area-System.Net	[Question] Give a timeout to async socket on .net core (linux)	_From @316181444 on April 12, 2018 4:19_  How set a timeout for Socket.ConnectAsync, Socket.SendAsync, Socket.ReceveAsync APIs?    Thanks.  _Copied from original issue: dotnet/coreclr#17525_
29061	area-System.Security	FriendlyName not supported in Unix	it might be worth to mention from the [Cross-Platoform Cryptography doc](https://github.com/dotnet/corefx/blob/master/Documentation/architecture/cross-platform-cryptography.md) that FriendlyName(s) are not supported in Unix.    provided you try to use Friendly Names in Unix-based systems it will result in this:  System.PlatformNotSupportedException : The FriendlyName value cannot be set on Unix.     
29060	area-System.Reflection	Proposed: Add `System.Reflection.NullReference` sentinel type.	"# Proposed Surface Area    ```  namespace System.Reflection  {      public sealed class NullReference      {          public static readonly NullReference Value = new NullReference();      }  }  ```    ## Purpose    To be used as the return value when Reflection Invoke is used to invoke a method or property returning a `ref` and the method returns a null reference. Invoking ref-return methods is not supported at this time but we already an in-progress issue to make it supported (https://github.com/dotnet/corefx/issues/15960)    Could also be used by existing Reflection Invoke api to pass null references as arguments.    # Alternatives considered    ### Return `Missing.Value` instead.    Pros: Saves us a little surface area.    Cons: This has received significant pushback from @vsadov:    > Missing.Value is used for many other purposes. DLR and VB latebinders, for example use Missing.Value to propagate the fact that user did not pass a particular argument to expected optional parameters.  > Returning Missing.Value in a case of a failure will lead to situations where it will be impossible to tell whether the invocation failed or succeeded and returned a Missing.Value.  >     Indeed, it is overloading a sentinel with a defined meaning (""caller chose not to supply optional parameter"") for something completely different.      ### Throw `NullReferenceException`    Pros: No ambiguity, for this particular api, this represents an attempt to dereference a null reference which is a programming error and there is precedent for `NullReferenceException` here.    Cons: Reflection Invoke throws all programming error-related exception before invoking the target method. This would be a new precedent as the exception would be thrown after a successful call of the target method."
29059	area-System.Runtime	"double.TryParse of ""0,12"" incorrectly returns true with result of 0.12."	"When executing the following the return value is true (parsing succeeded) and the number value becomes 0.12:    `double.TryParse(""0,12"", NumberStyles.Number, CultureInfo.GetCultureInfo(""en-US""), out number)`    The input is not a valid US number since the comma proceeded by a zero and followed by only 2 digits. US numbers with a comma are only valid if the integer part is a 1 to 3 digits (but not a sequence of zero digits) followed by zero or more groups of 3 digits separated by commas.    VisualStudio 2015 Version 14.0.25431.01 Update 3  Microsoft .NET Framework  Version 4.7.02556  Build for x64 and .Net 4.5    Installed Version: Community"
29058	area-System.Memory	I removed ReadOnlySequence common tests from factory tests	I removed ReadOnlySequence common tests from factory tests. They are duplicates of comment tests and they does not use factory.
29057	area-System.Security	Add support for secp256k1	corefx/src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/ECCurve.NamedCurves.cs
29056	area-System.Diagnostics	StackTrace's LineNumber and FileName is empty on net461	When running the following code:    ```  StackFrame stackFrame = new StackTrace(true).GetFrames().Last();  var lineNumber = stackFrame.GetFileLineNumber();  var fileName = stackFrame.GetFileName();  ```  In the following target frameworks `<TargetFrameworks>netcoreapp2.0;net461</TargetFrameworks>`:    The line number and file name are empty when the target is net461, but when the target is netcoreapp2.0 the line number and file name have the correct values.
29055	area-System.Net	Server WebSocket packet fragmentation error	Found this while testing web socket server on Windows platform.  Attached test project reproduces error on Widows platform, but worked on Linux.    [WSTest.zip](https://github.com/dotnet/corefx/files/1902389/WSTest.zip)  
29054	area-System.Memory	Added ReadOnlySequence Slice tests and fixed Slice bounds checking issues	I added ReadOnlySequence Slice tests and fixed Slice bounds checking issues.
29052	area-System.Diagnostics	Test failure: System.Diagnostics.Tests.ProcessStartInfoTests/Verbs_GetWithSubkeys_ReturnsEmpty	"Opened on behalf of @Sunny-pu  The test `System.Diagnostics.Tests.ProcessStartInfoTests/Verbs_GetWithSubkeys_ReturnsEmpty` has failed.  Assert.Equal() Failure\r     Expected: String[] [\""verb1\"", \""verb2\""]\r     Actual:   String[] []          Stack Trace:             at System.Diagnostics.Tests.ProcessStartInfoTests.Verbs_GetWithSubkeys_ReturnsEmpty() in E:\A\_work\16\s\corefx\src\System.Diagnostics.Process\tests\ProcessStartInfoTests.cs:line 656        at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetV(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean isTargetThisCall)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566      Build : Master - 20180412.02 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x64   - Release  Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Filc~2F/build/20180412.02/workItem/System.Diagnostics.Process.Tests/analysis/xunit/System.Diagnostics.Tests.ProcessStartInfoTests~2FVerbs_GetWithSubkeys_ReturnsEmpty"
29051	area-System.Memory	Remove use of Unsafe code in ReadOnlySequence GetFirstBuffer (and optimize)	Here are the results if we continue to use Unsafe.As to cast (mainly to showcase performance improvement):  ![image](https://user-images.githubusercontent.com/6527137/38654385-e0550822-3dc3-11e8-98df-7419d849720b.png)    cc @pakrym, @AlexRadch, @davidfowl, @KrzysztofCwalina, @krwq 
29050	area-System.Net	Optimize proxy PAC file discovery process for SocketsHttpHandler	"This PR will reduce the calls to WinHTTP GetProxyForUrl() if a previous call recently discovered  no PAC file within a certain timeframe. We call this API when ""Automatically detect settings""  is turned on. The default configuration on Windows has this proxy setting always turned on. This  is ironic given that most network environments don't have a PAC file on the network. So, it's  important to try to optimize this common case on customers' networks.    Initial testing shows at least a 2x speed improvement with these changes. I used simple  constructs of using DateTime and TimeSpan comparisons instead of trying to further optimize this  using Environment.Ticks. Looking at the performance numbers, there is not any significant  improvement in speed compared with the best case of ""Automatically detect settings"" being turned  OFF in the first place.    I did not use any locking mechanisms since those would drag down performance. In the worst case,  any race condition would mean we might call GetProxyForUrl() an extra time. But since we're only  filtering on ERROR_WINHTTP_AUTODETECTION_FAILED, it is unlikely to actually change over time.  That particular error means that the WPAD protocol was able to complete on the network, but the  answer discovered is that there is no PAC file registered on the network.    Fixes #28543"
29049	area-System.IO	System.IO.File.WriteAllBytes hangs when the file to overwrite is an already existing FIFO	"In Linux,  `System.IO.File.WriteAllBytes` method seems to hang when the given file path is an already existing FIFO. I believe such a silent freezing of the program should be avoided.    I observed this issue in Ubuntu 16.04.4 and Debian 9.1 (both x64). I installed  dotnet-sdk-2.1.103 package, and used F#. If you have a problem in reproducing it, please let me know.    ```  jason@ubuntu:~/FIFOTest$ ls  FIFOTest.fsproj  Program.fs    jason@ubuntu:~/FIFOTest$ cat Program.fs   open System  open System.IO    [<EntryPoint>]  let main argv =      System.IO.File.WriteAllBytes(""bar"", [|0uy|])      0 // return an integer exit code    jason@ubuntu:~/FIFOTest$ dotnet build  ...  jason@ubuntu:~/FIFOTest$ mkfifo bar  jason@ubuntu:~/FIFOTest$ dotnet run bin/Debug/netcoreapp2.0/FIFOTest.dll  (hangs)  ```  "
29048	area-System.ComponentModel	System.ComponentModel.TypeConverterTests.SizeFConverterTests failing for locale en-DE	"```xml  <test name=""System.ComponentModel.TypeConverterTests.SizeFConverterTests.ConvertFromString(width: 3,402823E+38, height: 3,402823E+38)"" type=""System.ComponentModel.TypeConverterTests.SizeFConverterTests"" method=""ConvertFromString"" time=""1.3487067"" result=""Fail"">    <failure exception-type=""System.ArgumentException"">      <message><![CDATA[System.ArgumentException : 40282347e+38 is not a valid value for Single.\r\nParameter name: value\r\n---- System.OverflowException : Value was either too large or too small for a Single.]]></message>      <stack-trace><![CDATA[   at System.ComponentModel.BaseNumberConverter.ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, Object value) in D:\DEV\corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\BaseNumberConverter.cs:line 85     at System.ComponentModel.TypeConverter.ConvertFromString(ITypeDescriptorContext context, CultureInfo culture, String text) in D:\DEV\corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeConverter.cs:line 107     at System.Drawing.SizeFConverter.ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, Object value) in D:\DEV\corefx\src\System.ComponentModel.TypeConverter\src\System\Drawing\SizeFConverter.cs:line 61     at System.ComponentModel.TypeConverter.ConvertFromString(String text) in D:\DEV\corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\TypeConverter.cs:line 91     at System.ComponentModel.TypeConverterTests.SizeFConverterTests.ConvertFromString(Single width, Single height) in D:\DEV\corefx\src\System.ComponentModel.TypeConverter\tests\Drawing\SizeFConverterTests.cs:line 234  ----- Inner Stack Trace -----     at System.Number.ParseSingle(ReadOnlySpan`1 value, NumberStyles options, NumberFormatInfo numfmt) in E:\A\_work\104\s\src\mscorlib\shared\System\Number.Parsing.cs:line 793     at System.Single.Parse(String s, NumberStyles style, IFormatProvider provider) in E:\A\_work\104\s\src\mscorlib\shared\System\Single.cs:line 288     at System.ComponentModel.SingleConverter.FromString(String value, NumberFormatInfo formatInfo) in D:\DEV\corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\SingleConverter.cs:line 39     at System.ComponentModel.BaseNumberConverter.ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, Object value) in D:\DEV\corefx\src\System.ComponentModel.TypeConverter\src\System\ComponentModel\BaseNumberConverter.cs:line 80]]></stack-trace>    </failure>  </test>  ```    The problem here seems to be that german numbers use the comma (`,`) as a decimal separator instead of a dot (`.`):    https://github.com/dotnet/corefx/blob/73214ff6da537eb9dcf522406ef1d0470b88db88/src/System.ComponentModel.TypeConverter/src/System/Drawing/SizeFConverter.cs#L55-L62    `text` is the input string to be converted.   In `en-us`, the decimal point is represented by `.` and `ListSeparator` is `,`   -> `text == ""3.402823E+38, 3.402823E+38""`    In `de-de` (the ""normal"" german locale), the decimal point is `,` and `ListSeparator` is `;`   -> `text == ""3,402823E+38; 3,402823E+38""`    Since this locale mixes the two, unfortunately the two are the same:  `text == ""3,402823E+38, 3,402823E+38""`    This seems to break the code since `tokens` is not splitting the numbers correctly here, leading to the exception."
29047	area-Serialization	set s_checkDeserializeAdvances=true	In [26947](https://github.com/dotnet/corefx/pull/26947), we set s_checkDeserializeAdvances=false In full framework, we can set it to true through config, but we cannot do it in core.  We need investigate if we just turn it on . A full test pass in full framework pass when set this value to true. Need well understand this impact if to set this value to true.
29040	area-System.Net	Regression in synchronous socket operations when timeout set on Unix	"Likely due to https://github.com/dotnet/corefx/pull/22588.    Repro:  ```  using System;  using System.Diagnostics;  using System.IO;  using System.Net;  using System.Net.Sockets;  using System.Threading.Tasks;    class Repro  {      static void Main()      {          Console.WriteLine($""(Framework: {Path.GetDirectoryName(typeof(object).Assembly.Location)})"");            using (var listener = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp))          using (var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp))          {              listener.Bind(new IPEndPoint(IPAddress.Loopback, 0));              listener.Listen(1);                client.Connect(listener.LocalEndPoint);              using (Socket server = listener.Accept())              {                  server.ReceiveTimeout = 10_000;                  client.ReceiveTimeout = 10_000;                  server.SendTimeout = 10_000;                  client.SendTimeout = 10_000;                    var buffer = new byte[1];                    var sw = new Stopwatch();                  while (true)                  {                      long mem = GC.GetAllocatedBytesForCurrentThread();                      sw.Restart();                        const int Iters = 30_000;                      Task t = Task.Run(() =>                      {                          for (int i = 0; i < Iters; i++)                          {                              server.Send(buffer);                              server.Receive(buffer);                          }                      });                      for (int i = 0; i < Iters; i++)                      {                          client.Receive(buffer);                          client.Send(buffer);                      }                      t.Wait();                        sw.Stop();                      mem = GC.GetAllocatedBytesForCurrentThread() - mem;                        Console.WriteLine($""Time: {sw.Elapsed.TotalSeconds:F4}\t Bytes: {mem:N0}"");                    }              }          }      }  }  ```  results for me in output like:  ```  stoub@SToubUbuntu17102:~/Perf21$ dotnet run -c Release -f netcoreapp20  (Framework: /usr/share/dotnet/shared/Microsoft.NETCore.App/2.0.0)  Time: 1.5177     Bytes: 4,928  Time: 1.5099     Bytes: 64  Time: 1.4843     Bytes: 64  Time: 1.4977     Bytes: 64  Time: 1.5022     Bytes: 64  Time: 1.6063     Bytes: 64  Time: 1.5047     Bytes: 64  Time: 1.5376     Bytes: 64  Time: 1.4493     Bytes: 64  Time: 1.5510     Bytes: 64  ^C  stoub@SToubUbuntu17102:~/Perf21$ dotnet run -c Release -f netcoreapp21  (Framework: /usr/share/dotnet/shared/Microsoft.NETCore.App/2.1.0-preview3-26404-01)  Time: 3.2621     Bytes: 4,564,568  Time: 2.7214     Bytes: 4,559,144  Time: 2.9079     Bytes: 4,558,424  Time: 2.6705     Bytes: 4,528,376  Time: 2.5066     Bytes: 4,464,144  Time: 2.2573     Bytes: 4,458,912  Time: 2.0995     Bytes: 4,451,288  Time: 2.2442     Bytes: 4,343,672  Time: 2.1785     Bytes: 4,428,208  Time: 2.0658     Bytes: 4,465,600  ^C  stoub@SToubUbuntu17102:~/Perf21$  ```    Related to https://github.com/dotnet/corefx/issues/27605  Related to https://github.com/dotnet/corefx/issues/29029    cc: @geoffkizer "
29039	area-System.Memory	Remove use of Unsafe code in ReadOnlySequence TryGet (and optimize)	Part of https://github.com/dotnet/corefx/issues/28920    ![image](https://user-images.githubusercontent.com/6527137/38640370-eb60818c-3d88-11e8-8b77-eb61a215a687.png)    cc @pakrym, @AlexRadch, @davidfowl, @KrzysztofCwalina, @stephentoub, @GrabYourPitchforks, @krwq 
29037	area-Infrastructure	CoreFx still builds packages that have desktop reference assemblies	Related https://github.com/dotnet/corefx/issues/23830, part 3    We still have some packages that have reference assemblies in their ref folder.  We've found numerous tools that don't like this and shouldn't expect all those tools to get fixed.    As such, we need to tactfully remove ref folders, or use the implementation instead in these cases.  
29036	area-System.Net	DualModeConnectAsync_DnsEndPointToHost_Helper fails in CI with TrueException on OSX	From https://github.com/dotnet/corefx/pull/28992  OSX.1012.Amd64.Open-x64-Debug  System.Net.Sockets.Tests.DualModeConnectAsync/DualModeConnectAsync_DnsEndPointToHost_Helper(listenOn: ::, dualModeServer: True)  https://mc.dot.net/#/user/ahsonkhan/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/95b8f31c8f84213f3192a6b9d96e8b2ecdb2dcfe/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.DualModeConnectAsync~2FDualModeConnectAsync_DnsEndPointToHost_Helper(listenOn:%20::,%20dualModeServer:%20True)    ```text  Unhandled Exception of Type Xunit.Sdk.TrueException  Message :  Timed out while waiting for connection  Expected: True  Actual:   False  Stack Trace :     at System.Net.Sockets.Tests.DualModeConnectAsync.DualModeConnectAsync_DnsEndPointToHost_Helper(IPAddress listenOn, Boolean dualModeServer) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Sockets/tests/FunctionalTests/DualModeSocketTest.cs:line 588  ```
29035	area-Infrastructure	Consider pinning the C# language version to 7.2 instead of latest	We are currently using latest (in our release/2.1 branch). Should it be pinned to C# 7.2 instead?    https://github.com/dotnet/corefx/blob/cb372752e0cc03123459f57484ec2ea2c40cc85b/dir.props#L231    cc @joperezr, @weshaggard, @GrabYourPitchforks, @joshfree, @danmosemsft, @leecow  
29033	area-System.IO	bottom part of serial port support on Unix	This is part of original #28415 after addressing feedback. We publish System.IO.Ports as separate package so we can iterate on upper parts later.     I'm at the point where I can run Serial port tests and I still get 20-30 failures (out of few hundred) depending in what HW I uses. The upper part still may need some polishing so as the test suite.     In general issues seems to be in two areas:  - discarding sent data when using USB/Serial adapter does not work well. That seems to be know limitation with Linux drivers. (or possibly USB)  - manipulating buffer sizes does not work as on Windows. That breaks tests.      
29032	area-System.Memory	System.MissingMethodException when using 4.5.0-preview2-* library with master SDK	Valid repro: [DirectoryRepro.zip](https://github.com/dotnet/corefx/files/1899838/DirectoryRepro.zip)    Execute repro with `dotnet run -c Release`.    ```  Unhandled Exception: System.MissingMethodException: Method not found: 'System.ReadOnlySpan`1<Char> System.MemoryExtensions.AsSpan(System.String)'.     at System.IO.Enumeration.FileSystemEnumerableFactory.NormalizeInputs(String& directory, String& expression, EnumerationOptions options)     at System.IO.Directory.InternalEnumeratePaths(String path, String searchPattern, SearchTarget searchTarget, EnumerationOptions options)     at DirectoryRepro.Program.Main() in /tmp/test4/Program.cs:line 9  ```    I reproduced it on Windows as well as Linux. This issue did not happen previously with using 4.5.0-preview1-* library also on latest master SDK. I suspect some API incompatibility (probably not in the library being pulled, but one of its dependencies). If this is intended then how we're expected to use this library with latest master SDK?    Thank you in advance.    ```  .NET Core SDK (reflecting any global.json):   Version:   2.1.300-preview3-008443   Commit:    1e2e8138b9    Runtime Environment:   OS Name:     debian   OS Version:   OS Platform: Linux   RID:         debian-x64   Base Path:   /opt/dotnet/sdk/2.1.300-preview3-008443/    Host (useful for support):    Version: 2.1.0-preview3-26404-01    Commit:  1b1a652c15    .NET Core SDKs installed:    2.1.300-preview3-008443 [/opt/dotnet/sdk]    .NET Core runtimes installed:    Microsoft.AspNetCore.All 2.1.0-preview2-30431 [/opt/dotnet/shared/Microsoft.AspNetCore.All]    Microsoft.AspNetCore.App 2.1.0-preview2-30431 [/opt/dotnet/shared/Microsoft.AspNetCore.App]    Microsoft.NETCore.App 2.1.0-preview3-26404-01 [/opt/dotnet/shared/Microsoft.NETCore.App]  ```
29031	area-System.Net	Simplify sspicli interop marshaling	This makes it both faster and more AOT friendly    Contributes to https://github.com/dotnet/corert/issues/5674
29030	area-System.Memory	Dedup FormattingHelpers.cs / FormattingHelpers.CountDigits.cs	These routines had been copy-and-pasted into this file in coreclr to enable similar optimizations there.  Now that the shared file has flowed back to corefx, dedup.    cc: @ahsonkhan 
29029	area-System.Net	Synchronous socket methods on Unix requiring extra thread	"When just using synchronous methods on a Socket (e.g. Socket.Receive), the calls pass through to the corresponding synchronous methods in the OS (e.g. recvmsg)    However, when an asynchronous operation is issued on a Socket, it puts the underlying socket into non-blocking mode, and due to race conditions that would otherwise result, the socket is left in non-blocking mode for the remainder of its existence.  That means that subsequent synchronous calls to methods on Socket end up taking a sync-over-async path, where it initiates the operation and then blocks on an event that'll be signaled by the event loop when the operation completes.    In .NET Core 2.0 and earlier, that signaling took place on the event loop itself, e.g. with the event loop:  https://github.com/dotnet/corefx/blob/665a428f353ad7c18a59b8d76ac6d4235038db3a/src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEngine.Unix.cs#L258  calling HandleEvents:  https://github.com/dotnet/corefx/blob/665a428f353ad7c18a59b8d76ac6d4235038db3a/src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEngine.Unix.cs#L287  which would in turn call Complete on the queue:  https://github.com/dotnet/corefx/blob/665a428f353ad7c18a59b8d76ac6d4235038db3a/src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncContext.Unix.cs#L1523  which would in turn call TryCompleteAsync on operations:  https://github.com/dotnet/corefx/blob/665a428f353ad7c18a59b8d76ac6d4235038db3a/src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncContext.Unix.cs#L440-L442  which for these ""synchronous"" operations would wake them up by setting the event:  https://github.com/dotnet/corefx/blob/665a428f353ad7c18a59b8d76ac6d4235038db3a/src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncContext.Unix.cs#L116-L120    In .NET Core 2.1 unfortunately, that signaling is now taking place via a queued work item.  The event loop still calls HandleEvents:  https://github.com/dotnet/corefx/blob/acb44e79ef7dc81817da9cf5f19c9819d0f491d1/src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncContext.Unix.cs#L800-L801  but HandleEvents queues a work item to do the actual processing:  https://github.com/dotnet/corefx/blob/acb44e79ef7dc81817da9cf5f19c9819d0f491d1/src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncContext.Unix.cs#L838-L840  That was done for performance reasons for actual async operations, but for these synchronous operations, it creates a problem.    Let's say the thread pool contained a single thread.  If that thread was used to make the ""synchronous"" call, then that thread will end up blocking waiting for the operation to complete.  For it to complete, a work item gets posted to the thread pool, and that work item needs to be processed, but all of the threads in the pool are currently blocked.  So we end up waiting for the thread pool's starvation mechanism to kick in and introduce another thread. Now let's say the thread pool contains 10 threads and 10 such operations are initiated, each of which does a ""synchronous"" operation.  Now all 10 threads are blocked, and 10 work items are going to be queued to unblock them.    This can result in seconds of delay for each such operation, plus unnecessary growth in the thread pool."
29028	area-System.Net	Default proxy issues	"@IeuanWalker commented on [Tue Apr 03 2018](https://github.com/dotnet/core/issues/1404)  # Default Proxy issues  Our organisation has a proxy and in previous versions on .NET (.net full framework), you can add the following to the web.config and the application will use your system's default proxy.    ```XML  <system.net>     <defaultProxy useDefaultCredentials=""true"" />  </system.net>  ```  I have tried a lot of different options but just cant seem to get anything to work.    ```csharp  string username = ""test"";  string password = ""test"";  WebProxy proxy = new WebProxy($""http://{username}:{password}@bluecoat.domain.gov.uk"", 8080)  {      Address = new Uri(""http://{username}:{password}@bluecoat.domain.gov.uk:8080""),      Credentials = new NetworkCredential(username, password)  };  HttpClientHandler clientHandler = new HttpClientHandler  {      Proxy = proxy,      UseProxy = true,      Credentials = new NetworkCredential(username, password)  };  var httpClient = new HttpClient(clientHandler);  ```    Any help would be greatly appreciated.    "
29027	area-System.Net	URI fails to find when # is present in local file path	**Steps to Reproduce:**    1)Create a directory with # in it's name.  2)Try to access the directory via URI and FileInfo(Uri)    **Expected Behavior:**  Able to access resources contained within the directory.    **Actual Behavior:**  URI fails to locate any files contained within the directory.
29026	area-System.Runtime	Expose `System.Runtime.CompilerServices.SkipLocalsInitAttribute`	### Rationale  C# is exposing new functionality which allows you to drop the `init` flag from a method's `.local` directive (see https://github.com/dotnet/roslyn/issues/25780 for more details).    It would be beneficial if CoreFX/NetStandard exposed this standard type so that users are not required to always manually define this type themselves.    ### Proposed API  ```  namespace System.Runtime.CompilerServices  {      [AttributeUsage(AttributeUsage.All, Inherited = false)] // TODO: Update AttributeUsage based on the compiler spec      public sealed class SkipLocalsInitAttribute : Attribute      {          public SkipLocalsInitAttribute()          {          }      }  }  ```  
29025	area-System.Xml	[System.Private.Xml.Linq] Remove SILVERLIGHT define	This change removes the SILVERLIGHT define from System.Private.Xml.Linq.  It makes the source code easier to import to [Mono] (https://github.com/mono/mono/issues/8122 ).
29024	area-System.Net	SslStream.ShutdownAsync doesn't take a CancellationToken	[`SslStream.ShutdownAsync`](https://github.com/dotnet/corefx/blob/master/src/System.Net.Security/src/System/Net/Security/SslStream.cs#L434) returns a `Task` but does not take a `CancellationToken`.     I found this to be odd as the other methods do take a `CancellationToken` and pass it to `Task.Factory.FromAsync`; I guess `ShutdownAsync` could behave the same way.    If this was not intentional (and `ShutdownAsync` should indeed take a `CancellationToken`), I'd be happy to create a PR which implements that.
29022	area-System.IO	Support appending foreign buffers to pipe without copy	Moved from https://github.com/dotnet/corefxlab/issues/2031    Foreign buffers are buffers not allocated with the Pipe MemoryPool.    Use-cases (by @Drawaes @mgravell @ReubenBond)  - Send the same data to multiple Pipes  - Pass existing data that is not related to pipelines  - Embed existing data (e.g. add header)    With the current API, these buffers are copied into buffers owned by the Pipe MemoryPool:    Challenges:  - The buffer usage needs to be tracked in order to know when it can be re-used.  - some Transports (e.g. RIO) may not be capable of sending foreign buffers. They should detect this and copy the data in an appropriate buffer.    CC @davidfowl 
29020	area-System.Memory	Faster ReadOnlySequence First and TryGet methods	I suggest faster ReadOnlySequence First and TryGet methods.  Performance tests:  ![screenshot_13](https://user-images.githubusercontent.com/6407980/38637175-93e3577e-3df4-11e8-9c3d-17c51fa2f96f.png)  
29019	area-System.Text	Test failure: System.Text.RegularExpressions.Tests.RegexCacheTests/Ctor_Cache_Promote_entries	Opened on behalf of @Sunny-pu  The test `System.Text.RegularExpressions.Tests.RegexCacheTests/Ctor_Cache_Promote_entries` has failed.  $BlockedFromReflection_0_225208da : Remote process failed with an unhandled exception.          Stack Trace:               Child exception:       System.NullReferenceException: Object reference not set to an instance of an object.        at System.Text.RegularExpressions.Tests.RegexCacheTests.GetCachedItemsNum() in E:\A\_work\6\s\corefx\src\System.Text.RegularExpressions\tests\Regex.Cache.Tests.cs:line 151        at System.Text.RegularExpressions.Tests.RegexCacheTests.<Ctor_Cache_Promote_entries>b__4_0() in E:\A\_work\6\s\corefx\src\System.Text.RegularExpressions\tests\Regex.Cache.Tests.cs:line 74        at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetO<System.Int32>(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtrForDynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566               Child process:       System.Text.RegularExpressions.Tests, Version=4.2.1.0, Culture=neutral, PublicKeyToken=9d77cc7ad39b68eb System.Text.RegularExpressions.Tests.RegexCacheTests Int32 <Ctor_Cache_Promote_entries>b__4_0()           Build : Master - 20180411.01 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x86   - Release - Windows.10.Amd64.ClientRS3-x64   - Release  Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Filc~2F/build/20180411.01/workItem/System.Text.RegularExpressions.Tests/analysis/xunit/System.Text.RegularExpressions.Tests.RegexCacheTests~2FCtor_Cache_Promote_entries
29018	area-System.Threading	Test failure: System.Threading.Tasks.Tests.ExecutionContextFlowTest/SuppressFlow_TaskCapturesContextAccordingly(suppressFlow: True)	Opened on behalf of @Sunny-pu  The test `System.Threading.Tasks.Tests.ExecutionContextFlowTest/SuppressFlow_TaskCapturesContextAccordingly(suppressFlow: True)` has failed.  Assert.Equal() Failure\r     Expected: 42\r     Actual:   0          Stack Trace:             at System.Threading.Tasks.Tests.ExecutionContextFlowTest.SuppressFlow_TaskCapturesContextAccordingly(Boolean suppressFlow) in E:\A\_work\6\s\corefx\src\System.Threading.Tasks\tests\Task\ExecutionContextFlowTest.cs:line 25        at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetVI<System.Boolean>(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtrForDynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566      Build : Master - 20180411.01 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x86   - Release - Windows.10.Amd64.ClientRS3-x64   - Release  Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Filc~2F/build/20180411.01/workItem/System.Threading.Tasks.Tests/analysis/xunit/System.Threading.Tasks.Tests.ExecutionContextFlowTest~2FSuppressFlow_TaskCapturesContextAccordingly(suppressFlow:%20True)
29016	area-System.Collections	Test failure: System.Collections.Generic.Tests.EqualityComparerTests/NullableEquals(left: 0, right: 128, expected: False)	Opened on behalf of @Sunny-pu  The test `System.Collections.Generic.Tests.EqualityComparerTests/NullableEquals(left: 0, right: 128, expected: False)` has failed.  System.NullReferenceException : Object reference not set to an instance of an object.          Stack Trace:             at System.Nullable$1<System.__UniversalCanon>.get_HasValue() in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\shared\System\Nullable.cs:line 34        at System.Collections.Generic.NullableEqualityComparer$1<System.__UniversalCanon>.Equals(Nullable$1<__UniversalCanon> x, Nullable$1<__UniversalCanon> y) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\Internal\IntrinsicSupport\EqualityComparerHelpers.cs:line 253        at Internal.Runtime.Augments.RuntimeAugments.CallDescrWorker(IntPtr callDescr) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\Internal\Runtime\Augments\RuntimeAugments.cs:line 969        at Internal.Runtime.TypeLoader.CallConverterThunk.InvokeTarget(Void* allocatedStackBuffer, $CallConversionParameters conversionParams) in InvokeTarget:line 16707566        at Internal.Runtime.Augments.RuntimeAugments.RunFunctionWithConservativelyReportedBufferInternal<Internal.Runtime.CallInterceptor.CallConversionInterpreter+CallConversionInterpreterLocals>(Int32 cbBuffer, IntPtr pfnTargetToInvoke, $CallConversionInterpreterLocals context, ConservativelyReportedRegionDesc regionDesc) in RunFunctionWithConservativelyReportedBufferInternal:line 15732480        at Internal.Runtime.Augments.RuntimeAugments.RunFunctionWithConservativelyReportedBuffer<Internal.Runtime.TypeLoader.CallConversionParameters>(Int32 cbBuffer, IntPtr pfnTargetToInvoke, $CallConversionParameters context) in RunFunctionWithConservativelyReportedBuffer:line 16707566        at Internal.Runtime.TypeLoader.CallConverterThunk.CallConversionThunk(IntPtr callerTransitionBlockParam, IntPtr callConversionId) in CallConversionThunk:line 16707566        at Internal.Runtime.Augments.RuntimeAugments.CallDescrWorker(IntPtr callDescr) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\Internal\Runtime\Augments\RuntimeAugments.cs:line 969        at Internal.Runtime.TypeLoader.CallConverterThunk.InvokeTarget(Void* allocatedStackBuffer, $CallConversionParameters conversionParams) in InvokeTarget:line 16707566        at Internal.Runtime.Augments.RuntimeAugments.RunFunctionWithConservativelyReportedBufferInternal<Internal.Runtime.CallInterceptor.CallConversionInterpreter+CallConversionInterpreterLocals>(Int32 cbBuffer, IntPtr pfnTargetToInvoke, $CallConversionInterpreterLocals context, ConservativelyReportedRegionDesc regionDesc) in RunFunctionWithConservativelyReportedBufferInternal:line 15732480        at Internal.Runtime.Augments.RuntimeAugments.RunFunctionWithConservativelyReportedBuffer<Internal.Runtime.TypeLoader.CallConversionParameters>(Int32 cbBuffer, IntPtr pfnTargetToInvoke, $CallConversionParameters context) in RunFunctionWithConservativelyReportedBuffer:line 16707566        at Internal.Runtime.TypeLoader.CallConverterThunk.CallConversionThunk(IntPtr callerTransitionBlockParam, IntPtr callConversionId) in CallConversionThunk:line 16707566        at System.Collections.Generic.Tests.EqualityComparerTests.NullableEquals<System.__UniversalCanon>(__UniversalCanon left, __UniversalCanon right, Boolean expected)        at Internal.Runtime.Augments.RuntimeAugments.CallDescrWorker(IntPtr callDescr) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\Internal\Runtime\Augments\RuntimeAugments.cs:line 969        at Internal.Runtime.TypeLoader.CallConverterThunk.InvokeTarget(Void* allocatedStackBuffer, $CallConversionParameters conversionParams) in InvokeTarget:line 16707566        at Internal.Runtime.Augments.RuntimeAugments.RunFunctionWithConservativelyReportedBufferInternal<Internal.Runtime.CallInterceptor.CallConversionInterpreter+CallConversionInterpreterLocals>(Int32 cbBuffer, IntPtr pfnTargetToInvoke, $CallConversionInterpreterLocals context, ConservativelyReportedRegionDesc regionDesc) in RunFunctionWithConservativelyReportedBufferInternal:line 15732480        at Internal.Runtime.Augments.RuntimeAugments.RunFunctionWithConservativelyReportedBuffer<Internal.Runtime.TypeLoader.CallConversionParameters>(Int32 cbBuffer, IntPtr pfnTargetToInvoke, $CallConversionParameters context) in RunFunctionWithConservativelyReportedBuffer:line 16707566        at Internal.Runtime.TypeLoader.CallConverterThunk.CallConversionThunk(IntPtr callerTransitionBlockParam, IntPtr callConversionId) in CallConversionThunk:line 16707566        at Internal.Runtime.Augments.RuntimeAugments.CallDescrWorker(IntPtr callDescr) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\Internal\Runtime\Augments\RuntimeAugments.cs:line 969        at Internal.Runtime.TypeLoader.CallConverterThunk.InvokeTarget(Void* allocatedStackBuffer, $CallConversionParameters conversionParams) in InvokeTarget:line 16707566        at Internal.Runtime.Augments.RuntimeAugments.RunFunctionWithConservativelyReportedBufferInternal<Internal.Runtime.CallInterceptor.CallConversionInterpreter+CallConversionInterpreterLocals>(Int32 cbBuffer, IntPtr pfnTargetToInvoke, $CallConversionInterpreterLocals context, ConservativelyReportedRegionDesc regionDesc) in RunFunctionWithConservativelyReportedBufferInternal:line 15732480        at Internal.Runtime.Augments.RuntimeAugments.RunFunctionWithConservativelyReportedBuffer<Internal.Runtime.TypeLoader.CallConversionParameters>(Int32 cbBuffer, IntPtr pfnTargetToInvoke, $CallConversionParameters context) in RunFunctionWithConservativelyReportedBuffer:line 16707566        at Internal.Runtime.TypeLoader.CallConverterThunk.CallConversionThunk(IntPtr callerTransitionBlockParam, IntPtr callConversionId) in CallConversionThunk:line 16707566        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean isTargetThisCall)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566      Build : Master - 20180411.01 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x64   - Release  Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Filc~2F/build/20180411.01/workItem/System.Collections.Tests/analysis/xunit/System.Collections.Generic.Tests.EqualityComparerTests~2FNullableEquals(left:%200,%20right:%20128,%20expected:%20False)
29015	area-System.Console	Test failure: WindowAndCursorProps/Title_Get_Windows	Opened on behalf of @Sunny-pu  The test `WindowAndCursorProps/Title_Get_Windows` has failed.  System.IO.IOException : The data area passed to a system call is too small.\r               Stack Trace:             at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)        at System.Console.get_Title()        at WindowAndCursorProps.Title_Get_Windows() in E:\A\_work\3\s\corefx\src\System.Console\tests\WindowAndCursorProps.cs:line 139 Build : Master - 20180411.01 (Full Framework Tests) Failing configurations: - Windows.10.Amd64.ClientRS2-x64   - Release  Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fdesktop~2Fcli~2F/build/20180411.01/workItem/System.Console.Tests/analysis/xunit/WindowAndCursorProps~2FTitle_Get_Windows
29014	area-System.Runtime	Value of Environment.CommandLine is different with the actual input	"Hi,  We are porting a .Net application to .Net Core. The application will run on Windows and we'd want it to have the same behavior with the origin one. In the application, we implemented a command line parser which reads command line from `Environment.CommandLine`. We'd want to reuse the code, while found `Environment.CommandLine` returns different value with .Net. In .Net, it can return exactly the same string I input on console. In .Net Core, it uses `\` to escape double quote marks, which is different from the string I input from console.   For example:  When the input is `"""""" 1234`, `Environment.CommandLine` returns `""\"" 1234""`, when input is `""\"" 1234 ""`, it also returns `""\"" 1234""`.    In this condition, I have no way to know what the actual input is.    Could you please help to take a look?    Emma  "
29011	area-System.Net	Constructor System.Uri(Uri baseUri, string relativeUri) fails if relativeUri is long and contains a colon	"I observed strange behavior when working with OData queries. When I tried to debug this problem I found that the root cause it most likely in `System.Uri.CreateThis` which validates scheme before actually checking if the scheme is necessary.    ```c#      static void Main(string[] args)      {          var baseUri = new Uri(""https://stansw.analytics.visualstudio.com/_odata/v2.0-preview/"");          var relativeUri =                ""WorkItems?$filter=                                                                                                              "" // 128              + ""                                                                                                                                "" // 256              + ""                                                                                                                                "" // 384              + ""                                                                                                                                "" // 512              + ""                                                                                                                                "" // 640              + ""                                                                                                                                "" // 768              + ""                                                                                                                                "" // 896              + ""Processes/any(b:b/BacklogName eq 'Features')"";            var uri = new Uri(baseUri, relativeUri);          Console.WriteLine(uri.ToString());            relativeUri =                ""WorkItems?$filter=                                                                                                              "" // 128              + ""                                                                                                                                "" // 256              + ""                                                                                                                                "" // 384              + ""                                                                                                                                "" // 512              + ""                                                                                                                                "" // 640              + ""                                                                                                                                "" // 768              + ""                                                                                                                                "" // 896              + ""                                                                                                                                "" // 1024              + ""Processes/any(b:b/BacklogName eq 'Features')"";            uri = new Uri(baseUri, relativeUri);          Console.WriteLine(uri.ToString());      }  ```    Output:  ```  https://stansw.analytics.visualstudio.com/_odata/v2.0-preview/WorkItems?$filterrocesses/any(b:b/BacklogName eq 'Features')    Unhandled Exception: System.UriFormatException: Invalid URI: The Uri scheme is too long.     at System.Uri.CreateThis(String uri, Boolean dontEscape, UriKind uriKind)     at System.Uri.CreateUri(Uri baseUri, String relativeUri, Boolean dontEscape)     at System.Uri..ctor(Uri baseUri, String relativeUri)     at ConsoleApp4.Program.Main(String[] args) in C:\Users\stansw\Documents\Visual Studio 2017\Projects\ConsoleApp4\ConsoleApp4\Program.cs:line 35  Press any key to continue . . .  ```    [EDIT] Add syntax highlighting by @karelz"
29009	area-System.Diagnostics	Work around occasional IOException using OpenRemoteBaseKey against local machine	"RegistryKey.OpenRemoteBaseKey(RegistryHive.LocalMachine, ""."") "" is sporadically hitting an IOException with ""Network path not found"" because the underlying call to RegConnectRegistry  is returning an error. I am working around the problem by using Registry.LocalMachine when the key requested is against the local machine. I will open the issue to consider whether OpenRemoteBaseKey should do this itself. I will tag the issue here (after I create it)  Fixes https://github.com/dotnet/corefx/issues/29007"
29007	area-System.Diagnostics	Performance Counter tests failing on spanish CI	A couple of the tests are failing  ```  System.ComponentModel.Win32Exception : No se puede encontrar el módulo especificado(The specified module can not be found)  Stack Trace :     at System.Diagnostics.CounterSampleCalculator.LoadPerfCounterDll() in D:\j\workspace\windows-TGrou---db113413\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\CounterSampleCalculator.cs:line 245     at System.Diagnostics.CounterSampleCalculator.ComputeCounterValue(CounterSample oldSample, CounterSample newSample) in D:\j\workspace\windows-TGrou---db113413\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\CounterSampleCalculator.cs:line 93     at System.Diagnostics.CounterSampleCalculator.ComputeCounterValue(CounterSample newSample) in D:\j\workspace\windows-TGrou---db113413\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\CounterSampleCalculator.cs:line 56     at System.Diagnostics.CounterSample.Calculate(CounterSample counterSample) in D:\j\workspace\windows-TGrou---db113413\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\CounterSample.cs:line 148     at System.Diagnostics.Tests.CounterSampleTests.CounterSample_Calculate_CalculateCounterSample() in D:\j\workspace\windows-TGrou---db113413\src\System.Diagnostics.PerformanceCounter\tests\CounterSampleTests.cs:line 49  ```  CounterSample_Calculate_CalculateCounterSample  CounterSample_Calculate_CalculateCounterSampleCounterSample  
29006	area-System.Net	Make HttpWebResponse.LastModified throw when invalid date is provided	Fixes https://github.com/dotnet/corefx/issues/28941    cc: @Clockwork-Muse 
29005	area-System.Net	Unobserved websocket task exceptions when attempting to read/write on non-existent connections	Valid repro: [WebSocketRepro.zip](https://github.com/dotnet/corefx/files/1896745/WebSocketRepro.zip)    Firstly start server with `dotnet run -c Release`, then keep starting client with `dotnet run -c Release` until server app prints the exception we're looking for. Reproducing it might require a few tries, but I've never needed more than 3.    I reproduced it on both latest stable `2.1.103` SDK, as well as `2.1.300-preview1-008174`. This issue seems to be reproducible **only on Windows**, I had no luck running into this issue on linux.    As you can see in the source, we have generic try-catch all across entire flow, which should catch any potential exceptions (and does, we intentionally ignore them since this is working as intended). However, under special circumstances it's possible that we can receive unobserved exception instead, which isn't caught but instead thrown back on `TaskScheduler.UnobservedTaskException`. This doesn't influence the app in any significant way (it doesn't crash or stop working), but if this is expected then it should be observed, similar how it was done in other case I reported: https://github.com/dotnet/corefx/issues/24002 (that has nothing to do with this one).    The exception we're looking for is:    ```  Reproduced! This should not happen: System.AggregateException: A Task's exception(s) were not observed either by Waiting on the Task or accessing its Exception property. As a result, the unobserved exception was rethrown by the finalizer thread. (Próbowano wykonać operację na nieistniejącym połączeniu sieciowym) ---> System.Net.HttpListenerException: Próbowano wykonać operację na nieistniejącym połączeniu sieciowym (translation: an attempt was made to perform an operation on a non-existent network connection)     at System.Net.WebSockets.WebSocketHttpListenerDuplexStream.ReadAsyncFast(HttpListenerAsyncEventArgs eventArgs)     at System.Net.WebSockets.WebSocketHttpListenerDuplexStream.<ReadAsyncCore>d__30.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()     at System.Net.WebSockets.WebSocketBase.WebSocketOperation.<Process>d__19.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()     at System.Net.WebSockets.WebSocketBase.<ReceiveAsyncCore>d__44.MoveNext()     --- End of inner exception stack trace ---  ---> (Inner Exception #0) System.Net.HttpListenerException (0x80004005): Próbowano wykonać operację na nieistniejącym połączeniu sieciowym (translation: an attempt was made to perform an operation on a non-existent network connection)     at System.Net.WebSockets.WebSocketHttpListenerDuplexStream.ReadAsyncFast(HttpListenerAsyncEventArgs eventArgs)     at System.Net.WebSockets.WebSocketHttpListenerDuplexStream.<ReadAsyncCore>d__30.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()     at System.Net.WebSockets.WebSocketBase.WebSocketOperation.<Process>d__19.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()     at System.Net.WebSockets.WebSocketBase.<ReceiveAsyncCore>d__44.MoveNext()<---  ```    ![image](https://user-images.githubusercontent.com/1069029/38588663-6436c3a8-3d27-11e8-89ab-1aa99775b4d8.png)    ```  Product Information:   Version:            2.1.300-preview1-008174   Commit SHA-1 hash:  b8df89a54f    Runtime Environment:   OS Name:     Windows   OS Version:  10.0.16299   OS Platform: Windows   RID:         win10-x64   Base Path:   C:\Program Files\dotnet\sdk\2.1.300-preview1-008174\    Microsoft .NET Core Shared Framework Host      Version  : 2.1.0-preview1-26216-03    Build    : f2c3216183d20416568a4bbf5bb7d153e826f153  ```    *Initial issue reported in: https://github.com/mono/linker/issues/295*    Thank you in advance.
29004	area-Infrastructure	Making Spanish CI leg as the defaut target CI	Merge After https://github.com/dotnet/corefx/pull/28952 and https://github.com/dotnet/corefx/pull/29009
29003	area-System.Memory	Add GetPinnableReference to ref and add tests	Part of https://github.com/dotnet/corefx/issues/28969    Depends on coreclr: https://github.com/dotnet/coreclr/pull/17504    cc @davidfowl, @GrabYourPitchforks, @stephentoub, @KrzysztofCwalina, @pakrym, @ahsonkhan @jkotas, @VSadov, @benaadams  
29002	area-Infrastructure	[1.1] Add packaging for Fedora28 and Debian9	cc: @weshaggard @janvorli 
29001	area-System.Memory	Remove SequencePosition comparison operators or change their description	We do not guarantee that any comparison of sequence positions would have any meaning but that they contain same values.    https://github.com/aspnet/SignalR/pull/1916/files/1ca2e5f2638f498bb4b57a9d2c69084ecf99bc8f#diff-00c0a7c2117eaeddb8f9964fbdda240aR79    /cc @ahsonkhan  @davidfowl  @KrzysztofCwalina 
29000	area-Infrastructure	StringComparer.InvariantCultureIgnoreCase and StringComparer.CurrentCultureIgnoreCase serialization tests failing on netfx ci 	Related to https://github.com/dotnet/corefx/issues/28816
28999	area-System.Threading	Regenerate System.Threading ref with latest buildtools changes	cc @kouvel, @tarekgh, @weshaggard, @danmosemsft, @ericstj, @joshfree      Most of it is just formatting, sorting order.
28998	area-System.Net	Disable SSL3 test case on RedHat 6	Because of [this issue](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html-single/6.9_release_notes/index#known_issues_security), one of our SSL tests consistently fails on RedHat 6.9.    The test tries to detect what version of OpenSsl is loaded in order to decide which test cases are valid. The call we're actually using to do that is `SSLEay`. As documented in the RedHat 6.9 known issues, that value is not reported correctly:  ```  Because certain applications perform incorrect version check of the OpenSSL version, the actual   runtime version of OpenSSL is masked and the build-time version is reported instead. Consequently,  it is impossible to detect the currently running OpenSSL version using the SSLeay() function.  ```    The misreported version causes us to use a test case we would not otherwise, which then fails. This fix disables the test case on RedHat.
28997	area-System.Diagnostics	Modify test to only try open file with vi not nano	"Fixes: #28668    As explained in #28668, the test failure in `System.Diagnostics.Tests.ProcessTests/ProcessStart_OpenFileOnLinux_UsesSpecifiedProgram(programToOpenWith: \""nano\"")` seems due to nano exiting when stdin is not a terminal.    This PR changes this test and test `ProcessStart_OpenFileOnLinux_UsesSpecifiedProgramUsingArgumentList` to only use vi.    cc: @danmosemsft @tmds "
28994	area-System.Net	Handle User-Agent/Server writing similarly to HttpHeaders.GetHeaderString	Fixes https://github.com/dotnet/corefx/issues/28951    (Tests pending)    This changes writing headers similarly to what we do here:  https://github.com/dotnet/corefx/blob/d5351fe933f0f4682ac465b656b2a438b076c24e/src/System.Net.Http/src/System/Net/Http/Headers/HttpHeaders.cs#L309-L329
28993	area-System.IO	Reenable negative compression tests	
28992	area-System.Memory	Add CreateFromPinnedArray to System.Memory ref and add tests	Part of https://github.com/dotnet/corefx/issues/28954    Depends on: https://github.com/dotnet/coreclr/pull/17500    ~**TODO:** Update newly added tests to use MemoryMarshal.CreateFromPinnedArray~    cc @KrzysztofCwalina, @stephentoub, @GrabYourPitchforks, @davidfowl, @pakrym  
28990	area-System.Memory	Removing SequenceMarshal.TryGetMemoryManager for ReadOnlySequence	Fixes https://github.com/dotnet/corefx/issues/28959    cc @pakrym, @KrzysztofCwalina, @davidfowl 
28989	area-System.Xml	Clean dead code System.Private.Xml*	
28988	area-System.Numerics	Reenable ASin test	Fixes https://github.com/dotnet/corefx/issues/15455    Test is passing locally now.
28985	area-Infrastructure	.NET Core 2.0: FileLoadException	@Krakean commented on [Tue Apr 10 2018](https://github.com/dotnet/core/issues/1416)  Hello.  Using Win 10 x64 Fall Creators Update and .NET Core 2.1.104  I'm getting this when trying to run my game launcher:  https://i.imgur.com/WCzLzah.png (previously it was: BadImageException bla bla reference assemblies should not be loaded for execution bla bla; but after I downgraded System.Numerics.Vector to 4.4.0 - error changed to current one)    Can't understand why this happens. I'm referencing only System.Numerics.Vectors 4.4.0: https://i.imgur.com/YrZYU5t.png    Can this be a problem because of this: I'm making game engine, and dlls of my engine - like system, renderer, 3d engine, sound, network and so on - are Net Standard 2.0 (but I complie them using .NET Core 2.0 toolchain) to force me avoid windows-only functions and trying to keep cross-platform, but game launcher executable (that is just instantiate .net core's game dll that initialize engine) is .NET Framework 4.7.1.   Could this be a root of issue? If so, how it can be solved?    
28984	area-System.Net	Allow HTTPListener to grab unprotected ports on Windows	"@doyouevensunbro commented on [Mon Apr 09 2018](https://github.com/dotnet/core/issues/1413)  Currently, to get HTTPListener in .Net Core 2 I have to run the following block of code:    ```C#  if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))  {      using (Process process = new Process())      {          var command = ""netsh.exe"";          var args = string.Format(""http add urlacl url=\""{0}\"" user=Everyone"", _host);                    process.StartInfo = new ProcessStartInfo(command, args)          {              Verb = ""runas"",              UseShellExecute = true,          };          try          {              process.Start();              process.WaitForExit();          }          catch (Exception e)          {              Log.Error(Tag, ""Couldn't set HTTPListener permissions: "", e);              throw;          }      }  }  ```    I'm assuming that this is for security reasons (I'm more familiar with Linux over Windows, and HTTPListener works without issue on those platforms). So I tried listening to the port using TcpListener and had no issues. I'm a bit confused by this since I can write a HTTP server using a TcpListener, there are libraries out there that do it now.     Any chance we can change .Net Core 2 to do the same, or this is a Windows issue that can't be bypassed?    Thanks!  "
28983	area-System.Net	Ensure ConnectHelper creates a Segment with a min of 2	Fixes https://github.com/dotnet/corefx/issues/28979  cc: @rmkerr 
28982	area-System.Net	fix get for UseDefaultCredentials with SockerHttpHandler	follow-up on #28964
28981	area-System.Memory	Remove MemoryManager.length	Resolves https://github.com/dotnet/corefx/issues/28751    Requires coreclr change https://github.com/dotnet/coreclr/pull/17498    /cc @ahsonkhan @davidfowl @GrabYourPitchforks @KrzysztofCwalina 
28980	area-System.Net	Clear SSL error queue after MultiDestroy and MultiRemoveHandle	Part 3 of separating PR #28862: Clear SSL error queue after MultiDestroy and MultiRemoveHandle (CurlHandler).    These methods wrap calls to SSL_shutdown that can leave unwanted errors on the SSL error queue.     There is no return to indicate if an error happened, so whenever MultiDestroy and MultiRemoveHandle are called a corresponding call to ErrClearError was added.
28979	area-System.Net	SocketsHttpHandler does not work on single core machines	While trying to repro an issue on Win7 I have been running into consistent failures in all tests using Http. I think that it is a result of the changes introduced in PR #28638.     The assertion being hit is on line 48 of ConcurrentQueue_Segment.cs. `boundedLength` has a value of 1.  https://github.com/dotnet/corefx/blob/943e316297df4b0767e46dbb87f97ea861c6817e/src/Common/src/System/Collections/Concurrent/ConcurrentQueue_Segment.cs#L47-L49    The assertion is failing because of the following lines in SocketsHttpHandler ConnectHelper:  https://github.com/dotnet/corefx/blob/943e316297df4b0767e46dbb87f97ea861c6817e/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/ConnectHelper.cs#L19-L22    When the processor count is 1, RoundUpToPowerOf2 returns 1 (2<sup>0</sup>...), which is below the lower bound enforced by ConcurrentQueue. The failures don't repro in CI because all of the test machines have more than one core.    cc: @stephentoub @davidsh 
28978	area-Serialization	Enable DCS_TypeWithPrimitiveKnownTypes	Need enable [DCS_TypeWithPrimitiveKnownTypes](https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Serialization.Xml/tests/DataContractSerializer.cs#L4019) test on UWP since #24265 has been closed.
28974	area-System.Security	Impersonation	"I need to do a impersonation in one of my services, but this service will run on a linux container.    In windows i use like that  [DllImport(""advapi32.dll"", SetLastError = true, CharSet = CharSet.Unicode)]    I could not find any reference do this situation, could you have example of that?"
28972	area-System.Data	Fix ConnectionTimeoutTestWithThread test	Port the change #28618 into 2.0    Fixes #26382  SqlConnectionTimeout test failing breaking CI
28971	area-System.Net	SocketsHttpHandler: Add workaround for ipv6 LLA address	Uri.Host LLA (Link-local address) IPv6 address doesn't contain %number (scope) part, and scope is mandatory for LLA. We will use uri.IdnHost for IPv6 LLA address on SocketsHttpHandler.    This PR is a workaround for #28863, and should be reverted when #28863 is fixed.    Close #28749
28969	area-System.Memory	Add GetPinnableReference back to Span and ReadOnlySpan	### Proposed Api    ```csharp  public readonly ref partial struct ReadOnlySpan<T>  {      [EditorBrowsable(EditorBrowsableState.Never)]      public readonly ref T GetPinnableReference();  }    public readonly ref partial struct Span<T>  {      [EditorBrowsable(EditorBrowsableState.Never)]      public ref T GetPinnableReference();  }  ```    **Question** Unlike `MemoryMarshal` it should return null pointer should it return null pointer for zero length Span? (see further down https://github.com/dotnet/corefx/issues/28969#issuecomment-379979579) - though `null` `ref`s are odd?    ### Rational    So C#7.3 is outish now https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-preview-relnotes#csharp and it supports:  ```  Custom `fixed` statement:   Types that implement a suitable `GetPinnableReference` can be used in a `fixed` statement.  ```  However, this method on span has been moved to `MemoryMarshal.GetReference` so span cannot participate directly in a `fixed` statement.    To allow direct using a fixed statement the methods should be returned; **with the caveat** of adding the attribute `[EditorBrowsable(EditorBrowsableState.Never)]` so the route for a user getting a reference remaining via `MemoryMarshal`    cc @davidfowl, @GrabYourPitchforks, @stephentoub, @KrzysztofCwalina, @pakrym, @ahsonkhan @jkotas 
28968	area-System.Net	[Windows] Test hang: System.Net.Http.Functional.Tests	"From https://github.com/dotnet/corefx/pull/28962    https://mc.dot.net/#/user/ahsonkhan/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/a206cf92c713b91e74bf786ef3f980ce29c2b4bb/workItem/System.Net.Http.Functional.Tests/wilogs  Windows.7.Amd64.Open-x64:Debug    ```text  2018-04-10 03:37:43,569: INFO: proc(54): run_and_log_output: Output:   2018-04-10 03:37:43,631: INFO: proc(54): run_and_log_output: Output: Discovering: System.Net.Http.Functional.Tests  2018-04-10 03:37:43,960: INFO: proc(54): run_and_log_output: Output: Discovered:  System.Net.Http.Functional.Tests  2018-04-10 03:37:44,210: INFO: proc(54): run_and_log_output: Output: Starting:    System.Net.Http.Functional.Tests  2018-04-10 03:37:44,740: INFO: proc(54): run_and_log_output: Output:    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientMiniStress.ManyClients_ManyPosts_Async [SKIP]  2018-04-10 03:37:44,740: INFO: proc(54): run_and_log_output: Output:       Condition(s) not met: \""IsStressModeEnabled\""    ```  ...  ```text  2018-04-10 03:57:16,631: INFO: servicebusrepository(84): renew_workitem_lock: Entering renew_workitem_lock for https://nethelix.servicebus.windows.net/windows.7.amd64.open/messages/42002763/01e87693-ce18-4c7c-9e80-042ff46d0dd7  2018-04-10 03:57:16,740: INFO: saferequests(90): request_with_retry: Response complete with status code '200'  2018-04-10 03:57:16,740: INFO: servicebusrepository(97): renew_workitem_lock: renew_workitem_lock Status Code: 200  2018-04-10 03:57:43,053: ERROR: job(44): kill: Job running for too long. Killing...  2018-04-10 03:57:43,053: ERROR: executor(399): _execute_command: Executor timed out after 1200 seconds and was killed.  2018-04-10 03:57:43,053: INFO: event(43): send: Sending event type WorkItemTimeout  2018-04-10 03:57:43,898: INFO: saferequests(90): request_with_retry: Response complete with status code '201'  2018-04-10 03:57:43,898: INFO: executor(418): _execute_command: Finished _execute_command, exit code: -3  ```    cc @davidsh, @wfurt, @caesar1995, @rmkerr, @karelz"
28966	area-System.Security	Make X509_store_add_crl throw on unexpected errors	Fixes #3063 and part 2 of #25676: clear error queue on X509_store_add_crl failures (X509StoreAddCrl).
28965	area-System.Net	Fix perf hit from WinHttpGetProxyForUrl	"Per offline discussion, here is the summary of optimization approach:    1. We don't want to modify existing WinHttpHandler code. Only improve the perf hit from SocketsHttpHandler side.  2. Introduce `WinHttpDetectAutoProxyConfigUrl`. When ""Automatic detect settings"" is checked, we will call into this function to see if we can auto detect config file.  3. If we are not able to auto detect config file and ""Use automatic configuration script"" is turned off, we can safely skip calling into WinHttpGetProxyForUrl.  4. Add timer optimization for calling `WinHttpDetectAutoProxyConfigUrl`. We don't call it per request, instead call it every 2 minutes, cache/update the info, to improve performance.    Replace: #28859  Fix: #28543"
28964	area-System.Net	propagate default credentials so we can pick up default kerberos ticket	"fixes #28963     This duplicates code from Windows counter part.   This makes SocketsHttpHandler behave like curl.    Note there is no unit test yet. Kerberos setup will need some more work.   This was tested manually:    > ~/latest/dotnet run http://toweinfu-iis/test/auth/negotiate/Showidentity.ashx  > result1=StatusCode: 200, ReasonPhrase: 'OK', Version: 1.1, Content: System.Net.Http.HttpConnection+HttpConnectionResponseContent, Headers:  > {  >   Cache-Control: private  >   Server: Microsoft-IIS/10.0  >   X-AspNet-Version: 4.0.30319  >   Persistent-Auth: true  >   X-Powered-By: ASP.NET  >   WWW-Authenticate: Negotiate oRQwEqADCgEAoQsGCSqGSIb3EgECAg==  >   Date: Tue, 10 Apr 2018 03:58:37 GMT  >   Content-Type: application/json; charset=utf-8  >   Content-Length: 60  > }  > result1 lenght = System.Threading.Tasks.Task  > {  >   ""Authenticated"": ""True"",  >   ""User"": ""pri\testuser""  > }      "
28963	area-System.Net	SocketsHttpHandler: unable to use pre-authenticated kerberos ticket for auth on Unix	This is fllow-up on #27876    I have setup where Linux machine joined domain (using MIT krb5)    > clruser@CLRPERFTST003:$ kinit  > Password for clradmin@COREFX.NET:  > clruser@CLRPERFTST003:$ klist  > Ticket cache: FILE:/tmp/krb5cc_1000  > Default principal: clradmin@COREFX.NET  >   > Valid starting Expires Service principal  > 2018-03-08 14:16:54 2018-03-09 00:16:54 krbtgt/COREFX.NET@COREFX.NET  > renew until 2018-03-09 14:16:48  > 2018-03-08 14:37:52 2018-03-09 00:16:54 HTTP/clrperftst003.corefx.net@COREFX.NET  > renew until 2018-03-09 14:16:48  >     Unlike curl handler, SocketsHttpHandler is not able to use it for authentication.   Explicit authentication works when specified in user@FQDN and DNS is configured properly.   (not that for Kerberos time and name services are essential)     
28962	area-System.Memory	Fix TODO to cleanup Tests by removing AsReadOnySpan/Memory and update callsites	cc @AtsushiKan, @KrzysztofCwalina     Fixes leftover work from https://github.com/dotnet/corefx/issues/26894
28961	area-System.Net	SocketsHttpHandler: NTLM auth does not work by default on Unix	HttpClient with credentials explicitly set. SocketHttpHandler throws on NTLM authentication requested by server:    ```  System.ComponentModel.Win32Exception (0x80090020): GSSAPI operation failed with error - An invalid status code was supplied (Unknown error).    at System.Net.Security.NegotiateStreamPal.AcquireCredentialsHandle(String package, Boolean isServer, NetworkCredential credential) in /home/build/github/corefx/src/Common/src/System/Net/Security/NegotiateStreamPal.Unix.cs:line 316    at System.Net.NTAuthentication.Initialize(Boolean isServer, String package, NetworkCredential credential, String spn, ContextFlagsPal requestedContextFlags, ChannelBinding channelBinding) in /home/build/github/corefx/src/Common/src/System/Net/NTAuthentication.Common.cs:line 128    at System.Net.NTAuthentication..ctor(Boolean isServer, String package, NetworkCredential credential, String spn, ContextFlagsPal requestedContextFlags, ChannelBinding channelBinding) in /home/build/github/corefx/src/Common/src/System/Net/NTAuthentication.Common.cs:line 98    at System.Net.Http.AuthenticationHelper.SendWithNtAuthAsync(HttpRequestMessage request, Uri authUri, ICredentials credentials, Boolean isProxyAuth, HttpConnection connection, CancellationToken cancellationToken) in /home/build/github/corefx/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/AuthenticationHelper.NtAuth.cs:line 61    at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in /home/build/github/corefx/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 283    at System.Net.Http.AuthenticationHelper.SendWithAuthAsync(HttpRequestMessage request, Uri authUri, ICredentials credentials, Boolean preAuthenticate, Boolean isProxyAuth, Boolean doRequestAuth, HttpConnectionPool pool, CancellationToken cancellationToken) in /home/build/github/corefx/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/AuthenticationHelper.cs:line 204    at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in /home/build/github/corefx/src/Sys  ```    **Workarounds:**  1. Install package called `gss-ntlmssp` (plugin into MIT Kerberos GSSAPI layer)  2. Install Heimdal (alternative Kerberos implementation with NTLM support): https://www.h5l.org/manual/heimdal-1-5-branch/ntlm/    One of the options installed is sufficient to make SocketHttpHandler work for NTLM without any additional changes to CoreFX or the app.    **Details:**  .NET Core 2.0 / 2.1 with libcurl works fine. This is because curl has it's own implementation but SocketHttpHandler depends on authentication code shared with NegotiateStream class.    The shared authentication depends on GSSAPI and that is typically provided by MIT kerberos. (this is also true for 2.1.300 preview docker images)  It does not have ability to do NTLM.     This is follow up on #27876 and #27872. This may be also related to  https://github.com/dotnet/wcf/issues/943 
28960	area-System.Xml	DataSet ReadXmlSchema Error when uri filename contain special character	When running .net core on mac was unable to pass string with special character to ReadXmlSchema, specifically a '#'. The error return path not found stopping the given path before the special character. Workaround using %23 works, but using '#' on windows system works fine. Attempted to use %23 on windows system and was unable to resolve path. Appears to be error coming from XmlTextReaderImpl or XmlResolver. Using uri and tostring method returns correct path, '#' is converted to %23.
28959	area-System.Memory	Remove SequenceMarshal.TryGetMemoryManager for ReadOnlySequence	This API was added as part of https://github.com/dotnet/corefx/issues/27097 when we had a ReadOnlySequence ctor that takes a MemoryManager. Based on the `Memory<T>` [usage guidelines](https://gist.github.com/GrabYourPitchforks/4c3e1935fd4d9fa2831dbfcab35dffc6), ReadOnlySequence is a consumer of Memory and not an owner. Therefore, we removed that ctor, when we split OwnedMemory into MemoryManager and IMemoryOwner, here (https://github.com/dotnet/corefx/pull/28640).    There is no longer a need to have an API that requires a MemoryManager from a ReadOnlySequence. **There are no calls to this method in corefx/ASP.NET and it is no longer relevant.**    We already have a method on MemoryMarshal to get MemoryManager from a ReadOnlyMemory, which should be sufficient for any meaningful scenarios.  ```C#  public static bool TryGetMemoryManager<T, TManager>(ReadOnlyMemory<T> memory, out TManager manager) where TManager : MemoryManager<T> { throw null; }  ```    ```diff  namespace System.Runtime.InteropServices  {      public static partial class SequenceMarshal      {  -        public static bool TryGetMemoryManager<T>(ReadOnlySequence<T> sequence, out MemoryManager<T> manager, out int start, out int length) { throw null; }      }  }  ```    cc @davidfowl, @pakrym, @GrabYourPitchforks, @KrzysztofCwalina, @terrajobst, @benaadams      
28956	area-Infrastructure	[1.1] Use Portable Linux for new distros and unknown distro	cc: @janvorli 
28954	area-System.Memory	Make CreateFromPinnedArray visible and move it to MemoryMarshal	Marking the method has `EditorBrowsableState.Never` hurts usability for users (like ASP.NET) who want to [use the API](https://github.com/aspnet/Common/blob/7fd3a209704efe9eb4303fce99062ac2f71d5c6c/shared/Microsoft.Extensions.Buffers.Sources/MemoryPoolBlock.Release.cs#L28).    Since the developer needs to be careful with the use of this API (it can be considered unsafe, for instance, if someone calls it on an array that isn't already pre-pinned), we should consider moving it to MemoryMarshal instead, but not hide it.    ```diff  namespace System  {      public readonly partial struct Memory<T>      {  -        [EditorBrowsable(EditorBrowsableState.Never)]  -        public static Memory<T> CreateFromPinnedArray(T[] array, int start, int length) { throw null; }      }  }    namespace System.Runtime.InteropServices  {      public static partial class MemoryMarshal      {  +        public static Memory<T> CreateFromPinnedArray(T[] array, int start, int length) { throw null; }      }  }  ```    cc @davidfowl, @GrabYourPitchforks, @stephentoub, @KrzysztofCwalina, @pakrym, @benaadams  
28953	area-System.Diagnostics	StartInfo_TextFile_ShellExecute  test failing for spanish windows (Non English CI)	```  Could not start C:\\Users\\runner\\AppData\\Local\\Temp\\ProcessStartInfoTests_q0umvtb5.dh2\\StartInfo_TextFile_ShellExecute_994_2372eb4f.txt UseShellExecute=True  Association details for '.txt'  ------------------------------  Open command: C:\\Windows\\system32\\NOTEPAD.EXE %1  ProgID: txtfile    Expected: True  Actual:   False  ```
28951	area-System.Net	"SocketsHttpHandler mangling ""User-Agent"" header"	"When testing a .NET Core application against the 2.1 preview with the new `SocketsHttpHandler` using the latest build of the .NET Core SDK (info output from CLI listed below), requests sent through an `HttpClient` to a local HTTP echo or capture service shows the new implementation of the `HttpMessageHandler` / `HttpClientHandler` is modifying the ""User-Agent"" agent header value before sending (or otherwise failing to recompose it correctly after parsing).    Here is an outline of the code:    ```csharp  var user_agent = ""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.18 Safari/537.36"";    using (var handler = new HttpClientHandler())  using (var client = new HttpClient(handler))  {      var message = new HttpRequestMessage(HttpMethod.Post, ""http://lvh.me:8000/yboe63yb"");        message.Headers.TryAddWithoutValidation(""User-Agent"", user_agent);      message.Content = new StringContent(RuntimeInformation.FrameworkDescription, Encoding.UTF8);        await client.SendAsync(message);  }  ```    After completion of the request, here is the capture according to a local instance of [requestbin](https://github.com/Runscope/requestbin), but this has also been validated against other echoing services:    ```  POST /yboe63yb HTTP/1.1  Content-Length: 22  Accept-Language: en-US, en; q=0.8  Accept-Encoding: gzip, deflate, br  Host: lvh.me:8000  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng*/*;q=0.8  User-Agent: Mozilla/5.0, (Macintosh; Intel Mac OS X 10_11_3), AppleWebKit/537.36, (KHTML, like Gecko), Chrome/63.0.3239.18, Safari/537.36  Connection: keep-alive  Content-Type: text/plain; charset=utf-8    .NET Core 4.6.26310.01  ```    In that output you will see that it appears to be treating that header as a collection of header value entries and is inserting "", "" between all the components. That line should read:    ```  User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.18 Safari/537.36  ```    Explicitly disabling the now-`true`-by-default `AppContext` switch for `UseSocketsHttpHandler` returns the header to its original, expected behavior on both Windows (WinHTTP) and Linux (libcurl):    ```csharp  AppContext.SetSwitch(""System.Net.Http.UseSocketsHttpHandler"", false);  ```    As promised, here is the primary host information from `dotnet` CLI:    ```  >dotnet --info  .NET Core SDK (reflecting any global.json):   Version:   2.1.300-preview3-008433   Commit:    6b240926a3    Runtime Environment:   OS Name:     Windows   OS Version:  10.0.16299   OS Platform: Windows   RID:         win10-x64   Base Path:   C:\Program Files\dotnet\sdk\2.1.300-preview3-008433\    Host (useful for support):    Version: 2.1.0-preview2-26314-02    Commit:  8ac5f4fa22    .NET Core SDKs installed:    2.0.3 [C:\Program Files\dotnet\sdk]    2.1.2 [C:\Program Files\dotnet\sdk]    2.1.4 [C:\Program Files\dotnet\sdk]    2.1.100 [C:\Program Files\dotnet\sdk]    2.1.102 [C:\Program Files\dotnet\sdk]    2.1.103 [C:\Program Files\dotnet\sdk]    2.1.200-preview-007474 [C:\Program Files\dotnet\sdk]    2.1.300-preview1-008174 [C:\Program Files\dotnet\sdk]    2.1.300-preview3-008433 [C:\Program Files\dotnet\sdk]    .NET Core runtimes installed:    Microsoft.AspNetCore.All 2.1.0-preview1-final [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]    Microsoft.AspNetCore.All 2.1.0-preview2-30431 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]    Microsoft.AspNetCore.App 2.1.0-preview1-final [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]    Microsoft.AspNetCore.App 2.1.0-preview2-30431 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]    Microsoft.NETCore.App 2.0.3 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]    Microsoft.NETCore.App 2.0.5 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]    Microsoft.NETCore.App 2.0.6 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]    Microsoft.NETCore.App 2.1.0-preview1-26216-03 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]    Microsoft.NETCore.App 2.1.0-preview2-26314-02 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]  ```"
28950	area-System.Data	SqlClient SqlConnectionBasicTests failures in 2.0.x CI	Tracking issue for flaky test failure.  Is there a surgical improvement that can be backported from master to /release/2.0.0 to improve CI reliability for that queue?    https://github.com/dotnet/corefx/pull/27919    https://mc.dot.net/#/user/dotnet-maestro-bot/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Frelease~2F2.0.0~2F/test~2Ffunctional~2Fcli~2F/7aa45b89ca5ae46cb15fce46921f40dd925d736b/workItem/System.Data.SqlClient.Tests/analysis/xunit/System.Data.SqlClient.Tests.SqlConnectionBasicTests~2FConnectionTimeoutTestWithThread    ```     at System.Data.SqlClient.Tests.SqlConnectionBasicTests.ConnectionTimeoutTestWithThread()  Assert.True() Failure  Expected: True  Actual:   False  ```    /cc @saurabh500 @corivera 
28949	area-System.Security	 Clear SSL error queue after SSL_shutdown calls	Part 1 of separating PR #28862 into smaller parts. This one covers the calls to SSL_shutdown explicitly made in CoreFx sources.    The other location of [SSL_shutdown call](https://github.com/dotnet/corefx/blob/275752f322defe4e4d0d6e9ccb4330df146d57f1/src/System.Net.Security/src/System/Net/Security/SslStreamPal.Unix.cs#L242-261) is already covered by the SSL_ERROR_SSL case. 
28948	area-Infrastructure	Local building issues on Windows	I am trying to build corefx by using `clean.cmd` and then `build.cmd` on Windows.  Local building on Windows returns next warnings in `msbuild.wrn` file:  ```     8:2>C:\Code\corefx\Tools\Symbols.targets(515,7): warning : Downloading https://dotnet.myget.org/F/dotnet-core/symbols/runtime.win-x64.Microsoft.NETCore.Runtime.CoreCLR/2.1.0-preview3-26409-06/ failed with exception:  [C:\Code\corefx\external\runtime\runtime.depproj]     8:2>C:\Code\corefx\Tools\Symbols.targets(515,7): warning : Код состояния ответа не указывает на успешное выполнение: 404 (Not Found). [C:\Code\corefx\external\runtime\runtime.depproj]  C:\Code\corefx\Tools\Symbols.targets(515,7): warning :    в System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) [C:\Code\corefx\external\runtime\runtime.depproj]  C:\Code\corefx\Tools\Symbols.targets(515,7): warning :    в System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) [C:\Code\corefx\external\runtime\runtime.depproj]  C:\Code\corefx\Tools\Symbols.targets(515,7): warning :    в Microsoft.DotNet.Build.Tasks.DownloadFilesFromUrl.<ExecuteAsync>d__17.MoveNext() [C:\Code\corefx\external\runtime\runtime.depproj]     8:2>C:\Code\corefx\external\runtime\runtime.depproj(103,7): warning : Failed to download CoreCLR symbols  ```  
28947	area-System.Net	Fix ROM Content Test to use IMemoryOwner instead of MemoryManager	Leftover test cleanup from https://github.com/dotnet/corefx/pull/28640    cc @GrabYourPitchforks, @stephentoub     Should I mark this as netfx-port-consider, just like https://github.com/dotnet/corefx/pull/24006?
28945	area-System.Runtime	Stable test for both type of dateStyles. (dd\MM\yyyy and MM\dd\yyyy)	Fixes https://github.com/dotnet/corefx/issues/28879
28944	area-System.Text	Add a GetEncodings method to System.Text.EncodingProvider to support enumerating available character encodings	This API proposal arose out of #28915.    ## Rationale and Use Cases    As of this writing:    * [`System.Text.Encoding.GetEncodings()`](https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding.getencodings?view=netcore-2.1#System_Text_Encoding_GetEncodings) only ever enumerates the _default_ encodings available.    * [`System.Text.CodePagesEncodingProvider.Instance`](https://docs.microsoft.com/en-us/dotnet/api/system.text.codepagesencodingprovider.instance?view=netcore-2.1#System_Text_CodePagesEncodingProvider_Instance) lacks a method for enumerating _additional_ encodings registered via [`System.Text.Encoding.RegisterProvider(EncodingProvider)`](https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding.registerprovider?view=netcore-2.1), which - via a call to `System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance)` - makes the [Windows code-page character encodings](https://msdn.microsoft.com/en-us/library/dd317756(v=vs.85).aspx) available to .NET Core.    However, **it is desirable to have the ability to enumerate _all_ available encodings**:    * Even in the abstract it seems like an awkward omission not to be able to reflect on the available encodings; more concretely, consider the following use cases, both related to [PowerShell Core](https://github.com/PowerShell/PowerShell):    * PowerShell Core commands such as `Get-Content` for reading text files support an `-Encoding` parameter that directly accepts `System.Text.Encoding` instances, so  users expect to be able to _discover_ all available encodings and/or be assisted in selecting a specific encoding with _tab completion_:  ```powershell  Get-Content file.txt -Encoding <tab-keypress>  # should show all available encodings  ```    *  Similarly, a [green-lighted, but not yet implemented](https://github.com/PowerShell/PowerShell/issues/6201) `Convert-TextFile` command will allow conversion between all available character encodings, so their discovery / ease of selection is important there too.    ## Proposed API    Add a `GetEncodings()` method to abstract class [`System.Text.EncodingProvider`](https://github.com/dotnet/corefx/blob/103639b6ff5aa6ab6097f70732530e411817f09b/src/Common/src/CoreLib/System/Text/EncodingProvider.cs):    ```csharp  namespace System.Text  {      public abstract class EncodingProvider      {        // ...        // New virtual method, analogous to System.Text.Encoding.GetEncodings()        public virtual System.Text.EncodingInfo[] GetEncodings ();        // ...  ```    And [`System.Text.CodePagesEncodingProvider`](https://github.com/dotnet/corefx/blob/master/src/System.Text.Encoding.CodePages/src/System/Text/CodePagesEncodingProvider.Default.cs) would then implement that method to return the encodings it provides.    Specifically, a call to `System.Text.CodePagesEncodingProvider.Instance.GetEncodings()` would then return the array of `System.Text.EncodingInfo` instances representing that provider's encodings.    As with `System.Text.Encodings.GetEncodings()`, no particular enumeration order is guaranteed.    ---    ### Integration into `System.Text.Encodings.GetEncodings()`    Once `System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance)` has been called, `System.Text.Encodings.GetEncodings()` will enumerate the additional encodings too, using the newly introduced method on the provider _if_ registered.    In other words: `System.Text.Encodings.GetEncodings()` will return whatever encodings are _currently available_ - whether just the default set by default or the _union_ of the default set and the additional encodings after provider registration.    As with the existing enumeration, the encodings (`EncodingInfo` instances) are returned in no guaranteed order.    If there is more than one registered provider that supports a given encoding, the returned list will contain only one entry for it.    ## Updates (most recent ones first)    * Clarification re returning only distinct encodings.  * Return  behavior clarified again - no particular enumeration order is guaranteed  * Made new `GetEncodings` method `virtual` rather than `abstract`.  * Open question removed in favor of unconditionally outputting all then-available encodings.  * Return behavior clarified (ordering).
28943	area-System.Net	Add more logging to SocketsHttpHandler	As part of looking at the usability of .NET Core network logging (compared to  .NET Framework), I did a walkthru of the current logging in SocketsHttpHandler.  I noticed some inconsistencies in how the NetEventSource logging is being used.    For the 2.1 release, I wanted to at least add more logging to some key areas  including places where we ignore errors/exceptions.    There is still more work to do to improve the logging to make it useful for  developers. This includes doing a better job at logging for System.Net.Sockets  as well as looking into other tool options besides PerfView to look at the traces.    I also fixed the sample script for using starting the traces using Windows logman.  The default log buffer size is too small even for for simple traces. Now, using PerfView  on all the System.Net.* traces no longer shows an error about traces being dropped.
28942	area-System.Threading	Add tests for ValueTask type safety	cc: @tarekgh, @kouvel   Fixes https://github.com/dotnet/coreclr/issues/17470  Depends on https://github.com/dotnet/coreclr/pull/17471 (likely to fail until that's consumed)
28941	area-System.Net	HttpWebResponse.LastModified no longer throws 	"Discovered during the work for #28843    (System.Net.Request) [`HttpWebResponse.LastModified`](https://github.com/dotnet/corefx/blob/master/src/System.Net.Requests/src/System/Net/HttpWebResponse.cs#L143-L157) no longer throws `ProtocolViolationException`:    ```csharp  public DateTime LastModified  {      get      {          CheckDisposed();          string lastmodHeaderValue = Headers[""Last-Modified""];          if (string.IsNullOrEmpty(lastmodHeaderValue))          {              return DateTime.Now;          }          DateTime dtOut;          HttpDateParse.ParseHttpDate(lastmodHeaderValue, out dtOut);          return dtOut;      }  }  ```    It looks like this occurred during the port, as [the file containing the original code was split](https://referencesource.microsoft.com/#System/net/System/Net/Internal.cs,1975), and the code throwing the exception didn't make it.  Contrast this with `HttpWebRequest.IfModifiedSince`/`Date`, [where the exception did make it through](https://github.com/dotnet/corefx/commit/9090df761a1a067c869e43066ba32fd39a26f516#diff-c70c98d319d6fa28c754b26a04324f2eR1444)    cc @davidsh "
28936	area-Infrastructure	Add WebAssembly build architecture	Adds a WebAssembly build architecture (and matching OS) based on using the Emscripten SDK. For the most part, this flavor is similar to Unix (but can be built by any OS). While the current changes are focused on the CoreRT WebAssembly implementation, they will most likely be useful for Mono as well.    This change includes:  * Adding the ```wasm``` architecture and ```WebAssembly``` OS  * Changes to run emscripten for wasm on Windows (building on Mac/Linux can be done in a future change). This also includes compensating for emscripten's tendency to return true for check_function_exists for functions it doesn't actually have.  * Fixes for building System.Native (other native libraries are disabled for now as they have larger dependencies that may not map as well)    The managed build doesn't work yet as contracts need to target the .NET Native System.Private.Corelib, but breaking changes in the Memory class prevent them from compiling.     Fixes #26107  
28935	area-System.Runtime	Add Time value type in System	# Rationale  Today, we have a `DateTime` struct in System that represents a specific date and time, which supports time zones. We also have a `TimeSpan` object that represents a duration (for example the time between two `DateTime`). I feel that we are missing a simple `Time` object that represents a time of day, without it being linked to a particular day.    There are a lot of reasons for representing time without dates. Alarms of an alarm clock, work shifts in a company, etc. T-Sql has a [time](https://docs.microsoft.com/en-us/sql/t-sql/data-types/time-transact-sql) type that cannot today be mapped to a type in .Net.    `DateTime.TimeOfDay` today returns a  `TimeSpan`, but it feels out of place, `TimeSpan` represents a duration and not a specific time of day.    ## Implementation    Implementation would be pretty simple, it would have properties Hours, Minutes, Seconds, Milliseconds, Ticks and a few comparison / transformation methods.    `DateTime.TimeOfDay` would return this new `Time` struct instead of the current `TimeSpan`.
28934	area-System.Net	Some problems in ping API	Related https://github.com/dotnet/corefx/issues/9350    In PowerShell repo we port [TestConnection cmdlet](https://github.com/PowerShell/PowerShell/blob/master/src/Microsoft.PowerShell.Commands.Management/commands/management/TestConnectionCommand.cs) and catch some problems in the ping API.    The problems documented in the [cmdlet tests](https://github.com/PowerShell/PowerShell/blob/master/test/powershell/Modules/Microsoft.PowerShell.Management/Test-Connection.Tests.ps1) - see comments and `if (!isWindows)` blocks.    Below short list:    1. Dontfragment doesn't work on Unixes  This definitely should work on Linux and on [MacOs too](http://www.hackaapl.com/mazimum-transmission-unit-mtu-frame-size-in-os-x/)  2. `PingReply.Buffer` is empty on Unix. Expected - a buffer we send.  3. Ping unreachable host returns ErrorCode 6  (Handle is invalid) on Unix. Expected (as on Windows) - 11001 (Host not found).  4. API always returns Options based on default PingOptions() constructor (Ttl=128, DontFragment = false).  PingReply.Options.DontFragment:  - on Windows always returns false. Expected - real value from ping request.  - on Unix always returns null. Expected - real value from ping request (or false if not implemented).    PingReply.Options.Ttl - always 128.  Expected - real value from ping request.  PingReply.Options.Status - always Success (if we expect 'TtlExpired'). Expected - real status.    5. PingReply doesn't return ScopeId in IPAddress     
28933	area-System.Globalization	Add GetISOWeekOfYear()	## Rationale    .Net don't implement [ISO 8601 standard](https://en.wikipedia.org/wiki/ISO_week_date#Relation_with_the_Gregorian_calendar) - it have alternative scheme in:  ```c#  System.Globalization.Calendar.GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek);  ```    Unix `date` utility implements ISO 8601:  ```  date +%V  ```    In [PowerShell repo ](https://github.com/PowerShell/PowerShell/pull/6542) we use workaround described [here](https://blogs.msdn.microsoft.com/shawnste/2006/01/24/iso-8601-week-of-year-format-in-microsoft-net/) (see Keno's comment) for:  ```powershell  Get-Date -UFormat %V  ```    .Net should have parity and native implementation.    ISO 8601 is culture-independent so we can use static methods.    If we are going in the direction I believe it make sense consider all ISO8601 objects and compatibility with Unix `date` utility.  https://en.wikipedia.org/wiki/ISO_week_date#Relation_with_the_Gregorian_calendar  - first week  - last week  - weeks per year    http://man7.org/linux/man-pages/man1/date.1.html  - `%g` last two digits of year of ISO week number (see %G)  - `%G` year of ISO week number (see %V); normally useful only with %V  - `%V` ISO week number, with Monday as first day of week (01..53)    ### Proposed API    ```c#    namespace System.Globalization  {      public abstract class Calendar : ICloneable      {          public static class ISO           {              // All ISO 8601 objects   (https://en.wikipedia.org/wiki/ISO_week_date#Relation_with_the_Gregorian_calendar)              public static int GetWeekOfYear(DateTime time);              public static int GetFirstWeekOfYear(DateTime time);              public static int GetLastWeekOfYear(DateTime time);              public static int GetWeeksPerYear(DateTime time);                     // Compatibility with Unix date utility (http://man7.org/linux/man-pages/man1/date.1.html)               // %G year of ISO week number (see %V); normally useful only with %V              public static int GetYearOfWeek(DateTime time);      }  }    ```    Please note that the proposed API is a static and not instance member. The reason is ISO week is culture and calendar independent.    ### Alternative Design    ```C#  namespace System.Globalization  {      public abstract class Calendar : ICloneable      {          // All ISO 8601 objects   (https://en.wikipedia.org/wiki/ISO_week_date#Relation_with_the_Gregorian_calendar)          public static int GetISOWeekOfYear(DateTime time);          public static int GetISOFirstWeekOfYear(DateTime time);          public static int GetISOLastWeekOfYear(DateTime time);          public static int GetISOWeeksPerYear(DateTime time);            // Compatibility with Unix date utility (http://man7.org/linux/man-pages/man1/date.1.html)            // %G year of ISO week number (see %V); normally useful only with %V          public static int GetISOYearOfISOWeek(DateTime time);      }  }    ```
28932	area-System.Linq	`Linq.Enumerable.Any` should return false on null	For `Any` function on collection, we should treat null collection as empty    And I think `predicate` should be `null` as default parameter    It could be another similar name for compatibility catch but please contain it within corefx    ```C#          public static bool IsAny<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate = null)          {              if (source == null)              {                 return false;              }                if (predicate == null)              {                  using (IEnumerator<TSource> e = source.GetEnumerator())                  {                     return e.MoveNext();                  }              }                foreach (TSource element in source)              {                  if (predicate(element))                  {                      return true;                  }              }                return false;          }  ```
28931	area-System.Net	Fix regression on OpenSsl exception message	Managed code relies on SSL error queue to give proper error information. PAL layer was clearing up the error queue and the exception messages were not precise.    This changes returns to the state before in which the managed side was in charge of cleaning up the queue (basically we care only about the last error). Perhaps in the future we should look in changing the PAL signature and doing all at once in the same place, but, as it is the fix gets us to where we were before.    Removing the error queue clean up is not a concern in light of the investigation of #25676 and as it is the managed will clean up the queue whenever necessary.    Fixes #28365    (Separating this PR from the one for #25676 since that one can take more time, but it will have the same fix and I've been testing it on the PR already).
28930	area-System.Runtime	Implicit conversion between KeyValuePair and Tuple	"Please add implicit conversion from Tuple to KeyValuePair    Should be able to  ```C#  KeyValuePair<string,int> kvp = ("""",0);  ```    I'm also not sure that `Deconstruct` also work on `Linq.Cast<(key,value)>()` or not, if not I think implicit conversion from KeyValuePair to Tuple also needed"
28929	area-System.Threading	Unbound channel + calling complete with zero items written = poor performance	SignalR is using an unbound channel in a benchmark and we have noticed odd performance.    Writing one item and then calling complete is significantly faster than writing zero items and calling complete.    ```                              Method |       Mean |     Error |    StdDev |      Op/s |   Gen 0 |  Gen 1 | Allocated |  ---------------------------------- |-----------:|----------:|----------:|----------:|--------:|-------:|----------:|       StreamChannelReaderCount_Zero |  69.397 us | 2.8020 us | 2.7519 us |  14,409.9 |  0.1221 |      - |    4135 B |        StreamChannelReaderCount_One |   8.040 us | 0.4524 us | 0.4443 us | 124,384.6 |  0.0153 |      - |    4012 B |  ```    Code:    https://github.com/aspnet/SignalR/blob/bd78785f8d36be6e650ac60813b8d9c1ca9983d3/benchmarks/Microsoft.AspNetCore.SignalR.Microbenchmarks/DefaultHubDispatcherBenchmark.cs#L144-L158    ```  DefaultHubDispatcherBenchmark benchmark = new DefaultHubDispatcherBenchmark();  benchmark.GlobalSetup();  for (int i = 0; i < 100000; i++)  {      benchmark.StreamChannelReaderCount_Zero().GetAwaiter().GetResult();  }  ```    Additional investigation:    https://github.com/aspnet/SignalR/issues/1811#issuecomment-379601460
28928	area-System.Memory	Aggressive Inline fast-path of BuffersExtensions split methods	Methods are split into a fast-path inline part and a slower non-inline part. Aggressively inline the fast-path.    from https://github.com/aspnet/SignalR/pull/1907#issuecomment-379589824    /cc @ahsonkhan @pakrym @davidfowl @JamesNK 
28927	area-System.Memory	Created performance tests for ReadOnlySequence	I created performance tests for ReadOnlySequence next methods: Enumerator, First, GetPosition, Slice, TryGet.
28925	area-System.Net	update of nuget packages like System.Net.WebSockets.Client	Hi,    I din't found any documentation what is your policy of updating these kind of nuget packages.  @stephentoub has added some days ago the import feature of RemoteCertificateValidationCallback as connect option and I like to understand when I can expect a new nuget packege.    bye  Konrad
28924	area-Infrastructure	Installation guidance for Ubuntu 18.04	Ubuntu 18 is listed as supported, but there doesn't seem to be any apt feed or deb package download link for it.  I've tried taking the 17.10 links/feeds and replacing version numbers / os codenames, but they all 404.    Please provide download links/install instructions for Ubuntu 18.
28922	area-System.Data	"Test System.Data.Tests.DataSetTest/SqlTypes failed with ""Exit code was 32899 but it should have been 42\nExpected: True\nActual: False"""	Tests failure:  System.Data.Tests.DataSetTest2.DataSetSpecificCulture (from (empty))   System.Data.Tests.AppDomainsAndFormatInfo.Bug82109  System.Data.Tests.DataSetTest.WriteXmlSchema (from (empty))   System.Data.Tests.DataSetTest.WriteXmlModeSchema1  System.Data.Tests.SqlTypes.SqlStringTest.Properties  System.Data.Tests.DataSetReadXmlSchemaTest.LocaleOnRootWithoutIsDataSet  System.Data.Tests.DataTableTest.PropertyExceptions (from (empty))     MESSAGE:  Exit code was 32899 but it should have been 42\nExpected: True\nActual: False  ~~~  STACK TRACE:  at System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Dispose(Boolean disposing) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 254 at System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Dispose() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 228 at System.Data.Tests.DataSetTest.WriteXmlModeSchema1() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/src/System.Data.Common/tests/System/Data/DataSetTest.cs:line 1568  ~~~    Details: https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_debug/471/testReport/
28921	area-Serialization	"Test System.Data.Tests.SqlTypes.SqlInt64Test.ReadWriteXmlTest failed with ""System.NullReferenceException : Object reference not set to an instance of an object."""	Test System.Data.Tests.SqlTypes.SqlInt64Test.ReadWriteXmlTest has failed.    MESSAGE:  System.NullReferenceException : Object reference not set to an instance of an object.  ~~~  STACK TRACE:  at System.Collections.Generic.Dictionary`2.FindEntry(TKey key) in /root/coreclr/src/mscorlib/shared/System/Collections/Generic/Dictionary.cs:line 410 at System.Collections.Generic.Dictionary`2.TryGetValue(TKey key, TValue& value) in /root/coreclr/src/mscorlib/shared/System/Collections/Generic/Dictionary.cs:line 873 at System.Xml.Serialization.XmlSerializer..ctor(Type type, String defaultNamespace) in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_centos7.1_release/src/System.Private.Xml/src/System/Xml/Serialization/XmlSerializer.cs:line 267 at System.Data.Tests.SqlTypes.SqlInt64Test.ReadWriteXmlTestInternal(String xml, Int64 testval, String unit_test_id) in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_centos7.1_release/src/System.Data.Common/tests/System/Data/SqlTypes/SqlInt64Test.cs:line 724 at System.Data.Tests.SqlTypes.SqlInt64Test.ReadWriteXmlTest() in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_centos7.1_release/src/System.Data.Common/tests/System/Data/SqlTypes/SqlInt64Test.cs:line 750  ~~~    Details:  https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_centos7.1_release/364/testReport/System.Data.Tests.SqlTypes/SqlInt64Test/ReadWriteXmlTest/
28920	area-System.Memory	Use of Unsafe.As in ReadOnlySequence can result in breaking type safety	In multiple places, the ReadOnlySequence struct checks a flag set in one field and then uses that to determine how to cast an object in another field, using Unsafe.As, e.g.  https://github.com/dotnet/corefx/blob/da1322d90a1412290a82a5ace157da4cc58dabf4/src/System.Memory/src/System/Buffers/ReadOnlySequence_helpers.cs#L39-L42  If the ReadOnlySequence suffers a torn read/write, we could end up with the type information from one instance conflated with the object from another, such that we'd then use Unsafe.As to perform the wrong cast, and violate type safety.    cc: @jkotas, @davidfowl, @pakrym, @ahsonkhan, @GrabYourPitchforks 
28919	area-Infrastructure	Enable native build with Clang 6.0	"Three kinds of warnings were reported as errors with Clang 6.0:    ```  [ 35%] Building C object System.Native/CMakeFiles/System.Native-Static.dir/pal_networking.c.o  /corefx/src/Native/Unix/System.Native/pal_networking.c:2048:19: error: implicit conversion changes signedness:        'enum SocketEvents' to 'int32_t' (aka 'int') [-Werror,-Wsign-conversion]      sae->Events = GetSocketEvents(events);                  ~ ^~~~~~~~~~~~~~~~~~~~~~~  ```    ```  [ 37%] Building CXX object System.Native/CMakeFiles/System.Native.dir/pal_process.cpp.o  /corefx/src/Native/Unix/System.Native/pal_process.cpp:370:38: error: result of comparison 'uint64_t'        (aka 'unsigned long') > 18446744073709551615 is always false [-Werror,-Wtautological-type-limit-compare]      if (value == UINT64_MAX || value > std::numeric_limits<rlim_t>::max())                                 ~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ```    ```  [ 68%] Building CXX object System.Net.Http.Native/CMakeFiles/System.Net.Http.Native-Static.dir/pal_easy.cpp.o  /corefx/src/Native/Unix/System.Net.Http.Native/pal_easy.cpp:11:38: error: comparison of two values with different        enumeration types ('PAL_CURLoption' and 'CURLoption') [-Werror,-Wenum-compare]  static_assert(PAL_CURLOPT_INFILESIZE == CURLOPT_INFILESIZE, """");                ~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~    (and lots of these)  ```    With this fix, CoreFX builds with Clang 6.0. Tested on Ubuntu 18.04."
28916	area-System.Memory	Fix typo 'segement' to 'segment'	
28915	area-System.Text	Support for enumerating non-default code pages added with RegisterProvider (System.Text.Encoding)	The [documentation for `System.Text.Encoding.GetEncodings()`](https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding.getencodings?view=netframework-4.7.1#System_Text_Encoding_GetEncodings) tells us (emphasis added):    > The list of supported encodings returned by the GetEncodings method **does not include any   > additional encodings made available by any EncodingProvider implementations that** were registered by calls to the RegisterProvider method.    Is there no way to enumerate these additional encodings?    Unfortunately, [`System.Text.CodePagesEncodingProvider.Instance`](https://docs.microsoft.com/en-us/dotnet/api/system.text.codepagesencodingprovider.instance?view=netcore-2.0#System_Text_CodePagesEncodingProvider_Instance) lacks a method for enumerating them.    
28912	area-System.Diagnostics	What API should I use to consume ETW?	What API souuld I use to consume ETW:  1. System.Diagnostics.Tracing.EventSource (BCL)  2. Microsoft.Diagnostics.Tracing.EventSource (NuGet)  3. Microsoft.Diagnostics.Tracing.TraceEvent (NuGet)  4. krabsetw (NuGet)    ?  And where Microsoft.Diagnostics.Tracing.Logging fits in?    I read this at https://blogs.technet.microsoft.com/office365security/hidden-treasure-intrusion-detection-with-etw-part-2/:    > TraceEvent is a library used by the PerfView tool and has the benefits of being a well-designed .NET API. Unfortunately, it doesn’t perform well for scenarios where we want to keep memory usage to a minimum. System.Diagnostics.Tracing has the advantage of being part of the .NET BCL but we’ve observed intermittent exceptions and unexpected behavior in the past. Additionally, it suffers from the same memory consumption issue that TraceEvent does.  > In response to these challenges, Office 365 Security chose to implement our own API with three primary goals:  > •Intuitive and flexible API  > •High performance – filtering events in the native layer  > •Available both in .NET and native C++  > The result of this work is krabsetw, a library we’ve open-sourced under the MIT license. It contains both a native C++ API as well as a .NET API. This library is used in production today across Office 365 workloads on more than 100,000 machines. With filtering, we’re able to process more than more than 500 billion events per day, generating more than 7TB of data per day across the machines.  >     Is this still true?.. It is written one year ago (May 9, 2017), and other API's have updates since.   I want to know what API I can depend on, if not now, at least in upcoming updates.    Another question: Do I have to use these NuGets too?  Microsoft.Diagnostics.Tracing.TraceEvent.SupportFiles  Microsoft.Diagnostics.Tracing.EventRegister    
28911	area-System.Memory	Hover Text for Span<T>/Memory<T> in Visual Studio ignores 'Hexadecimal Display' setting.	Not sure if this is a Visual Studio bug (if so, not sure where to submit that) - but, this issue seems to be happening with at least `System.Memory.Span<T>` and `System.Memory.Memory<T>` from what I can tell.  (Might have to do with #27338 / #16450 ?)    When hovering over one of these objects in Visual Studio the hover text ignores the User's Setting of 'Hexadecimal Display' and always displays the size of the array segment in decimal format.    The attached photo has Visual Studio in 'Hexadecimal Display' with a normal `byte[]` ({byte[0x00010000]}) alongside a `Memory<byte>`'s hovertext ({Byte[1535]}).    I feel it's fairly common to work in this Hex mode when dealing with memory, and this not working the same could lead to issues, or overlooking bugs (which happened to me a couple times before I caught on).    System.Memory Nuget Version: 4.5.0-preview1-26216-02  Visual Studio: 15.6.5    ![image](https://user-images.githubusercontent.com/618397/38453354-1d2b5f30-3a09-11e8-898f-f1069976dbd6.png)  
28909	area-System.Security	"How to use ""RSA/ECB/PKCS1Padding"" and ""RSA/ECB/OAEPPadding"""	I need to use these two algorithms but I don't know how to use the .net core  help me!!!
28907	area-System.ComponentModel	Clean code for System.ComponentModel*	#17905 
28906	area-Infrastructure	Update the System.Runtime and System.Memory ref based on new buildtools	Fixes https://github.com/dotnet/corefx/issues/28870  Based on changes in https://github.com/dotnet/buildtools/pull/2003.    cc @weshaggard, @nguerrera, @joshfree, @bartonjs, @agocke, @jaredpar, @gafter, @terrajobst, @jcouv, @MadsTorgersen 
28905	area-System.Console	Clean up GetConsoleTitle	The Windows interop code for GetConsoleTitle was way more convoluted than it needed to be.  It also isn't accurate and overallocates. I've removed things that date back to 9x and allowed  for a case that showed up in RS2.
28902	area-Infrastructure	Disable Tizen CI runs	Still allows them to be run when explicitly requested, but they will no longer be run per-pr or on push    related: https://github.com/dotnet/corefx/issues/28901
28899	area-Infrastructure	System.Buffers: XML doc in NuGet package (version 4.4.0 and later) differs from source code XML doc	**TL;DR:** Something appears to be wrong with the XML documentation included in the `System.Buffers` NuGet package, versions 4.4.0 and later. (4.4.0-preview2-25405-01 and earlier appear to have been fine*.) It doesn't match the XML documentation in the source code files.    ----    I was reading the documentation for parameter `clearArray` of the method `ArrayPool<T>.Return(T[] array, bool clearArray)`. It goes as follows (formatting and emphasis by me):    > Indicates whether the contents of the buffer should be cleared before reuse. **If bufferLength is set to true** [...]. **If bufferLength is set to false** [...].    The reference to `bufferLength` doesn't make any sense. There's nothing public called `bufferLength` in this class. Here's a screenshot of the documentation showing the same text:    ![XML documentation for `ArrayPool<T>.Return` as seen in Visual Studio](https://user-images.githubusercontent.com/104481/38443926-af5ca6f0-39ed-11e8-828b-8a725cacdc87.png)    Note that I'm using the latest package version, `4.5.0-preview1-26216-02`. The file `C:\Users\stakx\.nuget\packages\system.buffers\4.5.0-preview1-26216-02\version.txt` contains the hash `00490982c7952e96a1089818467caa6fd07541b2`, which I assume is a SHA-1 commit hash in this project's Git repository. Looking at that commit's version of `ArrayPool.cs`, this is what the documentation should read:    https://github.com/dotnet/corefx/blob/00490982c7952e96a1089818467caa6fd07541b2/src/System.Buffers/src/System/Buffers/ArrayPool.cs#L103-L108    No mention of `bufferLength` here, and this is the XML documentation you get with `System.Buffers` before version 4.4.0.    Looking at the version history of that file, there was never any `bufferLength` bit here as far as I can tell.    So what went wrong with the XML documentation starting with package version 4.4.0? Where does the `bufferLength` bit come from?    ----    **(*)** XML docs in package versions before 4.4.0 were fine only in the sense that the documentation matched with that from the source code... but there were other, probably unrelated problems: The XML documentation file was either named incorrectly (just `.xml`) or missing (not in the `lib\` directory, but in the `ref\` directory), so one wouldn't get any documentation in VS IntelliSense.
28898	area-System.Net	HttpClient.GetAsync/PostAsync sets different error code on SocketException on Windows 7 when host could not be resolved	"On all platforms except Windows 7 when host name could not be resolved we get `HttpRequestException` with inner `SocketException` with `SocketException.SocketErrorCode` set to `SocketError.HostNotFound` while on Windows 7 we get `SocketErrorCode.NoData`.    This is problematic in Wcf scenarios where they wrap our exception and would like to throw `System.ServiceModel.EndpointNotFoundException` but the inconsistency makes it more difficult.    Simple repro is (PostAsync has identical result):  ```csharp  var r = (new HttpClient()).GetAsync(""http://nonexistenthostname/foo/bar"").Result;  ```        <details>  <summary>Here is the exact exception being thrown on Windows7</summary>    ```          System.AggregateException : One or more errors occurred. (The requested name is valid, but no data of the requested type was found)          ---- System.Net.Http.HttpRequestException : The requested name is valid, but no data of the requested type was found          -------- System.Net.Sockets.SocketException : The requested name is valid, but no data of the requested type was found          Stack Trace:             E:\A\_work\104\s\src\mscorlib\src\System\Threading\Tasks\future.cs(493,0): at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)             C:\Users\dotnet-bot\Desktop\src\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.cs(3180,0): at System.Net.Http.Functional.Tests.HttpClientHandlerTest.HttpClientNonExistingHostnameTest()             ----- Inner Stack Trace -----             C:\Users\dotnet-bot\Desktop\src\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ConnectHelper.cs(86,0): at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)             E:\A\_work\104\s\src\mscorlib\shared\System\Threading\Tasks\ValueTask.cs(723,0): at System.Threading.Tasks.ValueTask`1.get_Result()             C:\Users\dotnet-bot\Desktop\src\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs(338,0): at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)             E:\A\_work\104\s\src\mscorlib\shared\System\Threading\Tasks\ValueTask.cs(723,0): at System.Threading.Tasks.ValueTask`1.get_Result()             C:\Users\dotnet-bot\Desktop\src\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs(480,0): at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask)             E:\A\_work\104\s\src\mscorlib\shared\System\Threading\Tasks\ValueTask.cs(723,0): at System.Threading.Tasks.ValueTask`1.get_Result()             C:\Users\dotnet-bot\Desktop\src\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs(271,0): at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)             C:\Users\dotnet-bot\Desktop\src\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\RedirectHandler.cs(30,0): at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)             C:\Users\dotnet-bot\Desktop\src\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs(479,0): at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)             ----- Inner Stack Trace -----             C:\Users\dotnet-bot\Desktop\src\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ConnectHelper.cs(67,0): at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)  ```  </details>    cc: @mconnew @stephentoub @davidsh @karelz"
28897	area-System.Text	Native UTF16 in regex	The note under https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#API_features says:    ![image](https://user-images.githubusercontent.com/33230602/38444348-8480c326-39f7-11e8-8879-2ca14b6b5b8c.png)    Any chance to extend regex support from UCS2's 64K to UTF16's 1,112,064 chars in .NET Core?
28896	area-System.Memory	Add {ReadOnly}Memory.Span tests when memory contains invalid values	Related to https://github.com/dotnet/coreclr/pull/17452#discussion_r179748571  cc: @ahsonkhan, @jkotas 
28892	area-System.Net	Port/improve Mono's managed Dns implementation?	@migueldeicaza highlighted to me today that Mono has a managed DNS implementation:  https://github.com/mono/mono/tree/0bcbe39b148bb498742fc68416f8293ccd350fb6/mcs/class/System/Mono.Net.Dns  We should look into whether it would make sense to port and improve upon that, so as to be able to avoid depending on the DNS resolution capabilities built into specific OSes (e.g. we rely on Windows for its overlapped I/O support, but an equivalent doesn't exist built-in on Linux, and so there our async support is based on queueing work items that in turn invoke the synchronous APIs).    cc: @migueldeicaza, @geoffkizer 
28891	area-System.Collections	Adding test for Remove when entries do not exist. Should not throw.	Fixes #28763    cc: @danmosemsft @benaadams 
28890	area-System.Runtime	Environment.ExpandEnvironmentVariables on Linux has Windows behavior	"`Environment.ExpandEnvironmentVariables()` on Linux expands variables in `%VAR_NAME%` format rather than `$VAR_NAME`.    SDK version: 2.1.4  OS: Ubuntu 16.04    A simple test:        Environment.ExpandEnvironmentVariables(""$HOME/test"");    Expected value: `/home/{user}/test`  Actual value: `$HOME/test`    However running:        Environment.ExpandEnvironmentVariables(""%HOME%/test"");    gives expanded result `/home/{user}/test`."
28889	area-System.Net	Stop nulling out fields in SafeDeleteSslContext dispose	Nulling out these fields in SafeDeleteSslContext.Dispose causes occasional difficult to reproduce exceptions in CI:  ```  Unhandled Exception: System.ArgumentNullException: Value cannot be null.     at System.Threading.Monitor.ReliableEnter(Object obj, Boolean& lockTaken)     at System.Net.SafeDeleteSslContext.WriteToConnection(Void* connection, Byte* data, Void** dataLength)     at Interop.AppleCrypto.SslHandshake(SafeSslHandle sslHandle)     at System.Net.Security.SslStreamPal.PerformHandshake(SafeSslHandle sslHandle)     at System.Net.Security.SslStreamPal.HandshakeInternal(SafeFreeCredentials credential, SafeDeleteContext& context, SecurityBuffer inputBuffer, SecurityBuffer outputBuffer, Boolean isServer, Boolean remoteCertRequired, String targetName)  ```    The fix is to stop nulling out these fields in the dispose method, and to allow the garbage collector to take care of them instead.    Fixes: #28759  
28886	area-Infrastructure	System.Drawing.Common 4.5.0 isn't added to references in a Xamarin.Android project while adding the package from nuget.org	"I tried to add one package to a Xamarin.Android application. This package has System.Drawing.Common 4.5.0 in its dependencies.  After that, the project compilation is stopped with an error:  ```  Exception while loading assemblies: System.IO.FileNotFoundException: Could not load assembly 'System.Drawing.Common, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. Perhaps it doesn't exist in the Mono for Android profile?  error : File name: 'System.Drawing.Common.dll'  ```  The packages.config file contains the correct record:  ```  <package id=""System.Drawing.Common"" version=""4.5.0-preview1-26216-02"" targetFramework=""monoandroid81"" />  ```  But **System.Drawing.Common** is absent in the reference list.     It seems that **Visual Studio** tries to get **System.Drawing.Common.dll** for **Xamarin.Android** runtime, because the package contains the **MonoAndroid10** folder. It can't do this, because this folder doesn't contain any DLL-files, but the stub file with the '\_.\_' name.    ![2018-04-06_15-55-52](https://user-images.githubusercontent.com/1681154/38422372-26819e6a-39b3-11e8-95aa-eba383388bbd.png)    If I find System.Drawing.Common.dll for **.NET Standard 2.0** and manually add it to references, the project operates correctly.     **Steps to reproduce:**  - Run Visual Studio Professional 2017 Version 15.6.5  - Create new Android -> Blank App (Android)  - Add System.Drawing.Common 4.5.0 via Manage Nuget Packages...     **Current result:** System.Drawing.Common.dll isn't in references.     **Expected result:** System.Drawing.Common.dll is in references.    **Additional information:**  Microsoft Visual Studio Professional 2017   Version 15.6.5  VisualStudio.15.Release/15.6.5+27428.2027  Microsoft .NET Framework  Version 4.7.02556    Installed Version: Professional    NuGet Package Manager   4.6.0  NuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.    VisualStudio.Mac   1.0  Mac Extension for Visual Studio    Xamarin   4.9.0.753 (f0f46392f)  Visual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.    Xamarin Designer   4.10.96 (a702a9ceb)  Visual Studio extension to enable Xamarin Designer tools in Visual Studio.    Xamarin.Android SDK   8.2.0.16 (HEAD/a78295902)  Xamarin.Android Reference Assemblies and MSBuild support.    Xamarin.iOS and Xamarin.Mac SDK   11.9.1.24 (f62de47)  Xamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support."
28885	area-Infrastructure	Improve CMake detection on Windows when not in PATH	Equivalent to https://github.com/dotnet/coreclr/pull/16328    In CMake v10.2, the key `hklm:\SOFTWARE\Kitware` returns:    ```powershell      Hive: HKEY_LOCAL_MACHINE\SOFTWARE\Kitware    Name                           Property  ----                           --------  CMake                          InstallDir : C:\Program Files\CMake\  ```    with no space after `CMake` and property name `InstallDir`,  instead of `'(default)'`.    Fix #28799
28884	area-System.Threading	SemaphoreSlim and Wait(0)	"Hi,    I am very new with C# so I apologise in advance if this is dumb. I read a lot of docs and conversation threads and it is pretty clear that the ""wait(0)"" is supposed to return immediately with either true or false.    Problem is that when I make basic test, I can see that the ""wait"" calls can take a lot of time (multiple seconds) to return.    Might just be the way I run the multiple threads test, but still, if someone could confirm the behavior?    In theory in the following test the time difference between ""Enter"" log and ""Wait"" log should be very small, but as explained when I run it (with a lot of threads) I get large difference, like 10 seconds.    ```  static SemaphoreSlim s = new SemaphoreSlim(1, 1);    static void Test(object x)          {              Console.Write(""Enter"" + x + "" "" + System.DateTime.Now + ""\n"");              bool b = s.Wait(0);              Console.Write(""Wait"" + x + "" "" + System.DateTime.Now + ""\n"");              if (b)              {                  try                  {                      Console.Write(b + "" "" + x + ""\n"");                      for (long i = 1; i <= 5000000000; i++) {                          //                      }                  }                  finally                  {                      Console.Write(""Exit"" + x + "" "" + System.DateTime.Now + ""\n"");                      s.Release();                  }              } else {                  Console.Write(b + "" "" + x + ""\n"");                  Console.Write(""Exit False "" + x + "" "" + System.DateTime.Now + ""\n"");              }          }  ```    Thank you for your time.    "
28883	area-Infrastructure	Update netfx alias to target .NET 4.7.1	This updates the netfx alias to now target .NET 4.7.1 instead of .NET 4.6.1    Note that a lot of projects' package configurations needed to be updated since the package supports net461 and we still want to build them on the vertical and run tests for them.    cc: @davidsh for the disabled tests on System.Net.* related to issue: https://github.com/dotnet/corefx/issues/28882    Build All Configurations leg will fail with a related error that it can't find System.ValueTuple (https://github.com/dotnet/corefx/pull/28866), this needs to be fixed on buildtools and I'm working on it), but I wanted to start getting feedback    @ericstj @weshaggard could you please take a look?    FYI: @AlexGhiondea @joperezr @danmosemsft @stephentoub 
28882	area-System.Net	System.Net.Http.Functional and System.Net.Sockets tests fail on NETFX when running on .NET 4.7.1	There are 12 total failures under this test projects when running this tests on .NET 4.7.1 (installed on machine when running them). Note that this is a combination of Outerloop and Innerloop failures. When running Innerloop tests only System.Net.Http.Functional.Tests fail, with 7 failures (all of them present in the Outerloop run).    I will disable this tests to have a clean CI and official builds but they need to be investigated to understand what is wrong.    Link to Outerloop run:  https://mc.dot.net/#/user/safern/pr~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fdesktop~2Fcli~2F/20180405.1512    cc: @karelz @davidsh @danmosemsft     EDIT by @krwq:    Repro:    ```  git fetch github pull/28883/head:pull_28883  git checkout pull_28883  build -framework:netfx  cd src\System.Net.Sockets\tests\FunctionalTests  msbuild /t:RebuildAndTest /p:TargetGroup=netfx /p:Outerloop=true  ```    Adding `disabled-test` tag since @safern is disabling them in his PR (need to reenable to repro)
28880	area-System.Memory	Fix MemoryManager ctor, add unit and perf tests, and improve performance	- Check for manager == null in the constructor  - ~Add and use Span.DangerousCreate in the Memory.Span property getter (to remove unnecessary bounds checks).~  - Add unit and performance tests.    !~[image](https://user-images.githubusercontent.com/6527137/38406289-26920f14-3929-11e8-865e-4f0ecaf05acf.png)~    Depends on coreclr PR to go through for CI to be green: https://github.com/dotnet/coreclr/pull/17452    cc @dotnet/corefxlab-contrib, @jkotas, @pakrym, @davidfowl, @stephentoub  
28879	area-System.Runtime	System.Runtime.Extensions.Performance.Tests failed on spanish Windows 10 (Non English CI) 	```  System.FormatException : String '12/31/1999 11:59:59 PM' was not recognized as a valid DateTime.  Stack Trace :     at System.DateTimeParse.Parse(ReadOnlySpan`1 s, DateTimeFormatInfo dtfi, DateTimeStyles styles) in E:\A\_work\104\s\src\mscorlib\shared\System\Globalization\DateTimeParse.cs:line 2438     at System.Convert.ToDateTime(String value) in E:\A\_work\104\s\src\mscorlib\shared\System\Convert.cs:line 1922     at System.Perf_Convert.ToDateTime_String(String value) in D:\j\workspace\windows-TGrou---6368dffa\src\Sys    System.FormatException : String '12/31/1999' was not recognized as a valid DateTime.  Stack Trace :     at System.DateTimeParse.Parse(ReadOnlySpan`1 s, DateTimeFormatInfo dtfi, DateTimeStyles styles) in E:\A\_work\104\s\src\mscorlib\shared\System\Globalization\DateTimeParse.cs:line 2438     at System.Convert.ToDateTime(String value) in E:\A\_work\104\s\src\mscorlib\shared\System\Convert.cs:line 1922     at System.Perf_Convert.ToDateTime_String(String value) in D:\j\workspace\windows-TGrou---6368dffa\src\System.Runtime.Extension  ```    Couple of failures ocur on new spanish windows 10 CI leg cc @danmosemsft   
28878	area-System.Diagnostics	System.Diagnostics.PerformanceCounter tests fail on Windows 10	https://mc.dot.net/#/user/Anipik/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/c9dded080a169148f306c0310c1a7e14d520f63b/workItem/System.Diagnostics.PerformanceCounter.Tests    The assertion fail is same for all the tests   ```  Assert.NotEqual() Failure  Expected: Not 0  Actual:   0  ```  The tests affected are   InstanceDataCollectionCollection_Contains_Valid   InstanceDataCollectionCollection_Contains_inValid  InstanceDataCollectionCollection_CopyTo   InstanceDataCollectionCollection_GetItem_Invalid  InstanceDataCollectionCollection_GetKeys   InstanceDataCollectionCollection_GetValues   InstanceDataCollection_GetItem_ExistingCounter   InstanceDataCollection_GetKeys   InstanceDataCollection_GetValues   InstanceDataCollection_NullTest    cc @danmosemsft     
28877	area-System.Memory	Add tests for Span.Overlaps extension method (just like ReadOnlySpan.Overlaps)	API added in https://github.com/dotnet/corefx/pull/24980.    Improving code coverage (copy/paste and modified the existing tests on ReadOnlySpan).    cc @ektrah, @dotnet/corefxlab-contrib 
28876	area-System.Runtime	Fix the test gap in StringTests for IndexOf, LastIndexOf when string is empty	cc @stephentoub, @jkotas, @tarekgh 
28875	area-System.Memory	Code cleanup and formatting for System.Memory src and test	Each set of changes is a separate commit.    Related PR on the coreclr side: https://github.com/dotnet/coreclr/pull/17451    cc @dotnet/corefxlab-contrib, @stephentoub, @jkotas  
28874	area-Infrastructure	Update CoreFx, ProjectNTfs, ProjectNTfsTestILC, Standard to uwp61-26409-01, rel-26406-00, rel-26406-00, preview1-26409-01, respectively (release/uwp6.1)	
28872	area-System.Data	Data.Common tests fixed for non english windows	Fixes https://github.com/dotnet/corefx/issues/27626
28870	area-System.Memory	Add a dummy int field in the reference assembly for Span (and other structs containing private fields)	> we need to update the reference assembly tool to keep a dummy int field if there are any valuetype fields and not collapse it with the dummy object field if there is one    We need to update the logic in buildtools (within IsOrContainsReferenceType) and regenerate the reference assemblies:  https://github.com/dotnet/buildtools/blob/master/src/Microsoft.Cci.Extensions/Extensions/CSharp/CSharpCciExtensions.cs#L114    **Update to the ref assembly generation rules:**  - If a struct contains any private field, a dummy valuetype field needs to be created.  - If a struct contains any reference type field, a dummy object field must also be created.    This is required since the [compiler will not catch bugs](https://github.com/dotnet/roslyn/pull/25886/files) in user code going against the definite assignment rules (specifically for structs). For example:  https://stackoverflow.com/questions/49653151/spant-does-not-require-local-variable-assignment-is-that-a-feature      cc @weshaggard, @joshfree, @jaredpar, @bartonjs, @nguerrera, @agocke, @gafter 
28868	area-System.Numerics	Feature Request: Math.Pow for uint	It would often be pretty neat to have an overload of Math.Pow for (int x, uint pow) that returns x^pow.  That could be implemented as follows:  ```  static int Pow(int x, uint pow)        {            int ret = 1;            while ( pow != 0 )            {                if ( (pow & 1) == 1 )                    ret *= x;                x *= x;                pow >>= 1;            }            return ret;        }  ```  Credit to [Vilx-](https://stackoverflow.com/users/41360/vilx) for the [original code](https://stackoverflow.com/a/383596/6730162)
28864	area-Serialization	Area-Serialization Sprint 134	The issue is for tracking issues to be done in sprint 134 (due by 4/27/2018)
28863	area-System.Net	Uri - fix IPv6 address format	Here are the issues in Uri with IPv6 address we may want to fix:    1. `Uri.IdnHost` should include `[]` around IPv6 address.      * Currently it returns `::1234`, it should return `[::1234]`.  2. `Uri.Host` LLA (Link-local address) IPv6 address doesn't contain `%number` part.      * Currently it returns `[fe80::e077:c9a3:eeba:b8e9]`, it should return `[fe80::e077:c9a3:eeba:b8e9%18]`.      * Note: `Uri.IdnHost` correctly contains the `%number` part.    If we choose to fix these problems, we can undo workarounds in #28740, #28578, #28849 and #28971.    /cc: @dotnet/ncl 
28862	area-System.Security	[WIP] *NO MERGE* Mitigate the known case of missing SSL error clean up	[EDIT to reflect current content of PR]    *NO MERGE* I will be using this PR to run CI but will separate the product changes on their own PR.    This PR covers the following:    1. Fixes locations that were leaving errors on the SSL error queue:    1.1. Calls to SslShutdown in [src/Common/src/Interop/Unix/System.Security.Cryptography.Native/Interop.Ssl.cs](https://github.com/dotnet/corefx/pull/28862/files#diff-f0513c093f14a9bf143efbacf9e57c47)    1.2. Calls to X509StoreAddCrl in [src/System.Security.Cryptography.X509Certificates/src/Internal/Cryptography/Pal.Unix/CrlCache.cs](https://github.com/dotnet/corefx/pull/28862/files#diff-b5488457ea972ce8d66f60d2e319d9b9)    1.3. Calls to MultiDestroy and MultiRemoveHandle for CurlHandler were calling SSL_shutdown, cleaned up the SSL error queue after those calls  2. Separate the tests of PlatformHandler and SocketsHttpHandler because there is some indication that the former can leave errors in the SSL error queue, this is also in line with what our customers will be using (either PlatformHandler or SocketsHttpHandler, not both on the same process). There is no actual change to test sources.  3. Add custom build variable to help find other issues in which the SSL error queue is not being cleared. This is to be used locally at this point.    Some follow-up still required that are not part of this review yet:  * Add a config setting to turn the optimization on/off  * Keep investigating the possible workarounds (e.g.: [interpret error](https://github.com/dotnet/corefx/pull/28862/commits/f565614ce0d9f3cb76b99d2d64b5211ce8063585#diff-8e59f86b12ee01ddf687a1e3c5c34dbdR248))    Fixes #25676
28861	area-Infrastructure	Microsoft.Windows.Compatibility: Problem loading NetStandard 2.0 Library with net462 AppDomain and Assembly.Load	"Project Setup:    1: `netstandard2.0` ClassLibrary used for `netcoreapp2.0` and `net462`  2: `net462` Project, Console App in my case.    The netstandard2.0 class uses the `Microsoft.Windows.Compatibility` Package for Image processing `System.Drawing.Image.FromStream`.    The net462 App loads the `netstandard2.0` Lib at runtime in a separated AppDomain.  This works without problem for `netstandard2.0` but `Microsoft.Windows.Compatibility` returns an exception `System.Drawing is not supported on this platform.`. But normaly it should no problem to use System.Drawing on full framework on windows. If i reference the netstandard2.0 Lib to the net462 Project and call the Method, it works without problems.    To Reproduce:  1: `netstandard2.0` Class:  `TestClass.cs`  ```C#  using System;  using System.Drawing;  using System.IO;  using System.Net;    namespace StandardLib  {      public class TestClass      {       public void DoImageStuff()       {        using (var webClient = new WebClient())        {         var data = webClient.DownloadData(""https://www.google.de/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png"");         using (var memoryStream = new MemoryStream(data))         {          using (var img = Image.FromStream(memoryStream))          {           var x = img.Height;           var y = img.Width;           Console.WriteLine($""Image: {x}x{y}"");          }         }        }       }      }  }  ```    `StandardLib.csproj`    ```xml  <Project Sdk=""Microsoft.NET.Sdk"">      <PropertyGroup>      <TargetFramework>netstandard2.0</TargetFramework>      <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>      <!-- CopyLocalLockFileAssemblies needed to get `System.Drawing.Common.dll` in bin folder as part of the build output, not needed, but needs dotnet deploy and not works with simple VS build -->    </PropertyGroup>      <ItemGroup>      <PackageReference Include=""Microsoft.Windows.Compatibility"" Version=""2.0.0-preview1-25914-04"" />    </ItemGroup>    </Project>  ```    2: `net462` Console App  ```C#  using System;  using System.Reflection;  using System.Security.Policy;    namespace DllLoadingTest  {   class Program   {    static void Main(string[] args)    {     //this works if ProjectReference is added     //new TestClass().DoImageStuff();       var appDomainSetup = new AppDomainSetup     {      ApplicationName = ""NAME""     };       var appDomain = AppDomain.CreateDomain(appDomainSetup.ApplicationName, new Evidence(), appDomainSetup);       var wrapper = (AssemblyWrapper)appDomain.CreateInstanceAndUnwrap(typeof(AssemblyWrapper).Assembly.FullName, typeof(AssemblyWrapper).FullName ?? string.Empty);       wrapper.LoadAssembly(@""..\..\..\..\StandardLib\bin\Debug\netstandard2.0\StandardLib.dll"");       Console.WriteLine(""Loading OK!"");     Console.ReadKey();    }      public class AssemblyWrapper : MarshalByRefObject    {     public override object InitializeLifetimeService()     {      return null;     }       public void LoadAssembly(string libraryPath)     {      var assemblyName = AssemblyName.GetAssemblyName(libraryPath);      var assembly = Assembly.Load(assemblyName);        var type = assembly.GetType(""StandardLib.TestClass"");        //just a hack to use dynamic, with reflection or common udes interfaces the problem still exists      dynamic instance = Activator.CreateInstance(type);        instance.DoImageStuff();     }    }   }  }  ```    `DllLoadingTest.csproj`    ```xml  <Project Sdk=""Microsoft.NET.Sdk"">      <PropertyGroup>      <TargetFramework>net462</TargetFramework>      <OutputType>Exe</OutputType>    </PropertyGroup>      <ItemGroup>      <Reference Include=""System.Configuration.Install"" />      <Reference Include=""System.ServiceProcess"" />      <Reference Include=""System"" />      <Reference Include=""Microsoft.CSharp"" />    </ItemGroup>    </Project>  ```"
28860	area-System.Security	Loading a X509Certificate2 causes a CGI exception on Azure App Service	"_From @ricklove on October 19, 2016 14:39_  I am trying to load a .p12 file into a X509Certificate2 object.   **The code runs fine on my local machine.**  Whenever, I run the following line **on Azure, it crashes the asp.net process with a CGI error**:  `var certificate = new X509Certificate2(fileBytes, ""notasecret"", X509KeyStorageFlags.Exportable);`  The following line does **not** crash:  `var cert = new X509Certificate2();`  Also, **if the password is incorrect, the server gives a normal exception** explaining that the password is incorrect:  `var certificate = new X509Certificate2(fileBytes, ""wrong"");`  I upgraded to 1.0.1 hoping it would solve the problem, but it **occured on both 1.0.0 and 1.0.1**.  So, to be clear: - Only crashes on Azure App Site (with CGI error) - Only happens when the cert file password is correct  Here is the full code:  ``````         ```         var log = """";          var keyFileServerPath = _env.ContentRootPath + @""\GACert.p12"";         log += ""\r\n"" + ""Got File Path"";          var cert = new X509Certificate2();         log += ""\r\n"" + ""Created Empty Cert"";          var fileExists = System.IO.File.Exists(keyFileServerPath);         log += ""\r\n"" + ""File Exists? ="" + fileExists;          var fileBytes = System.IO.File.ReadAllBytes(keyFileServerPath);         log += ""\r\n"" + ""File Bytes.Length="" + fileBytes.Length;          //// WRONG PASSWORD - Causes a normal Exception (so password is OK)         //var certificate = new X509Certificate2(fileBytes, ""wrong"");         //log += ""\r\n"" + ""Created Cert Using Bytes"";          //// FAILED - CGI Error (Crashing the Asp.Net Process)         //var certificate = new X509Certificate2(fileBytes, ""notasecret"", X509KeyStorageFlags.Exportable);         //log += ""\r\n"" + ""Created Cert Using Bytes""; ``````  ``` ```   _Copied from original issue: aspnet/Home#1791_"
28859	area-System.Net	Fix perf hit from WinHttpGetProxyForUrl	This PR optimizes some scenarios which we need to call `WinHttpGetProxyForUrl`.    1. Introduce the `WinHttpDetectAutoProxyConfigUrl` function, which implements a subset of the WPAD protocol: it attempts to auto-detect the URL for the proxy auto-config file, without downloading or executing the PAC file.    - If not able to find the script location. It is possible that there is no proxy auto-configuration file because the client has a direct Internet connection, and does not need a proxy server. Or a proxy server may be required, but the local network may not support WPAD. In both cases, the proxy configuration has to be obtained from the user or found somewhere on the client machine. We will use the information from calling into `WinHttpGetIEProxyConfigForCurrentUser` to see whether a proxy server is listed in Internet Explorer's settings. Cache the information.    - If able to find the script location, the AutoDetect setting has precedence over the other settings. So if there is already a automatic configuration script location (from `WinHttpGetIEProxyConfigForCurrentUser`), this value will be overridden. We will cache the related information and provide it to `WinHttpGetProxyForUrl`.    2. If there is no proxy, the information has been cached from the above procedures, we will stop calling into `WinHttpGetProxyForUrl`.    We have exhaustive test cases verifying behaviors with different proxy settings. Please let me know if there are special cases we care about, and I will add tests for them.    https://github.com/dotnet/corefx/blob/85062446c4e5af0c205f646e0ae720e160b20e85/src/System.Net.Http.WinHttpHandler/tests/UnitTests/WinHttpHandlerTest.cs#L641-L832    Fix: #28543
28858	area-System.IO	Some FileSystemSecurityTests still fail in non en-US	  ```  RemoveAccessRuleAll_Succeeds   RemoveAuditRuleAll_Succeeds   RemoveAuditRuleSpecific_Succeeds   SetAccessRule_IgnoreExistingRule_Succeeds   SetAuditRule_Succeeds  ```  need the same fix as applied in 56f02f35235606415c8773be6d8c26e41653c767  ```  System.Security.Principal.IdentityNotMappedException : Some or all identity references could not be translated.  Stack Trace :     at System.Security.Principal.NTAccount.Translate(IdentityReferenceCollection sourceAccounts, Type targetType, Boolean forceSuccess) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Security.Principal.Windows\src\System\Security\Principal\NTAccount.cs:line 177     at System.Security.Principal.NTAccount.Translate(Type targetType) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Security.Principal.Windows\src\System\Security\Principal\NTAccount.cs:line 130     at System.Security.AccessControl.CommonObjectSecurity.ModifyAccess(AccessControlModification modification, AccessRule rule, Boolean& modified) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs:line 251     at System.Security.AccessControl.CommonObjectSecurity.AddAccessRule(AccessRule rule) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Security.AccessControl\src\System\Security\AccessControl\CommonObjectSecurity.cs:line 450     at System.Security.AccessControl.FileSystemSecurity.AddAccessRule(FileSystemAccessRule rule) in D:\j\workspace\windows-TGrou---74aa877a\src\System.IO.FileSystem.AccessControl\src\System\Security\AccessControl\FileSecurity.cs:line 462     at System.IO.FileSystemSecurityTests.RemoveAccessRuleAll_Succeeds() in D:\j\workspace\windows-TGrou---74aa877a\src\System.IO.FileSystem.AccessControl\tests\FileSystemSecurityTests.cs:line 251  ```    cc @AlexRadch @Anipik 
28857	area-System.Memory	ReadOnlySequence.ToString() and debug view	https://github.com/dotnet/corefx/issues/27434    ![image](https://user-images.githubusercontent.com/1697911/38380271-156085de-38b8-11e8-998c-b390dfec47ed.png)    Also cleanup duplicated code in sequence factory and add another variation for tests.
28853	area-System.Diagnostics	GetILOffset() returning 0 on NETFX	"    ```   System.Diagnostics.Tests.StackFrameTests/Ctor_Filename_LineNumber(fileName: \""FileName\"", lineNumber: 1)   ubwAnalysisIndex    Xunit.Sdk.TrueException  Windows.10.Amd64.ClientRS2.Open-x86-Release  Get Repro environment  Unhandled Exception of Type Xunit.Sdk.TrueException  Message :  Expected GetILOffset() 0 for Ctor_Filename_LineNumber at offset 46 in file:line:column FileName:1:0   to be greater than zero.  Expected: True  Actual:   False  Stack Trace :     at System.Diagnostics.Tests.StackFrameTests.VerifyStackFrameSkipFrames(StackFrame stackFrame, Boolean isFileConstructor, Int32 skipFrames, MethodInfo expectedMethod, Boolean isCurrentFrame) in D:\j\workspace\windows-TGrou---2a8f9c29\src\System.Diagnostics.StackTrace\tests\StackFrameTests.cs:line 177     at System.Diagnostics.Tests.StackFrameTests.Ctor_Filename_LineNumber(String fileName, Int32 lineNumber) in D:\j\workspace\windows-TGrou---2a8f9c29\src\System.Diagnostics.StackTrace\tests\StackFrameTests.cs:line 96  ```    All these are failing  ```  Ctor_Filename_LineNumber(fileName: \""\"", lineNumber: 0)   Ctor_Filename_LineNumber(fileName: \""FileName\"", lineNumber: 1)   Ctor_Filename_LineNumber(fileName: null, lineNumber: -1)   Ctor_Filename_LineNumber_ColNumber(fileName: \""\"", lineNumber: 0, columnNumber: -1)   Ctor_Filename_LineNumber_ColNumber(fileName: \""FileName\"", lineNumber: 1, columnNumber: 2)   Ctor_Filename_LineNumber_ColNumber(fileName: null, lineNumber: -1, columnNumber: 0)  ‐  "
28851	area-System.Net	Fix getting shortname of file for Attachment class	The shortname for a file path is incorrectly calculated on non-Windows systems as the seperators are NTFS specific.    Fix is to use System.IO.Path::GetFileName() instead of custom method.    Fixes https://github.com/PowerShell/PowerShell/issues/6564
28850	area-Infrastructure	[Linux] Build tests part hangs	corefx release version 2.0  dotnet-cli version 2.0.0-preview1-002111  When I try to build managed part, it's successfully complete:  `./build-managed.sh -release -RuntimeOS=ubuntu.14.04 -- /p:BinPlaceNETCoreAppPackage=true`  But when I run:  `./build-tests.sh -release -Outerloop -SkipTests`  it hangs. I waited a few hours, no result.  Logs:  ```  ./build-tests.sh -Release -Outerloop -SkipTests  Tools are already initialized  Running: corefx-2.0.0.22710/Tools/msbuild.sh /nologo /verbosity:minimal /clp:Summary /maxcpucount /l:BinClashLogger,Tools/Microsoft.DotNet.Build.Tasks.dll;LogFile=binclash.log /p:ConfigurationGroup=Release /p:SkipTests=true /p:BuildPackages=false /p:Outerloop=true  /flp:v=normal;LogFile=build-tests.log  /flp2:warningsonly;logfile=msbuild.wrn  /flp3:errorsonly;logfile=msbuild.err  src/tests.builds      Common.Tests -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/Common.Tests/netstandard/Common.Tests.dll     System.Runtime.InteropServices.RuntimeInformation.Tests -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/System.Runtime.InteropServices.RuntimeInformation.Tests/netstandard/System.Runtime.InteropServices.RuntimeInformation.Tests.dll     System.Data.Odbc.Tests -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/System.Data.Odbc.Tests/netstandard/System.Data.Odbc.Tests.dll     System.Security.Cryptography.Encoding.Tests -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/System.Security.Cryptography.Encoding.Tests/netstandard/System.Security.Cryptography.Encoding.Tests.dll     System.Net.NameResolution.Functional.Tests -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/System.Net.NameResolution.Functional.Tests/netstandard/System.Net.NameResolution.Functional.Tests.dll     System.Net.Security.Unit.Tests -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/System.Net.Security.Unit.Tests/netstandard/System.Net.Security.Unit.Tests.dll     System.Net.WebSockets.Client.Tests -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/System.Net.WebSockets.Client.Tests/netstandard/System.Net.WebSockets.Client.Tests.dll     System.Diagnostics.TraceSource.Tests -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/System.Diagnostics.TraceSource.Tests/netstandard/System.Diagnostics.TraceSource.Tests.dll     System.Net.Ping.Functional.Tests -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/System.Net.Ping.Functional.Tests/netstandard/System.Net.Ping.Functional.Tests.dll     System.IO.FileSystem.DriveInfo.Tests -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/System.IO.FileSystem.DriveInfo.Tests/netstandard/System.IO.FileSystem.DriveInfo.Tests.dll     PerfRunner -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/PerfRunner/netstandard/PerfRunner.exe     RemoteExecutorConsoleApp -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/RemoteExecutorConsoleApp/netstandard/RemoteExecutorConsoleApp.exe     System.Diagnostics.FileVersionInfo.TestAssembly -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Diagnostics.FileVersionInfo.TestAssembly/netstandard/System.Diagnostics.FileVersionInfo.TestAssembly.dll     IMonitorLoader -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/IMonitorLoader/netstandard/Monitoring.dll     TDS -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/TDS/netstandard/Microsoft.SqlServer.TDS.dll     System.Net.Primitives.Performance.Tests -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/System.Net.Primitives.Performance.Tests/netstandard/System.Net.Primitives.Performance.Tests.dll     System.Diagnostics.Process.Tests -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/System.Diagnostics.Process.Tests/netstandard/System.Diagnostics.Process.Tests.dll     System.Net.Sockets.Async.Performance.Tests -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/System.Net.Sockets.Async.Performance.Tests/netstandard/System.Net.Sockets.Async.Performance.Tests.dll     System.IO.Pipes.Tests -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/System.IO.Pipes.Tests/netstandard/System.IO.Pipes.Tests.dll     System.IO.MemoryMappedFiles.Tests -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/System.IO.MemoryMappedFiles.Tests/netstandard/System.IO.MemoryMappedFiles.Tests.dll     System.Net.Primitives.Functional.Tests -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/System.Net.Primitives.Functional.Tests/netstandard/System.Net.Primitives.Functional.Tests.dll     System.IO.MemoryMappedFiles.Performance.Tests -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/System.IO.MemoryMappedFiles.Performance.Tests/netstandard/System.IO.MemoryMappedFiles.Performance.Tests.dll     System.Data.StressRunner -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/System.Data.StressRunner/netstandard/System.Data.StressRunner.exe     TDS.EndPoint -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/TDS.EndPoint/netstandard/Microsoft.SqlServer.TDS.EndPoint.dll     System.Diagnostics.FileVersionInfo.Tests -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/System.Diagnostics.FileVersionInfo.Tests/netstandard/System.Diagnostics.FileVersionInfo.Tests.dll     System.Data.StressFramework -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/System.Data.StressFramework/netstandard/System.Data.StressFramework.dll     TDS.Servers -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/TDS.Servers/netstandard/Microsoft.SqlServer.TDS.Servers.dll     System.Data.SqlClient.Stress.Tests -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/System.Data.SqlClient.Stress.Tests/netstandard/System.Data.SqlClient.Stress.Tests.dll     System.Data.SqlClient.Tests -> corefx-2.0.0.22710/bin/Unix.AnyCPU.Release/System.Data.SqlClient.Tests/netstandard/System.Data.SqlClient.Tests.dll     Microsoft.XmlSerializer.Generator -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/Microsoft.XmlSerializer.Generator/netstandard/Microsoft.XmlSerializer.Generator.dll     System.CodeDom.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.CodeDom.Tests/netstandard/System.CodeDom.Tests.dll     Microsoft.CSharp.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/Microsoft.CSharp.Tests/netstandard/Microsoft.CSharp.Tests.dll     System.ComponentModel.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.ComponentModel.Tests/netstandard/System.ComponentModel.Tests.dll     System.Configuration.ConfigurationManager.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Configuration.ConfigurationManager.Tests/netstandard/System.Configuration.ConfigurationManager.Tests.dll     System.ComponentModel.EventBasedAsync.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.ComponentModel.EventBasedAsync.Tests/netstandard/System.ComponentModel.EventBasedAsync.Tests.dll     System.AppContext.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.AppContext.Tests/netstandard/System.AppContext.Tests.dll     System.ComponentModel.Annotations.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.ComponentModel.Annotations.Tests/netstandard/System.ComponentModel.Annotations.Tests.dll     System.Collections.NonGeneric.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Collections.NonGeneric.Tests/netstandard/System.Collections.NonGeneric.Tests.dll     System.Diagnostics.Contracts.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Diagnostics.Contracts.Tests/netstandard/System.Diagnostics.Contracts.Tests.dll     System.Data.Common.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Data.Common.Tests/netstandard/System.Data.Common.Tests.dll     Microsoft.VisualBasic.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/Microsoft.VisualBasic.Tests/netstandard/Microsoft.VisualBasic.Tests.dll     System.ComponentModel.Primitives.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.ComponentModel.Primitives.Tests/netstandard/System.ComponentModel.Primitives.Tests.dll     Microsoft.Win32.Primitives.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/Microsoft.Win32.Primitives.Tests/netstandard/Microsoft.Win32.Primitives.Tests.dll     System.Buffers.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Buffers.Tests/netstandard/System.Buffers.Tests.dll     System.Collections.Specialized.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Collections.Specialized.Tests/netstandard/System.Collections.Specialized.Tests.dll     System.Data.SqlClient.ManualTesting.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Data.SqlClient.ManualTesting.Tests/netstandard/System.Data.SqlClient.ManualTesting.Tests.dll     System.Reflection.Context.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Reflection.Context.Tests/netstandard/System.Reflection.Context.Tests.dll     System.IO.FileSystem.Primitives.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.IO.FileSystem.Primitives.Tests/netstandard/System.IO.FileSystem.Primitives.Tests.dll     System.Diagnostics.TextWriterTraceListener.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Diagnostics.TextWriterTraceListener.Tests/netstandard/System.Diagnostics.TextWriterTraceListener.Tests.dll     System.Private.Uri.Functional.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Private.Uri.Functional.Tests/netstandard/System.Private.Uri.Functional.Tests.dll     System.IO.Packaging.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.IO.Packaging.Tests/netstandard/System.IO.Packaging.Tests.dll     System.Xml.XmlSerializer.ReflectionOnly.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Xml.XmlSerializer.ReflectionOnly.Tests/netstandard/System.Xml.XmlSerializer.ReflectionOnly.Tests.dll     System.Net.WebProxy.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Net.WebProxy.Tests/netstandard/System.Net.WebProxy.Tests.dll     System.Reflection.Extensions.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Reflection.Extensions.Tests/netstandard/System.Reflection.Extensions.Tests.dll     System.Globalization.Extensions.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Globalization.Extensions.Tests/netstandard/System.Globalization.Extensions.Tests.dll     System.Diagnostics.Tools.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Diagnostics.Tools.Tests/netstandard/System.Diagnostics.Tools.Tests.dll     System.IO.UnmanagedMemoryStream.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.IO.UnmanagedMemoryStream.Tests/netstandard/System.IO.UnmanagedMemoryStream.Tests.dll     System.Private.Uri.Unit.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Private.Uri.Unit.Tests/netstandard/System.Private.Uri.Unit.Tests.dll     System.Net.WebHeaderCollection.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Net.WebHeaderCollection.Tests/netstandard/System.Net.WebHeaderCollection.Tests.dll     System.Private.Uri.ExtendedFunctional.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Private.Uri.ExtendedFunctional.Tests/netstandard/System.Private.Uri.ExtendedFunctional.Tests.dll     System.Resources.Reader.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Resources.Reader.Tests/netstandard/System.Resources.Reader.Tests.dll     System.Xml.XmlSerializer.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Xml.XmlSerializer.Tests/netstandard/System.Xml.XmlSerializer.Tests.dll     System.Net.HttpListener.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Net.HttpListener.Tests/netstandard/System.Net.HttpListener.Tests.dll     System.Dynamic.Runtime.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Dynamic.Runtime.Tests/netstandard/System.Dynamic.Runtime.Tests.dll     System.Net.WebClient.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Net.WebClient.Tests/netstandard/System.Net.WebClient.Tests.dll     System.Runtime.Numerics.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Runtime.Numerics.Tests/netstandard/System.Runtime.Numerics.Tests.dll     System.Globalization.Calendars.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Globalization.Calendars.Tests/netstandard/System.Globalization.Calendars.Tests.dll     System.Resources.Writer.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Resources.Writer.Tests/netstandard/System.Resources.Writer.Tests.dll     System.Net.NetworkInformation.Functional.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Net.NetworkInformation.Functional.Tests/netstandard/System.Net.NetworkInformation.Functional.Tests.dll     System.Runtime.Handles.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Runtime.Handles.Tests/netstandard/System.Runtime.Handles.Tests.dll     System.Reflection.TestExe -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Reflection.TestExe/netstandard/System.Reflection.TestExe.exe     System.Resources.ResourceManager.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Resources.ResourceManager.Tests/netstandard/System.Resources.ResourceManager.Tests.dll     Microsoft.Composition.Demos.ExtendedCollectionImports -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/Microsoft.Composition.Demos.ExtendedCollectionImports/netstandard/Microsoft.Composition.Demos.ExtendedCollectionImports.dll     System.Runtime.Serialization.Json.ReflectionOnly.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Runtime.Serialization.Json.ReflectionOnly.Tests/netstandard/System.Runtime.Serialization.Json.ReflectionOnly.Tests.dll     ModuleCore -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/ModuleCore/netstandard/ModuleCore.dll     XDocument.Test.ModuleCore -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/XDocument.Test.ModuleCore/netstandard/XDocument.Test.ModuleCore.dll     Microsoft.XmlSerializer.Generator.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/Microsoft.XmlSerializer.Generator.Tests/netstandard/Microsoft.XmlSerializer.Generator.Tests.dll     System.Runtime.Serialization.Xml.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Runtime.Serialization.Xml.Tests/netstandard/System.Runtime.Serialization.Xml.Tests.dll     System.Security.SecureString.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Security.SecureString.Tests/netstandard/System.Security.SecureString.Tests.dll     System.Security.Permissions.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Security.Permissions.Tests/netstandard/System.Security.Permissions.Tests.dll     System.Runtime.Serialization.Xml.ReflectionOnly.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Runtime.Serialization.Xml.ReflectionOnly.Tests/netstandard/System.Runtime.Serialization.Xml.ReflectionOnly.Tests.dll     System.Threading.Tasks.Parallel.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Threading.Tasks.Parallel.Tests/netstandard/System.Threading.Tasks.Parallel.Tests.dll     System.Threading.Thread.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Threading.Thread.Tests/netstandard/System.Threading.Thread.Tests.dll     System.Runtime.Serialization.Json.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Runtime.Serialization.Json.Tests/netstandard/System.Runtime.Serialization.Json.Tests.dll     System.Security.Cryptography.Xml.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Security.Cryptography.Xml.Tests/netstandard/System.Security.Cryptography.Xml.Tests.dll     System.Text.Encodings.Web.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Text.Encodings.Web.Tests/netstandard/System.Text.Encodings.Web.Tests.dll     System.Threading.Overlapped.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Threading.Overlapped.Tests/netstandard/System.Threading.Overlapped.Tests.dll     System.Text.Encoding.CodePages.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Text.Encoding.CodePages.Tests/netstandard/System.Text.Encoding.CodePages.Tests.dll     System.Security.Claims.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Security.Claims.Tests/netstandard/System.Security.Claims.Tests.dll     System.Text.Encoding.Extensions.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Text.Encoding.Extensions.Tests/netstandard/System.Text.Encoding.Extensions.Tests.dll     Canonicalization.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/Canonicalization.Tests/netstandard/Canonicalization.Tests.dll     System.Threading.ThreadPool.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Threading.ThreadPool.Tests/netstandard/System.Threading.ThreadPool.Tests.dll     System.Threading.Tasks.Dataflow.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Threading.Tasks.Dataflow.Tests/netstandard/System.Threading.Tasks.Dataflow.Tests.dll     System.Threading.Timer.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Threading.Timer.Tests/netstandard/System.Threading.Timer.Tests.dll     System.Net.Mail.Functional.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Net.Mail.Functional.Tests/netstandard/System.Net.Mail.Functional.Tests.dll     System.Net.Requests.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Net.Requests.Tests/netstandard/System.Net.Requests.Tests.dll     System.Console.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Console.Tests/netstandard/System.Console.Tests.dll     System.Transactions.Local.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Transactions.Local.Tests/netstandard/System.Transactions.Local.Tests.dll     TestLibrary -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/TestLibrary/netstandard/TestLibrary.dll     System.Web.HttpUtility.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Web.HttpUtility.Tests/netstandard/System.Web.HttpUtility.Tests.dll     System.Net.Sockets.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Net.Sockets.Tests/netstandard/System.Net.Sockets.Tests.dll     System.Runtime.Serialization.Formatters.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Runtime.Serialization.Formatters.Tests/netstandard/System.Runtime.Serialization.Formatters.Tests.dll     XmlDiff -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/XmlDiff/netstandard/XmlDiff.dll     System.IO.FileSystem.Performance.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.IO.FileSystem.Performance.Tests/netstandard/System.IO.FileSystem.Performance.Tests.dll     System.IO.Pipes.Performance.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.IO.Pipes.Performance.Tests/netstandard/System.IO.Pipes.Performance.Tests.dll     System.Reflection.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Reflection.Tests/netstandard/System.Reflection.Tests.dll     System.Composition.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Composition.Tests/netstandard/System.Composition.Tests.dll     System.Globalization.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Globalization.Tests/netstandard/System.Globalization.Tests.dll     XmlCoreTest -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/XmlCoreTest/netstandard/XmlCoreTest.dll     System.Xml.Xsl.XslTransformApi.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Xml.Xsl.XslTransformApi.Tests/netstandard/System.Xml.Xsl.XslTransformApi.Tests.dll     XDocument.Common -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/XDocument.Common/netstandard/XDocument.Common.dll     System.Xml.Linq.Events.Tests -> corefx-2.0.0.22710/bin/AnyOS.AnyCPU.Release/System.Xml.Linq.Events.Tests/netstandard/System.Xml.Linq.Events.Tests.dll  ```    Does anyone know how to solve this problem?  It seems like it's trying to download nuget packages and hangs.  But then the question - why does timeout not work?  This issue occurs rarely, once a day. Therefore, it's difficult to catch.  
28849	area-System.Net	Pass Uri.IdnHost to WinHttpConnect	fixes #28722  replace PR #28818    cc:  @davidsh @rmkerr @caesar1995
28848	area-System.Collections	[Proposal] Use Bitmapped Vector Tries for ImmutableList	I'm wondering why aren't we using bitmapped Vector Tries for ImmutableList? Forgive me if this question has been asked.    As far as I know, this data structure is used in Closure's PersistentVector, and ImmutableJS's List. I have a preliminary implementation and it shows that it's faster than the current implementation of the current ImmutableList. For getting sequential or random elements in the list, the trie is about 4 times faster, and for adding elements, it about 3 times faster. Of course, these numbers are the preliminary findings.    For those who don't know what Bitmapped Vector Tries is:  [Understanding Clojure's Persistent Vectors](https://hypirion.com/musings/understanding-persistent-vector-pt-1)  [Immutable.js](https://facebook.github.io/immutable-js/)
28847	area-System.Net	HttpClientHandler.UseDefaultCredentials does not work on Unix platforms	When this this is set to True, we should use identity of currently logged user for authentication to HTTP(s) severs or proxies.     Note, that on Windows  this works only for NTLM and NEGOTIATE as there is no way how to extract clear text password for  Basic or Digest authentication.    On Unix, there is typically not centralized identity management nor strong cryptographic ID.    However when Kerberos is configured, curl is able to use default principal from ticket if user previously authenticated using kinit.      > build@toweinfu-ubu17:~/github/corefx/src$ klist  > Ticket cache: FILE:/tmp/krb5cc_1000  > Default principal: testuser@TEST.NET  >   > Valid starting       Expires              Service principal  > 04/05/2018 06:12:30  04/05/2018 16:12:30  krbtgt/TEST.NET@TEST.NET  >  renew until 04/06/2018 06:12:24  >     This does not work neither for CurlHandler nor for SocketsHttpHandler.    Further more, ,many Unix utilities (wget, curl, git, ftp, ...) can read credentials from .netrc file.  That is not great but it is still better than hardcoding secrets in code or passing them via environmental variable. If we choose to, this could be also source of default credentials (basic support tracked by #23313)   
28846	area-Meta	Move/create authorization classes in .Net Core	The Microsoft.AspNetCore.Authorization namespace contains classes that are useful in .Net Core and is not dependent on ASP.Net Core, please make them available in a .Net Core namespace. Ref. [Make Authorization available outside of ASP.NET Core](https://github.com/aspnet/Security/issues/1480) 
28843	area-System.Net	Consolidate http date parsing	"Fixes #12513  Followup to #28541     Fixes the following bugs for Http date parsing in System.Net.Requests:   - considered ANSI dates to be local (to the _receiver_, no less), instead of UTC/GMT like the spec says.   - accepted offset values (ie, `+05:00`), but didn't actually use them.   - would throw `ArrayIndexOutOfBoundsException` if a string token didn't have enough distinguishing characters (ie, `'S'` throws, because it needs to check the next character for `'a'`/`'u'` for Saturday/Sunday)   - would throw `ArgumentOutOfRangeException` for dates like `""Sun, 31 Nov 2018 16:33:01 GMT""` (there are only 30 days in November).    For System.Net.Requests, with respect to the original behavior:  - Retains case insensitivity of the original (mostly - UTC/GMT must now be uppercase).  - Drops ability to use partially matching day-of-week/month strings (ie, the original parses `""Surprise""` as `""Sunday""`).  - Drops ability to use non-matching date/day-of-week strings (ie `""Sat, 25 Mar 2018 16:33:01 GMT""` - the 25th was actually a Sunday)  - Drops ability to use arbitrary characters as separators.  - Now allows arbitrary amounts of whitespace between tokens.    cc: @stephentoub @geoffkizer @karelz @rmkerr @davidsh @caesar1995 @wfurt "
28842	area-System.Net	Enable connection pooling for requests that use different client certificates…	Enable connection pooling for requests that use different client certificates or server certificate callbacks. This allows setting these options on a per-request basis, which has much better perf for scenarios that want to share a session between requests that use different options for these.    #28841 
28841	area-System.Net	WinHttpHandler perf optimization for ClientCertificates, ServerCertificateValidationCallback	In a larger server app, there may be scenarios where different parts of the code need to use different client certificates on a per-request basis. Same with ServerCertificateValidationCallback. The native WinHttp library lets you efficiently pool connections across a session, and set client certificates and perform custom certificate validation on a per-request basis within that session, but the managed library forces you to share these settings across all requests in a session. People often use ServerCertificateValidationCallback as an instance delegate on some object that has a much shorter lifetime than the session.    It would be good if the managed library just let you set these on a per-request basis. It's really hard to get good perf otherwise.
28840	area-System.Collections	Clean up dead code for System.Collections*	#17905 
28837	area-System.IO	Tests for TryGetFullPath [WIP]	Fixes:-  dotnet/corefx#28258  Implementation:- PR https://github.com/dotnet/coreclr/pull/17429  RemoveRelativeSegments:- dotnet/corefx#28835
28835	area-System.IO	Remove Relative Segments with valueStringBuilder	Related Issue:- https://github.com/dotnet/corefx/issues/28258  Related Coreclr Pr:- https://github.com/dotnet/coreclr/pull/17429  Relateed Corefx PR:- https://github.com/dotnet/corefx/pull/28837  
28834	area-Meta	Regression impacting ASP.NET MVC	Testing on a fixed aspnet version and varying dotnet runtime, we see a 6% regression on the MVC Plaintext scenario between these versions:  `2.1.0-preview2-26324-02` https://github.com/dotnet/corefx/tree/23165cee77ae4dd7a7645b7927872948bb27a73e  and  `2.1.0-preview2-26316-06` https://github.com/dotnet/corefx/tree/8130620b542457ca4e72eb2bc81c3eae50192a33     ![image](https://user-images.githubusercontent.com/1165805/38341057-915ebf94-382b-11e8-8b18-fcb61b7ff342.png)    A diff on perfview traces for these two versions resulted in this:    ![image](https://user-images.githubusercontent.com/1165805/38340839-5b0e0b08-382a-11e8-9eef-a0add1214abb.png)    The two full traces are available if necessary.
28833	area-Infrastructure	Problems with ASP.NET projects when consuming .NET Standard assets	It has been reported by users that if you are building an ASP.NET web app which consumes an asset that is .NET Standard-based, the app may encounter errors at runtime given that it can't find assemblies. This is an example of the errors one might get when hitting this issue:  ```  System.IO.FileNotFoundException occurred HResult=0x80070002  Message=Could not load file or assembly 'System.Net.Http, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.  ```    One other symptom of this is that your project will complain that it needs some binding redirects added to your web.config, which you will have to add by double-clicking the warning from the error list in VS.    The reason behind what is happening is that because of [this known issue](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/514195-Targeting%20.NET%20Framework%204.7.1%20copies%20extra%20files%20to%20your%20bin%20directory.md) we end up requiring a few extra assemblies to be loaded in order to be able to run a .NET Standard-based component on .NET Framework. Because of how ASP.NET handles deployments, in some scenarios these extra files won't be copied over to the application directory, causing most of the issues.    This issue is created so that we can track the problem separate from issue #25773 as it was dicussed on this comment: https://github.com/dotnet/corefx/issues/25773#issuecomment-378341475    cc: @AlexGhiondea 
28831	area-System.Diagnostics	Failure in Debian on System.Diagnostics.Tests.ProcessThreadTests/TestStartTimeProperty	Debian.87.Amd64.Open-x64-Release - probably just outside the 1 sec window this test allows    ```c#                  // Now add a thread, and from that thread, while it's still alive, verify                  // that there's at least one thread greater than the current time we previously grabbed.                  await Task.Factory.StartNew(() =>                  {                      p.Refresh();                      try                      {                          Assert.Contains(p.Threads.Cast<ProcessThread>(), t => t.StartTime.ToUniversalTime() >= curTime - allowedWindow);                      }                      catch (InvalidOperationException)                      {                          // A thread may have gone away between our getting its info and attempting to access its StartTime                      }  ```  ```  Assert.Contains() Failure  Not found: (filter expression)  In value:  <CastIterator>d__34<ProcessThread> [System.Diagnostics.ProcessThread, System.Diagnostics.ProcessThread, System.Diagnostics.ProcessThread, System.Diagnostics.ProcessThread, System.Diagnostics.ProcessThread, ...]  Stack Trace :     at System.Diagnostics.Tests.ProcessThreadTests.<>c__DisplayClass3_2.<TestStartTimeProperty>b__0() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.Diagnostics.Process/tests/ProcessThreadTests.cs:line 129     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /root/coreclr/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 167  --- End of stack trace from previous location where exception was thrown ---     at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in /root/coreclr/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 2440  --- End of stack trace from previous location where exception was thrown ---     at System.Diagnostics.Tests.ProcessThreadTests.TestStartTimeProperty() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.Diagnostics.Process/tests/ProcessThreadTests.cs:line 127  --- End of stack trace from previous location where exception was thrown ---  ```
28830	area-System.Net	Perf regression on Linux SSL (ASP.NET plaintext)	As seen on this KPI from 785K RPS before the regression:    ![image](https://user-images.githubusercontent.com/1165805/38339602-eac8a23c-3823-11e8-877c-0505885462b1.png)    Between `2.1.0-preview3-26330.03` and `2.1.0-preview3-26331-01` as shown on this graph:    ![image](https://user-images.githubusercontent.com/1165805/38339549-99f6a5fc-3823-11e8-954f-435919be9d8f.png)    The regression only occurs on Linux, and has been replicated on local environment and also on azure.  
28828	area-System.Net	Re-enable PostAsync_RedirectWith307_LargePayload	Fixes  #23768
28825	area-Infrastructure	AllConfigurations leg failing with race condition	"It has happened twice on my PR now.    ```  12:12:06 Build FAILED.  12:12:06   12:12:06 D:\j\workspace\windows-TGrou---0d2c9ac4\bin\testPkg\packageTest.targets(104,5): error MSB3371: The file ""obj\Debug\\.testComplete"" cannot be created. The process cannot access the file 'D:\j\workspace\windows-TGrou---0d2c9ac4\bin\testPkg\projects\System.Composition.Hosting\netcore451\obj\Debug\.testComplete' because it is being used by another process. [D:\j\workspace\windows-TGrou---0d2c9ac4\bin\testPkg\projects\System.Composition.Hosting\netcore451\project.csproj] [D:\j\workspace\windows-TGrou---0d2c9ac4\pkg\test\testPackages.proj]  12:12:06 D:\j\workspace\windows-TGrou---0d2c9ac4\pkg\test\testPackages.proj(177,5): error MSB3073: The command ""D:\j\workspace\windows-TGrou---0d2c9ac4\bin/testPkg/tools//dotnet msbuild /t:Test ""D:\j\workspace\windows-TGrou---0d2c9ac4\bin/testPkg/test.msbuild"" /p:TestPackages=System.Composition.Hosting"" exited with code 1.  ```    https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_all+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/10842/console    cc: @ericstj @joperezr "
28824	area-System.Threading	Enable a thread pool bound handle test on uap	The test was failing sometimes, some debugging info was added as part of https://github.com/dotnet/corefx/issues/18058 to help with failure investigation. The test remained disabled though.    Closes https://github.com/dotnet/corefx/issues/18058 until another failure occurs
28823	area-System.Threading	Port System.Threading perf tests to release/2.0.0	So that we can get a baseline for comparison against 2.0.    https://github.com/dotnet/corefx/pull/28712
28819	area-System.Security	SslStream.AuthenticateAsClientAsync sometimes throws an UnauthorizedAccessException on Linux	SslStream.AuthenticateAsClientAsync sometimes throws an UnauthorizedAccessException on Linux. See aspnet/KestrelHttpServer#2456.    ```  System.UnauthorizedAccessException : Access to the path '/home/aspnetagent/.dotnet/corefx/cryptography/x509stores/my' is denied.  ---- System.IO.IOException : Bad file descriptor     at System.IO.Enumeration.FileSystemEnumerator`1.FindNextEntry()     at System.IO.Enumeration.FileSystemEnumerator`1.MoveNext()     at Internal.Cryptography.Pal.DirectoryBasedStoreProvider.CloneTo(X509Certificate2Collection collection)     at System.Security.Cryptography.X509Certificates.X509Store.get_Certificates()     at Internal.Cryptography.Pal.OpenSslX509ChainProcessor.FindCandidates(X509Certificate2 leaf, X509Certificate2Collection extraStore, HashSet`1 downloaded, HashSet`1 systemTrusted, TimeSpan& remainingDownloadTime)     at Internal.Cryptography.Pal.ChainPal.BuildChain(Boolean useMachineContext, ICertificatePal cert, X509Certificate2Collection extraStore, OidCollection applicationPolicy, OidCollection certificatePolicy, X509RevocationMode revocationMode, X509RevocationFlag revocationFlag, DateTime verificationTime, TimeSpan timeout)     at System.Security.Cryptography.X509Certificates.X509Chain.Build(X509Certificate2 certificate, Boolean throwOnException)     at System.Security.Cryptography.X509Certificates.X509Chain.Build(X509Certificate2 certificate)     at System.Net.Security.CertificateValidation.BuildChainAndVerifyProperties(X509Chain chain, X509Certificate2 remoteCertificate, Boolean checkCertName, String hostName)     at System.Net.Security.SecureChannel.VerifyRemoteCertificate(RemoteCertValidationCallback remoteCertValidationCallback, ProtocolToken& alertToken)     at System.Net.Security.SslState.CompleteHandshake(ProtocolToken& alertToken)     at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.PartialFrameCallback(AsyncProtocolRequest asyncRequest)  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Security.SslState.InternalEndProcessAuthentication(LazyAsyncResult lazyResult)     at System.Net.Security.SslState.EndProcessAuthentication(IAsyncResult result)     at System.Net.Security.SslStream.EndAuthenticateAsClient(IAsyncResult asyncResult)     at System.Net.Security.SslStream.<>c.<AuthenticateAsClientAsync>b__43_2(IAsyncResult iar)     at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)  --- End of stack trace from previous location where exception was thrown ---     at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.HttpsConnectionAdapterTests.ValidationFailureRejectsConnection(ClientCertificateMode mode) in /_/test/Kestrel.FunctionalTests/HttpsConnectionAdapterTests.cs:line 303  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----  ```    This is the call that sometimes fails:    https://github.com/aspnet/KestrelHttpServer/blob/70ce0447781bfca57f6945e6a5f056045073e6ec/test/Kestrel.FunctionalTests/HttpsConnectionAdapterTests.cs#L303    At first I thought this might be caused by concurrent access to our testCert.pfx file, but it access to `~/.dotnet/corefx/cryptography/x509stores/my` that's being denied. I suspect there are other tests using SslStream running in parallel though.
28818	area-System.Net	Pass Uri.IdnHost to WinHttpConnect 	fixes #28722 
28816	area-System.Runtime	[NetFX] System.Runtime.Serialization.Formatters.Tests.BinaryFormatterTests/ValidateAgainstBlobs fails when running on .NET 4.7.1	We just upgraded our Helix machines to have .NET 4.7.1 and updating netfx alias in corefx to target .NET 4.7.1 as well, when trying to update the CI queues to use these machines, this test is failing:    ```  Message :  Assert.True() Failure  Expected: True  Actual:   False  Stack Trace :     at System.Runtime.Serialization.Formatters.Tests.EqualityExtensions.CheckEquals(Object objA, Object objB, Boolean isSamePlatform) in E:\repos\corefxCopy\corefx\src\System.Runtime.Serialization.Formatters\tests\EqualityExtensions.cs:line 96     at System.Runtime.Serialization.Formatters.Tests.BinaryFormatterTests.ValidateAndRoundtrip(Object obj, TypeSerializableValue[] blobs, Boolean isEqualityComparer) in E:\repos\corefxCopy\corefx\src\System.Runtime.Serialization.Formatters\tests\BinaryFormatterTests.cs:line 104     at System.Runtime.Serialization.Formatters.Tests.BinaryFormatterTests.ValidateAgainstBlobs(Object obj, TypeSerializableValue[] blobs) in E:\repos\corefxCopy\corefx\src\System.Runtime.Serialization.Formatters\tests\BinaryFormatterTests.cs:line 54  ```    I can't get a local repro, but using the repro tool I did.     https://mc.dot.net/#/user/safern/pr~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fdesktop~2Fcli/20180402.5433/workItem/System.Runtime.Serialization.Formatters.Tests/analysis/xunit/System.Runtime.Serialization.Formatters.Tests.BinaryFormatterTests~2FValidateAgainstBlobs(obj:%20CultureAwareComparer%20%7B%20%7D,%20blobs:%20%5BSystem.Runtime.Serialization.Formatters.Tests.TypeSerializabl)    I will disable this test for NETFX.    cc: @ViktorHofer @danmosemsft         
28814	area-System.Net	Disable draining test on CurlHandler	Fixes https://github.com/dotnet/corefx/issues/28793  cc: @geoffkizer, @wfurt, @pjanotti 
28813	area-System.IO	Cannot connect named pipe in UWP	"##### Environment  OS: Windows 10 Pro 17133.1  SDK: 16299 used; 17110 installed  Microsoft.NETCore.UniversalWindowsPlatform 6.0.8  ##### Code  Mostly copied from [NamedPipeTest](https://github.com/dotnet/corefx/blob/master/src/System.IO.Pipes/tests/NamedPipeTests/NamedPipeTest.Read.cs)  ```csharp  using (var serverPipe = new NamedPipeServerStream(""LOCAL\\Test"", PipeDirection.Out, 1, PipeTransmissionMode.Byte, PipeOptions.Asynchronous)  using (var clientPipe = new NamedPipeClientStream(""."", ""LOCAL\\Test"", PipeDirection.In, PipeOptions.Asynchronous)  {      var clientTask = clientPipe.ConnectAsync();      serverPipe.WaitForConnection();      clientTask.Wait();  }  ```    ##### Symptom  Get `IOException` that ""pipe is closing"" in `serverPipe.WaitForConnection`  If parameters except pipe name are removed, will get `IOException` that ""not supported in app container"" in `clientTask.Wait`.    As the test has UWP specific handling (adding `\LOCAL`), I suppose the api to be available for UWP."
28810	area-Meta	memory reported by lldb does not match memory reported by `top`	"We have memory issue with a .net core 2.0.5 service that runs in a linux container. The service consumes too much memory. After some struggling, I was able to create a memory dump using the following commands:    ```  echo ""kernel.yama.ptrace_scope=0"" | tee -a /etc/sysctl.conf  sysctl -p  gcore -o /tmp/memory_dump 1  ```  Where `1` is the PID of the process that consumes too much memory. I also executed the `top` and `htop` commands before generating this dump. Here's what it looked like:    ![image](https://user-images.githubusercontent.com/4930754/38312090-d7f8f8b2-37ee-11e8-92c2-934c68a3a9f5.png)    ![image](https://user-images.githubusercontent.com/4930754/38312094-db905862-37ee-11e8-8803-aa97e52f8c5c.png)    If I understand properly the output of `top`, the application uses about 1.47 GB of memory. This is also what [prometheus](https://prometheus.io/) reports.     I then loaded my dump file in LLDB 3.6. Surprisingly, it reports that only 47 **MB** are used. Here's a partial output of `sos EEHeap`:    ```  (lldb) sos EEHeap  Loader Heap:  --------------------------------------  System Domain:     00007f33b3160ce0  LowFrequencyHeap:  00007F3338EC0000(3000:3000) 00007F333B410000(10000:10000) 00007F333D5C0000(10000:10000) 00007F333D610000(10000:10000) 00007F333FD40000(10000:10000) 00007F3341F70000(10000:10000) Size: 0x53000 (339968) bytes.  HighFrequencyHeap: 00007F3338EC6000(7000:7000) 00007F333B360000(10000:10000) 00007F333D5A0000(10000:10000) 00007F333D5B0000(10000:10000) 00007F333D5F0000(10000:10000) 00007F333D750000(10000:10000) 00007F333EC90000(10000:10000) 00007F333F1D0000(10000:10000) 00007F333FEA0000(10000:10000) 00007F33413A0000(10000:10000) 00007F3341AA0000(10000:10000) 00007F33421A0000(10000:10000) Size: 0xb7000 (749568) bytes.  StubHeap:          00007F3338ECD000(3000:3000) Size: 0x3000 (12288) bytes.  Virtual Call Stub Heap:    IndcellHeap:     00007F3338F70000(6000:6000) Size: 0x6000 (24576) bytes.    LookupHeap:      00007F3338F7C000(4000:4000) Size: 0x4000 (16384) bytes.    ResolveHeap:     00007F3338FA6000(3a000:3a000) Size: 0x3a000 (237568) bytes.    DispatchHeap:    00007F3338F80000(26000:26000) Size: 0x26000 (155648) bytes.    CacheEntryHeap:  00007F3338F76000(6000:6000) Size: 0x6000 (24576) bytes.  Total size:        Size: 0x17d000 (1560576) bytes.  --------------------------------------  ...  --------------------------------------  Total LoaderHeap size:   Size: 0x24db000 (38645760) bytes.  =======================================  Number of GC Heaps: 1  generation 0 starts at 0x00007F331615CB28  generation 1 starts at 0x00007F3315FA4488  generation 2 starts at 0x00007F3313FFF000  ephemeral segment allocation context: none           segment             begin         allocated              size  00007F3313FFE000  00007F3313FFF000  00007F33167BC4F8  0x27bd4f8(41669880)  Large object heap starts at 0x00007F3323FFF000           segment             begin         allocated              size  00007F3323FFE000  00007F3323FFF000  00007F33247708E0  0x7718e0(7805152)  Total Size:              Size: 0x2f2edd8 (49475032) bytes.  ------------------------------  GC Heap Size:            Size: 0x2f2edd8 (49475032) bytes.  ```    In a similar way if I do `sos DumpHeap -stat` and I sum the output of the `TotalSize` column, I get a total of 49045050 bytes which is pretty similar to the output of `sos EEHeap`.     **So here's my question:** how is it possible to have such a big difference in memory consumption with `top` and `lldb`? Could it be possible that lldb only analyzes the managed memory which could point to a possible unmanaged memory leak?    Any other theories are welcomed ;)"
28808	area-System.Globalization	Calender.GetWeekOfYear is not compatible with ISO 8601 and date Unix utility	"`System.Threading.Thread.CurrentThread.CurrentCulture.Calendar.GetWeekOfYear()` return values that are not compatible with ISO 8601 and `date` Unix utility in some edge cases.    ISO related [link](https://en.wikipedia.org/wiki/ISO_week_date#Relation_with_the_Gregorian_calendar)    The issue was discovered in PowerShell repo https://github.com/PowerShell/PowerShell/pull/6542 (You should use the build if you want tests with PowerShell Core `Get-Date` cmdlet).    - See 'First week' in https://en.wikipedia.org/wiki/ISO_week_date#Relation_with_the_Gregorian_calendar  > If it is on a Sunday, it is part of week 52 of the previous year.    \#'2017-01-01' is 'Sunday, January 1, 2017 12:00:00 AM'  date -d 2017-01-01 +%V #return 52 - right  Get-date 2017-01-01 -UFormat ""%V"" #return 1 - bug    - See 'Last week' in https://en.wikipedia.org/wiki/ISO_week_date#Relation_with_the_Gregorian_calendar  > If 31 December is on a Monday, Tuesday or Wednesday, it is in week 01 of the next year.    \#'2007-12-31' is 'Monday, December 31, 2007 12:00:00 AM'  date -d 2011-12-31 +%V #return 01 - right  Get-date 2011-12-31 -UFormat ""%V"" #return 53 - bug    "
28806	area-System.Collections	Add ItemRef and ValueRef to List/Dict (C# 7.2 constructs)	Requires https://github.com/dotnet/coreclr/pull/17405    Contributes to https://github.com/dotnet/corefx/issues/25189  Resolves https://github.com/dotnet/corefx/issues/20684    * Adds ItemRef() to `List<T>`  * Adds ValueRef() to `Dictionary<TKey, TValue>`    As per https://github.com/dotnet/corefx/pull/25738
28805	area-System.Net	Test failure: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Cancellation_Test / GetAsync_CancelDuringResponseBodyReceived_Buffered_TaskCanceledQuickly	Test System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Cancellation_Test.GetAsync_CancelDuringResponseBodyReceived_Buffered_TaskCanceledQuickly has failed.    MESSAGE:  Elapsed time 00:00:31.6655081 should be less than 30 seconds, was 31.6655081\r\nExpected: True\r\nActual: False  ~~~  STACK TRACE:  at System.Net.Http.Functional.Tests.HttpClientHandler_Cancellation_Test.ValidateClientCancellationAsync(Func`1 clientBodyAsync) in D:\j\workspace\outerloop_net---92764178\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.Cancellation.cs:line 372 at System.Net.Http.Functional.Tests.HttpClientHandler_Cancellation_Test.<>c__DisplayClass2_2.<<GetAsync_CancelDuringResponseBodyReceived_Buffered_TaskCanceledQuickly>b__0>d.MoveNext() in D:\j\workspace\outerloop_net---92764178\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.Cancellation.cs:line 128 --- End of stack trace from previous location where exception was thrown --- at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in D:\j\workspace\outerloop_net---92764178\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 67 at System.Net.Http.Functional.Tests.HttpClientHandler_Cancellation_Test.GetAsync_CancelDuringResponseBodyReceived_Buffered_TaskCanceledQuickly(Boolean chunkedTransfer, Boolean connectionClose, CancellationMode mode) in D:\j\workspace\outerloop_net---92764178\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.Cancellation.cs:line 110 --- End of stack trace from previous location where exception was thrown ---  ~~~  Details: https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_win7_debug/456/testReport/System.Net.Http.Functional.Tests/SocketsHttpHandler_HttpClientHandler_Cancellation_Test/GetAsync_CancelDuringResponseBodyReceived_Buffered_TaskCanceledQuickly_chunkedTransfer__True__connectionClose__False__mode__Token__CancelPendingRequests_/    
28799	area-Infrastructure	Build failed requiring cmake, but cmake seems to be present	I am having a little trouble getting corefx to build. I ran the VS 2017 updater and freshly cloned master, then ran the sync script.    Cmake 3.11.0 was installed and I verified that its bin directory is listed when running the PATH command. Yet, there is an error `CMake is a pre-requisite to build this repository but it was not found on the path. Please install CMake...` followed by `Failed to generate native component build project!  Command execution failed with exit code 1.`    I would be glad for a pointer how this could be fixed. I noticed a `toolSetDir=c:\tools\clr` in the log. I'm not sure what this means, but this directory does not exist.    ```  C:\dev\pub\dotnet\corefx>git clean -xdf  Removing Tools/  Removing bin/  Removing binclash.log  Removing init-tools.log  Removing msbuild.err  Removing msbuild.log  Removing msbuild.wrn  Removing packages/  Removing sync.log    C:\dev\pub\dotnet\corefx>build  **********************************************************************  ** Visual Studio 2017 Developer Command Prompt v15.6.4  ** Copyright (c) 2017 Microsoft Corporation  **********************************************************************  Installing dotnet cli...  Restoring BuildTools version 2.1.0-preview3-02631-01...  Initializing BuildTools...  Done initializing tools.  Running: C:\dev\pub\dotnet\corefx\src\Native\build-native.cmd   x64  Debug  Windows_NT  --numproc 4  -portable  toolSetDir=c:\tools\clr  Tools are already initialized.  Running: C:\dev\pub\dotnet\corefx\Tools\msbuild.cmd /nologo /verbosity:minimal /clp:Summary /maxcpucount /nodeReuse:false /l:BinClashLogger,Tools\net46\Microsof  t.DotNet.Build.Tasks.dll;LogFile=binclash.log /p:ConfigurationGroup=Debug /p:BuildPackages=false /p:GenerateNativeVersionInfo=true  /flp:v=normal  /flp2:warning  sonly;logfile=msbuild.wrn  /flp3:errorsonly;logfile=msbuild.err  C:\dev\pub\dotnet\corefx\src\Native\..\../build.proj /t:GenerateVersionHeader    Build succeeded.      0 Warning(s)      0 Error(s)    Time Elapsed 00:00:00.56  Command execution succeeded.  **********************************************************************  ** Visual Studio 2017 Developer Command Prompt v15.6.4  ** Copyright (c) 2017 Microsoft Corporation  **********************************************************************  [vcvarsall.bat] Environment initialized for: 'x86_x64'  Commencing build of native components    CMake is a pre-requisite to build this repository but it was not found on the path. Please install CMake from http://www.cmake.org/download/ and ensure it is on   your path.  Failed to generate native component build project!  Command execution failed with exit code 1.    C:\dev\pub\dotnet\corefx>cmake  Usage      cmake [options] <path-to-source>    cmake [options] <path-to-existing-build>    Specify a source directory to (re-)generate a build system for it in the  current working directory.  Specify an existing build directory to  re-generate its build system.    Run 'cmake --help' for more information.  ```  
28798	area-System.Security	Test failure in System.Security.Principal.Windows	     WindowsPrincipalTests.CheckUserClaims [FAIL]          System.ObjectDisposedException : Safe handle has been closed          Stack Trace:                at System.Runtime.InteropServices.SafeHandle.DangerousAddRef(Boolean& success)             E:\A\_work\10\s\src\mscorlib\src\System\StubHelpers.cs(1639,0): at System.StubHelpers.StubHelpers.SafeHandleAddRef(SafeHandle pHandle, Boolean& success)                at Interop.Advapi32.LsaLookupSids(SafeLsaPolicyHandle handle, Int32 count, IntPtr[] sids, SafeLsaMemoryHandle& referencedDomains, SafeLsaMemoryHandle& names)             d:\Repos\corefx\src\System.Security.Principal.Windows\src\System\Security\Principal\SID.cs(1075,0): at System.Security.Principal.SecurityIdentifier.TranslateToNTAccounts(IdentityReferenceCollection sourceSids, Boolean& someFailed)             d:\Repos\corefx\src\System.Security.Principal.Windows\src\System\Security\Principal\SID.cs(1218,0): at System.Security.Principal.SecurityIdentifier.Translate(IdentityReferenceCollection sourceSids, Type targetType, Boolean& someFailed)             d:\Repos\corefx\src\System.Security.Principal.Windows\src\System\Security\Principal\SID.cs(1188,0): at System.Security.Principal.SecurityIdentifier.Translate(IdentityReferenceCollection sourceSids, Type targetType, Boolean forceSuccess)             d:\Repos\corefx\src\System.Security.Principal.Windows\src\System\Security\Principal\SID.cs(903,0): at System.Security.Principal.SecurityIdentifier.Translate(Type targetType)             d:\Repos\corefx\src\System.Security.Principal.Windows\src\System\Security\Principal\WindowsIdentity.cs(490,0): at System.Security.Principal.WindowsIdentity.<GetName>b__46_0()             d:\Repos\corefx\src\System.Security.Principal.Windows\src\System\Security\Principal\WindowsIdentity.cs(669,0): at System.Security.Principal.WindowsIdentity.<>c__DisplayClass62_0.<RunImpersonatedInternal>b__0(Object <p0>)             E:\A\_work\10\s\src\mscorlib\shared\System\Threading\ExecutionContext.cs(167,0): at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)             --- End of stack trace from previous location where exception was thrown ---             d:\Repos\corefx\src\System.Security.Principal.Windows\src\System\Security\Principal\WindowsIdentity.cs(655,0): at System.Security.Principal.WindowsIdentity.RunImpersonatedInternal(SafeAccessTokenHandle token, Action action)             d:\Repos\corefx\src\System.Security.Principal.Windows\src\System\Security\Principal\WindowsIdentity.cs(603,0): at System.Security.Principal.WindowsIdentity.RunImpersonated(SafeAccessTokenHandle safeAccessTokenHandle, Action action)             d:\Repos\corefx\src\System.Security.Principal.Windows\src\System\Security\Principal\WindowsIdentity.cs(488,0): at System.Security.Principal.WindowsIdentity.GetName()             d:\Repos\corefx\src\System.Security.Principal.Windows\src\System\Security\Principal\WindowsIdentity.cs(475,0): at System.Security.Principal.WindowsIdentity.get_Name()             d:\Repos\corefx\src\System.Security.Principal.Windows\src\System\Security\Principal\WindowsIdentity.cs(940,0): at System.Security.Principal.WindowsIdentity.InitializeClaims()             d:\Repos\corefx\src\System.Security.Principal.Windows\src\System\Security\Principal\WindowsIdentity.cs(911,0): at System.Security.Principal.WindowsIdentity.get_Claims()+MoveNext()             d:\Repos\corefx\src\System.Security.Claims\src\System\Security\Claims\ClaimsPrincipal.cs(234,0): at System.Security.Claims.ClaimsPrincipal.get_Claims()+MoveNext()             d:\Repos\corefx\src\Common\src\System\Collections\Generic\LargeArrayBuilder.cs(172,0): at System.Collections.Generic.LargeArrayBuilder`1.AddRange(IEnumerable`1 items)             d:\Repos\corefx\src\Common\src\System\Collections\Generic\EnumerableHelpers.cs(84,0): at System.Collections.Generic.EnumerableHelpers.ToArray[T](IEnumerable`1 source)             d:\Repos\corefx\src\System.Linq\src\System\Linq\ToCollection.cs(18,0): at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)             d:\Repos\corefx\src\System.Security.Principal.Windows\tests\WindowsPrincipalTests.cs(59,0): at WindowsPrincipalTests.CheckUserClaims()  
28796	area-System.IO	Test failures in System.IO.FileSystem	     System.IO.Tests.Directory_Exists.ExtendedDriveAsPath [FAIL]          Assert.All() Failure: 2 out of 4 items in the collection did not pass.          [3]: Xunit.Sdk.TrueException: Assert.True() Failure               Expected: True               Actual:   False                  at Xunit.Assert.True(Nullable`1 condition, String userMessage) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\BooleanAsserts.cs:line 90                  at System.IO.Tests.Directory_Exists.<ExtendedDriveAsPath>b__33_0(String drive) in d:\Repos\corefx\src\System.IO.FileSystem\tests\Directory\Exists.cs:line 391                  at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\CollectionAsserts.cs:line 31          [2]: Xunit.Sdk.TrueException: Assert.True() Failure               Expected: True               Actual:   False                  at Xunit.Assert.True(Nullable`1 condition, String userMessage) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\BooleanAsserts.cs:line 90                  at System.IO.Tests.Directory_Exists.<ExtendedDriveAsPath>b__33_0(String drive) in d:\Repos\corefx\src\System.IO.FileSystem\tests\Directory\Exists.cs:line 391                  at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\CollectionAsserts.cs:line 31          Stack Trace:             d:\Repos\corefx\src\System.IO.FileSystem\tests\Directory\Exists.cs(391,0): at System.IO.Tests.Directory_Exists.ExtendedDriveAsPath()       System.IO.Tests.Directory_Exists.DriveAsPath [FAIL]          Assert.All() Failure: 2 out of 4 items in the collection did not pass.          [3]: Xunit.Sdk.TrueException: Assert.True() Failure               Expected: True               Actual:   False                  at Xunit.Assert.True(Nullable`1 condition, String userMessage) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\BooleanAsserts.cs:line 90                  at System.IO.Tests.Directory_Exists.<DriveAsPath>b__32_0(String drive) in d:\Repos\corefx\src\System.IO.FileSystem\tests\Directory\Exists.cs:line 383                  at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\CollectionAsserts.cs:line 31          [2]: Xunit.Sdk.TrueException: Assert.True() Failure               Expected: True               Actual:   False                  at Xunit.Assert.True(Nullable`1 condition, String userMessage) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\BooleanAsserts.cs:line 90                  at System.IO.Tests.Directory_Exists.<DriveAsPath>b__32_0(String drive) in d:\Repos\corefx\src\System.IO.FileSystem\tests\Directory\Exists.cs:line 383                  at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\CollectionAsserts.cs:line 31          Stack Trace:             d:\Repos\corefx\src\System.IO.FileSystem\tests\Directory\Exists.cs(383,0): at System.IO.Tests.Directory_Exists.DriveAsPath()  
28795	area-Microsoft.CSharp	Clean dead code for System.CSharp	#17905 
28794	area-System.Security	Throw the same exception for data too big and data too small in RSA Decrypt	"A previous change brought the Cryptography_Padding_DecDataTooBig  exception condition and message from .NET Framework to make sure that all  platforms/providers were throwing in the same cases.  That change left  the ""data too small"" error up to the individual provider libraries.    Windows reported NTE_BAD_DATA (""Bad data."") except for when it reported  ERROR_INVALID_PARAMETER (""The parameter is incorrect."")    macOS reported an AppleCryptographicException wrapping a CFError whose  message had a CSSM error const complaining about the size.    Linux (RSAOpenSsl) just tried the decryption and reported a padding failure,  except for when the padding worked out and it returned... something.    With this change all platforms will reject incorrectly sized data with a unified  string.  The data is now reported as not valid for the size of the key whether it  was too big or too small, and now reports consistently across the different  platforms and providers.    Fixes #28625."
28793	area-System.Net	[Regression] Test failure: System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_ResponseDrain_Test / GetAsync_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection	## Type of failures    OSX failures:  ```  System.Exception : Unexpected EOF trying to read request header    at   System.Net.Test.Common.LoopbackServer.Connection.ReadRequestHeaderAsync()  at   System.Net.Test.Common.LoopbackServer.Connection.ReadRequestHeaderAndSendCustomResponseAsync(String   response) in   /Users/buildagent/agent/_work/391/s/corefx/src/Common/tests/System/Net/Http/LoopbackServer.cs:line   388  at   System.Net.Http.Functional.Tests.HttpClientHandler_ResponseDrain_Test.<>c__DisplayClass3_0.<<GetAsync_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection>b__2>d.MoveNext()   in   /Users/buildagent/agent/_work/391/s/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.ResponseDrain.cs:line   87  --- End of stack trace from previous location where exception was thrown   ---  at   System.Net.Test.Common.LoopbackServer.AcceptConnectionAsync(Func`2 funcAsync)   in /Users/buildagent/agent/_work/391/s/corefx/src/Common/tests/System/Net/Http/LoopbackServer.cs:line   117  at   System.Net.Http.Functional.Tests.HttpClientHandler_ResponseDrain_Test.<>c__DisplayClass3_0.<<GetAsync_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection>b__1>d.MoveNext()   in   /Users/buildagent/agent/_work/391/s/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.ResponseDrain.cs:line   83  --- End of stack trace from previous location where exception was thrown   ---  at   System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext()   in /Users/buildagent/agent/_work/391/s/corefx/src/Common/tests/System/Net/Http/LoopbackServer.cs:line   84  --- End of stack trace from previous location where exception was thrown   ---  at   System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync,   Options options) in   /Users/buildagent/agent/_work/391/s/corefx/src/Common/tests/System/Net/Http/LoopbackServer.cs:line   67  at   System.Net.Http.Functional.Tests.HttpClientHandler_ResponseDrain_Test.GetAsync_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection(ContentMode   mode) in   /Users/buildagent/agent/_work/391/s/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.ResponseDrain.cs:line   56  --- End of stack trace from previous location where exception was thrown   ---  ```    ## History of failures    Day | Build | OS  -- | -- | --  3/14 | 20180314.05 | OSX10.13  3/14 | 20180314.07 | OSX10.13  3/23 | 20180323.01 | OSX10.13  3/24 | 20180324.03 | OSX10.13  3/26 | 20180326.01 | OSX10.13  3/27 | 20180327.01 | OSX10.13  3/27 | 20180327.04 | OSX10.13  3/29 | 20180329.05 | OSX10.13  3/30 | 20180330.01 | OSX10.13  3/30 | 20180330.06 | OSX10.13  3/31 | 20180331.02 | OSX10.13  3/31 | 20180331.03 | OSX10.13  3/31 | 20180331.05 | OSX10.13  
28792	area-System.Linq	Enable faster invoke in interpreter	The change follows up on several TODOs and commented out unfinished implementation.    In cases where it is possible, we can avoid expensive calls via reflection and use more efficient delegate-based thunks. These are also the most common scenarios.   When optimized invocations are not possible (too many arguments, byref arguments, etc..) we still use reflection.    For the cases where we create thunks, there are small caches to hold the recently used ones - just to opportunistically avoid costs of creating thunk delegates again. That is particularly important when the thunks are created via Ref.Emit.    - [x] enable fast invoke pass  - [x] enable caching on reverse invoke (at the entry points to the interpreter lambdas)  - [x] enable fast invoker creation      
28791	area-System.IO	NamedPipeClientStream.Connect(int) does not respect timeout on UNIX domain sockets	On Windows, if you connect to a `NamedPipeServerStream` that was created with `maxNumberOfServerInstances=1` from one process, and attempt to connect to it from another process with `NamedPipeClientStream.Connect(timeout: 0)`, it throws.    On .NET Core 2.1 on Linux, the call to `Connect` hangs indefinitely instead. Internally, it's successfully called `connect()` and is waiting on `recvmsg()`.    Repro project:   [dotnet-pipe-server.zip](https://github.com/dotnet/corefx/files/1873538/dotnet-pipe-server.zip)    On running `repro.sh`, you should get a stack dump from the second client process, since I didn't handle any exceptions from `Connect`. But instead it just waits. Doing the equivalent manually on Windows does throw, just like full framework .NET.
28790	area-System.Net	[Regression][RedHat69] System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_SslProtocols_Test / GetAsync_AllowedSSLVersion_Succeeds	## Type of failures    Test case: `acceptedProtocol: Ssl3, requestOnlyThisProtocol: True`    ```  System.Net.Http.HttpRequestException: An error occurred while sending the request.  ----   System.Net.Http.CurlException : SSL connect error  at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask,   HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)   in /root/corefx-1549868/src/System.Net.Http/src/System/Net/Http/HttpClient.cs:line   479  at System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.<>c__DisplayClass4_0.<<GetAsync_AllowedSSLVersion_Succeeds>b__0>d.MoveNext()   in /root/corefx-1549868/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.SslProtocols.cs:line   126  --- End of stack trace from previous location where exception was thrown   ---  at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2   funcAsync, Options options) in   /root/corefx-1549868/src/Common/tests/System/Net/Http/LoopbackServer.cs:line   67  at System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.GetAsync_AllowedSSLVersion_Succeeds(SslProtocols   acceptedProtocol, Boolean requestOnlyThisProtocol) in   /root/corefx-1549868/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.SslProtocols.cs:line   124  --- End of stack trace from previous location where exception was thrown   ---  ----- Inner Stack Trace -----  at System.Net.Http.CurlHandler.ThrowIfCURLEError(CURLcode error) in   /root/corefx-1549868/src/System.Net.Http/src/System/Net/Http/CurlHandler/CurlHandler.cs:line   660  at System.Net.Http.CurlHandler.MultiAgent.FinishRequest(StrongToWeakReference`1   easyWrapper, CURLcode messageResult) in /root/corefx-1549868/src/System.Net.Http/src/System/Net/Http/CurlHandler/CurlHandler.MultiAgent.cs:line   883  ```    ## History of failures    Day | Build | Details  -- | -- | --  3/31 | 20180331.05 |   4/1 | 20180401.01 |   4/1 | 20180401.02 |   4/2 | 20180402.01 |   4/2 | 20180402.02 |   4/2 | 20180402.05 |   4/3 | 20180403.01 |   4/3 | 20180403.04 |     All test cases are `acceptedProtocol: Ssl3, requestOnlyThisProtocol: True`
28789	area-System.Net	Disable GetAsync_IPv6LinkLocalAddressUri_Success 	Disabled test tracked in #28749.    @dotnet-bot test Outerloop Windows x64 Debug Build  @dotnet-bot test Outerloop Linux x64 Debug Build
28788	area-System.Net	Make default SocketsHttpHandler SslProtocols include Tls11/12 on Win7/2008R2	Windows 7 and Windows 2008 R2 support TLS 1.1 and 1.2, but for legacy reasons by default those protocols are not enabled when a developer elects to use the system default.  However, in .NET Core 2.0 and earlier, HttpClientHandler would enable them, due to being a wrapper for WinHTTP, which enabled them.  Both for compatibility and because we prefer those higher protocols whenever possible, SocketsHttpHandler also pretends they're part of the default when running on Win7/2008R2.    Fixes https://github.com/dotnet/corefx/issues/28733  cc: @davidsh, @Tratcher, @geoffkizer 
28787	area-System.Net	Investigate redundant IdnMapping calls	https://github.com/dotnet/corefx/pull/28725 is adding IdnMapping call in SslStream which have made IdnMapping call in HttpClient (SocketsHttpHandler) redundant.    cc: @davidsh 
28782	area-System.Collections	Difference in code and documentation of BlockingCollection.BoundedCapacity	@nerai commented on [Tue Apr 03 2018](https://github.com/dotnet/coreclr/issues/17395)  [.NET framework reference source of `BlockingCollection.BoundedCapacity`](https://referencesource.microsoft.com/#System/sys/system/collections/concurrent/BlockingCollection.cs,72) says:    > ... The bounded capacity of this collection, or int.MaxValue if no bound was supplied.    However, if no capacity is supplied in the ctor, it is called:        Initialize(collection, NON_BOUNDED, collection.Count);    with        private const int NON_BOUNDED = -1;    So the BoundedCapacity of an unbounded instance is -1, not int.MaxValue. To verify:     var a = new BlockingCollection<int> ();   Console.WriteLine (a.BoundedCapacity); // prints -1   Console.WriteLine (int.MaxValue); // prints 2147483647    ---  @RussKeldorph commented on [Tue Apr 03 2018](https://github.com/dotnet/coreclr/issues/17395#issuecomment-378327059)  @danmosemsft   
28781	area-Infrastructure	Running UpdatePackageIndex Target should produce sorted results	currently, this target doesn't sort the produced results inside the JSON file.    please look at the https://github.com/dotnet/corefx/pull/28720#issuecomment-378320967 for more info.
28780	area-System.Net	 Default Proxy issues	"# Default Proxy issues  Our organisation has a proxy and in previous versions on .NET (.net full framework), you can add the following to the web.config and the application will use your system's default proxy.    ```XML  <system.net>     <defaultProxy useDefaultCredentials=""true"" />  </system.net>  ```  I have tried a lot of different options but just cant seem to get anything to work.    ```csharp  string username = ""test"";  string password = ""test"";  WebProxy proxy = new WebProxy($""http://{username}:{password}@bluecoat.domain.gov.uk"", 8080)  {      Address = new Uri(""http://{username}:{password}@bluecoat.domain.gov.uk:8080""),      Credentials = new NetworkCredential(username, password)  };  HttpClientHandler clientHandler = new HttpClientHandler  {      Proxy = proxy,      UseProxy = true,      Credentials = new NetworkCredential(username, password)  };  var httpClient = new HttpClient(clientHandler);  ```    Any help would be greatly appreciated."
28777	area-System.Net	Test failure: System.Net.WebSockets.Client.Tests.CancelTest/CloseAsync_Cancel_Success(server: wss://corefx-net.cloudapp.net/WebSocket/EchoWebSocket.ashx)	The test `System.Net.WebSockets.Client.Tests.CancelTest/CloseAsync_Cancel_Success(server: wss://corefx-net.cloudapp.net/WebSocket/EchoWebSocket.ashx)` has failed. ``` System.InvalidOperationException : This operation is only allowed using a successfully authenticated context.          Stack Trace:             at System.Net.Security.SslState.CheckThrow(Boolean authSuccessCheck, Boolean shutdownCheck)        at System.Net.Security.SslState.get_SecureStream()        at System.Net.TlsStream.EndRead(IAsyncResult asyncResult)        at System.Threading.Tasks.TaskFactory`1.FromAsyncTrimPromise`1.Complete(TInstance thisRef, Func`3 endMethod, IAsyncResult asyncResult, Boolean requiresSynchronization)     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)        at System.Net.WebSockets.WebSocketConnectionStream.<ReadAsync>d__21.MoveNext()     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)        at System.Net.WebSockets.WebSocketBase.WebSocketOperation.<Process>d__19.MoveNext()     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)        at System.Net.WebSockets.WebSocketBase.<CloseAsyncCore>d__56.MoveNext()     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)        at System.Net.WebSockets.Client.Tests.CancelTest.<>c.<<CloseAsync_Cancel_Success>b__4_0>d.MoveNext()     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)        at System.Net.WebSockets.Client.Tests.ClientWebSocketTestBase.<TestCancellation>d__8.MoveNext()     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)        at System.Net.WebSockets.Client.Tests.CancelTest.<CloseAsync_Cancel_Success>d__4.MoveNext()     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) Build : ProdCon - Master - 20180403.02 (Full Framework Tests) Failing configurations: - Windows.10.Amd64-x86   - Release ```
28776	area-System.Net	Small throughput improvement in Uri construction	"Some low-hanging fruit; the main win here comes from inlining helpers invoked for every character while checking domain names.  These functions each only have two call sites, so there's little bloating, and the net win here is ~7-10% for the various URIs I tried, e.g. `new Uri(""http://microsoft.com"")`.    cc: @rmkerr, @davidsh, @geoffkizer "
28775	area-System.Net	System.Net.Security.Tests.CertificateValidationClientServer/CertificateValidationClientServer_EndToEnd_Ok(useClientSelectionCallback: True)  failed on OSX10.12 CI leg	```  System.Net.Internals.SocketExceptionFactory+ExtendedSocketException : Operation timed out [::1]:50724  Stack Trace :     at System.Net.Sockets.Socket.EndConnect(IAsyncResult asyncResult) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs:line 2430     at System.Net.Sockets.TcpClient.EndConnect(IAsyncResult asyncResult) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Sockets/src/System/Net/Sockets/TCPClient.cs:line 334     at System.Net.Sockets.TcpClient.<>c.<ConnectAsync>b__27_1(IAsyncResult asyncResult) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Sockets/src/System/Net/Sockets/TCPClient.cs:line 278     at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization) in /Users/buildagent/agent/_work/482/s/src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs:line 533  --- End of stack trace from previous location where exception was thrown ---     at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks, Int32 millisecondsTimeout) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 49     at System.Net.Security.Tests.CertificateValidationClientServer.CertificateValidationClientServer_EndToEnd_Ok(Boolean useClientSelectionCallback) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Security/tests/FunctionalTests/CertificateValidationClientServer.cs:line 73  --- End of stack trace from previous location where exception was thrown ---  ```
28774	area-System.Net	Test failed:  System.Net.Tests.HttpListenerContextTests / AcceptWebSocketAsync_InvalidSubProtocol_ThrowsArgumentException	Failed on OSX10.12 CI leg  https://mc.dot.net/#/user/danmosemsft/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/a5b501ec67fe3962d9861ad29e761487792b9080/workItem/System.Net.HttpListener.Tests/analysis/xunit/System.Net.Tests.HttpListenerContextTests~2FAcceptWebSocketAsync_InvalidSubProtocol_ThrowsArgumentException(subProtocol:%20%5C%22random%7Btext%5C%22)  ```  System.Net.WebSockets.WebSocketException : Unable to connect to the remote server  ---- System.Net.Http.HttpRequestException : Connection refused  -------- System.Net.Sockets.SocketException : Connection refused  Stack Trace :     at System.Net.WebSockets.WebSocketHandle.ConnectAsyncCore(Uri uri, CancellationToken cancellationToken, ClientWebSocketOptions options) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.WebSockets.Client/src/System/Net/WebSockets/WebSocketHandle.Managed.cs:line 230     at System.Net.WebSockets.ClientWebSocket.ConnectAsyncCore(Uri uri, CancellationToken cancellationToken) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.WebSockets.Client/src/System/Net/WebSockets/ClientWebSocket.cs:line 152     at System.Net.Tests.HttpListenerContextTests.GetWebSocketContext(String[] subProtocols) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.HttpListener/tests/HttpListenerContextTests.cs:line 270     at System.Net.Tests.HttpListenerContextTests.AcceptWebSocketAsync_InvalidSubProtocol_ThrowsArgumentException(String subProtocol) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.HttpListener/tests/HttpListenerContextTests.cs:line 176  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/ConnectHelper.cs:line 86     at System.Threading.Tasks.ValueTask`1.get_Result() in /Users/buildagent/agent/_work/482/s/src/mscorlib/shared/System/Threading/Tasks/ValueTask.cs:line 723     at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 325     at System.Threading.Tasks.ValueTask`1.get_Result() in /Users/buildagent/agent/_work/482/s/src/mscorlib/shared/System/Threading/Tasks/ValueTask.cs:line 723     at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 467     at System.Threading.Tasks.ValueTask`1.get_Result() in /Users/buildagent/agent/_work/482/s/src/mscorlib/shared/System/Threading/Tasks/ValueTask.cs:line 723     at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 258     at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/RedirectHandler.cs:line 30     at System.Net.WebSockets.WebSocketHandle.ConnectAsyncCore(Uri uri, CancellationToken cancellationToken, ClientWebSocketOptions options) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.WebSockets.Client/src/System/Net/WebSockets/WebSocketHandle.Managed.cs:line 171  ----- Inner Stack Trace -----     at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/ConnectHelper.cs:line 67  ```
28773	area-System.Net	PlatformHandler_HttpClientHandler_Authentication_Test.PreAuthenticate_FirstRequestNoHeader_SecondRequestVariousStatusCodes_ThirdRequestPreauthenticates(statusCode: 510)  failed on NETFX CI leg	"Failed on NETFX CI leg:  ```        System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_Authentication_Test.PreAuthenticate_FirstRequestNoHeader_SecondRequestVariousStatusCodes_ThirdRequestPreauthenticates(statusCode: 510) [FAIL]          Assert.Contains() Failure          Not found: (filter expression)          In value:  List<String> [""GET / HTTP/1.1"", ""Host: 127.0.0.1:51635"", ""Connection: Keep-Alive""]          Stack Trace:               at System.Net.Http.Functional.Tests.HttpClientHandler_Authentication_Test.<>c__DisplayClass14_0.<<PreAuthenticate_FirstRequestNoHeader_SecondRequestVariousStatusCodes_ThirdRequestPreauthenticates>b__1>d.MoveNext()            --- End of stack trace from previous location where exception was thrown ---               at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()               at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)               at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext()            --- End of stack trace from previous location where exception was thrown ---               at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()               at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)               at System.Net.Test.Common.LoopbackServer.<CreateServerAsync>d__9.MoveNext()            --- End of stack trace from previous location where exception was thrown ---               at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()               at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)               at System.Net.Http.Functional.Tests.HttpClientHandler_Authentication_Test.<PreAuthenticate_FirstRequestNoHeader_SecondRequestVariousStatusCodes_ThirdRequestPreauthenticates>d__14.MoveNext()            --- End of stack trace from previous location where exception was thrown ---               at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()               at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)            --- End of stack trace from previous location where exception was thrown ---               at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()               at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)            --- End of stack trace from previous location where exception was thrown ---               at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()               at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)      Finished:    System.Net.Mail.Functional.Tests  ```"
28772	area-System.Net	"PlatformHandler_HttpClientHandlerTest.AllowAutoRedirect_True_ValidateNewMethodUsedOnRedirection(statusCode: 307, oldMethod: ""GET"", newMethod: ""GET"") failed on NETFX CI leg"	"Failed on NETFX CI leg:  ```        System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandlerTest.AllowAutoRedirect_True_ValidateNewMethodUsedOnRedirection(statusCode: 307, oldMethod: ""GET"", newMethod: ""GET"") [FAIL]          Canceled:           Expected: False          Actual:   True          Stack Trace:               at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<>c__DisplayClass50_2.<<AllowAutoRedirect_True_ValidateNewMethodUsedOnRedirection>b__1>d.MoveNext()            --- End of stack trace from previous location where exception was thrown ---               at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()               at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)               at System.Net.Test.Common.LoopbackServer.<CreateServerAsync>d__9.MoveNext()            --- End of stack trace from previous location where exception was thrown ---               at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()               at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)               at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<>c__DisplayClass50_1.<<AllowAutoRedirect_True_ValidateNewMethodUsedOnRedirection>b__0>d.MoveNext()            --- End of stack trace from previous location where exception was thrown ---               at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()               at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)               at System.Net.Test.Common.LoopbackServer.<CreateServerAsync>d__9.MoveNext()            --- End of stack trace from previous location where exception was thrown ---               at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()               at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)               at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<AllowAutoRedirect_True_ValidateNewMethodUsedOnRedirection>d__50.MoveNext()            --- End of stack trace from previous location where exception was thrown ---               at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()               at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)            --- End of stack trace from previous location where exception was thrown ---               at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()               at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)            --- End of stack trace from previous location where exception was thrown ---               at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()               at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  ```"
28771	area-System.ComponentModel	PropertyDescriptor - MemberDescriptor.Attributes	Port the change #26756 into 2.0    Fixes #26600  PropertyDescriptor - MemberDescriptor.Attributes returns base attribute instead of ancestor's attribute
28770	area-System.Net	Fix ProxyExplicitlyProvided_DefaultCredentials_Ignored test	I couldn't get it to fail locally, but I believe the issue was that sporadically WinHttpHandler would not reuse the original connection, in which case it would either not close the first and the test would hang (and then the client would timeout) because nothing was accepting the second connection, or it would close the first and fail because the server was expecting a second request on the connection.  This fixes it by using Connection: close on the first response so that the client won't reuse the same connection.    Fixes https://github.com/dotnet/corefx/issues/28537  Fixes https://github.com/dotnet/corefx/issues/25983  cc: @wfurt, @rmkerr 
28769	area-System.Data	Add a fast and convenient deserialization API to ADO.NET	"When using ADO.NET to read rows the deserialization cost can be very significant. This is important in scenarios where a lot of data is streamed. Here is directly executable code to demonstrate this:    ```      static class Program      {          static void Main()          {              DeserializationBenchmark.Run();          }            public static class DeserializationBenchmark          {              public static void Run()              {                  using (var connection = new SqlConnection(""Data Source=(local); Integrated Security=True; Initial Catalog=master;""))                  {                      connection.Open();                        PrepareTestData(connection);                        RunBenchmarkLoop();                  }              }                static void PrepareTestData(SqlConnection connection)              {                  using (var command = new SqlCommand(@""SELECT o1.object_id value1, o1.object_id value2, o1.object_id value3, o1.object_id value4, o1.object_id value5 INTO ##BenchmarkRows FROM sys.all_objects o1 cross join (select top 100 * from sys.all_objects o2) o2"", connection))                  {                      command.ExecuteNonQuery();                  }              }                static void RunBenchmarkLoop()              {                  long count = 0;                    while (true)                  {                      ReadData();                        count++;                        if (count % 10 == 0)                          Console.WriteLine($""Completed {count} iterations."");                  }              }                static void ReadData()              {                  using (var connection = new SqlConnection(""Data Source=(local); Integrated Security=True; Initial Catalog=master;""))                  {                      connection.Open();                        using (var transaction = connection.BeginTransaction(System.Data.IsolationLevel.ReadCommitted))                      {                          using (var command = new SqlCommand(@""SELECT * FROM ##BenchmarkRows"", connection, transaction))                          using (var reader = command.ExecuteReader())                          {                              while (reader.Read())                              {                                  var value1 = reader.GetInt32(0);                                  var value2 = reader.GetInt32(1);                                  var value3 = reader.GetInt32(2);                                  var value4 = reader.GetInt32(3);                                  var value5 = reader.GetInt32(4);                              }                          }                            transaction.Commit();                      }                  }              }          }      }  ```    This code simply deserializes a table of a few thousand rows. There are 5 int columns. The benchmark is designed to demonstrate the issue but it's not unrealistic. I also used ADO.NET best practices.    ![image](https://user-images.githubusercontent.com/12032350/38203900-13b55bf6-36a1-11e8-9cdc-344a27d2c90c.png)    I might be mistaken but **it seems that a lot of the time is spent calling chatty APIs on SqlDataReader**. It looks like there is a lot of API overhead and comparatively little work actually parsing the network protocol. The console process uses 100% of one CPU core. SQL Server uses only about 1/3 of one CPU core. This is further (heuristic) evidence that the client is less efficient than the server.    There is no way to avoid this cost at the moment. The code is as fast as it gets. **I suggest the following enhancement**: Provide an API that directly deserializes into a user-provided type.    Old:  ```  IDataReader reader = command.ExecuteReader();  while (reader.MoveNext()) {   //Read all fields individually  }  ```    New:  ```  IEnumerable<MyDTO> resultRows = command.ExecuteObjects<MyDTO>();  ```    This API could be made extremely fast because:    * It is less chatty. ADO.NET can access it's internal buffers more directly.  * Metadata overhead has to be incurred only once for the whole result set. Many per-row and per-field metadata accesses and validations can be eliminated.  * ADO.NET can compile a lambda expression dynamically that pulls data from the internal byte buffers and pushes it into the user-provided type. To illustrate the point: The expression could look like this: `new MyDTO() { Field1 = internalReader.GetNextFieldAsInt32(), Field2 = internalReader.GetNextFieldAsString(), ... }`.  * The lambda can be cached internally. Alternatively an API consumer would use a factory to create a ""fast reader"" and cache the reader.  * The entire row can be read in one go. I believe this makes it faster to parse the TDS protocol.  * If async is in use there will be less async overhead because the APIs are less chatty.    <hr>    Possible extensions of this idea would be:    * Allow structs as well as classes  * Allow invoking a constructor  * Allow sequences of the form `IEnumerable<object[]>` where all field values are provided as objects.   * Add a pull-style API. Very rough API idea: `readerObject.GetNextObject<MyDTO>()`.  * Add a way to provide and reuse preallocated objects e.g. `readerObject.GetNextObject<MyDTO>(existingObject)`.  * Async support (`IAsyncEnumerable` or other suitable mechanisms).  * Maybe there can be a parallel mode that hands our a `ParallelQuery`. I'm *not* optimistic this can be done.  * Allow sequences of the form `IEnumerable<MyDTO[]>`. Here, ADO.NET would hand out rows in chunks. The chunk size would be chosen optimally. Probably, ADO.NET would convert each network buffer into a chunk. This would make the API even less chatty.    I understand that this proposal is a bit raw. The API that I proposed is a straw man that clearly has some flaws. I think an API in this spirit could improve efficiency a lot. It also would be very convenient. The existing pattern is extremely awkward to use. People are using light-weight wrappers like Dapper which look just like this API proposal.    <hr>    The API should be so that ORMs such as Entity Framework can use it as well. This might not be trivial depending on what Entity Framework does. Here's an idea on how to support arbitrary object instantiation:    Instead of making ADO.NET figure out how to construct the `new MyDTO()...` part of the expression tree, let the user provide that. ADO.NET provides one `Expression` for each field to be deserialized. It could look like this:    ```  var fastReader = FastReader.Create<MyDTO>(      columnDescriptions /* contains the type and order of columns */,      (Expression[] columnValueExpressions) =>          Expression.New(typeof(MyDTO), columnValueExpressions) //Create new MyDTO(...) expression  });    //cache fastReader    IEnumerable<MyDTO> objects = fastReader.Read(mySqlDataReader);  ```    In this example, the API caller can create an arbitrary deserialization expression that uses the ADO.NET provided column values in `columnValueExpressions`. `columnValueExpressions[0]` would correspond to `internalReader.GetNextFieldAsInt32()` in the code further above. Entity Framework could construct an expression tree that does anything it wants including creating multiple objects, calling factory methods and calling into the object state manager. All of this processing would be very close to obtaining the actual column values from internal ADO.NET data structures. No chattyness.    "
28768	area-Meta	Fix build with xcode 9.3 on OSX	The c_static_assert definition is causing build problems on OSX.  The compiler complains about the typedef we use to implement the  c_static_assert:  `declaration shadows a typedef in the global scope [-Werror,-Wshadow]`  This is due to multiple static asserts    To fix it, I have modified the c_static_assert to use _Static_assert  C feature that's available in clang.
28767	area-System.Net	Stop artificially rooting SocketAsyncEventArgs	SocketAsyncEventArgs creates an overlapped object that references the SAEA.  That overlapped object creates an async pinning handle in the runtime, which roots the SocketAsyncEventArgs.  The cycle from SAEA->Overlapped->handle->SAEA involving the root means that a dropped SAEA that's not Dispose'd will end up leaking.    This commit fixes that by adding a level of indirection between the handle and the SAEA.  Rather than wrapping the SAEA directly, the handle is given an intermediate object that references the SAEA, and the SAEA then stores itself as a reference into that object only while an active operation is in progress.  Once the operation completes, the reference in that object is nulled out, and the SAEA will no longer be kept alive by the pinning handle.    Fixes https://github.com/dotnet/corefx/issues/28746  cc: @geoffkizer, @davidsh, @halter73 
28764	area-System.Xml	Is there any way to localize validation error messages  when checking xml by xsd scheme?	Is there any way to localize validation error messages  when checking xml by xsd scheme?  I could not find any information about it. In netframework this problem was solved by language packs. There is a way to overload resources  System.Private.Xml.dll  so that messages are taken from the current culture ?
28763	area-System.Collections	Extra test should be added for Dictionary	"This code should work  ```csharp  var d = new Dictionary<string,string>();  d.Add(""a"", ""b"");  d.Add(""c"", ""d"");  foreach (var e in d)  {      if (d.Remove(e.Key + ""Sibling"")) break;  }  ```    From https://github.com/dotnet/coreclr/pull/17196#issuecomment-377360621    /cc @danmosemsft Just so it doesn't fall off the radar"
28761	area-Infrastructure	build-native.sh fails when using uname to determine arch	"In src/Native/build-native.sh, the following logic fails when the processor type info contains spaces.  ```  CPUName=$(uname -p)  # Some Linux platforms report unknown for platform, but the arch for machine.  if [ $CPUName == ""unknown"" ]; then      CPUName=$(uname -m)  fi    if [ $CPUName == ""i686"" ]; then      __BuildArch=x86  fi  ```  ```uname -p``` does not return the 'platform' as the comment seems to imply but rather the 'processor' type. While it appears some distros do return the architecture, others provide the processor type information correctly if available.    Examples:  ```  > uname -p  Intel(R) Core(TM) i5-3230M CPU @ 2.60GHz  > uname -p  Intel(R) Core(TM)2 Duo CPU E6750 @ 2.66GHz  ```  Note that the returned data can contain spaces. This causes the conditional checks above to fail with the following error as they don't quote the variable when referencing it.  ```  source-build/src/corefx/src/Native/build-native.sh: line 178: [: too many arguments  source-build/src/corefx/src/Native/build-native.sh: line 182: [: too many arguments  ```"
28760	area-System.Memory	Created performance tests for ROS First and TryGet methods	I created performance tests for ROS First and TryGet methods. Also I suggest more clear and fast code for TryGetBuffer and GetFirstBuffer methods.
28759	area-System.Net	SafeDeleteSslContext.WriteToConnection throws System.ArgumentNullException	Hard to reproduce but our CI tests sporadically fail with:    ```  Unhandled Exception: System.ArgumentNullException: Value cannot be null.     at System.Threading.Monitor.ReliableEnter(Object obj, Boolean& lockTaken)     at System.Net.SafeDeleteSslContext.WriteToConnection(Void* connection, Byte* data, Void** dataLength)     at Interop.AppleCrypto.SslHandshake(SafeSslHandle sslHandle)     at System.Net.Security.SslStreamPal.PerformHandshake(SafeSslHandle sslHandle)     at System.Net.Security.SslStreamPal.HandshakeInternal(SafeFreeCredentials credential, SafeDeleteContext& context, SecurityBuffer inputBuffer, SecurityBuffer outputBuffer, Boolean isServer, Boolean remoteCertRequired, String targetName)  ```    The dotnet process crashes after this. This occurs with a test where a client opens an SSL connection asynchronously and then closes it -- possibly while the handshake is still in progress.    The crash dump showing the stacks: [stacks.txt](https://github.com/dotnet/corefx/files/1870746/stacks.txt)    This occurs with both .NET Core Runtime 2.0.6 and 2.1-preview.
28758	area-System.Net	Test failure: System.Net.NetworkInformation.Tests.PingTest / SendPingAsyncWithHostAndTimeoutAndBufferAndPingOptions_Unix	Opened on behalf of @Sunny-pu  The test `System.Net.NetworkInformation.Tests.PingTest/SendPingAsyncWithHostAndTimeoutAndBufferAndPingOptions_Unix` has failed.  Assert.Equal() Failure     Expected: Success     Actual:   TimedOut          Stack Trace:             at System.Net.NetworkInformation.Tests.PingTest.<>c__DisplayClass14_0.<SendPingAsyncWithHostAndTimeoutAndBufferAndPingOptions_Unix>b__1(PingReply pingReply) in /Users/buildagent/agent/_work/447/s/corefx/src/System.Net.Ping/tests/FunctionalTests/PingTest.cs:line 315        at System.Net.NetworkInformation.Tests.PingTest.<SendPingAsync>d__23.MoveNext() in /Users/buildagent/agent/_work/447/s/corefx/src/System.Net.Ping/tests/FunctionalTests/PingTest.cs:line 453     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)        at System.Net.NetworkInformation.Tests.PingTest.<SendPingAsyncWithHostAndTimeoutAndBufferAndPingOptions_Unix>d__14.MoveNext() in /Users/buildagent/agent/_work/447/s/corefx/src/System.Net.Ping/tests/FunctionalTests/PingTest.cs:line 311     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) Build : 2.0.0 - 20180403.03 (Core Tests) Failing configurations: - OSX.1012.Amd64-x64   - Debug  Details: https://mc.dot.net/#/product/netcore/200/source/official~2Fcorefx~2Frelease~2F2.0.0~2F/type/test~2Ffunctional~2Fcli~2F/build/20180403.03/workItem/System.Net.Ping.Functional.Tests/analysis/xunit/System.Net.NetworkInformation.Tests.PingTest~2FSendPingAsyncWithHostAndTimeoutAndBufferAndPingOptions_Unix
28757	area-System.IO	"Test failure: System.IO.Tests.DirectoryInfo_EnumDir_str_str/PatternTests_DosStarOddSpace(pattern: \""*.\"", sourceFiles: [\""foo. \"", \""foo.  \"", \""foo..\"", \""foo. t\""], expected: [\""foo. \"", )"	"Opened on behalf of @Sunny-pu  The test `System.IO.Tests.DirectoryInfo_EnumDir_str_str/PatternTests_DosStarOddSpace(pattern: \""*.\"", sourceFiles: [\""foo. \"", \""foo.  \"", \""foo..\"", \""foo. t\""], expected: [\""foo. \"", )` has failed.  Assert.Equal() Failure\r     Expected: OrderedEnumerable<String, String> [\""foo. \"", \""foo.  \"", \""foo..\""]\r     Actual:   OrderedEnumerable<String, String> [\""foo..\""]          Stack Trace:          null Build : 2.0.0 - 20180403.03 (Core Tests) Failing configurations: - windows.10.amd64.iot-x64   - Release  Details: https://mc.dot.net/#/product/netcore/200/source/official~2Fcorefx~2Frelease~2F2.0.0~2F/type/test~2Ffunctional~2Fcli~2F/build/20180403.03/workItem/System.IO.FileSystem.Tests/analysis/xunit/System.IO.Tests.DirectoryInfo_EnumDir_str_str~2FPatternTests_DosStarOddSpace(pattern:%20%5C%22*.%5C%22,%20sourceFiles:%20%5B%5C%22foo.%20%5C%22,%20%5C%22foo.%20%20%5C%22,%20%5C%22foo..%5C%22,%20%5C%22foo.%20t%5C%22%5D,%20expected:%20%5B%5C%22foo.%20%5C%22,%20)"
28755	area-System.Net	Test failed: System.Net.WebSockets.Client.Tests.ArraySegmentSendReceiveTest / ZeroByteReceive_CompletesWhenDataAvailable (server: ws://corefx-net.cloudapp.net/WebSocket/EchoWebSocket.ashx)	Opened on behalf of @Sunny-pu  The test `System.Net.WebSockets.Client.Tests.ArraySegmentSendReceiveTest/ZeroByteReceive_CompletesWhenDataAvailable(server: ws://corefx-net.cloudapp.net/WebSocket/EchoWebSocket.ashx)` has failed.  System.Net.WebSockets.WebSocketException : An exception caused the WebSocket to enter the Aborted state. Please see the InnerException, if present, for more details.\r     ---- System.ArgumentException : The specified buffer index is not within the buffer capacity.          Stack Trace:             at System.Net.WebSockets.WinRTWebSocket.ReceiveAsync(ArraySegment`1 buffer, CancellationToken cancellationToken) in E:\A\_work\36\s\corefx\src\System.Net.WebSockets.Client\src\System\Net\WebSockets\WinRTWebSocket.cs:line 330        at System.Net.WebSockets.Client.Tests.SendReceiveTest.ZeroByteReceive_CompletesWhenDataAvailable(Uri server) in E:\A\_work\36\s\corefx\src\System.Net.WebSockets.Client\tests\SendReceiveTest.cs:line 461     --- End of stack trace from previous location where exception was thrown ---     ----- Inner Stack Trace -----        at System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBufferExtensions.CopyTo(IBuffer source, UInt32 sourceIndex, Byte[] destination, Int32 destinationIndex, Int32 count) in E:\A\_work\36\s\corefx\src\System.Runtime.WindowsRuntime\src\System\Runtime\InteropServices\WindowsRuntime\WindowsRuntimeBufferExtensions.cs:line 182        at System.Net.WebSockets.WinRTWebSocket.OnMessageReceived(MessageWebSocket sender, MessageWebSocketMessageReceivedEventArgs args) in E:\A\_work\36\s\corefx\src\System.Net.WebSockets.Client\src\System\Net\WebSockets\WinRTWebSocket.cs:line 385 Build : Master - 20180403.01 (UWP F5 Tests) Failing configurations: - Windows.10.Arm64-arm   - Release - Windows.10.Amd64.ClientRS3-x86   - Release - Windows.10.Amd64.ClientRS3-x64   - Release  Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fuwp~2F/build/20180403.01/workItem/System.Net.WebSockets.Client.Tests/analysis/xunit/System.Net.WebSockets.Client.Tests.ArraySegmentSendReceiveTest~2FZeroByteReceive_CompletesWhenDataAvailable(server:%20ws:~2F~2Fcorefx-net.cloudapp.net~2FWebSocket~2FEchoWebSocket.ashx)
28754	area-Microsoft.CSharp	Reset Console in  src/Microsoft.CSharp/tests/NamedArgumentTests.cs (Fixes #28667)	Add Helpers::OverrideConsoleAndRun that will set StringWriter as out and run received command. After running the command it will reset the out to whatever it was set before running tests  Fixes #28667
28752	area-System.Memory	I suggest to add ReadOnlySequence constructor for ArraySegment	"I suggest to add ReadOnlySequence constructor for ArraySegment.    # Proposed API  ```cs      public readonly partial struct ReadOnlySequence<T>      {          /// <summary>          /// Creates an instance of <see cref=""ReadOnlySequence{T}""/> from the <see cref=""ArraySegment{T}""/>.          /// </summary>          public ReadOnlySequence(ArraySegment<T> arraySegment);      }  ```    # Details  Implementation is like for `ReadOnlySequence(T[] array, int start, int length)` constructor."
28751	area-System.Memory	Remove .Length from MemoryManager<T>	It adds no utility; and only gives scope to implementors to get `Memory` and `Length` properties out of sync.    Suggested change:  ```diff  public readonly partial struct Memory<T>  {  +    [MethodImpl(MethodImplOptions.AggressiveInlining)]  +    internal Memory(MemoryManager<T> manager, int length)  +    {  +        Debug.Assert(manager != null);  +          +        if (length < 0)  +            ThrowHelper.ThrowArgumentOutOfRangeException();  +  +        _object = manager;  +        _index = (1 << 31); // Mark as MemoryManager type  +        // Before using _index, check if _index < 0, then 'and' it with RemoveFlagsBitMask  +        _length = length;  +    }    -    public Memory(MemoryManager<T> manager, int start, int length)  -    {  -        // ...  -    }  }    public abstract partial class MemoryManager<T>  {  -    public virtual int Length => GetSpan().Length;  -    public virtual Memory<T> Memory => new Memory<T>(this, 0, Length);  +    public virtual Memory<T> Memory => CreateMemory(this, GetSpan().Length);    +    protected Memory<T> CreateMemory(int length) => new Memory<T>(this, length);  +    // Convenience api for non-zero offsets  +    protected Memory<T> CreateMemory(int start, int length) => CreateMemory(length).Slice(start);  }  ```    If an implementor wants to go faster than `GetSpan().Length` rather than having a choice on overriding either `Length` or `Memory` or both; it is now clear they only need to override `Memory` as there is no alternate path.    A common usage is checking `Memory.Length` (as `.Length` isn't exposed up stream via `IMemoryOwner`) so if overriding `.Length` were the path chosen; then that's an interface call to `Memory`, which then makes a virtual call to `.Length`(then the Memory .ctor makes a further 2 virtual calls to `.Length` O_o) so its a bad path anyway.    Overriding `Memory` with this change on the other hand is would be a single interface call; then you're done, so its the better path.    e.g. the second should be chosen over the first below for performance in its common usage pattern  ```diff  public class OwnedArray<T> : MemoryManager<T>  {      T[] _array;      int _referenceCount;        -   public override int Length => _array.Length;  +   public override Memory<T> Memory => CreateMemory(_array.Length)  ```    Additionally currently there is the confusion of which choice to make of the two properties to override. The `Memory` override also provide greater utility as the `offset` can be changed.    cc @GrabYourPitchforks, @davidfowl, @pakrym, @davidfowl @KrzysztofCwalina 
28750	area-System.Memory	Should we provide direct ReadOnlySequence constructors for MemoryManager?	Early ReadOnlySequence has constructors to create it with OwnedMemory. Now OwnedMemory is replaced by MemoryManager and constructors was removed.    Now it is possible to create ReadOnlySequence with MemoryManager by using MemoryManager.Memory property. But it seems strange that we convert MemoryManager to ReadOnlyMemory and then ReadOnlySequence convert it back to MemoryManager by using marshaling.    Should we provide direct ReadOnlySequence constructors for MemoryManager as it was for OwnedMemory?
28749	area-System.Net	[Regression] Test failure: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest / GetAsync_IPv6LinkLocalAddressUri_Success	## Types of failure    `System.Net.Http.Functional.Tests` / `SocketsHttpHandler_HttpClientHandlerTest.GetAsync_IPv6LinkLocalAddressUri_Success`    Linux:  ```  System.Net.Http.HttpRequestException : Invalid argument  ---- System.Net.Sockets.SocketException : Invalid argument  ```    OSX - [details](https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_osx_debug/390/testReport/System.Net.Http.Functional.Tests/SocketsHttpHandler_HttpClientHandlerTest/GetAsync_IPv6LinkLocalAddressUri_Success/  )  ```  System.Net.Http.HttpRequestException : No route to host  ---- System.Net.Sockets.SocketException : No route to host    at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_osx_debug/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/ConnectHelper.cs:line 86  at System.Threading.Tasks.ValueTask`1.get_Result() in /Users/buildagent/agent/_work/482/s/src/mscorlib/shared/System/Threading/Tasks/ValueTask.cs:line 723  at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_osx_debug/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 325  at System.Threading.Tasks.ValueTask`1.get_Result() in /Users/buildagent/agent/_work/482/s/src/mscorlib/shared/System/Threading/Tasks/ValueTask.cs:line 723  at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_osx_debug/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 467  at System.Threading.Tasks.ValueTask`1.get_Result() in /Users/buildagent/agent/_work/482/s/src/mscorlib/shared/System/Threading/Tasks/ValueTask.cs:line 723  at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_osx_debug/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 258  at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_osx_debug/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/RedirectHandler.cs:line 30  at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_osx_debug/src/System.Net.Http/src/System/Net/Http/HttpClient.cs:line 479  at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<>c__DisplayClass34_0.<<GetAsync_IPv6LinkLocalAddressUri_Success>b__0>d.MoveNext() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_osx_debug/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs:line 365  --- End of stack trace from previous location where exception was thrown ---  at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_osx_debug/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 67  at System.Net.Http.Functional.Tests.HttpClientHandlerTest.GetAsync_IPv6LinkLocalAddressUri_Success() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_osx_debug/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs:line 362  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----  at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_osx_debug/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/ConnectHelper.cs:line 76  ```    ## History of failures    Day | Build | Details  -- | -- | --  4/3 | 20180403.01 | 2x OSX & 15x Linux  4/3 | 20180403.04 | 2x OSX & 14x Linux  
28747	area-System.Diagnostics	DelimitedListTraceListener Constructor strange behavior	"I tested this code :  ```  var Listener = new DelimitedListTraceListener(""test.txt"");  Listener.Delimiter = "","";  Trace.Listeners.Add(Listener);  Trace.Write(""x"");  Trace.WriteLine(""y"");  Trace.TraceError(""z"");  Trace.TraceInformation(""w"");  Trace.Flush();  ```  It workes in windows forms app, but in a .net Core console app, it didn't create the file, and after I manually created the file it didn't write any thing to it!  I had to modify the code to create the file myself and then close it:  ```  var s = File.Open (""test.txt"", FileMode.OpenOrCreate);  var Listener = new DelimitedListTraceListener(s);  Listener.Delimiter = "","";  Trace.Listeners.Add(Listener);  Trace.Write(""x"");  Trace.WriteLine(""y"");  Trace.TraceError(""z"");  Trace.TraceInformation(""w"");  Trace.Flush();  s.Close();  ```  This worked but gave strange results regaring the delimiters as I showed here: https://github.com/dotnet/corefx/issues/28697  It seems that the constructor that accepts the file path doesn't work in .NET core, but works in .NET framework!  "
28746	area-System.Net	SocketAsyncEventArgs ends up rooting itself until it's Dispose'd	"This issue is for both .NET Framework and .NET Core.    A SocketAsyncEventArgs ends up rooting itself in a cycle involving an async pinning handle.  When the SAEA is first used, it creates an overlapped object that in turn creates a NativeOverlapped* that creates a pinning handle, and that overlapped/pinning handle reference the SAEA, leading to a cycle where the SAEA will remain rooted until it's Dispose'd.    Repro:  ```C#  using System;  using System.Net;  using System.Net.Sockets;  using System.Threading;    class Program  {      static void Main()      {          for (int i = 0; i < 100; i++) DoWork();          Console.WriteLine(""Waiting for finalizers..."");          while (true)          {              GC.Collect();              GC.WaitForPendingFinalizers();          }      }        static void DoWork()      {          var d = new DerivedSocketAsyncEventArgs();          using (Socket listener = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp))          {              listener.Bind(new IPEndPoint(IPAddress.Loopback, 0));              listener.Listen(1);                using (Socket client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp))              {                  d.RemoteEndPoint = listener.LocalEndPoint;                  var mres = new ManualResetEventSlim();                  d.Completed += (s, e) => mres.Set();                  if (client.ConnectAsync(d)) mres.Wait(); // Uncomment this line to see finalizers run              }          }      }  }    class DerivedSocketAsyncEventArgs : SocketAsyncEventArgs  {      ~DerivedSocketAsyncEventArgs() => Console.WriteLine(""finalized"");  }  ```"
28745	area-Infrastructure	[1.1] Move cmake cxx tag check to cmakelists	Makes the check actually work :)
28744	area-Infrastructure	Add new Debian.9.Amd64 queue	"Debian's Azure versioning is unusual, so this queue represents ""newest available"".  (All Azure images are 9.0.Date, which is tricky if you want a specific minor version)    @ianhays , @Petermarcu  FYI"
28743	area-Infrastructure	Fail the build when there are errors in main tasks	"There are cases where there are errors in ""main"" tasks but we don't fail the build and go on causing other random/weird errors which are not as straight forward to find.    A good example is what is referenced in dotnet/corefx#28602 where build.cmd failed since Python was not installed in an agent but the build continued failing while trying to build the packages which were not there since building them failed."
28741	area-System.Memory	Created performance tests for ReadOnlySequence.First property	Created performance tests for ReadOnlySequence.First property. Also I suggest more clear code for GetFirstBuffer method. Performance tests show the same performance at my computer. I can add performance logs for before and after.
28740	area-System.Net	Fix proxied ipv6 address request formatting and fix port handling for proxied IP address on SocketsHttpHandler	1. Fix IPv6 missing `[]` in proxied request.  2. Fix missing port number in the request.    If default ports 80 (for http connection) and 443 (for https connection) are specified for proxied request, 80 will be stripped off, while 443 will not. Because for https scheme, it will try to tunnel through the proxy (`CONNECT`), and port will not be stripped off.    Tests are added to document the behavior.    Fix: #28609
28739	area-System.Text	Speed up regex FindFirstChar when there are exactly 2 possible match start characters	"Regex-Redux spends much of its time scanning its huge input string to find the first character of a match ([see perf analysis here](https://github.com/dotnet/corefx/issues/27124) - this is the 20% or more time noted in CharInClassInternal)    This scan is the job of FindFirstChar(). In general character classes are complicated objects because they must store possibly several valid ranges, which may be character classes, as well as some options such as negating. They are packed objects and a binary search is used to check whether a candidate character matches the class. See http://www.moserware.com/2009/03/how-net-regular-expressions-really-work.html for a breakdown of how they work.    We do some optimizations to avoid this binary search for every character. First is Boyer-Moore which helps for long fixed prefix. Second is [IsSingleton](https://github.com/dotnet/corefx/blob/master/src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexInterpreter.cs#L420), which special cases for positive match of a single specific character.    RegexRedux doesn't benefit much from either of these. It has no long prefix and in many cases there are several possible first characters. For example [here](https://github.com/dotnet/corefx/blob/master/src/System.Text.RegularExpressions/tests/Performance/Perf.RegexRedux.cs#L56) in `""agggt[cgt]aa|tt[acg]accct""` much of the time it is scanning for either `a` or `t`. In some cases there are some more options for example in `""agggtaa[cgt]|[acg]ttaccct""` it would start looking for `a`, `c` or `g` to begin the match. However two characters is the key case.    At this point we are looking for localized low risk changes.    Firstly I made a small speedup to the binary search by replacing `(min + max) / 2` with ` (min & max) + ((min ^ max) >> 1)` (apparently from Knuth .. it can be intuitively seen that halving the sum will retain all the bits they have in common, and half of all the bits they do not have in common). It is nice that it avoids overflow but that is not relevant in this case. This gave only a small improvement: I measured ~1% on an artificial test case and within noise on the full test. Nevertheless it is low harm so I retained it and used it in the other two binary searches in the file.    Secondly I special cased the ""two possible characters"" as IsDoubleton in the same pattern as existing IsSingleton. This gave a larger benefit, with no measureable hit on the generic test case:    ## before  two runs:      System.Text.RegularExpressions.Performance.Tests.dll                               | Metric         | Unit  | Iterations |    Average |   STDEV.S |        Min |        Max    :--------------------------------------------------------------------------------- |:-------------- |:-----:|:----------:| ----------:| ---------:| ----------:| ----------:     System.Text.RegularExpressions.Tests.Perf_Regex.Match                             | Duration       | msec  |     44     |    229.951 |    11.146 |    219.932 |    258.559     System.Text.RegularExpressions.Tests.Perf_Regex.Match                             | GC Allocations | bytes |     44     | 1.871E+008 | 48478.158 | 1.870E+008 | 1.872E+008     System.Text.RegularExpressions.Tests.RegexRedux.RegexReduxMini(options: Compiled) | Duration       | msec  |     27     |    377.521 |    20.081 |    335.727 |    419.947     System.Text.RegularExpressions.Tests.RegexRedux.RegexReduxMini(options: None)     | Duration       | msec  |     15     |    709.439 |    31.986 |    655.717 |    765.097         System.Text.RegularExpressions.Performance.Tests.dll                              | Metric         | Unit  | Iterations |    Average |   STDEV.S |        Min |        Max    :--------------------------------------------------------------------------------- |:-------------- |:-----:|:----------:| ----------:| ---------:| ----------:| ----------:     System.Text.RegularExpressions.Tests.Perf_Regex.Match                             | Duration       | msec  |     45     |    226.408 |    13.236 |    212.146 |    262.963     System.Text.RegularExpressions.Tests.Perf_Regex.Match                             | GC Allocations | bytes |     45     | 1.871E+008 | 46358.265 | 1.869E+008 | 1.872E+008     System.Text.RegularExpressions.Tests.RegexRedux.RegexReduxMini(options: Compiled) | Duration       | msec  |     28     |    366.970 |    17.217 |    337.323 |    407.299     System.Text.RegularExpressions.Tests.RegexRedux.RegexReduxMini(options: None)     | Duration       | msec  |     15     |    700.781 |    35.247 |    653.294 |    790.779    ## after  two runs:      System.Text.RegularExpressions.Performance.Tests.dll                              | Metric         | Unit  | Iterations |    Average |   STDEV.S |        Min |        Max    :--------------------------------------------------------------------------------- |:-------------- |:-----:|:----------:| ----------:| ---------:| ----------:| ----------:     System.Text.RegularExpressions.Tests.Perf_Regex.Match                             | Duration       | msec  |     46     |    220.359 |     7.715 |    213.496 |    247.767     System.Text.RegularExpressions.Tests.Perf_Regex.Match                             | GC Allocations | bytes |     46     | 1.871E+008 | 48166.588 | 1.870E+008 | 1.872E+008     System.Text.RegularExpressions.Tests.RegexRedux.RegexReduxMini(options: Compiled) | Duration       | msec  |     29     |    345.858 |    22.669 |    318.472 |    412.110     System.Text.RegularExpressions.Tests.RegexRedux.RegexReduxMini(options: None)     | Duration       | msec  |     15     |    667.597 |    33.483 |    624.545 |    745.706      System.Text.RegularExpressions.Performance.Tests.dll                              | Metric         | Unit  | Iterations |    Average |   STDEV.S |        Min |        Max    :--------------------------------------------------------------------------------- |:-------------- |:-----:|:----------:| ----------:| ---------:| ----------:| ----------:     System.Text.RegularExpressions.Tests.Perf_Regex.Match                             | Duration       | msec  |     45     |    226.161 |    15.460 |    212.438 |    300.492     System.Text.RegularExpressions.Tests.Perf_Regex.Match                             | GC Allocations | bytes |     45     | 1.871E+008 | 59941.718 | 1.869E+008 | 1.872E+008     System.Text.RegularExpressions.Tests.RegexRedux.RegexReduxMini(options: Compiled) | Duration       | msec  |     29     |    354.753 |    22.682 |    310.074 |    390.565     System.Text.RegularExpressions.Tests.RegexRedux.RegexReduxMini(options: None)     | Duration       | msec  |     15     |    666.738 |    30.583 |    621.243 |    709.226       The RegexReduxMini not compiled improves by 6% (a little better than 1 std dev).  Compiled improves by about 6% but this is within noise: I would only expect the division to help and then slightly. The regular Match case also remains the same within noise.    At this point I only made the change in the interpreted mode. I annotated the relevant compiled mode code which demonstrates it is not a simple transliteration into IL. That is future work. Meantime I believe the risk of this change diverging behavior is low because it is an extension of existing singleton behavior.  "
28733	area-System.Net	Regression: HTTPS defaults to older TLS version for Win7	"On Win7/2008R2 the new SocketsHttpHandler uses older defaults for TLS versions than the WinHttpHandler it's replacing. SocketsHttpHandler defaults to TLS 1.0 while WinHttpHandler supports TLS 1.2, 1.1, and 1.0. This is a regression for updating apps.    ASP.NET Core's Kestrel server defaults to TLS 1.1 and 1.2 so the new client can't connect to it using the default settings.    Example: Github.com as removed TLS 1.0 support  ```            Environment.SetEnvironmentVariable(""DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER"", ""true"");              var handler = new HttpClientHandler();              // handler.SslProtocols = SslProtocols.Tls12; // Workaround              var client = new HttpClient(handler);              var response = await client.GetAsync(""https://github.com/"");              Console.WriteLine(response);  ```    Workaround: Override the protocol versions on the client.    Found in ASP.NET Core's WebSocket Autobahn tests    @geoffkizer @karelz "
28730	area-Infrastructure	Adding Begin.ps1 and End.ps1 tasks definitions	
28729	area-Infrastructure	Add CI leg for non ENU Windows	Roslyn has successfully added such a leg based on es-ES    Please add a CI leg for corefx following this pattern: https://github.com/dotnet/roslyn/commit/b282a6486f1a7f09ceee7fcd9ed5d24d67cc4af7    It should be optional at first until we get it clean.    When in place this should avoid introducing many of the kinds of issues @AlexRadch has recently been working through    
28728	area-System.Threading	Switch threading perf tests to use constant instead of Benchmark.InnerIteration	Followup to https://github.com/dotnet/corefx/pull/28712
28727	area-Infrastructure	Investigate disabled tests which are already fixed	- [x] Find tests marked as ActiveIssue which are no longer active  - [x] <s>Re-enable issues</s> Send e-mails to owners/ping/reopen issue    cc: @karelz
28725	area-System.Net	SslStream IDN mapping host name on Windows	Fixes https://github.com/dotnet/corefx/issues/28585    Adding IDN mapping as we do on OpenSsl implementation: https://github.com/dotnet/corefx/blob/c533892f2e57940ec9e66616288bf340b75a9217/src/Common/src/Interop/Unix/System.Security.Cryptography.Native/Interop.OpenSsl.cs#L129    First run (commit) was testing if SNI tests will work correctly with the fallback in SniHelper.DecodeString removed (fallback to utf-8 string in case idn unmapping failed)
28724	area-System.Security	SslStream with CRL checking enabled throws CryptographicException on Linux upon upgrade of server certificates	"**Overview**  A Linux application speaking to a server using SslStream will no longer be able to connect if the server upgrades its certificates such that it contains a new CRL distribution point (e.g. a different URL). After this upgrade, SslStream will throw a CryptographicException (error code 44) from Internal.Cryptography.Pal.OpenSslX509ChainProcessor.MapVerifyErrorToChainStatus.  Error code 44 maps to X509_V_ERR_DIFFERENT_CRL_SCOPE (see https://github.com/openssl/openssl/blob/3bb0f989b53c59c6d4527a0b5077dbb7fabe14b7/include/openssl/x509_vfy.h#L144).    **Workaround**  Clearing the cached CRL at ~/.dotnet/corefx/cryptography/crls prior to the certificate upgrade will allow the application to connect without any downtime, assuming that the application doesn't reacquire another copy of the old CRL (e.g. due to a disconnect/reconnect). The filename will be the hashed issuer's name.  (see https://github.com/dotnet/corefx/blob/722d50c8957297009dbce771f3ea317cccf457be/src/System.Security.Cryptography.X509Certificates/src/Internal/Cryptography/Pal.Unix/CrlCache.cs#L139-L162)     **Hypothesis**  The exception is likely thrown because even though the new certificate specifies a new CRL distribution point, the issuer name has not changed, so the cache thinks it contains a valid CRL for the new certificate and does not download the new CRL even though the distribution point has changed.    However, when the interop library calls OpenSSL to verify the certificate stores, the error code 44 is generated and an exception is later thrown from Internal.Cryptography.Pal.OpenSslX509ChainProcessor.MapVerifyErrorToChainStatus.  I believe this error code is generated due to the mismatch between the cached CRL's distribution point and the distribution point specified in the new certificate.     **Possible fix**  Using the hash of the CRL distribution point string as the filename for the cached CRL should prevent this problem. However, I am uncertain if there are OpenSSL interop implications if a different filename is used for the cached CRL. There does seem to be precedent in OpenSSL for using the hash of the issuer name as the file name for cached copy of CRL (see https://www.openssl.org/docs/manmaster/man3/X509_LOOKUP_file.html)     **Reproduction**  Create a chain of certificates that mimics certificates issued by DigiCert SHA2 Secure Server CA. The final server certificates ""A"" and ""B"" should be issued for the same FQDN but with different distribution points (simulating an upgrade of the server certificate).     My apologies if these steps are already self-evident for those with more SSL experience, but these are the steps I used:     1. Create a self signed root CA such that ""X509v3 Key Usage: Digital Signature, Certificate Sign, CRL Sign"".  2. Generate a CRL for the root CA, taking care that the CRL does _not_ have a X509v3 Issuing Distribution Point (IDP).  3. Create an intermediate certificate authority with the same key usage as the root CA and with an X509v3 IDP pointing to the CRL generated in step 2.  4. Generate a CRL for the intermediate CA. This CRL should contain an X509v3 IDP.  5. Create the server certificate ""A"" signed by the intermediate CA. This certificate should have an X509v3 IDP that matches the IDP for the CRL generated in step 4.  6. Generate another CRL for the intermediate CA with a different filename from the one in (4). This CRL also should have an X509v3 IDP.  7. Create the server certificate ""B"", signed by the intermediate CA.  This certificate should have an X509v3 IDP that matches the IDP of the CRL generated in step 6.  8. Install the root CA by copying the certificate to its own directory under /usr/local/share/ca-certificates/, setting the permissions to 644, and running update-ca-certificates.   9. Host a test server using openssl s_server: ""openssl s_server -port 44330 -key keyA.pem -cert certA.pem -CAfile intermediatecert.pem"".  10. Create a test app that connects to the OpenSSL s_server using SslStream, calling AuthenticateAsClient with checkCertificateRevocation: true. After it connects successfully, bring down the test server and re-host it using B's certs and key. The test app should now throw the CryptographicException.     I’ve included my test app (targeting netcoreapp2.0) and stack trace. I’ve successfully reproduced this in a Debian Stretch Docker container (.NET Core SDK 2.1.101, .NET Core runtime: 2.0.5, OpenSSL 1.0.2k-fips) as well as in an Ubuntu 16.04.4 LTS instance (.NET Core SDK 2.1.300-preview1-008174, .NET Core runtime:  2.1.0-preview1-26216-03, OpenSSL 1.0.2g).    ```  Unhandled Exception: System.Security.Cryptography.CryptographicException: Error occurred during a cryptographic operation.     at Internal.Cryptography.Pal.OpenSslX509ChainProcessor.MapVerifyErrorToChainStatus(X509VerifyStatusCode code)     at Internal.Cryptography.Pal.OpenSslX509ChainProcessor.AddElementStatus(X509VerifyStatusCode errorCode, List`1 elementStatus, List`1 overallStatus)     at Internal.Cryptography.Pal.OpenSslX509ChainProcessor.AddElementStatus(List`1 errorCodes, List`1 elementStatus, List`1 overallStatus)     at Internal.Cryptography.Pal.OpenSslX509ChainProcessor.BuildChain(X509Certificate2 leaf, HashSet`1 candidates, HashSet`1 systemTrusted, OidCollection applicationPolicy, OidCollection certificatePolicy, X509RevocationMode revocationMode, X509RevocationFlag revocationFlag, DateTime verificationTime, TimeSpan& remainingDownloadTime)     at Internal.Cryptography.Pal.ChainPal.BuildChain(Boolean useMachineContext, ICertificatePal cert, X509Certificate2Collection extraStore, OidCollection applicationPolicy, OidCollection certificatePolicy, X509RevocationMode revocationMode, X509RevocationFlag revocationFlag, DateTime verificationTime, TimeSpan timeout)     at System.Security.Cryptography.X509Certificates.X509Chain.Build(X509Certificate2 certificate, Boolean throwOnException)     at System.Security.Cryptography.X509Certificates.X509Chain.Build(X509Certificate2 certificate)     at System.Net.Security.CertificateValidation.BuildChainAndVerifyProperties(X509Chain chain, X509Certificate2 remoteCertificate, Boolean checkCertName, String hostName)     at System.Net.Security.SecureChannel.VerifyRemoteCertificate(RemoteCertValidationCallback remoteCertValidationCallback, ProtocolToken& alertToken)     at System.Net.Security.SslState.CompleteHandshake(ProtocolToken& alertToken)     at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.PartialFrameCallback(AsyncProtocolRequest asyncRequest)  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Net.Security.SslState.InternalEndProcessAuthentication(LazyAsyncResult lazyResult)     at System.Net.Security.SslState.EndProcessAuthentication(IAsyncResult result)     at System.Net.Security.SslStream.EndAuthenticateAsClient(IAsyncResult asyncResult)     at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Ssl.SslTcpClient.RunClient(String machineName, String serverName) in /home/vincent/cached-crl-test-app/Ssl/SslTcpClient.cs:line 51     at cached_crl_test_app.Program.Main(String[] args) in /home/vincent/cached-crl-test-app/cached-crl-test-app/Program.cs:line 42   ```          ```c#  // Program.cs  using System;  namespace cached_crl_test_app {      class Program {          static void Main(string[] args) {              string serverCertificateName = ""tyche"";              string machineName = ""tyche"";              while (true) {                  Console.WriteLine(""Press enter to connect and send a message."");                  Console.ReadLine();                  Console.WriteLine(""Attempting to connect..."");                  SslTcpClient.RunClient(machineName, serverCertificateName);              }          }      }  }    // SslTcpClient.cs    using System;  using System.IO;  using System.Linq;  using System.Net.Security;  using System.Net.Sockets;  using System.Security.Authentication;  using System.Security.Cryptography.X509Certificates;  using System.Text;    namespace Ssl {          public class SslTcpClient {             // Purely for debugging purposes, not needed          public static bool ValidateServerCertificate(                  object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) {              var errors = chain.ChainStatus.Aggregate("""", (str, x) => str + "","" + x.Status);              Console.WriteLine($""SslPolicyError: {sslPolicyErrors} {errors}"");                 foreach (var item in chain.ChainElements) foreach (var elemStatus in item.ChainElementStatus)                 Console.WriteLine(item.Certificate.Subject + ""->"" + elemStatus.StatusInformation);              return true;          }             public static void RunClient(string machineName, string serverName)  {              var socket = new Socket(SocketType.Stream, ProtocolType.Tcp);              socket.Connect(serverName, 44330);              Console.WriteLine(""Client connected."");              using (var stream = new NetworkStream(socket)) {                                  var sslStream = new SslStream(innerStream: stream, leaveInnerStreamOpen: false,                      userCertificateValidationCallback: ValidateServerCertificate);                                    try {                      sslStream.AuthenticateAsClientAsync(serverName, new X509Certificate2Collection(),                          SslProtocols.Tls12, checkCertificateRevocation: true).GetAwaiter().GetResult();                  } catch (AuthenticationException e) {                      Console.WriteLine(""Exception: {0}"", e.Message);                      if (e.InnerException != null)                          Console.WriteLine(""Inner exception: {0}"", e.InnerException.Message);                                        Console.WriteLine(""Authentication failed - closing the connection."");                      return;                  }                                    var w = new StreamWriter(sslStream);                  w.WriteLine(""Hello from the client."");                  w.Flush();                                      var serverMessage = ReadLine(new StreamReader(sslStream));                  Console.WriteLine(""Server says: {0}"", serverMessage);                  Console.WriteLine(""Press enter to close the connection."");                  Console.ReadLine();                               }                 socket.Dispose();              Console.WriteLine(""Client closed."");          }             static string ReadLine(StreamReader reader) => reader.ReadLine();             static void SendMessage(SslStream sslStream, string s=""Hello from the client."") =>              sslStream.Write(Encoding.UTF8.GetBytes(s));            }  }  ```  [edit: clarity, formatting, syntax highlighting, and typos]        "
28722	area-System.Net	WinHttp should accept Uri.IdnHost for WinHttpConnect()	For WinHttpHandler, we directly pass `Host` for `WinHttpConnect` instead of `idnHost`. We need to change it to `Uri.IdnHost` instead. See: https://github.com/dotnet/corefx/issues/28557#issuecomment-377085162:  > Passing in Uri.Host will potentially pass in Unicode host names to the WinHTTP API. And that API can't accept that. Unfortunately, we have no tests around this.    https://github.com/dotnet/corefx/blob/9e8d443ff78c4f0a9a6bedf7f95961cf96ceff0a/src/System.Net.Http.WinHttpHandler/src/System/Net/Http/WinHttpHandler.cs#L786-L790  
28721	area-System.Drawing	Two System.Drawing Test failues	>      System.Drawing.Tests.BitmapTests.MakeTransparent_GrayscalePixelFormat_ThrowsArgumentException [FAIL]  >         Assert.Throws() Failure  >         Expected: typeof(System.Runtime.InteropServices.ExternalException)  >         Actual:   (No exception was thrown)  >         Stack Trace:  >            C:\Users\diosloco\Documents\Repos\corefx\src\System.Drawing.Common\tests\BitmapTests.cs(964,0): at System.Drawing.Tests.BitmapTests.MakeTransparent_GrayscalePixelFormat_ThrowsArgumentException()  >      System.Drawing.Imaging.Tests.MetafileTests.Ctor_RectangleFEmpty_Success(description: null) [FAIL]  >         System.Runtime.InteropServices.ExternalException : A generic error occurred in GDI+.  >         Stack Trace:  >            C:\Users\diosloco\Documents\Repos\corefx\src\System.Drawing.Common\src\System\Drawing\Imaging\Metafile.Windows.cs(325,0): at System.Drawing.Imaging.Metafile..ctor(String fileName, IntPtr referenceHdc, RectangleF frameRect, MetafileFrameUnit frameUnit, EmfType type, String description)  >            C:\Users\diosloco\Documents\Repos\corefx\src\System.Drawing.Common\tests\Imaging\MetafileTests.cs(571,0): at System.Drawing.Imaging.Tests.MetafileTests.Ctor_RectangleFEmpty_Success(String description)    I'm at commit 54d131f4174491bc2a7f5d6e4b0b8b725d299a8f.
28720	area-System.Text	Fix allocated Encoding memory initialization	Fixes #28438  We allocate native memory using GlobalHAlloc which usually doesn’t zero out the allocated memory and that causes a problem when using this memory. We fixed a similar issue before in SBCS but looks we missed the DBCS one.
28719	area-System.Net	System.Net.Http.Functional.Tests.PlatformHandler_HttpRetryProtocolTests/GetAsync_RetryOnConnectionClosed_Success CI failure	OSX.1013.Amd64.Open-x64-Debug    ```  System.Exception : Unexpected EOF trying to read request header     at System.Net.Test.Common.LoopbackServer.Connection.ReadRequestHeaderAsync() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 378     at System.Net.Http.Functional.Tests.HttpRetryProtocolTests.<>c.<<GetAsync_RetryOnConnectionClosed_Success>b__3_2>d.MoveNext() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Http/tests/FunctionalTests/HttpRetryProtocolTests.cs:line 56  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.AcceptConnectionAsync(Func`2 funcAsync) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 117     at System.Net.Http.Functional.Tests.HttpRetryProtocolTests.<>c.<<GetAsync_RetryOnConnectionClosed_Success>b__3_1>d.MoveNext() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Http/tests/FunctionalTests/HttpRetryProtocolTests.cs:line 50  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 84  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 67     at System.Net.Http.Functional.Tests.HttpRetryProtocolTests.GetAsync_RetryOnConnectionClosed_Success() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Http/tests/FunctionalTests/HttpRetryProtocolTests.cs:line 31  --- End of stack trace from previous location where exception was thrown ---  ```
28717	area-System.Security	Fix the message for Cryptography_InvalidPadding	"Also audited all usages of this string to ensure they had the ""the padding is wrong""  semantic instead of the ""I don't know how to do this padding"" semantic.  Only  one usage was seemingly wrong, and while it's in a Debug.Fail block it got fixed  anyways.    Fixes #28682.    .NET Core `Cryptography_InvalidPadding` now matches .NET Framework `Cryptography_PKCS7_InvalidPadding` (which was used for padding other than PKCS7).  .NET Framework had no `Cryptography_InvalidPadding`."
28716	area-System.Numerics	Make decimal API more complete (number of decimal digits, equality, negative zero)	"@GSPP commented on [Mon Apr 02 2018](https://github.com/dotnet/coreclr/issues/17378)  1. It is currently not possible to query the number of decimal digits in a decimal value. Note, that decimal can store trailing zeroes. 1m != 1.0m != 1.00m. There are methods to find out but they are nasty (https://stackoverflow.com/questions/13477689/find-number-of-decimal-places-in-decimal-value-regardless-of-culture). A fundamental type such as decimal should make this easier. `GetBits` causes an expensive allocation.  2. All Framework provided decimal equality comparisons treat trailing zeros as irrelevant. All of the following are true: `1.0m == 1.00m`, `1.0m.Equals(1.00m)`, `1.0m.GetHashCode() == 1.00m.GetHashCode()`. This is correct but there also should be a way to compare while being sensitive to trailing zeroes. There need to be equality and hash code APIs observing trailing zeroes.  3. Be able to reflect over negative zero. There are multiple representations for zero in decimal (https://stackoverflow.com/a/3139783). `decimal.GetBits(0.0m) != decimal.GetBits(-0.0m)` and `-0.0m == 0.0m`. There should be an `IsNegative` property. Note, that `(-0.0m).ToString() == ""0.0""`. This means that the sign cannot even be found out from the string representation.  4. Maybe there should be more helper APIs around trailing zeroes. For example, an API to set the number of decimal places. This API would add or remove trailing zeroes. I believe the `Round` methods only remove but do not add zeroes.    These API requests are motivated by my work on a financial application. Different 3rd party data sources needed to be interpreted and combined in awkward ways.    Dealing with these issue should not be that hard. The internet is full of people trying to solve these various decimal issues. There should be obvious and simple framework methods. Using code from the web (Stack Overflow) to address any of this is very risky because the code might be faulty.    ---  @RussKeldorph commented on [Mon Apr 02 2018](https://github.com/dotnet/coreclr/issues/17378#issuecomment-377962550)  @danmosemsft   ---  @danmosemsft commented on [Mon Apr 02 2018](https://github.com/dotnet/coreclr/issues/17378#issuecomment-377974800)  @tannergooding any thoughts?  ---  @danmosemsft commented on [Mon Apr 02 2018](https://github.com/dotnet/coreclr/issues/17378#issuecomment-377974886)  Since this includes API requests. moving to corefx.  "
28715	area-Infrastructure	Fix cmake toolchain compile flags loop	- fix https://github.com/dotnet/corert/issues/5093  - cmake toolchain refactoring    [EDIT] Fix formatting - link the hyperlink by @karelz
28714	area-System.Diagnostics	TraceSource indent bug	"TraceSource is affected by the indent set before the calling output methods for the first time. After that changing the indent doesn't affect the TraceSource output.  ```  var mySource = new TraceSource(""Test"", SourceLevels.All);  Trace.IndentLevel = 2;  mySource.TraceEvent(TraceEventType.Error, 1, ""TraceSource1"");  Trace.WriteLine(""Trace1"");  Trace.IndentLevel = 1;  mySource.TraceEvent(TraceEventType.Error, 2, ""TraceSource2"");  Trace.WriteLine(""Trace2"");  mySource.TraceEvent(TraceEventType.Error, 3, ""TraceSource3"");  ```    This is the output:    >         Test Error: 1 : TraceSource1  >         Trace1  >         Test Error: 2 : TraceSource2  >     Trace2  >         Test Error: 3 : TraceSource3    The only way to solve this is to creat a new instance of the TraceSource class before changing the indent.. This code will work as expected:    ```  var mySource = new TraceSource(""Test"", SourceLevels.All);  Trace.IndentLevel = 2;  mySource.TraceEvent(TraceEventType.Error, 1, ""TraceSource1"");  Trace.WriteLine(""Trace1"");  mySource = new TraceSource(""Test"", SourceLevels.All);  Trace.IndentLevel = 1;  mySource.TraceEvent(TraceEventType.Error, 2, ""TraceSource2"");  Trace.WriteLine(""Trace2"");  mySource.TraceEvent(TraceEventType.Error, 3, ""TraceSource3"");    ```  This is the output:  >        Test Error: 1 : TraceSource1  >         Trace1  >     Test Error: 2 : TraceSource2  >     Trace2  >     Test Error: 3 : TraceSource3    Note:   I reported another 2 bugs related to System.Diagnostics here:  https://github.com/dotnet/corefx/issues/28697  "
28713	area-System.IO	Directory.Exists returns false with drive's device path name	"Hi,    Code like `Directory.Exists(""\\\\?\\C:\\"")` always returns false, even the drive does exist. `Directory.Exists(""\\\\?\\C:\\Folder\\"")` can get directory's existence correct.  This behavior is different with the one in .Net Framework. Could anyone help to take a look?    [EDIT] Add proper code formatting by @karelz"
28712	area-System.Threading	Increase iteration counts in threading perf tests	Relevant to https://github.com/dotnet/coreclr/issues/17345    ```  Before:       System.Threading.Performance.Tests.dll                       | Metric   | Unit | Iterations | Average |    STDEV.S |   Min |   Max    :------------------------------------------------------------ |:-------- |:----:|:----------:| -------:| ----------:| -----:| -----:     System.Threading.Tests.Perf_EventWaitHandle.Set_Reset        | Duration | msec |    1000    |   0.006 |      0.003 | 0.005 | 0.053     System.Threading.Tests.Perf_Interlocked.Add_int              | Duration | msec |    100     |   0.007 | 1.856E-004 | 0.007 | 0.008     System.Threading.Tests.Perf_Interlocked.Add_long             | Duration | msec |    100     |   0.007 |      0.003 | 0.006 | 0.026     System.Threading.Tests.Perf_Interlocked.CompareExchange_int  | Duration | msec |    100     |   0.004 |      0.003 | 0.004 | 0.021     System.Threading.Tests.Perf_Interlocked.CompareExchange_long | Duration | msec |    100     |   0.004 |      0.002 | 0.004 | 0.021     System.Threading.Tests.Perf_Interlocked.Decrement_int        | Duration | msec |    100     |   0.007 | 1.495E-004 | 0.007 | 0.007     System.Threading.Tests.Perf_Interlocked.Decrement_long       | Duration | msec |    100     |   0.008 |      0.005 | 0.006 | 0.049     System.Threading.Tests.Perf_Interlocked.Exchange_int         | Duration | msec |    100     |   0.007 |      0.002 | 0.007 | 0.023     System.Threading.Tests.Perf_Interlocked.Exchange_long        | Duration | msec |    100     |   0.007 | 2.119E-004 | 0.007 | 0.009     System.Threading.Tests.Perf_Interlocked.Increment_int        | Duration | msec |    100     |   0.007 | 1.134E-004 | 0.007 | 0.007     System.Threading.Tests.Perf_Interlocked.Increment_long       | Duration | msec |    100     |   0.007 |      0.002 | 0.007 | 0.025     System.Threading.Tests.Perf_Lock.ReaderWriterLockSlimPerf    | Duration | msec |    100     |   0.003 | 1.681E-004 | 0.003 | 0.004     System.Threading.Tests.Perf_Monitor.EnterExit                | Duration | msec |    100     |   0.005 |      0.002 | 0.005 | 0.021     System.Threading.Tests.Perf_Monitor.TryEnterExit             | Duration | msec |    100     |   0.002 | 2.455E-004 | 0.002 | 0.004     System.Threading.Tests.Perf_SpinLock.EnterExit               | Duration | msec |    100     |   0.010 |      0.006 | 0.008 | 0.048     System.Threading.Tests.Perf_SpinLock.TryEnterExit            | Duration | msec |    100     |   0.008 |      0.003 | 0.008 | 0.026     System.Threading.Tests.Perf_Volatile.Read_double             | Duration | msec |    100     |   0.002 |      0.002 | 0.001 | 0.018     System.Threading.Tests.Perf_Volatile.Write_double            | Duration | msec |    100     |   0.002 | 2.533E-004 | 0.002 | 0.004    After:       System.Threading.Performance.Tests.dll                       | Metric   | Unit | Iterations | Average | STDEV.S |    Min |    Max    :------------------------------------------------------------ |:-------- |:----:|:----------:| -------:| -------:| ------:| ------:     System.Threading.Tests.Perf_EventWaitHandle.Set_Reset        | Duration | msec |    100     |  61.277 |   0.771 | 60.692 | 66.405     System.Threading.Tests.Perf_Interlocked.Add_int              | Duration | msec |    100     |  63.767 |   1.554 | 63.182 | 77.342     System.Threading.Tests.Perf_Interlocked.Add_long             | Duration | msec |    100     |  63.669 |   1.059 | 63.160 | 70.719     System.Threading.Tests.Perf_Interlocked.CompareExchange_int  | Duration | msec |    100     |  63.805 |   1.669 | 63.180 | 74.795     System.Threading.Tests.Perf_Interlocked.CompareExchange_long | Duration | msec |    100     |  63.465 |   0.169 | 63.182 | 63.934     System.Threading.Tests.Perf_Interlocked.Decrement_int        | Duration | msec |    100     |  66.444 |   3.587 | 63.206 | 77.222     System.Threading.Tests.Perf_Interlocked.Decrement_long       | Duration | msec |    100     |  63.867 |   2.026 | 63.178 | 77.969     System.Threading.Tests.Perf_Interlocked.Exchange_int         | Duration | msec |    100     |  68.325 |   3.153 | 59.724 | 79.176     System.Threading.Tests.Perf_Interlocked.Exchange_long        | Duration | msec |    100     |  63.486 |   0.439 | 63.100 | 66.889     System.Threading.Tests.Perf_Interlocked.Increment_int        | Duration | msec |    100     |  63.503 |   0.334 | 63.175 | 64.845     System.Threading.Tests.Perf_Interlocked.Increment_long       | Duration | msec |    100     |  63.544 |   0.400 | 63.204 | 65.800     System.Threading.Tests.Perf_Lock.ReaderWriterLockSlimPerf    | Duration | msec |    100     |  55.961 |   0.338 | 55.576 | 57.365     System.Threading.Tests.Perf_Monitor.EnterExit                | Duration | msec |    100     |  67.236 |   0.462 | 66.876 | 71.239     System.Threading.Tests.Perf_Monitor.TryEnterExit             | Duration | msec |    100     |  67.323 |   0.441 | 66.852 | 69.791     System.Threading.Tests.Perf_SpinLock.EnterExit               | Duration | msec |    100     |  72.317 |   2.919 | 71.308 | 91.634     System.Threading.Tests.Perf_SpinLock.TryEnterExit            | Duration | msec |    100     |  71.845 |   0.978 | 71.207 | 78.743     System.Threading.Tests.Perf_Volatile.Read_double             | Duration | msec |    100     |  37.493 |   0.524 | 37.116 | 40.922     System.Threading.Tests.Perf_Volatile.Write_double            | Duration | msec |    100     |  50.883 |   0.284 | 50.519 | 52.009  ```
28711	area-Infrastructure	Getting warning with some packages when I build	I updated my .net library to 4.7.1. It successfully builds but I get some warnings:    ![image](https://user-images.githubusercontent.com/3295086/38188333-3310b3fc-3664-11e8-918a-4dca175bf574.png)    I removed the packages and reinstalled them, rebuild, but still the same warnings.    
28709	area-System.Net	Test failure: System.Net.Security.Tests.ApmSslStreamSystemDefaultTest / ClientAndServer_OneUsesDefault_OtherUsesLowerProtocol_Fails	Tests: System.Net.Security.Tests.ApmSslStreamSystemDefaultTest.ClientAndServer_OneUsesDefault_OtherUsesLowerProtocol_Fails  System.Net.Security.Tests.AsyncSslStreamSystemDefaultTest.ClientAndServer_OneUsesDefault_OtherUsesLowerProtocol_Fails  System.Net.Security.Tests.SyncSslStreamSystemDefaultTest.ClientAndServer_OneUsesDefault_OtherUsesLowerProtocol_Fails  had failed with Assert.Throws() Failure\nExpected: typeof(System.Exception)\nActual: (No exception was thrown)    Details: https://ci.dot.net/job/dotnet_corefx/job/master/job/centos7.1_debug/6051/testReport/    ~~~  MESSAGE:  Assert.Throws() Failure\nExpected: typeof(System.Exception)\nActual: (No exception was thrown)  +++++++++++++++++++  STACK TRACE:  at System.Net.Security.Tests.SslStreamSystemDefaultTest.ClientAndServer_OneUsesDefault_OtherUsesLowerProtocol_Fails(Nullable`1 clientProtocols, Nullable`1 serverProtocols) in /mnt/resource/j/workspace/dotnet_corefx/master/centos7.1_debug/src/System.Net.Security/tests/FunctionalTests/SslStreamSystemDefaultsTest.cs:line 95 --- End of stack trace from previous location where exception was thrown ---  ~~~  
28708	area-System.Net	SocketsHttpHandler: Proxied IP address (IPv4 & IPv6) requests missing `Proxy-Connection: Keep-Alive` header	"Example:    WinHttpHandler & Framework:    `In value: List<String> [""GET http://321.123.456.789/ HTTP/1.1"", ""Proxy-Connection: Keep-Alive"", ""Host: 321.123.456.789""]`  `In value: List<String> [""GET http://[::1234]/ HTTP/1.1"", ""Host: [::1234]"", ""Proxy-Connection: Keep-Alive""]`    SocketsHttpHandler:    `In value: List<String> [""GET http://321.123.456.789/ HTTP/1.1"", ""Host: 321.123.456.789""]`  `In value: List<String> [""GET http://::1234/ HTTP/1.1"", ""Host: [::1234]""]`    `Proxy-Connection: Keep-Alive` header is missing in both cases.  "
28707	area-System.Net	Investigate perf improvements to Uri for SocketsHttpHandler usage	For simple requests, SocketsHttpHandler ends up spending a fair amount of CPU retrieving info from Uri (e.g. Uri.IdnHost and similar).  This also causes a fair amount of allocation in some cases.    Ideally we could reduce both CPU and allocation by using `ReadOnlySpan<char>` to retrieve the info we need.  In common cases where no escaping/encoding is necessary, this should help significantly.
28704	area-System.Net	SocketsHttpHandler: if server sends invalid NT auth challenge, don't continue processing	Fixes #28648     @Tratcher @stephentoub @davidsh @dotnet/ncl   
28703	area-System.Net	CurlHandler: catastrophic failure with GetAsync_SecureAndNonSecureIPBasedUri_CorrectlyFormatted test 	The test consistently cause catastrophic failure on Centos, Fedora, RedHat, and Ubuntu 1804, while passing on other distros.     It could be different CurlHandler version causing the issue. (Since Windows run is green every time).
28702	area-System.Memory	Created tests for default and empty ReadOnlySequence	I created tests for default and empty ReadOnlySequence. Also I fixed issues with new tests.
28700	area-System.Data	DataTable serialisation is broken between 2.1 and previous versions or .NET framework	The fix #27286 broke DataTable serialization between the previous versions and 2.1 version netcore. It fails with the following error when deserializing data stored using the previous version on netcore 2.1.    ```   System.Runtime.Serialization.SerializationException : Member 'DataTable.DataColumn_0.DataType_AssemblyQualifiedName' was not found.  ```
28697	area-System.Diagnostics	Bug: DelimitedListTraceListener Class strange output	"I think there is something wrong with the DelimitedListTraceListener class. I used this code:  ```  var Listener = new DelimitedListTraceListener(""test.txt"");  Listener.Delimiter = "","";  Trace.Listeners.Add(Listener);  Trace.Write(""x"");  Trace.WriteLine(""y"");  Trace.TraceError(""z"");  Trace.TraceInformation(""w"");  Trace.Flush();    ```  And this is what I found written in the file:  > xy  ""WindowsFormsApp8.exe"",Error,0,""z"",,,,,,,  ""WindowsFormsApp8.exe"",Information,0,""w"",,,,,,,    Is this right? And if it is, what does it mean? Why doesn't the write method add the delimiter, and what are those too many delimiters added by the TraceError and TraceInformation methods?    By the way:  I suggest to add Write(string[]) and Write(object[]) overloads to write the array elements separated by the delimiter.  "
28696	area-System.Net	Test failure: System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandlerTest / ProxyAuth_Digest_Succeeds	https://github.com/dotnet/corefx/pull/28643#issuecomment-377766657  ```  Windows.10.Amd64.Open-x86-Release    ProxyAuth_Digest_Succeeds  System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandlerTest    Unhandled Exception of Type System.TimeoutException  Message :  System.TimeoutException : WhenAllOrAnyFailed timed out after 60000  Stack Trace :     at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks, Int32 millisecondsTimeout) in D:\j\workspace\windows-TGrou---f8ac6754\src\Common\tests\System\Threading\Tasks\TaskTimeoutExtensions.cs:line 53     at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<>c__DisplayClass114_0.<<ProxyAuth_Digest_Succeeds>b__0>d.MoveNext() in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.cs:line 3014  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in D:\j\workspace\windows-TGrou---f8ac6754\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 67     at System.Net.Http.Functional.Tests.HttpClientHandlerTest.ProxyAuth_Digest_Succeeds() in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.cs:line 3000  --- End of stack trace from previous location where exception was thrown ---  ```
28695	area-System.Net	OSX: System.Net.Internals.SocketExceptionFactory+ExtendedSocketException	"https://github.com/dotnet/corefx/pull/28643#issuecomment-377766657  ```  OSX.1012.Amd64.Open-x64-Debug    System.Net.Tests.HttpListenerRequestTests  ContentLength_GetProperty_ReturnsExpected(method: \""PUT\"", contentLengthString: \""Content-Length: 1\"", expected: 1, hasEntityBody: True)    Unhandled Exception of Type System.Net.Internals.SocketExceptionFactory+ExtendedSocketException  Message :  System.Net.Internals.SocketExceptionFactory+ExtendedSocketException : Connection refused 127.0.0.1:1330  Stack Trace :     at System.Net.Sockets.Socket.DoConnect(EndPoint endPointSnapshot, SocketAddress socketAddress) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs:line 4421     at System.Net.Sockets.Socket.Connect(EndPoint remoteEP) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs:line 832     at System.Net.Sockets.Socket.Connect(IPAddress[] addresses, Int32 port) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs:line 947  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Sockets.Socket.Connect(IPAddress[] addresses, Int32 port) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs:line 958     at System.Net.Sockets.Socket.Connect(String host, Int32 port) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs:line 902     at System.Net.Tests.HttpListenerFactory.GetConnectedSocket() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.HttpListener/tests/HttpListenerFactory.cs:line 155     at System.Net.Tests.HttpListenerRequestTests..ctor() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.HttpListener/tests/HttpListenerRequestTests.cs:line 23     at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean skipCheckThis, Boolean fillCache, Boolean wrapExceptions) in /Users/buildagent/agent/_work/482/s/src/mscorlib/src/System/RtType.cs:line 4833  ```"
28694	area-System.Console	Console ReadKey echo escapes	"@devel0 commented on [Sat Mar 31 2018](https://github.com/dotnet/core/issues/1398)  Using Console.ReadKey(true) should not echo control keys but in linux terminal I got `^[OC` echos.    ## version    - **dotnet version** : 2.1.101  - **os** : ubuntu 17.10    ## repro    ```  Console.ReadKey(true);  ```    - press ""right arrow"" key    ### expected    - no echoes    ### current behavior    - echoed `^[OC` to the console    "
28692	area-System.IO	Fix intermittent crashes on FileSystemEnumeration on Unix	The code uses a leased byte[] to call readdir_r and the native struct (dirent) is stored in this array. The DirectoryEntry struct then points to the name of the file in the middle of the array. If the array is moved by GC before the struct is used it starts to point to a bogus name.     Fixes #27740   Fixes #27504   Fixes #27038  
28686	area-System.Linq	Possible bug with S.L.Expression: cannot generate assign expression for ref returning properties	Relatively recently, ref returning properties were added to c#. I use them from time to time and i have serialization library that relied on ILGenerator but converted to S.L.Expression. There is problem: ref return properties have `CanWrite` set to false preventing easy generation of assign expressions!    I use 4.7.1 Desktop framework for now with future plans to move to Core.    Is this by design or overlooked? Is there some hack around this issue?
28683	area-System.Security	ASN.1 Deserialize fails with SequenceOf strings	"Let me preface this with the statement that I fully understand this is an internal-only API (for now at least). Nevertheless, this is a fairly important test case.    Suppose an ASN.1 of    ```  kdc-req ::= SEQUENCE {  ...   sname [3] PrincipalName OPTIONAL,  ...  }    PrincipalName ::= SEQUENCE {   name-type [0] Int32,   name-string [1] SEQUENCE OF KerberosString  }    KerberosString  ::= GeneralString (IA5String)  ```    There are two issues here.    1. GeneralString is not actually supported. You cannot futz your way through by decorating the struct field to think it's an IA5String. I had to add a new attribute and modified the deserializer to treat it the same as IA5String.  2. SequenceOf GeneralString/IA5String cannot parse correctly *when there are multiple values in the sequence*.     It decodes the array as a struct and throws because there's extra data. There's no way it can move on to the next element in the sequence. Conversely, you can't coerce the deserializer to operate against string[] because it can't be a SequenceOf and GeneralizedString/IA5String at the same time.        ### Sample    This will throw when it finishes reading the first string of `sname`. It'll complete the pass over the struct fields, but there's more data in the sequence.    I think it would be helpful if you could decorate a `SequenceOf` as a specialized type, e.g. `GeneralizedString`.    ```c#  var asReq = ""3081d3a103020105a20302010aa31530133011a10402020080a20904073005a0030101ffa481af30""   + ""81aca00703050040810010a1153013a003020101a10c300a1b087374737966756873a2091b07524""   + ""5444d4f4e44a31c301aa003020102a11330111b066b72627467741b075245444d4f4e44a511180f3""   + ""2303337303931333032343830355aa611180f32303337303931333032343830355aa70502036875""   + ""0da81530130201120201110201170201180202ff79020103a91d301b3019a003020114a11204104""   + ""d494e494e542d364a49454842472020"";    var req = AsnSerializer.Deserialize<KdcReq>(StringToByteArray(asReq), AsnEncodingRules.DER);      [StructLayout(LayoutKind.Sequential)]  public struct KdcReq  {      /*      AS-REQ          ::= [APPLICATION 10] KDC-REQ        TGS-REQ         ::= [APPLICATION 12] KDC-REQ                KDC-REQ         ::= SEQUENCE {          -- NOTE: first tag is [1], not [0]          pvno            [1] INTEGER (5) ,          msg-type        [2] INTEGER (10 -- AS -- | 12 -- TGS --),          padata          [3] SEQUENCE OF PA-DATA OPTIONAL                              -- NOTE: not empty --,          req-body        [4] KDC-REQ-BODY      }*/        [ExpectedTag(1, ExplicitTag = true)]      public int pvno;        [ExpectedTag(2, ExplicitTag = true)]      public int msgType;        [ExpectedTag(3, ExplicitTag = true)]      public PaData[] PaData;        [ExpectedTag(4, ExplicitTag = true)]      public KdcReqBody reqBody;  }    [StructLayout(LayoutKind.Sequential)]  public struct PaData  {      // padata-type[1] Int32,      // padata-value[2] OCTET STRING -- might be encoded AP-REQ        [ExpectedTag(1, ExplicitTag = true)]      public int paDataType;        [ExpectedTag(2, ExplicitTag = true), OctetString]      public ReadOnlyMemory<byte> paDataValue;  }    [StructLayout(LayoutKind.Sequential)]  public struct KdcReqBody  {      /*      kdc-options             [0] KDCOptions,      cname                   [1] PrincipalName OPTIONAL                                  -- Used only in AS-REQ --,      realm                   [2] Realm                                  -- Server's realm                                  -- Also client's in AS-REQ --,      sname                   [3] PrincipalName OPTIONAL,      from                    [4] KerberosTime OPTIONAL,      till                    [5] KerberosTime,      rtime                   [6] KerberosTime OPTIONAL,      nonce                   [7] UInt32,      etype                   [8] SEQUENCE OF Int32 -- EncryptionType                                  -- in preference order --,      addresses               [9] HostAddresses OPTIONAL,      enc-authorization-data  [10] EncryptedData OPTIONAL                                  -- AuthorizationData --,      additional-tickets      [11] SEQUENCE OF Ticket OPTIONAL                                      -- NOTE: not empty               */      [ExpectedTag(0, ExplicitTag = true), BitString]      public ReadOnlyMemory<byte> kdcOptions;        [ExpectedTag(1, ExplicitTag = true), OptionalValue]      public PrincipalName? cname;        [ExpectedTag(2)]      public KerberosString realm;        [ExpectedTag(3, ExplicitTag = true), OptionalValue]      public PrincipalName? sname;        [ExpectedTag(4, ExplicitTag = true), GeneralizedTime, OptionalValue]      public DateTimeOffset? from;        [ExpectedTag(5, ExplicitTag = true), GeneralizedTime]      public DateTimeOffset till;        [ExpectedTag(6, ExplicitTag = true), GeneralizedTime, OptionalValue]      public DateTimeOffset? rtime;        [ExpectedTag(7, ExplicitTag = true)]      public uint nonce;        [ExpectedTag(8, ExplicitTag = true)]      public int[] etype;        [ExpectedTag(9, ExplicitTag = true)]      public HostAddress[] addresses;        [ExpectedTag(10, ExplicitTag = true), OptionalValue]      public EncryptedData? encAuthorizationData;        [ExpectedTag(11, ExplicitTag = true), OptionalValue]      public Ticket[] additionalTickets;  }    [StructLayout(LayoutKind.Sequential)]  public struct PrincipalName  {      // name-type[0] Int32,      // name-string[1] SEQUENCE OF KerberosString        [ExpectedTag(0, ExplicitTag = true)]      public int nameType;        [ExpectedTag(1)]      public KerberosString[] nameString;        // this does not work either      // [ExpectedTag(1), GeneralizedString]      // public string[] nameString;  }    [StructLayout(LayoutKind.Sequential)]  public struct KerberosString  {      [GeneralizedString]      public string name;  }    [StructLayout(LayoutKind.Sequential)]  public struct HostAddress  {      // addr-type[0] Int32,      // address[1] OCTET STRING        [ExpectedTag(0, ExplicitTag = true)]      public int addrType;        [ExpectedTag(1, ExplicitTag = true), OctetString]      public ReadOnlyMemory<byte> address;  }    [StructLayout(LayoutKind.Sequential)]  public struct EncryptedData  {      // EncryptedData::= SEQUENCE {      //     etype[0] Int32 -- EncryptionType --,      //     kvno[1] UInt32 OPTIONAL,      //     cipher[2] OCTET STRING -- ciphertext      // }        [ExpectedTag(0, ExplicitTag = true)]      public int etype;        [ExpectedTag(1, ExplicitTag = true), OptionalValue]      public int kvno;        [ExpectedTag(2, ExplicitTag = true), OctetString]      public ReadOnlyMemory<byte> cipher;  }    [StructLayout(LayoutKind.Sequential)]  public struct AuthorizationData  {      [ExpectedTag(0, ExplicitTag = true)]      public int adType;        [ExpectedTag(1, ExplicitTag = true), OctetString]      public ReadOnlyMemory<byte> adData;  }    [StructLayout(LayoutKind.Sequential)]  public struct Ticket { }  ```"
28682	area-System.Security	Confusing message when block padding did not conform to the specified mode	"_From @coderfox on March 31, 2018 9:28_  With the following code:    ```csharp  using System;  using System.IO;  using System.Text;    namespace Bang.CustomClient  {      public static class ApiCipher      {          public static byte[] key = Encoding.ASCII.GetBytes(""1234123412341234"");          public static byte[] iv = Encoding.ASCII.GetBytes(""1234123412341234"");          public static byte[] decrypt(byte[] ciphertext)          {              using (var aes = Aes.Create())              {                  Debug.Assert(aes != null, nameof(aes) + "" != null"");                  aes.Key = key;                  aes.IV = iv;                  aes.Padding = PaddingMode.None;                    using (var decryptor = aes.CreateDecryptor(aes.Key, aes.IV))                  {                      var result = decryptor.TransformFinalBlock(ciphertext, 0, ciphertext.Length);                      return result;                  }              }          }      }      class Program      {          static void Main(string[] args)          {              var bin = File.ReadAllBytes(""http"");              var dec = ApiCipher.decrypt(bin);              Console.Write(Encoding.ASCII.GetString(dec));          }      }  }    ```    If I comment `aes.Padding = PaddingMode.None;` (i.e. use PKCS7 padding), the program will throw:    ```  Unhandled Exception: System.Security.Cryptography.CryptographicException: Specified padding mode is not valid for this algorithm.     at Internal.Cryptography.UniversalCryptoDecryptor.DepadBlock(Byte[] block, Int32 offset, Int32 count)     at Internal.Cryptography.UniversalCryptoDecryptor.UncheckedTransformFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount)     at Internal.Cryptography.UniversalCryptoTransform.TransformFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount)     at Bang.CustomClient.ApiCipher.decrypt(Byte[] ciphertext) in /Users/coderfox/Dev/Projects/BanGDreamHack/Bang.CustomClient/ApiCipher.cs:line 36     at Bang.CustomClient.Program.Main(String[] args) in /Users/coderfox/Dev/Projects/BanGDreamHack/Bang.CustomClient/Program.cs:line 12  ```    But if I uncomment the line, the program works.    Besides, I have validated the input file with python, and it successfully decrypts.    I am using dotnet-sdk `2.1.103` on macOS `10.13.1 (17B48)`.    File `http` in `base64` is:    ```  aeqsmc3eMswgJkz34BACmqZSo96E61H43Q5oK9NqXzM=  ```  _Copied from original issue: dotnet/coreclr#17373_"
28680	area-System.Net	[2.1-preview1-final] - Socket related exceptions in azure with COMPlus_UseManagedHttpClientHandler=true 	"cc @karelz  @stephentoub     I upgraded exceptionless to 2.1 preview 1 (tried nightlies but couldn't get it to work and filed bugs in vs report a problem) via https://github.com/exceptionless/Exceptionless/tree/feature/aspnet21 and deployed to azure using the azure site extensions for dotnet core...    I noticed that I'm getting the following exceptions even while the site is idle in test so load doesn't seem to be a factor of frequency as far as I can tell    All of these were caught via the  UnobservedTaskException handlers...    ```json  {    ""Application Name"": ""Exceptionless.Web"",    ""Runtime Framework"": "".NETCoreApp,Version=v2.1"",    ""Application Base Path"": ""D:\\home\\site\\wwwroot\\bin\\"",    ""Framework Description"": "".NET Core 4.6.26216.04"",    ""Process Architecture"": ""X86""  }  ```    # 1    ![image](https://user-images.githubusercontent.com/1020579/38163225-13f13988-34b6-11e8-8ec2-50892f39cebb.png)    ```  System.IO.IOException: Unable to transfer data on the transport connection: The I/O operation has been aborted because of either a thread exit or an application request.   ---> System.Net.Sockets.SocketException: The I/O operation has been aborted because of either a thread exit or an application request  ```    # 2   ![image](https://user-images.githubusercontent.com/1020579/38163250-8f55d098-34b6-11e8-9dd1-4811de9bbca5.png)    ```  System.IO.IOException: Unable to transfer data on the transport connection: An existing connection was forcibly closed by the remote host.   ---> System.Net.Sockets.SocketException: An existing connection was forcibly closed by the remote host  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at offset 12  at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task task) at offset 39  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task task) at offset 40  at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()  at System.Net.Security.SslStreamInternal.<<FillBufferAsync>g__InternalFillBufferAsync|36_0>d`1.MoveNext() at offset 114  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at offset 12  at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task task) at offset 39  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task task) at offset 40  at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult() at offset 30  at System.Net.Security.SslStreamInternal.<ReadAsyncInternal>d__32`1.MoveNext() at offset 903  ```"
28679	area-System.Xml	Marking tests affected by 27740 in XmlSchemaValidatorApi as active issue	The root cause of #27740 does not seem to be in the tests themselves but in my Ubuntu VM the 2 tests hitting it are being disabled in this PR. Later I will provide the crashing stacks but I want to test the other exit code 134 before doing that.
28675	area-System.Security	[2.0] React to X509Chain changes in macOS 10.13.4	"10.13.4 changed some of the detail codes for building the X509ChainStatusFlag values.    ""ValidLeaf"" (etc) => ""TemporalValidity""  ""WeakLeaf"" (etc) => ""WeakKeySize""  new ""MissingIntermediate"" when the chain didn't complete instead of ""AnchorTrusted"" lower down.    Port #28673 to release/2.0.0"
28674	area-System.Memory	Add tests for calling Span APIs via reflection to verify graceful failures.	Partially resolves https://github.com/dotnet/coreclr/issues/17296    cc @jkotas, @AtsushiKan, @KrzysztofCwalina
28673	area-System.Security	React to X509Chain changes in macOS 10.13.4	"10.13.4 changed some of the detail codes for building the X509ChainStatusFlag values.    ""ValidLeaf"" (etc) => ""TemporalValidity""  ""WeakLeaf"" (etc) => ""WeakKeySize""  new ""MissingIntermediate"" when the chain didn't complete instead of ""AnchorTrusted"" lower down.    We'll need to port this to release/2.0.0 as well.  Addresses #28652 (for vNext)."
28671	area-System.Net	Improve parsing of WinINet default proxy strings in SocketsHttpHandler 	"WinINet default proxy strings consist of a semicolon or whitespace separated list of proxies, each with the following format:  ```  ([<scheme>=][<scheme>""://""]<server>["":""<port>])  ```  For example:  ```  http=127.0.0.1:8888;https=127.0.0.1:8888  ```  Our current implementation can only handle a single proxy in the list, and expects that ""://"" will be used instead of ""="". This breaks proxies for users with valid proxy configurations, and applications that configure multiple default proxies (such as Fiddler). In making the fix I tried to write the code to make as few allocations as possible, since the default proxy is checked frequently. Let me know if I should go back to the easy to read fix involving String.Split :)    I made the following assumptions when writing this fix:  - SocketsHttpHandler only supports http proxies.  - When a user provides multiple proxies with the same scheme, we can choose to use the first.    This PR also significantly increases the number of test cases for the relevant code.    See #28603 for more info."
28668	area-System.Diagnostics	"Test failure: System.Diagnostics.Tests.ProcessTests/ProcessStart_OpenFileOnLinux_UsesSpecifiedProgram(programToOpenWith: \""nano\"")"	"Opened on behalf of @danmosemsft  The test `System.Diagnostics.Tests.ProcessTests/ProcessStart_OpenFileOnLinux_UsesSpecifiedProgram(programToOpenWith: \""nano\"")` has failed.  System.ComponentModel.Win32Exception : No such process          Stack Trace:             at System.Diagnostics.Process.Kill() in /root/corefx-1541111/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs:line 62        at System.Diagnostics.Tests.ProcessTests.ProcessStart_OpenFileOnLinux_UsesSpecifiedProgram(String programToOpenWith) in /root/corefx-1541111/src/System.Diagnostics.Process/tests/ProcessTests.Unix.cs:line 171 Build : Master - 20180330.09 (Core Tests) Failing configurations: - Centos.73.Amd64-x64   - Release "
28667	area-Microsoft.CSharp	NamedArgumentTests.cs in src/Microsoft.CSharp/tests doesn't reset Console.Out	Tests in that file are setting Console.Out to a custom stream but don't reset it at the end:  https://github.com/dotnet/corefx/blob/e3694f9b8a69d21d1cb0e30412b7e52079ae69d6/src/Microsoft.CSharp/tests/NamedArgumentTests.cs#L369-L370    This results in the following output when running the tests:    ```  xUnit.net console test runner (32-bit .NET Core)  Copyright (C) 2014 Outercurve Foundation.      Discovering: Microsoft.CSharp.Tests    Discovered:  Microsoft.CSharp.Tests    Starting:    Microsoft.CSharp.Tests  ```    Note that the `Finished:    Microsoft.CSharp.Tests` or the Test Result Summary isn't visible.    The tests should have a finally that resets Console.Out to the original value, like other corefx tests are doing: https://github.com/dotnet/corefx/blob/e3694f9b8a69d21d1cb0e30412b7e52079ae69d6/src/System.Console/tests/Helpers.cs#L55-L64.
28666	area-System.Net	SslStream mutates state of options	Fixes: https://github.com/dotnet/corefx/issues/28657    <s>Marking as WIP because I still investigate if there are more options which might be modified</s>  not seeing anything else    f72796c is an unrelated rename which I missed in my SNI PR
28664	area-Microsoft.CSharp	When a new binder is exactly the same as existing one, just use the old instance instead.	"When a new binder is exactly the same as existing one, just use the old instance instead.    The reason is that DLR associates L2 cache with binder instances. The older binder, while equivalent, may already have some bindings in its cache. It makes sense to reuse them. This is the whole point of L2 cache.  I.E. If the second callsite happens to bind the same operation (say a dynamic addition that turns out to be adding ints), it can simply reuse the results of the previous binding - as long as these ""+"" callsites use the same binder instance.    Dynamic binding is a relatively expensive reflection-heavy operation. It is nice to be able to reuse the results."
28662	area-System.Net	[CentOS] Failure to load Microsoft.Win32.Primitives causes restore failing frequently	"This is blocking CLI PR    https://github.com/dotnet/cli/pull/8893    https://ci.dot.net/job/dotnet_cli/job/release_2.1.3xx/job/debug_centos7.1_x64_prtest/181/testReport/(root)/(empty)/Microsoft_DotNet_New_Tests_GivenThatIWantANewAppWithSpecifiedType_TemplateRestoresAndBuildsWithoutWarnings_language___C____projectType___mvc___skipSpaWebpackSteps__False_/      ```  Unhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.   (Exception from HRESULT: 0x80070004)     at System.Net.Sockets.MultipleConnectAsync.InternalConnectCallback(Object sender, SocketAsyncEventArgs args)     at System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(SocketAsyncEventArgs e)     at System.Net.Sockets.SocketAsyncEventArgs.ExecutionCallback(Object state)     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Sockets.SocketAsyncEventArgs.FinishOperationAsyncFailure(SocketError socketError, Int32 bytesTransferred, SocketFlags flags)     at System.Net.Sockets.SocketAsyncEventArgs.CompletionCallback(Int32 bytesTransferred, SocketFlags flags, SocketError socketError)     at System.Net.Sockets.SocketAsyncEventArgs.ConnectCompletionCallback(SocketError socketError)     at System.Net.Sockets.SocketAsyncContext.ConnectOperation.InvokeCallback(Boolean allowPooling)     at System.Net.Sockets.SocketAsyncContext.OperationQueue`1.ProcessQueue(SocketAsyncContext context)     at System.Net.Sockets.SocketAsyncContext.OperationQueue`1.<>c.<.cctor>b__15_1(Object o)     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)  --- End of stack trace from previous location where exception was thrown ---     at System.Threading.ThreadPoolWorkQueue.Dispatch()    ```    Full:  ```      MESSAGE:                                          Expected command to pass but it did not.  File Name: /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/dotnet  Arguments: restore  WorkingDir:: /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp  Exit Code: 134  StdOut:    Restoring packages for /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp/temp.csproj...    Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/nuget-build/nuget/v3/flatcontainer/microsoft.extensions.hosting/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)    Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/aspnetcore-release/nuget/v3/flatcontainer/microsoft.extensions.caching.sqlserver/index.json'.    Too many open files    Retrying 'FindPackagesByIdAsync' for source 'https://www.myget.org/F/container-tools-for-visual-studio/api/v3/flatcontainer/microsoft.extensions.hosting/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)    Retrying 'FindPackagesByIdAsync' for source 'https://www.myget.org/F/container-tools-for-visual-studio/api/v3/flatcontainer/microsoft.extensions.hosting/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)    Retrying 'FindPackagesByIdAsync' for source 'https://api.nuget.org/v3-flatcontainer/microsoft.extensions.hosting.abstractions/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)    Retrying 'FindPackagesByIdAsync' for source 'https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/system.buffers/index.json'.    Too many open files    Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/nuget-build/nuget/v3/flatcontainer/microsoft.extensions.identity.core/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)    Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/nuget-build/nuget/v3/flatcontainer/microsoft.extensions.identity.core/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)    Retrying 'FindPackagesByIdAsync' for source 'https://www.myget.org/F/container-tools-for-visual-studio/api/v3/flatcontainer/microsoft.extensions.identity.core/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)    Retrying 'FindPackagesByIdAsync' for source 'https://www.myget.org/F/container-tools-for-visual-studio/api/v3/flatcontainer/microsoft.extensions.identity.core/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)    Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/msbuild/nuget/v3/flatcontainer/microsoft.extensions.identity.core/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)    Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/msbuild/nuget/v3/flatcontainer/microsoft.extensions.identity.core/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)    Retrying 'FindPackagesByIdAsync' for source 'https://dotnet.myget.org/F/templating/api/v3/flatcontainer/microsoft.extensions.logging/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)    Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/msbuild/nuget/v3/flatcontainer/newtonsoft.json.bson/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)    Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/msbuild/nuget/v3/flatcontainer/newtonsoft.json.bson/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)    Retrying 'FindPackagesByIdAsync' for source 'https://dotnet.myget.org/F/templating/api/v3/flatcontainer/microsoft.extensions.logging/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)    Retrying 'FindPackagesByIdAsync' for source 'https://myget-2e16.kxcdn.com/artifacts/xunit/nuget/v3/flatcontainer/microsoft.extensions.logging/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)    Retrying 'FindPackagesByIdAsync' for source 'https://myget-2e16.kxcdn.com/artifacts/xunit/nuget/v3/flatcontainer/microsoft.extensions.logging/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)    Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/msbuild/nuget/v3/flatcontainer/microsoft.extensions.logging/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)    Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/msbuild/nuget/v3/flatcontainer/microsoft.extensions.logging/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)    Retrying 'FindPackagesByIdAsync' for source 'https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/microsoft.aspnetcore.authentication/index.json'.    Too many open files    Failed to download package 'Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.2.1.0-preview2-30475' from 'https://dotnetmyget.blob.core.windows.net/artifacts/aspnetcore-release/nuget/v3/flatcontainer/microsoft.aspnetcore.server.kestrel.transport.abstractions/2.1.0-preview2-30475/microsoft.aspnetcore.server.kestrel.transport.abstractions.2.1.0-preview2-30475.nupkg'.    Too many open files    Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/aspnetcore-release/nuget/v3/flatcontainer/microsoft.extensions.configuration.environmentvariables/index.json'.    Too many open files    Retrying 'FindPackagesByIdAsync' for source 'https://myget-2e16.kxcdn.com/artifacts/xunit/nuget/v3/flatcontainer/microsoft.extensions.options.configurationextensions/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)    Retrying 'FindPackagesByIdAsync' for source 'https://myget-2e16.kxcdn.com/artifacts/xunit/nuget/v3/flatcontainer/microsoft.extensions.options.configurationextensions/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)    Failed to download package 'Microsoft.EntityFrameworkCore.2.1.0-preview2-30475' from 'https://dotnetmyget.blob.core.windows.net/artifacts/aspnetcore-release/nuget/v3/flatcontainer/microsoft.entityframeworkcore/2.1.0-preview2-30475/microsoft.entityframeworkcore.2.1.0-preview2-30475.nupkg'.    Too many open files    Retrying 'FindPackagesByIdAsync' for source 'https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/microsoft.extensions.configuration.commandline/index.json'.    Too many open files    Retrying 'FindPackagesByIdAsync' for source 'https://www.myget.org/F/container-tools-for-visual-studio/api/v3/flatcontainer/microsoft.extensions.options.configurationextensions/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)    Retrying 'FindPackagesByIdAsync' for source 'https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/microsoft.net.http.headers/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)  /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/sdk/2.1.300-preview2-008509/NuGet.targets(114,5): error : Too many open files [/mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp/temp.csproj]    Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/msbuild/nuget/v3/flatcontainer/microsoft.net.http.headers/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)    Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/msbuild/nuget/v3/flatcontainer/microsoft.net.http.headers/index.json'.    Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.     (Exception from HRESULT: 0x80070004)  /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/sdk/2.1.300-preview2-008509/NuGet.targets(114,5): error MSB4018: The ""RestoreTask"" task failed unexpectedly. [/mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp/temp.csproj]  /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/sdk/2.1.300-preview2-008509/NuGet.targets(114,5): error MSB4018: System.IO.FileLoadException: Could not load file or assembly 'System.Diagnostics.Debug, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file. [/mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp/temp.csproj]  /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/sdk/2.1.300-preview2-008509/NuGet.targets(114,5): error MSB4018:  (Exception from HRESULT: 0x80070004) [/mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp/temp.csproj]  /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/sdk/2.1.300-preview2-008509/NuGet.targets(114,5): error MSB4018: File name: 'System.Diagnostics.Debug, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' [/mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp/temp.csproj]  /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/sdk/2.1.300-preview2-008509/NuGet.targets(114,5): error MSB4018:    at System.ModuleHandle.ResolveType(RuntimeModule module, Int32 typeToken, IntPtr* typeInstArgs, Int32 typeInstCount, IntPtr* methodInstArgs, Int32 methodInstCount, ObjectHandleOnStack type) [/mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp/temp.csproj]  /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/sdk/2.1.300-preview2-008509/NuGet.targets(114,5): error MSB4018:    at System.ModuleHandle.ResolveTypeHandleInternal(RuntimeModule module, Int32 typeToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext) [/mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp/temp.csproj]  /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/sdk/2.1.300-preview2-008509/NuGet.targets(114,5): error MSB4018:    at System.Reflection.RuntimeModule.ResolveType(Int32 metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments) [/mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp/temp.csproj]  /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/sdk/2.1.300-preview2-008509/NuGet.targets(114,5): error MSB4018:    at System.Reflection.CustomAttribute.FilterCustomAttributeRecord(CustomAttributeRecord caRecord, MetadataImport scope, Assembly& lastAptcaOkAssembly, RuntimeModule decoratedModule, MetadataToken decoratedToken, RuntimeType attributeFilterType, Boolean mustBeInheritable, Object[] attributes, IList derivedAttributes, RuntimeType& attributeType, IRuntimeMethodInfo& ctor, Boolean& ctorHasParameters, Boolean& isVarArg) [/mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp/temp.csproj]  /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/sdk/2.1.300-preview2-008509/NuGet.targets(114,5): error MSB4018:    at System.Reflection.CustomAttribute.IsCustomAttributeDefined(RuntimeModule decoratedModule, Int32 decoratedMetadataToken, RuntimeType attributeFilterType, Int32 attributeCtorToken, Boolean mustBeInheritable) [/mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp/temp.csproj]  /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/sdk/2.1.300-preview2-008509/NuGet.targets(114,5): error MSB4018:    at System.Reflection.CustomAttribute.IsDefined(RuntimeType type, RuntimeType caType, Boolean inherit) [/mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp/temp.csproj]  /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/sdk/2.1.300-preview2-008509/NuGet.targets(114,5): error MSB4018:    at System.Diagnostics.StackTrace.ShowInStackTrace(MethodBase mb) [/mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp/temp.csproj]  /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/sdk/2.1.300-preview2-008509/NuGet.targets(114,5): error MSB4018:    at System.Diagnostics.StackTrace.ToString(TraceFormat traceFormat) [/mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp/temp.csproj]  /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/sdk/2.1.300-preview2-008509/NuGet.targets(114,5): error MSB4018:    at System.Exception.GetStackTrace(Boolean needFileInfo) [/mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp/temp.csproj]  /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/sdk/2.1.300-preview2-008509/NuGet.targets(114,5): error MSB4018:    at System.Exception.ToString(Boolean needFileLineInfo, Boolean needMessage) [/mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp/temp.csproj]  /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/sdk/2.1.300-preview2-008509/NuGet.targets(114,5): error MSB4018:    at NuGet.Common.ExceptionUtilities.LogException(Exception ex, ILogger logger, Boolean logStackAsError) [/mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp/temp.csproj]  /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/sdk/2.1.300-preview2-008509/NuGet.targets(114,5): error MSB4018:    at NuGet.Common.ExceptionUtilities.LogException(Exception ex, ILogger logger) [/mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp/temp.csproj]  /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/sdk/2.1.300-preview2-008509/NuGet.targets(114,5): error MSB4018:    at NuGet.Build.Tasks.RestoreTask.Execute() [/mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp/temp.csproj]  /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/sdk/2.1.300-preview2-008509/NuGet.targets(114,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [/mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp/temp.csproj]  /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/sdk/2.1.300-preview2-008509/NuGet.targets(114,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [/mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp/temp.csproj]  /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/sdk/2.1.300-preview2-008509/NuGet.targets(114,5): error MSB4018:  [/mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp/temp.csproj]  /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/sdk/2.1.300-preview2-008509/NuGet.targets(114,5): error MSB4018:  [/mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-new.Tests/TemplateRestoresAndBuildsWithoutWarningsC#_mvc/temp/temp.csproj]  StdErr:    Unhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot open the file.   (Exception from HRESULT: 0x80070004)     at System.Net.Sockets.MultipleConnectAsync.InternalConnectCallback(Object sender, SocketAsyncEventArgs args)     at System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(SocketAsyncEventArgs e)     at System.Net.Sockets.SocketAsyncEventArgs.ExecutionCallback(Object state)     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Sockets.SocketAsyncEventArgs.FinishOperationAsyncFailure(SocketError socketError, Int32 bytesTransferred, SocketFlags flags)     at System.Net.Sockets.SocketAsyncEventArgs.CompletionCallback(Int32 bytesTransferred, SocketFlags flags, SocketError socketError)     at System.Net.Sockets.SocketAsyncEventArgs.ConnectCompletionCallback(SocketError socketError)     at System.Net.Sockets.SocketAsyncContext.ConnectOperation.InvokeCallback(Boolean allowPooling)     at System.Net.Sockets.SocketAsyncContext.OperationQueue`1.ProcessQueue(SocketAsyncContext context)     at System.Net.Sockets.SocketAsyncContext.OperationQueue`1.<>c.<.cctor>b__15_1(Object o)     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)  --- End of stack trace from previous location where exception was thrown ---     at System.Threading.ThreadPoolWorkQueue.Dispatch()                                            +++++++++++++++++++                                          STACK TRACE:                                             at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)     at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)     at Microsoft.DotNet.Tools.Test.Utilities.CommandResultAssertions.Pass() in /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/test/Microsoft.DotNet.Tools.Tests.Utilities/Assertions/CommandResultAssertions.cs:line 30     at Microsoft.DotNet.New.Tests.GivenThatIWantANewAppWithSpecifiedType.TemplateRestoresAndBuildsWithoutWarnings(String language, String projectType, Boolean skipSpaWebpackSteps) in /mnt/resource/j/workspace/dotnet_cli/release_2.1.3xx/debug_centos7.1_x64_prtest/test/dotnet-new.Tests/GivenThatIWantANewAppWithSpecifiedType.cs:line 60    ```"
28661	area-Infrastructure	[release/2.1] Change esrp signing flag to legacy signing	
28660	area-Infrastructure	[master] Change esrp signing flag to legacy signing	
28658	area-System.Diagnostics	NETFX x86 Release Build not running a set of tests	"Can't workout which ones, but open any recent PR and in the logs will be  ```  xUnit.net Console Runner (64-bit Desktop .NET 4.0.30319.42000)  Copyright (C) .NET Foundation.    usage: xunit.console <assemblyFile> [configFile] [assemblyFile [configFile]...] [options] [reporter] [resultFormat filename [...]]    Note: Configuration files must end in .json (for JSON) or .config (for XML)    Valid options:    -nologo                : do not show the copyright message    -nocolor               : do not output results with colors    -noappdomain           : do not use app domains to run test code    -failskips             : convert skipped tests into failures    -parallel option       : set parallelization based on option                           :   none        - turn off all parallelization                           :   collections - only parallelize collections                           :   assemblies  - only parallelize assemblies                           :   all         - parallelize assemblies & collections    -maxthreads count      : maximum thread count for collection parallelization                           :   default   - run with default (1 thread per CPU thread)                           :   unlimited - run with unbounded thread count                           :   (number)  - limit task thread pool size to 'count'    -noshadow              : do not shadow copy assemblies    -wait                  : wait for input after completion    -diagnostics           : enable diagnostics messages for all test assemblies    -internaldiagnostics   : enable internal diagnostics messages for all test assemblies    -debug                 : launch the debugger to debug the tests    -serialize             : serialize all test cases (for diagnostic purposes only)    -trait ""name=value""    : only run tests with matching name/value traits                           : if specified more than once, acts as an OR operation    -notrait ""name=value""  : do not run tests with matching name/value traits                           : if specified more than once, acts as an AND operation    -method ""name""         : run a given test method (should be fully specified;                           : i.e., 'MyNamespace.MyClass.MyTestMethod')                           : if specified more than once, acts as an OR operation  xUnit.net Console Runner (64-bit Desktop .NET 4.0.30319.42000)    -class ""name""          : run all methods in a given test class (should be fully                           : specified; i.e., 'MyNamespace.MyClass')                           : if specified more than once, acts as an OR operation    -namespace ""name""      : run all methods in a given namespace (i.e.,                           : 'MyNamespace.MySubNamespace')                           : if specified more than once, acts as an OR operation    -noautoreporters       : do not allow reporters to be auto-enabled by environment                           : (for example, auto-detecting TeamCity or AppVeyor)    Result formats: (optional, choose one or more)    -xml <filename>        : output results to xUnit.net v2 XML file    -xmlv1 <filename>      : output results to xUnit.net v1 XML file    -html <filename>       : output results to HTML file    -nunit <filename>      : output results to NUnit v2.5 XML file  ```  So its outputting the usage rather than running"
28657	area-System.Net	SslStream mutates state of Client/ServerAuthenticationOptions	Comment from @stephentoub in https://github.com/dotnet/corefx/pull/28278 has pointed to the issue we have in SslStream where we mutate Options object.    The problem with mutating the object is that sharing the same Options across different SslStream instance can cause races and make different than expected callback be called.    Examples of mutating state:  https://github.com/krwq/corefx/blob/705e95f02d179cccc6a290e5cf9f05fbd9873ed3/src/System.Net.Security/src/System/Net/Security/SslStream.cs#L252  https://github.com/krwq/corefx/blob/705e95f02d179cccc6a290e5cf9f05fbd9873ed3/src/System.Net.Security/src/System/Net/Security/SslStream.cs#L323  https://github.com/krwq/corefx/blob/705e95f02d179cccc6a290e5cf9f05fbd9873ed3/src/System.Net.Security/src/System/Net/Security/SslStream.cs#L360
28656	area-Serialization	Remove empty baseline files	#28552  Just deleted empty baseline files.  @weshaggard @mconnew 
28655	area-System.Linq	ParallelEnumerable.Aggregate XML documentation appears to be incorrect.	The [summary documentation](https://github.com/dotnet/corefx/blob/a38c5000be0d4b98445ef43d642614d0e8d8f82d/src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs#L1655) for the `ParallelEnumerable.Aggregate` method says:     > Applies in parallel an accumulator function over a sequence.    The implementation, however, delegates to the `PerformSequentialAggregation` method, which applies the accumulator function sequentially.     Unless there is something I'm missing, the documentation is discrepant and would more accurately say this:     > Applies an accumulator function sequentially over a sequence.
28652	area-System.Security	SqlClient CryptographicException is back on High Sierra 10.13.4	My issue today seems the same as this: https://github.com/dotnet/corefx/issues/22453    Yesterday (on High Sierra 10.13.3) my .net core 2.0 web project ran fine, connecting to SQL Server.     Last night my machine was updated to 10.13.4, and now this morning when I run the project I get this error:    ```  An unhandled exception was thrown by the application.  System.TypeInitializationException: The type initializer for 'XXX'   threw an exception. ---> System.Data.SqlClient.SqlException: A connection   was successfully established with the server, but then an error occurred   during the pre-login handshake. (provider: SSL Provider, error: 31 -   Encryption(ssl/tls) handshake failed) --->   System.Security.Cryptography.CryptographicException:   Error occurred during a cryptographic operation.  ```    Anyone else on 10.13.4 able to successfully connect to SQL Server this morning?
28650	area-System.Drawing	FontFamily.Equals in Linux use .Name instead of NativeFamily pointer which is not a singleton	Fixes: https://github.com/dotnet/corefx/issues/28052    In linux FontFamily objects are not treated as singleton so their NativeFamily pointers can change from object to object. However, when getting the FontFamily.Name from the native pointer we would get the same value if the FontFamily is the same.     However since we depend on the different font families across operative systems and Linux distros, we can have results where 2 fonts in linux are part of the same font family and in windows they are part of different families.    cc: @danmosemsft @qmfrederik 
28649	area-System.Net	Remove buffer argument from WebSocket.CreateFromStream	Fixes https://github.com/dotnet/corefx/issues/28138  cc: @davidfowl, @pakrym, @karelz 
28648	area-System.Net	Bad request created when a 401 is received after a Negotiate login	"If SocketsHttpHandler is used to login using Negotiate and a 401 is received after a successful login then an additional, invalid login request is sent and a 400 Bad Request response is received.    ```  GET / HTTP/1.1  Host: localhost:8080    HTTP/1.1 401 Unauthorized  Content-Length: 0  Server: Microsoft-HTTPAPI/2.0  WWW-Authenticate: Negotiate  Date: Fri, 30 Mar 2018 16:49:38 GMT    GET / HTTP/1.1  Authorization: Negotiate YIGABgYrBgEFBQKgdjB0oDAwLgYKKwYBBAGCNwICCgYJKoZIgvcSAQICBgkqhkiG9xIBAgIGCisGAQQBgjcCAh6iQAQ+TlRMTVNTUAABAAAAl7II4gcABwA3AAAADwAPACgAAAAKAKs/AAAAD0NIUlJPU1MtQ09SRURFVlJFRE1PTkQ=  Host: localhost:8080    HTTP/1.1 401 Unauthorized  Content-Type: text/html; charset=us-ascii  Server: Microsoft-HTTPAPI/2.0  WWW-Authenticate: Negotiate oYIBYTCCAV2gAwoBAaEMBgorBgEEAYI3AgIKooIBRgSCAUJOVExNU1NQAAIAAAAOAA4AOAAAABXCieIfmaZR3PbepYBHaZ8DAgAA/AD8AEYAAAAKAKs/AAAAD1IARQBEAE0ATwBOAEQAAgAOAFIARQBEAE0ATwBOAEQAAQAeAEMASABSAFIATwBTAFMALQBDAE8AUgBFAEQARQBWAAQANAByAGUAZABtAG8AbgBkAC4AYwBvAHIAcAAuAG0AaQBjAHIAbwBzAG8AZgB0AC4AYwBvAG0AAwBUAGMAaAByAHIAbwBzAHMALQBjAG8AcgBlAGQAZQB2AC4AcgBlAGQAbQBvAG4AZAAuAGMAbwByAHAALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAAUAJABjAG8AcgBwAC4AbQBpAGMAcgBvAHMAbwBmAHQALgBjAG8AbQAHAAgAKkqVF0fI0wEAAAAA  Date: Fri, 30 Mar 2018 16:49:38 GMT  Content-Length: 341    <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01//EN""""http://www.w3.org/TR/html4/strict.dtd"">  <HTML><HEAD><TITLE>Not Authorized</TITLE>  <META HTTP-EQUIV=""Content-Type"" Content=""text/html; charset=us-ascii""></HEAD>  <BODY><h2>Not Authorized</h2>  <hr><p>HTTP Error 401. The requested resource requires user authentication.</p>  </BODY></HTML>    GET / HTTP/1.1  Authorization: Negotiate oXcwdaADCgEBoloEWE5UTE1TU1AAAwAAAAAAAABYAAAAAAAAAFgAAAAAAAAAWAAAAAAAAABYAAAAAAAAAFgAAAAAAAAAWAAAABXCiOIKAKs/AAAADzMP5MXS4HO3vFJ7cVAlnlCjEgQQAQAAAO5XoSQnQjpiAAAAAA==  Host: localhost:8080    // The login was successful, but the server still decided to decline the user.    HTTP/1.1 401 Unauthorized  Content-Length: 0  Server: Microsoft-HTTPAPI/2.0  WWW-Authenticate: Negotiate  Date: Fri, 30 Mar 2018 16:49:38 GMT    // An extra invalid request is submitted, auth should have terminated, not sent Negotiate without a parameter.    GET / HTTP/1.1  Authorization: Negotiate  Host: localhost:8080    HTTP/1.1 400 Bad Request  Content-Type: text/html; charset=us-ascii  Server: Microsoft-HTTPAPI/2.0  Date: Fri, 30 Mar 2018 16:49:38 GMT  Connection: close  Content-Length: 311    <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01//EN""""http://www.w3.org/TR/html4/strict.dtd"">  <HTML><HEAD><TITLE>Bad Request</TITLE>  <META HTTP-EQUIV=""Content-Type"" Content=""text/html; charset=us-ascii""></HEAD>  <BODY><h2>Bad Request</h2>  <hr><p>HTTP Error 400. The request is badly formed.</p>  </BODY></HTML>  ```    This loop needs to terminate if there's no auth parameter to send:  https://github.com/dotnet/corefx/blob/06aa6f0ce4cdf78985f029f218007a7d55f8965f/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/AuthenticationHelper.NtAuth.cs#L62-L75    Repro code:  ```          public static void Main(string[] args)          {              var serverTask = RunServer();              Console.WriteLine(""Press any key to send request."");              Console.ReadKey();              var clientTask = RunClient();              Task.WaitAll(serverTask, clientTask);          }            private static async Task RunServer()          {              var host = new WebHostBuilder()                  .ConfigureLogging(factory => factory.AddConsole())                  .Configure(app =>                  {                      app.Run(context =>                      {                          context.Response.StatusCode = 401;                          return Task.CompletedTask;                      });                  })                  .UseHttpSys(options =>                  {                      options.UrlPrefixes.Add(""http://localhost:8080"");                      options.Authentication.Schemes = AuthenticationSchemes.Negotiate;                      options.Authentication.AllowAnonymous = true;                  })                  .Build();              await host.RunAsync();          }            private static async Task RunClient()          {              Environment.SetEnvironmentVariable(""DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER"", ""true"");              var handler = new HttpClientHandler();              handler.UseDefaultCredentials = true;              var client = new HttpClient(handler);              var response = await client.GetAsync(""http://localhost:8080/"");              Console.WriteLine(response);          }  ```    Note I wasn't able to repro this with HttpListener due to invalid response header formatting such as https://github.com/dotnet/corefx/pull/27755  `WWW-Authenticate: oRswGaADCgEAoxIEEAEAAAAZb0U9WuqA3QAAAAA=,Negotiate`    Found by ASP.NET Core HttpSys functional tests: https://github.com/aspnet/HttpSysServer/issues/439    Priority: Not blocking    @geoffkizer "
28646	area-System.Net	[2.1] Add server-side SNI support	2.1 squashed port of https://github.com/dotnet/corefx/pull/28278  Seems like CI is hanging on master but we can still send a port PR    cc: @karelz @Tratcher
28645	area-System.Net	Make AuthenticationException message less platform-specific	SSPI is a Windows thing.    cc: @davidsh, @bartonjs 
28644	area-System.Runtime	Added test for logging exception details on calls to Environment.FailFast	"Test for https://github.com/dotnet/coreclr/pull/16622, which added the details of exception object passed in calls to ```Environment.FailFast(""msg"", ex)```. Resolves issue #27929 "
28642	area-System.Net	WebRequest.DefaultWebProxy in .net core for corss platform	@nQuantPlatforms commented on [Sat Mar 24 2018](https://github.com/dotnet/core/issues/1381)  # Issue Title    WebRequest.DefaultWebProxy in .net core for corss platform    # General    <PropertyGroup>      <OutputType>Exe</OutputType>      <TargetFramework>netcoreapp2.0</TargetFramework>    </PropertyGroup>  <PropertyGroup>      <RuntimeIdentifiers>win10-x64;osx-x64;linux-x64;</RuntimeIdentifiers>  </PropertyGroup>    Using above RID and running on Win 10 gives me platform not supported exception.  My app need to read proxy from Win, OSX and Linux platform. Whats the best way to get proxy in Core app without having to create separate platform specific library ?      
28641	area-System.Threading	Awit use delay Windows server 2012 R2	@a641545621 commented on [Tue Mar 27 2018](https://github.com/dotnet/core/issues/1389)  Response response =  _client.Execute(request).Result;  Response response = awit  _client.Execute(request);  When using Awit to get results, there is no problem with the Win10 system, but when using Windows Server 2012 R2, occasionally it takes more than 20 seconds or more to wait. If you use .Result directly, you will not wait for a long time.  
28640	area-System.Memory	Split OwnedMemory into MemoryManager and IMemoryOwner	Depends on CoreCLR PR https://github.com/dotnet/coreclr/pull/17340 (along with the mirror PR).    **TODO:**  - ~Get the repo (source) building~  - ~Fix MemoryPool impl and tests~ (cc @AtsushiKan)  - ~Fix implementation of ReadOnlySequence and related types and adjust tests~ (cc @pakrym)  - ~Consume the changed types in Pipelines and fix~ (cc @pakrym, @halter73)  - ~Get existing tests to compile and pass~ ~System.Memory tests are passing now. I have disabled the few Pipelines tests that are failing (temporarily) until I can figure out the necessary fix.~  - ~Remove the files from src/Common/src/CoreLib/* since they will get mirrorred automatically once the coreclr PR gets merged.~  - Add more tests in System.Memory for IMemoryOwner/etc. (non-blocking, will be done in the future, outside this PR)    **Changes:**  - IRetainable is IPinnable (Release is Unpin)  - OwnedMemory is split into MemoryManager and IMemoryOwner  - Reorder the arguments in the ctor of MemoryHandle  - Add a static method CreateFromPinnedArray and use the high bit on length for pre-pinned arrays  - Make the internal ctor that took OwnedMemory public (now takes MemoryManager) and add argument validation  - Reset index, length if TryGetMemoryManager returns false (cc @benaadams)  - Updated the reference assembly for System.Memory, System.IO.Pipelines, and System.Runtime (cc @weshaggard)    cc @joshfree, @GrabYourPitchforks, @KrzysztofCwalina, @pakrym, @davidfowl, @jkotas, @stephentoub 
28639	area-System.Net	Stop blocking explicit opt-in to old SslProtocols in SslStream and HttpClient	By default, .NET Core defaults to allowing TLSv1, TLSv1.1, and TLSv1.2.  However, whereas .NET Framework allows a developer to opt-in to SSLv2/SSLv3, .NET Core currently blocks it.  This means developers are unable to use .NET Core when they need to communicate with an endpoint they don't control and that's unfortunately limited to one of these protocols, which blocks adoption of .NET Core.    This commit stops blocking these protocols.  They're still disabled by default, and compiling against them still results in a deprecation warning, but if a developer chooses to ignore the warning and explicitly sets SslProtocols, they are at least able to use the protocols, subject to whatever the underlying operating system allows (e.g. Windows stops supporting SSLv2 as of v1607).    Fixes https://github.com/dotnet/corefx/issues/15661  cc: @bartonjs, @GrabYourPitchforks, @davidsh  (Note I'm expecting when mission control comes back up I'll still have a handful of test failures to investigate.  I also should call out that some of the impacted tests are previously ActiveIssue'd, so as part of testing this I temporarily commented out the ActiveIssue, but I reverted that commenting for the PR.)
28638	area-System.Net	Some more allocation reduction in SocketsHttpHandler	- Pool SocketAsyncEventArgs used for establishing connections.  Today we create a new SocketAsyncEventArgs for each new connection, and it's used only for the ConnectAsync.  This establishes a bounded pool of them, such that they can be reused.  To do this, I moved the nested ConcurrentQueue.Segment type into a partial file so that we could use that directly, as it supports bounding (we can use it as a public type if/when https://github.com/dotnet/corefx/issues/24365 is addressed). FYI, @kouvel.    - Zero pool lifetimes. If the PooledConnectionIdleTimeout is zero or if the PooledConnectionLifetime is zero, then no connection will ever actually be usuable from the pool.  In such a situation we can a) avoid creating the cleaning timer, and b) dispose of the connection as it's being returned to the pool, rather than waiting for it to be scavenged.    - CookieContainer string allocation.  Its ctor is allocating a string that can instead be constructed once and used across all CookieContainers.    cc: @geoffkizer 
28637	area-System.Net	Fix race condition on read ahead task in SocketsHttpHandler	We're supposed to only use a ValueTask<int> once.  But there's a race condition where we may not only use one more than once, we might do so concurrently, resulting in a variety of different exceptions depending on how the race condition manifests.    When we take a connection out of the connection pool, we want to check whether it's still valid for use.  We could poll, but since the request/response is going to need to issue at least one read anyway, we just do so preemptively, then checking whether the read completed synchronously (if it did, we can't use the connection).  This gets stored in a field on the HttpConnection that can later be read.  However, we may also create the read ahead task in another situation, which is if we're unable to easily fish out the underlying socket used by the connection (as happens with tunneling), when the pool periodically scavenges and looks for dead connections, rather than polling it just issues that read even earlier.  Doing so, however, means that we'll have kicked off tasks that are likely to complete with an exception if the connection is terminated in an unfriendly manner.  To avoid such exceptions spamming TaskScheduler.UnobservedTaskException, we check this stored task when disposing the connection.    That, however, creates the race condition.  If the connection is disposed (e.g. due to cancellation) at just the wrong time, the request/response may be in the process of working with that initial read just as the disposal goes to interact with that same read ahead task.  Badness results.    The fix is to add a tiny amount of synchronization, such that just one call site can take ownership of the read ahead task.    cc: @geoffkizer, @davidfowl 
28631	area-System.Security	CI tests failing with WindowsCryptographicException on Windows10	https://mc.dot.net/#/user/dotnet-bot/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/a9913ea9b9bd68f11ca8707204b7d20a6ab98cf9/workItem/System.Net.Http.WinHttpHandler.Unit.Tests    Windows.10.Amd64.Open-x64-Debug  ```text  Unhandled Exception of Type Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException  Message :  Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException : The profile for the user is a temporary profile  Stack Trace :     at Internal.Cryptography.Pal.CertificatePal.FilterPFXStore(Byte[] rawData, SafePasswordHandle password, PfxCertStoreFlags pfxCertStoreFlags) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Security.Cryptography.X509Certificates\src\Internal\Cryptography\Pal.Windows\CertificatePal.Import.cs:line 153     at Internal.Cryptography.Pal.CertificatePal.FromBlobOrFile(Byte[] rawData, String fileName, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Security.Cryptography.X509Certificates\src\Internal\Cryptography\Pal.Windows\CertificatePal.Import.cs:line 88     at Internal.Cryptography.Pal.CertificatePal.FromBlob(Byte[] rawData, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Security.Cryptography.X509Certificates\src\Internal\Cryptography\Pal.Windows\CertificatePal.Import.cs:line 21     at System.Security.Cryptography.X509Certificates.X509Certificate..ctor(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Security.Cryptography.X509Certificates\src\System\Security\Cryptography\X509Certificates\X509Certificate.cs:line 81     at System.Security.Cryptography.X509Certificates.X509Certificate..ctor(Byte[] rawData, String password) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Security.Cryptography.X509Certificates\src\System\Security\Cryptography\X509Certificates\X509Certificate.cs:line 62     at System.Security.Cryptography.X509Certificates.X509Certificate2..ctor(Byte[] rawData, String password) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Security.Cryptography.X509Certificates\src\System\Security\Cryptography\X509Certificates\X509Certificate2.cs:line 51     at System.Net.Http.WinHttpHandlerUnitTests.ClientCertificateHelper..ctor() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\tests\UnitTests\ClientCertificateHelper.cs:line 14     at System.Net.Http.WinHttpHandlerUnitTests.ClientCertificateScenarioTest.get_ValidClientCertificates() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\tests\UnitTests\ClientCertificateScenarioTest.cs:line 18  ```    cc @davidsh, @wfurt, @karelz, @danmosemsft 
28630	area-System.Diagnostics	Test failure: System.Diagnostics.Process.Tests	"(I'm new, so maybe I'm totally missing something, but I'm following the instructions as best I can and I keep getting test errors.)    So I (successfully) ran the build, made some changes to some libraries and started experiencing some issues. I wanted to get back to a good state, so I did    > git checkout master  > clean -all  > build-tests.cmd     # Failed with lots of errors, cause I should have run build first.  > build.cmd              # Success  > build-tests.cmd    Error:    > D:\Repos\dotnet\corefx\dir.traversal.targets(77,5): error : (No message specified) [D:\Repos\dotnet\corefx\src\tests.builds]  >   > Build FAILED.  >   > D:\Repos\dotnet\corefx\Tools\tests.targets(492,5): warning :    System.Diagnostics.Process.Tests  Total: 254, Errors: 0, Failed: 1, Skipped: 2, Time: 68.485s [D:\Repos\dotnet\corefx\src\System.Diagn  > ostics.Process\tests\System.Diagnostics.Process.Tests.csproj]  > D:\Repos\dotnet\corefx\Tools\tests.targets(492,5): warning MSB3073: The command ""D:\Repos\dotnet\corefx\bin/tests/System.Diagnostics.Process.Tests/netcoreapp-Windows_NT-Debug-x64//RunTests.cmd D:\Re  > pos\dotnet\corefx\bin/testhost/netcoreapp-Windows_NT-Debug-x64/"" exited with code 1. [D:\Repos\dotnet\corefx\src\System.Diagnostics.Process\tests\System.Diagnostics.Process.Tests.csproj]  > D:\Repos\dotnet\corefx\Tools\tests.targets(500,5): error : One or more tests failed while running tests from 'System.Diagnostics.Process.Tests' please check D:\Repos\dotnet\corefx\bin/tests/System.D  > iagnostics.Process.Tests/netcoreapp-Windows_NT-Debug-x64/testResults.xml for details! [D:\Repos\dotnet\corefx\src\System.Diagnostics.Process\tests\System.Diagnostics.Process.Tests.csproj]  > D:\Repos\dotnet\corefx\dir.traversal.targets(77,5): error : (No message specified) [D:\Repos\dotnet\corefx\src\tests.builds]  >     2 Warning(s)  >     2 Error(s)    ""testResults.xml"" does not exist in the specified location.    With build.cmd taking 8 minutes and build-tests.cmd taking 14 minutes, debugging this blindly just isn't going to work. (On a Quad-core, 16 GB RAM, SSD)    I'm currently on  > commit 22d053f88c619199b38da4a098e47a087cf98c56 (HEAD -> master, origin/master, origin/HEAD)  > Author: Jan Kotas <jkotas@microsoft.com>  > Date:   Wed Mar 28 15:46:00 2018 -0700  >   >     Delete workaround for ComImport types on Unix (#28518)  >   >     https://github.com/dotnet/coreclr/issues/16804 is fixed. We do not need the workaround anymore.    Ideas? In the meantime, I'll pull the latest and then run clean (do I need to do this?), build and build-tests again."
28626	area-System.Security	Make TripleDESCryptoServiceProvider CreateTransform behave like netfx	.NET Framework's TripleDESCryptoServiceProvider rejects small inputs, but  accepts oversized IVs (effectively truncating them to the block size).  This  change makes the .NET Core type behave the same way, and adds a test to  codify all of the oversized IV relationships with the CryptoServiceProvider  compat types.  (DES and RC2 apparently already allowed it)    Fixes #28553.
28625	area-System.Security	RsaDecryptPkcs1WrongDataLength failing in CI with Assert.Throws() Failure on Debian	From https://github.com/dotnet/corefx/pull/28615  Debian.87.Amd64.Open-x64-Release  https://mc.dot.net/#/user/dotnet-bot/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/a9913ea9b9bd68f11ca8707204b7d20a6ab98cf9/workItem/System.Security.Cryptography.Csp.Tests/analysis/xunit/System.Security.Cryptography.Rsa.Tests.EncryptDecrypt_Span~2FRsaDecryptPkcs1WrongDataLength    ```text  Unhandled Exception of Type Xunit.Sdk.ThrowsException  Message :  Assert.Throws() Failure  Expected: typeof(System.Security.Cryptography.CryptographicException)  Actual:   (No exception was thrown)  Stack Trace :     at System.Security.Cryptography.Rsa.Tests.EncryptDecrypt.RsaDecryptPkcs1WrongDataLength() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/Common/tests/System/Security/Cryptography/AlgorithmImplementations/RSA/EncryptDecrypt.cs:line 489  ```    cc @bartonjs 
28622	area-Infrastructure	These definitions have been deprecated by the vsts maintenance jobs.	Related to issue: https://github.com/dotnet/core-eng/issues/2964
28621	area-Infrastructure	These definitions have been deprecated by the vsts maintenance jobs.	Related to issue: https://github.com/dotnet/core-eng/issues/2964
28620	area-Infrastructure	CoreFx test utility depends on Microsoft.DotNet.PlatformAbstractions	@krwq @tarekgh @eerhardt added a dependency on Microsoft.DotNet.PlatformAbstractions to CoreFx.TestUtilities in https://github.com/dotnet/corefx/pull/24531. That cause a cycle in our build-from-source efforts so we have to figure out a solution to break that cycle.     For now I'm going to break the cycle by pinning to an existing version but we cannot do that in general because it requires us to have an existing binary which is bad for new-distro bring-up.      @eerhardt what is your thoughts on bring Microsoft.DotNet.PlatformAbstractions into corefx? 
28614	area-System.Runtime	AppDomain SetPrincipalPolicy not implemented	corefx/src/System.Runtime.Extensions/src/System/AppDomain.cs    public void SetPrincipalPolicy(PrincipalPolicy policy) { }    This is clearly unimplemented. Maybe [ObsoleteAttribute] could be added to spare people frustration.
28613	area-System.Threading	Fix thread constructor test on newer kernels	Works around and closes https://github.com/dotnet/coreclr/issues/17170  - Works around an issue on linux-arm64 where pthread_create appears to reserve less stack space than requested without failing, and limits the max reserved stack size to the ulimit-configued value, leading to seg fault when the requested size of stack space is attempted to be used  - Fixed to write every page in the stack region that is being checked, to guarantee hitting the guard page in case of failure. The JIT's stack probe for stackalloc should cover this, https://github.com/dotnet/coreclr/issues/16827 details why that was not happening, in any case this test is not intended to test stack probing behavior, so this change makes the test a bit stronger in what it actually intends to test.    @sdmaclea @janvorli 
28612	area-Meta	Consume the new C# 7.3 constraints if/where possible	C# 7.3 is adding support for three new constraints:  * `unmanaged`  * `Delegate`/`MulticastDelegate`  * `Enum`    There are several APIs in CoreFX/CoreCLR which are emulating these constraints via runtime checks.    If possible (since it would be a compile time breaking change), it would be nice to update these methods to use the proper constraints where appropriate.    A simple `git grep TDelegate` and `git grep TEnum` will display the majority of these APIs.
28611	area-System.Globalization	en_us.POSIX locale environment for .NET Core on Linux	"Does .NET Core support Linux in en_us.POSIX locale environment?    Based on [this commit](https://github.com/dotnet/corefx/commit/513efd86d5fb290098d6823b7b847cf50dd01951), which adds a regression test for a bug fix and it invokes CultureInfo(""en-US-POSIX""). However, my team has run into a fundamental problem running .NET Core tests in Linux with en_us.POSIX locale. We have no issue with the en_us.UTF8 locale. For example, string.Compare() does not work properly in case-sensitive comparison.    - string.Compare(""C03DATE"", ""C03DATE"", true) return zero, which is expected  - string.Compare(""c03DATE"", ""C03DATE"", true) return non-zero, which is not expected because it is case-insensitive comparison. Third parameter is true.  In other locales, this method returns zero.     Thanks to @divega for providing some initial help on this question."
28610	area-System.Net	Make it clear that the default proxy cannot by set via environment variable on Windows	This test was tagged with an active issue disabling it on Windows, but the behavior is actually by design.     Quoting @davidsh:  > The default for .NET Framework is to use WinINET-style (IE registry setttings) to find the default proxy. There has never been a concept for using environment variables on Windows. It might be an interesting idea to add environment variables which could override the WinINET-style proxy settings. But that seems like a new feature for .NET Core. We would want to have those variables be appropriately named. In some ways, this would provide the ability for easier machine-wide proxy settings which has been requested by users in the past. WinINET-style settings are only available for interactive user accounts on Windows, i.e. those accounts with those registry settings. Background service accounts like those used in NT-style services don't have those settings by default. So, adding environment variables might be a useful thing.    I agree that we should look into adding support for default proxies set via environment variable, but for now I think we should just make it clear this isn't a bug.    Fixes: #25640
28609	area-System.Net	SocketsHttpHandler: Proxied IPv6 requests have incorrectly formatted host/port in request line	"On WinHttpHandler, we will append [] around the IPv6 address.  ""GET http://[::1234]/ HTTP/1.1"", ""Proxy-Connection: Keep-Alive"", ""Host: [::1234]""    On SocketsHttpHandler, currently we don't:  ""GET http://::1234/ HTTP/1.1"", ""Host: [::1234]""    Also, if we specify a port number, SocketsHttpHandler will strip that in the uri send to the proxy as well.    WinHttpHandler:  In value:  List<String> [""GET http://[::1234]:8080/ HTTP/1.1"", ""Proxy-Connection: Keep-Alive"", ""Host: [::1234]:8080""]    SocketsHttpHandler:  In value:  List<String> [""GET http://::1234/ HTTP/1.1"", ""Host: [::1234]:8080""]"
28606	area-Meta	Insertion of master to CLI is failing	"https://github.com/dotnet/cli/pull/8901    stack trace:  ```  D:\j\workspace\debug_windows---8a02d2bd\build\BundledDotnetTools.proj(24,5): error MSB4018: The ""DotNetRestore"" task failed unexpectedly. [D:\j\workspace\debug_windows---8a02d2bd\build.proj]  23:12:07          D:\j\workspace\debug_windows---8a02d2bd\build\BundledDotnetTools.proj(24,5): error MSB4018: System.IndexOutOfRangeException: Index was outside the bounds of the array. [D:\j\workspace\debug_windows---8a02d2bd\build.proj]  23:12:07          D:\j\workspace\debug_windows---8a02d2bd\build\BundledDotnetTools.proj(24,5): error MSB4018: at System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(TKey[] array, Int32 index) [D:\j\workspace\debug_windows---8a02d2bd\build.proj]  23:12:07          D:\j\workspace\debug_windows---8a02d2bd\build\BundledDotnetTools.proj(24,5): error MSB4018: at System.Diagnostics.Process.GetEnvironmentVariablesBlock(IDictionary`2 sd) [D:\j\workspace\debug_windows---8a02d2bd\build.proj]  23:12:07          D:\j\workspace\debug_windows---8a02d2bd\build\BundledDotnetTools.proj(24,5): error MSB4018: at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo) [D:\j\workspace\debug_windows---8a02d2bd\build.proj]  23:12:07          D:\j\workspace\debug_windows---8a02d2bd\build\BundledDotnetTools.proj(24,5): error MSB4018: at System.Diagnostics.Process.Start() [D:\j\workspace\debug_windows---8a02d2bd\build.proj]  23:12:07          D:\j\workspace\debug_windows---8a02d2bd\build\BundledDotnetTools.proj(24,5): error MSB4018: at Microsoft.Build.Utilities.ToolTask.ExecuteTool(String pathToTool, String responseFileCommands, String commandLineCommands) [D:\j\workspace\debug_windows---8a02d2bd\build.proj]  23:12:07          D:\j\workspace\debug_windows---8a02d2bd\build\BundledDotnetTools.proj(24,5): error MSB4018: at Microsoft.Build.Utilities.ToolTask.Execute() [D:\j\workspace\debug_windows---8a02d2bd\build.proj]  ```"
28605	area-System.Net	PlatformNotSupported thrown by SystemWebProxy	I know this is obviously intentional but is poor and should be reconsidered for alternatives such as returning a marker instead of throwing and catching an exception.    > System.PlatformNotSupportedExceptio  >   HResult=0x80131539  >   Message=Operation is not supported on this platform.  >   Source=System.Net.Requests  >   StackTrace:  >    at System.Net.SystemWebProxy.GetProxy(Uri destination)    https://github.com/dotnet/corefx/blob/master/src/System.Net.Requests/src/System/Net/SystemWebProxy.cs#L50-L53    ```c#  public Uri GetProxy(Uri destination)  {        throw new PlatformNotSupportedException();  }  ```    [EDIT] Fix link by @karelz
28604	area-System.Net	WIP: Checking status of Large Payload 307 test failure	Not to merge just to get updated callstacks for failures of this test (see #23768)
28603	area-System.Net	SocketsHttpHandler not debuggable	As I've been troubleshooting various issues with the new SocketsHttpHandler the largest barrier has been the lack of diagnostic visibility into what's going on while it processes requests.    There is a DiagnosticHandler, but it's a wrapper around SocketsHttpHandler, it doesn't give visibility into the internal operations or final output.  https://github.com/dotnet/corefx/blob/45fb8a627e727df337580291b45317ee5e66b5a5/src/System.Net.Http/src/System/Net/Http/HttpClientHandler.Windows.cs#L481    Nor does SocketsHttpHandler work with Fiddler. Is this an issue with auto-proxy detection? Or is there an issue with bypassing proxies on localhost? This is a significant development blocker. Being able to see the requests as they're emitted to the wire can help troubleshoot formatting issues, redirects, auth, etc.. The hoops I had to jump through to capture the output for https://github.com/dotnet/corefx/issues/28557 were excessive. Similar diagnostic deficiencies are hindering the evaluation of a new issue https://github.com/aspnet/HttpSysServer/issues/439.     With net4x HttpWebRequest by comparison I could enable full logging of every byte output to a Socket, before or after SSL, as well as HTTP level logs about overall protocol flow.    Microsoft Message Analyzer is the next best option for capturing localhost traffic, though their current installer appears to be broken, and it's less than ideal for SSL scenarios.    @karelz @geoffkizer
28602	area-Infrastructure	Error when creating nuget [packed | lib] package. System.IO.FileNotFoundException: File not found	Opened on behalf of @jcagme  Warnings: 2 Status Message: failed  Build : Master - 20180329.06 (Product Build) Failing configurations: - Windows   - PortableBuild-Checked-x86   - PortableBuild-Checked-arm   - PortableBuild-Release-x64 [Mission Control Build Info](https://mc.dot.net/#/product/netcore/master/source/official~2Fcoreclr~2Fmaster~2F/type/build~2Fproduct~2F/build/20180329.06/workItem/Orchestration/analysis/external/Link) 
28600	area-Infrastructure	Fix package testing infrastructure and fix issues.	This gets the package validation testing running again and fixes all current issues.    Best reviewed commit-by-commit.
28598	area-System.Drawing	Reenable SetHdevmode_IntPtr_Success test	"https://github.com/dotnet/corefx/issues/26637    This test normally passes unless the machine's  default printer is set to something that  doesn't support multiple copies (or duplex  or collate settings.) In that case, the  printer serves up a DEVMODE structure  whose ""dmFields"" flags indicate the absence  of those fields and thus, the meaningless property  does not get populated in the DEVMODE.    Given that    1. this is the existing NETFX behavior.    2. there's no other obvious value to put in these     properties when the printer doesn't support them.     Perhaps these properties should have been nullable     properties but that horse has long left the barn.    3. The purpose of the Hdevmode_IntPtr apis is not cloning     PrinterSettings (PrinterSettings explicitly supports     a Clone() method for that purpose.) The test is     just using it that way as a way of validating     the HDevMode_IntPtr apis in the best way it can     in a generic unit test run on uncontrolled     machines.    I'm just changing the test to use a known  printer type that works rather than trusting  the default."
28597	area-Infrastructure	Build fails with System.Threading.Tasks.Extensions.4.4.0	"I attached simple sample project - just empty class library with one dependency `System.Threading.Tasks.Extensions.4.4.0`.   Build from Visual Studio works fine, but if you try to build solution via msbuild (Build.bat near solution file) then build fails.    ```  ""c:\Projects\ClassLibrary1\ClassLibrary1\ClassLibrary1.csproj"" (Rebuild target) (2) ->  (ImplicitlyExpandNETStandardFacades target) ->    C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\Microsoft\Microsoft.NET.Build.Extensions\Micro  soft.NET.Build.Extensions.NETFramework.targets(65,5): error MSB4062: The ""NETBuildExtensionsError"" task could not be lo  aded from the assembly C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\Microsoft\Microsoft.NET.B  uild.Extensions\\tools\net46\Microsoft.NET.Build.Extensions.Tasks.dll.  Confirm that the <UsingTask> declaration is cor  rect, that the assembly and all its dependencies are available, and that the task contains a public class that implemen  ts Microsoft.Build.Framework.ITask. [c:\Projects\ClassLibrary1\ClassLibrary1\ClassLibrary1.csproj]  ```    The issue is not reproduced with  System.Threading.Tasks.Extensions.4.3.0    [ClassLibrary1.zip](https://github.com/dotnet/corefx/files/1860435/ClassLibrary1.zip)  "
28595	area-System.Collections	Move Hashtable & friends to shared parition	Depends on https://github.com/dotnet/coreclr/pull/17316    for HashHelpers convergance.    cc @ianhays @safern as area owners.
28594	area-System.ComponentModel	Proposal: new System.ComponentModel.VersionConverter class	"## Rationale and Usage    Converting between `System.Version` and `string` is currently not supported using a `System.ComponentModel.TypeConverter`. Many system types are supported out of the box (System.DateTimeOffset, System.Guid, System.TimeSpan, System.Uri etc.) so I think System.Version would be a welcome addition.    I was expecting this to work, but converting from string actually throws `NotSupportedException`: TypeConverter cannot convert from System.String.    ```csharp  using System.ComponentModel;  using System.Diagnostics;  TypeConverter versionConverter = TypeDescriptor.GetConverter(typeof(Version));  Version version = versionConverter.ConvertFromString(""1.2.3.4"") as Version;  Trace.Assert(version.Major == 1);  Trace.Assert(version.Minor == 2);  Trace.Assert(version.Build == 3);  Trace.Assert(version.Revision == 4);  ```    ## Proposed API    ```csharp  public partial class VersionConverter : System.ComponentModel.TypeConverter  {      public VersionConverter();      public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType);      public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType);      public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);      public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType);      public override bool IsValid(System.ComponentModel.ITypeDescriptorContext context, object value);  }  ```    ## Details    Converting between `string` and `System.Version` is very straightforward, implementation would be very similar to `GuidConverter` or `UriTypeConverter`.      ## Open Questions    * What exception should be thrown when the string to convert is not valid, for example `""1""`? Other converters just let the constructor of the type throw the exception.    ```csharp  var uriConverter = System.ComponentModel.TypeDescriptor.GetConverter(typeof(Uri));  uriConverter.ConvertFromString(""mailto:User@""); // throws UriFormatException  ```    ```csharp  var guidConverter = System.ComponentModel.TypeDescriptor.GetConverter(typeof(Guid));  guidConverter.ConvertFromString(""xxxx""); // throws FormatException  ```    For `System.Version`, that would mean throwing an `ArgumentException` which is less descriptive than a `FormatException`.    * Should the converter be registered with other `IntrinsicTypeConverters` (is System.Version an intrinsic type?) or should the converter be registered with the `TypeConverterAttribute` on the `System.Version` class?    ## Pull Request    A pull request with the proposed changes is available: #28516  "
28593	area-Meta	Replace identical files with CoreLib mirror	"contributes to #27841    Thank's to @EgorBo i removed 100% identical files from Common folder with CoreLib mirror.    ---RESOLVED---  Anyway there is one file left out:     `corefx\src\Common\src\System\Threading\Tasks\TaskToApm.cs` in `corefx\src\System.Net.Http\src\System.Net.Http.csproj`    if i try to substitute with   ``` c#  <Compile Include=""$(CommonPath)\CoreLib\System\Threading\Tasks\TaskToApm.cs"">       <Link>Common\CoreLib\System\Threading\Tasks\TaskToApm.cs</Link>  </Compile>  ```    i get this error when compile:  ```   CSC : error CS2001: Source file '...\corefx\src\Common\src\System\Threading\Tasks\TaskToApm.cs' could not be found. [...\corefx\src\System.Net.Http\src\System.Net.Http.csproj]  ```   @karelz what i'm missing?  ---RESOLVED---    cc: @danmosemsft     Tested on Win/Ubuntu  "
28591	area-System.Runtime	DllImport and current directory	"We need to start several processes from a single application (all .NET Core 2.0 console app) using `Process.Start` and `ProcessStartInfo`. First, we found this  [issue](https://github.com/dotnet/corefx/issues/28590) about `ProcessStartInfo.WorkingDirectory` which seems to not work. Now that we use `Directory.SetCurrentDirectory` in the started application, .NET assemblies are well resolved/loaded but we have another error with a `DllImport` which cannot load the native dll:  `System.DllNotFoundException: Unable to load DLL '***' : The specified module could not be found. (Exception from HRESULT: 0x8007007E)`    The dll is of course in the same directory as its executable. I have tried to add a `SetCurrentDirectory` + `SetDllDirectory` in the Main method w/o any effects. And also added the directory in the PATH.    Of course, everything ""works on my machine"" (windows 10, .NET Core SDK 2.1.103) and it only happens in the staging env (windows server 2016 .NET Core SDK 2.1.101).    So to summarize:    - If the app is started from the CLI using `dotnet ***.dll`, it _works from any directory_    - If the app is started the same way from another process using `Process.Start()`, it **fails**    - If the app is published as an executable, it _works using the CLI from its current directory_  But it **fails from the parent directory** and of course, also using `Process.Start()` (which is the excpected use case)    Last detail: the DllImport is done in the context of an `Activator.CreateInstance` (using Windsor)"
28590	area-System.Diagnostics	ProcessStartInfo.WorkingDirectory is not working	We have an application which starts several processes (all .NET Core 2.0 console app). We set the `ProcessStartInfo.WorkingDirectory` to ensure that the current directory is the one of the started executable but it does not work: the `GetCurrentDirectory` remains the one of the application that invokes the `Process.Start()`.  We do a `Directory.SetCurrentDirectory` in the started application as a workaround.    .NET Core 2.1.101
28588	area-System.Net	enable tcp keep-alive on curl handler	"fixes #28119     This is outcome of investigation not originally reported on github.  Patch was provided to customer and we verified that it fixes observed issue.     Observed delay is caused by retransmits and timeout in cases when upstream Azure firewall cuts connection without sending FIN or RST. curl on OSX is build agains ressl and in that case we create singleton under the cover. Because of that, normal tricks to dispose and recycle HttpHandler or HttpClinet don't work and curl was using  connections even after very long idle time.     When tested on Ubuntu, the keep-alive message were sent because of enabled by OS.   This change is currently not OSX specific - it would make all NIX system consistent - either with keep-alive enable by OS or by curl handler it self. All that is handled as OS level and it will not impact any of our I/O operations.  Also note that this will happen only on idle connection so that should not be really impact under ""normal"" use.   "
28587	area-System.Net	CurlHandler is deadlocking like WinHttpHandler	This repros consistently for Release on High Sierra. Issue #27746 already tracks it.    Issue tracking the hanging in macOS is #28116 
28585	area-System.Net	Investigate IDN mapping rules when parsing/writing server name	SslStream Windows implementation does not map special characters when sending host name in the client hello extension and sends utf-8 characters instead.    Note: This does not affect HttpClient scenario which does IDN mapping higher up the stack, only SslStream scenario is affected.    SSL protocol recommends that host name should be send by a client. Host name should be send using one of the client hello extensions. Recommended data flow is following:  ```  [CLIENT] ---> Possibly non-ASCII string --- IDN MAPPING ---> ASCII string ---> UTF8 BYTES ---> ASCII string --- IDN UNMAPPING ---> Possibly non-ASCII string ---> [SERVER logic]  ```    Current windows Implementation seems to be skipping IDN mapping and does following instead:  ```  [CLIENT] ---> Possibly non-ASCII string  ---> UTF8 BYTES ---> ASCII string --- IDN UNMAPPING ---> Possibly non-ASCII string ---> [SERVER logic]  ```    Recently merged server logic implementation (https://github.com/dotnet/corefx/pull/28278) does following to mitigate the problem:  ```  UTF8 BYTES ---> Possibly non-ASCII string or IDN mapped string ---> IDN UNMAPPING ---> Succeeded? ---> Possibly non-ASCII string ---> [SERVER logic]                                            |                                              |                   ^                                            |               (See: SniHelper.DecodeString)  | NO                |                                            +---------------------------------------------->-------------------+  ```    To sum up:  - [ ] client on Windows does not seem to be doing IDN mapping before sending (investigate if this is correct and if not fix)  - [ ] investigate if described above fallback is ok or if it should return null instead (with the current client implementation no fallback means we can't roundrip non-ascii characters)    Related test case (passes with the fallback):  https://github.com/dotnet/corefx/pull/28278/files#diff-dbaea2525913714cf555096c8af14a03R21  with following test data:  https://github.com/dotnet/corefx/pull/28278/files#diff-dbaea2525913714cf555096c8af14a03R132    On the OpenSSL side we do the conversion explicitly:  https://github.com/dotnet/corefx/blob/c533892f2e57940ec9e66616288bf340b75a9217/src/Common/src/Interop/Unix/System.Security.Cryptography.Native/Interop.OpenSsl.cs#L129    while on Windows we seem to be passing directly:  https://github.com/dotnet/corefx/blob/c533892f2e57940ec9e66616288bf340b75a9217/src/Common/src/Interop/Windows/sspicli/SecuritySafeHandles.cs#L595    2.0.0 code also does the same thing: https://github.com/dotnet/corefx/blob/release/2.0.0/src/Common/src/Interop/Windows/sspicli/SecuritySafeHandles.cs#L596    Windows documentation doesn't seem to be specifying if it does the conversion for you or not (https://msdn.microsoft.com/en-us/library/windows/desktop/aa375924(v=vs.85).aspx):  ```  pszTargetName [in, optional]        A pointer to a null-terminated string that uniquely identifies the target server. Schannel uses this value to verify the server certificate. Schannel also uses this value to locate the session in the session cache when reestablishing a connection. The cached session is used only if all of the following conditions are met:            The target name is the same.          The cache entry has not expired.          The application process that calls the function is the same.          The logon session is the same.          The credential handle is the same.  ```
28584	area-System.Security	TestKeyAgreesRecipientIdType_RoundTrip failing in CI with WindowsCryptographicException on Win7	From https://github.com/dotnet/corefx/pull/28582  Windows.7.Amd64.Open-x64-Debug  https://mc.dot.net/#/user/benaadams/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/55bf1b5b0f691c9d6f223c60cbeb2fc46bf746cc/workItem/System.Security.Cryptography.Pkcs.Tests/analysis/xunit/System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.KeyAgreeRecipientInfoTests~2FTestKeyAgreesRecipientIdType_RoundTrip  ```text  Unhandled Exception of Type Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException  Message :  Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException : An internal error occurred  Stack Trace :     at Internal.Cryptography.Pal.Windows.PkcsPalWindows.EncodeHelpers.CreateCryptMsgHandleToEncode(CmsRecipientCollection recipients, Oid innerContentType, AlgorithmIdentifier contentEncryptionAlgorithm, X509Certificate2Collection originatorCerts, CryptographicAttributeObjectCollection unprotectedAttributes) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Security.Cryptography.Pkcs\src\Internal\Cryptography\Pal\Windows\PkcsPalWindows.Encrypt.cs:line 80     at Internal.Cryptography.Pal.Windows.PkcsPalWindows.Encrypt(CmsRecipientCollection recipients, ContentInfo contentInfo, AlgorithmIdentifier contentEncryptionAlgorithm, X509Certificate2Collection originatorCerts, CryptographicAttributeObjectCollection unprotectedAttributes) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Security.Cryptography.Pkcs\src\Internal\Cryptography\Pal\Windows\PkcsPalWindows.Encrypt.cs:line 25     at System.Security.Cryptography.Pkcs.EnvelopedCms.Encrypt(CmsRecipientCollection recipients) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Security.Cryptography.Pkcs\src\System\Security\Cryptography\Pkcs\EnvelopedCms.cs:line 109     at System.Security.Cryptography.Pkcs.EnvelopedCms.Encrypt(CmsRecipient recipient) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Security.Cryptography.Pkcs\src\System\Security\Cryptography\Pkcs\EnvelopedCms.cs:line 92     at System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.KeyAgreeRecipientInfoTests.EncodeKeyAgreel(SubjectIdentifierType type) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Security.Cryptography.Pkcs\tests\EnvelopedCms\KeyAgreeRecipientInfoTests.cs:line 361     at System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.KeyAgreeRecipientInfoTests.TestKeyAgreesRecipientIdType_RoundTrip() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Security.Cryptography.Pkcs\tests\EnvelopedCms\KeyAgreeRecipientInfoTests.cs:line 66  ```    cc @bartonjs 
28582	area-System.Numerics	Improve Quaternion test failure messages	From https://github.com/dotnet/corefx/pull/25510
28580	area-Infrastructure	Getting build error in VS for Microsoft.CSharp	"I did a pull, a full build via the command line, and then opened Microsoft.CSharp.    Actually, I may have run build.sh and build.cmd, which is pretty much the same, right?    I opened the solution in VS and tried to build, but this is the error I am getting:    > The target ""Build"" does not exist in the project."
28578	area-System.Net	Fix ipv6 address format in Host header	Per discussion in #28557. If this change looks ok, I will fix the WinHttp as well.    Fix: #28557
28577	area-System.Net	Reduce buffering in ManagedWebSocket.ReceiveAsync	Today we use a big-ish receive buffer (4K) in ManagedWebSocket, reading all data into the receive buffer and then copying from there into the caller-provided destination buffer.  With this change, we assume that the underlying stream is providing the desired level of buffering, and thus only use a 125-byte buffer, just big enough to handle message headers and control payloads (the latter for simplicity, as no caller-supplied buffer is available there).    Fixes https://github.com/dotnet/corefx/issues/28445  cc: @davidfowl, @geoffkizer, @anurse 
28575	area-Infrastructure	Updating CoreFx dependencies to servicing-26329-01	
28574	area-Infrastructure	code coverage runs timing out	3 hour time limit being exceeded now    eg in https://ci.dot.net/job/dotnet_corefx/job/master/job/code_coverage_windows/507/consoleFull#-11168565952d31e50d-1517-49fc-92b3-2ca637122019    09:43:41  tests start  12:34:14 timeout    These two are the worst offenders    09:49:02   Starting:    System.Collections.Performance.Tests  10:41:47   Finished:    System.Collections.Performance.Tests    11:51:09   Starting:    System.Numerics.Vectors.Performance.Tests  12:10:01   Finished:    System.Numerics.Vectors.Performance.Tests    We need to disable perf tests from code coverage runs. @safern can you please do this? Is there a trait?    cc @stephentoub @benaadams as they have flagged this before
28573	area-Infrastructure	Prevent CMake 2.8 tests failing for unused variable (causing millisec to be dropped from stat calls)	"Fix https://github.com/dotnet/corefx/issues/27662 which only reproduced with bits built from official build machines.    The millisecond part of the stat structs can appear in several forms or possibly not be available so we probe for it with CMake's such:  ```c  check_struct_has_member(      ""struct stat""      st_atim      ""sys/types.h;sys/stat.h""      HAVE_STAT_TIM)  ```    This was failing on the official build machines even though st_atim is present in the struct. The cause can be found in `corefx/bin/obj/Linux.x64.Debug/native/CMakeFiles/CMakeError.log`  ```  Building C object CMakeFiles/cmTryCompileExec161514853.dir/src.c.o  /usr/local/bin/clang-3.9   -std=gnu99 -D_GNU_SOURCE -DHAVE_STAT_TIM -Werror   -o CMakeFiles/cmTryCompileExec161514853.dir/src.c.o   -c /root/corefx/bin/obj/Linux.x64.Debug/native/CMakeFiles/CMakeTmp/src.c  /root/corefx/bin/obj/Linux.x64.Debug/native/CMakeFiles/CMakeTmp/src.c:8:9: error: expression result unused [-Werror,-Wunused-value]     tmp->st_atim;     ~~~  ^~~~~~~  1 error generated.  gmake[1]: *** [CMakeFiles/cmTryCompileExec161514853.dir/src.c.o] Error 1   ```    This is because the test code is like this:  ```c    #include <sys/types.h>  #include <sys/stat.h>    int main()  {     struct stat* tmp;     tmp->st_atim;    return 0;  }  ```    In later versions of CMake it looks like this which avoids the warning/error.  ```c  int main()  {     (void)sizeof(((struct stat *)0)->st_atim);     return 0;  }   ```    The fix is to specifically disable warning as error for this diagnostic. I verified this fixes it on the build machine:  ```  -- Performing Test HAVE_STAT_TIM  -- Performing Test HAVE_STAT_TIM - Success  ```    The main reason this took some time to root cause (other than it not reproing locally or in CI) was that I did not realize the official builds build in docker containers in order to achieve a portable build on Centos 7. So when I built on the official build boxes, I was picking up cmake version 3.5.1 rather than 2.8.12.2."
28572	area-Infrastructure	Update netfx queues to use rs3 machines with .net471 installed	This updates the official build target queue for netfx tests to use the RS3 queue that just recently got upgraded to .net471    This also changes the NETFX CI leg to use Helix queues to run tests instead of running them in the CI machine, this for the same purpose, to have upgraded net471 machines.    Related to: https://github.com/dotnet/core-eng/issues/2745    cc: @MattGal @weshaggard @danmosemsft @stephentoub @mmitche   
28571	area-System.Net	Enable digest test runs on CurlHandler.	Now that the authentication test failures have been diagnosed, re-enable most of the Digest authentication test cases on CurlHandler. Two additional cases had to be moved to the SocketsHttpHandler only tests, since they fail on CurlHandler and do not have fixes yet.    The digest test cases have to use credentials without a domain when run against CurlHandler. This is because Curl does not allow us to set the realm parameter used to send the domain along with a digest authorization header. We could alternatively try to use the down level login name as the username, but it appears that there is a bug in the Curl escaping logic that causes backslashes in the username to be duplicated. I plan to open an issue in the Curl repo once things are a bit less busy.    All of the test cases that are SocketsHttpHandler only are now tracked by individual issues, so I think with this we can close #28065.  
28568	area-Infrastructure	Update SDK to 2.1.300-preview2-008530	
28566	area-Infrastructure	Nuget Microsoft.AspNetCore.Mvc.Core detected package downgrade	"_From @mcm-ham on March 22, 2018 11:33_  I have a library project called WebApp.Auth.Sso.Abstractions with this as the csproj:  ```  <Project Sdk=""Microsoft.NET.Sdk"">    <PropertyGroup>      <TargetFramework>netstandard2.0</TargetFramework>    </PropertyGroup>    <ItemGroup>      <PackageReference Include=""Microsoft.AspNetCore.Mvc.Core"" Version=""2.0.3"" />    </ItemGroup>  </Project>  ```  And when I run `dotnet restore` it works but when I run `dotnet restore -r win81-x64` I get this error:    ```  Error NU1605 Detected package downgrade: System.IO.FileSystem.Primitives from 4.3.0 to 4.0.1. Reference the package directly from the project to select a different version.    WebApp.Auth.Sso.Abstractions -> Microsoft.AspNetCore.Mvc.Core 2.0.3 -> Microsoft.Extensions.DependencyModel 2.0.3 -> Microsoft.DotNet.PlatformAbstractions 2.0.3 -> System.IO.FileSystem 4.0.1 -> runtime.win.System.IO.FileSystem 4.3.0 -> System.IO.FileSystem.Primitives (>= 4.3.0)    WebApp.Auth.Sso.Abstractions -> Microsoft.AspNetCore.Mvc.Core 2.0.3 -> Microsoft.Extensions.DependencyModel 2.0.3 -> Microsoft.DotNet.PlatformAbstractions 2.0.3 -> System.IO.FileSystem 4.0.1 -> System.IO.FileSystem.Primitives (>= 4.0.1)  ```  _Copied from original issue: aspnet/Mvc#7527_"
28564	area-System.Threading	Re-enable GetTaskSchedulersForDebugger test	Fixes #28539
28563	area-System.Net	Several minor sockets tweaks	As part of investigating a race condition, noticed a few things to be slightly improved or commented.    cc: @geoffkizer 
28562	area-Infrastructure	Produce Windows PDBs when building for netfx and in a Windows OS	From: https://github.com/dotnet/corefx/pull/28059/files    When testing in NETFX we need to produce Windows PDBs to get detailed stack traces with file name and line numbers.    cc: @weshaggard @danmosemsft 
28560	area-Infrastructure	Support musl-libc based linux RIDs	- Add `linux-musl` RID  - Set `alpine`'s parent to `linux-musl`  - Add `alpine.3.7` to the graph  - Fix up `android` to inherit from `unix` while we are here    Fixes https://github.com/dotnet/core-setup/issues/3817    QUESTION: Is `linux-musl` the correct name for this RID?  Do we like the order of the two words?  Is using a hyphen to separate them acceptable?    /cc @Petermarcu 
28559	area-System.Xml	System.Xml.Xsl.XslTransformApi.Tests UnauthorizedAccessException	System.Xml.Xsl.XslTransformApi.Tests uses the hardcoded path `/tmp/XslTransformApi`    After the test has been run in an account with different privilege, the test will fail with UnauthorizedAccessException.    For example see partial log below.  ```  xUnit.net console test runner (64-bit .NET Core)  Copyright (C) 2014 Outercurve Foundation.    Discovering: System.Xml.Xsl.XslTransformApi.Tests  Discovered:  System.Xml.Xsl.XslTransformApi.Tests  Starting:    System.Xml.Xsl.XslTransformApi.Tests     System.Xml.Tests.CXmlResolverTest.TC_AbsolutePath_Transform(inputType: Reader, readerType: XmlValidatingReader, transformType: Reader, docType: XPathDocument) [FAIL]        System.UnauthorizedAccessException : Access to the path '/tmp/XslTransformApi/xmlResolver_document_function.xml' is denied.        ---- System.IO.IOException : Permission denied        Stack Trace:           /home/vmjenkins/workspace/Dotnet/build_and_test/src/mscorlib/shared/Interop/Unix/Interop.IOErrors.cs(23,0): at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)           /home/vmjenkins/workspace/Dotnet/build_and_test/src/mscorlib/shared/Microsoft/Win32/SafeHandles/SafeFileHandle.Unix.cs(41,0): at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)           /home/vmjenkins/workspace/Dotnet/build_and_test/src/mscorlib/shared/System/IO/FileStream.cs(230,0): at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)              at System.IO.FileSystem.CopyFile(String sourceFullPath, String destFullPath, Boolean overwrite)           /home/vmjenkins/workspace/Dotnet/build_corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/XSLTransform.cs(113,0): at System.Xml.Tests.XsltApiTestCaseBase.TestUsingTemporaryCopyOfResolverDocument(Action testAction)           ----- Inner Stack Trace -----                System.Xml.Tests.CXmlResolverTest.TC_AbsolutePath_Transform(inputType: Reader, readerType: XmlValidatingReader, transformType: Stream, docType: XPathDocument) [FAIL]        System.UnauthorizedAccessException : Access to the path '/tmp/XslTransformApi/xmlResolver_document_function.xml' is denied.        ---- System.IO.IOException : Permission denied        Stack Trace:           /home/vmjenkins/workspace/Dotnet/build_and_test/src/mscorlib/shared/Interop/Unix/Interop.IOErrors.cs(23,0): at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)           /home/vmjenkins/workspace/Dotnet/build_and_test/src/mscorlib/shared/Microsoft/Win32/SafeHandles/SafeFileHandle.Unix.cs(41,0): at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)           /home/vmjenkins/workspace/Dotnet/build_and_test/src/mscorlib/shared/System/IO/FileStream.cs(230,0): at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)              at System.IO.FileSystem.CopyFile(String sourceFullPath, String destFullPath, Boolean overwrite)           /home/vmjenkins/workspace/Dotnet/build_corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/XSLTransform.cs(113,0): at System.Xml.Tests.XsltApiTestCaseBase.TestUsingTemporaryCopyOfResolverDocument(Action testAction)           ----- Inner Stack Trace -----                System.Xml.Tests.CXmlResolverTest.TC_AbsolutePath_Transform(inputType: Reader, readerType: XmlValidatingReader, transformType: Writer, docType: XPathDocument) [FAIL]        System.UnauthorizedAccessException : Access to the path '/tmp/XslTransformApi/xmlResolver_document_function.xml' is denied.        ---- System.IO.IOException : Permission denied        Stack Trace:           /home/vmjenkins/workspace/Dotnet/build_and_test/src/mscorlib/shared/Interop/Unix/Interop.IOErrors.cs(23,0): at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)           /home/vmjenkins/workspace/Dotnet/build_and_test/src/mscorlib/shared/Microsoft/Win32/SafeHandles/SafeFileHandle.Unix.cs(41,0): at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)           /home/vmjenkins/workspace/Dotnet/build_and_test/src/mscorlib/shared/System/IO/FileStream.cs(230,0): at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)              at System.IO.FileSystem.CopyFile(String sourceFullPath, String destFullPath, Boolean overwrite)           /home/vmjenkins/workspace/Dotnet/build_corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/XSLTransform.cs(113,0): at System.Xml.Tests.XsltApiTestCaseBase.TestUsingTemporaryCopyOfResolverDocument(Action testAction)           ----- Inner Stack Trace -----             ```
28558	area-System.Net	System.Net.Mail.Tests.SmtpClientTest.Send_SpecifiedPickupDirectory path issue	The failing test case below creates a directory in the /tmp filesystem with a hard coded name.  If the directory is owned by another user, the test will fails as shown in the log below.    ```  xUnit.net console test runner (64-bit .NET Core)  Copyright (C) 2014 Outercurve Foundation.    Discovering: System.Net.Mail.Functional.Tests  Discovered:  System.Net.Mail.Functional.Tests  Starting:    System.Net.Mail.Functional.Tests     System.Net.Mail.Tests.SmtpClientTest.Send_SpecifiedPickupDirectory [FAIL]        System.UnauthorizedAccessException : Access to the path '/tmp/System.Net.Mail.Tests.SmtpClientTest/865ed06b-19de-41fe-a054-3c7f23bbbb1b' is denied.        ---- System.IO.IOException : Permission denied        Stack Trace:              at System.IO.FileSystem.CreateDirectory(String fullPath)              at System.IO.Directory.CreateDirectory(String path)           /home/vmjenkins/workspace/Dotnet/build_corefx/src/System.Net.Mail/tests/Functional/SmtpClientTest.cs(41,0): at System.Net.Mail.Tests.SmtpClientTest.get_TempFolder()           /home/vmjenkins/workspace/Dotnet/build_corefx/src/System.Net.Mail/tests/Functional/SmtpClientTest.cs(235,0): at System.Net.Mail.Tests.SmtpClientTest.Send_SpecifiedPickupDirectory()           ----- Inner Stack Trace -----             Finished:    System.Net.Mail.Functional.Tests    === TEST EXECUTION SUMMARY ===     System.Net.Mail.Functional.Tests  Total: 170, Errors: 0, Failed: 1, Skipped: 0, Time: 20.193s  ```
28557	area-System.Net	IPv6 addresses not correctly formatted in Host headers	"The new SocketsHttpHandler does not correctly format IPv6 addresses in host headers.    Repro:  ```              var client = new HttpClient();              var response = await client.GetAsync(""http://[::1]:5001"");  ```  Actual output:  ```        GET / HTTP/1.1        Host: ::1:5001  ```  Expected output: `Host: [::1]:5001`    Always include the brackets, even if there isn't a port.    Code: https://github.com/dotnet/corefx/blob/f14366baaa80a893e53934b98e9786dac54c136f/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs#L124  https://github.com/dotnet/corefx/blob/f14366baaa80a893e53934b98e9786dac54c136f/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPoolManager.cs#L191-L195    Found by ASP.NET Core Kestrel functional tests. https://github.com/aspnet/KestrelHttpServer/issues/2406    Priority: Not preview blocking, but RTM blocking.     @karelz "
28556	area-System.Net	Test failure: System.Net.Security.Tests / ServerAsyncAuthenticate_AllClientVsIndividualServerSupportedProtocols_Success	From https://github.com/dotnet/corefx/pull/28536    OSX.1012.Amd64.Open-x64-Debug  ServerAsyncAuthenticate_AllClientVsIndividualServerSupportedProtocols_Success    https://mc.dot.net/#/user/dotnet-maestro-bot/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/ba6b4d98a37a5a76991d7f3a27320924081a7b24/workItem/System.Net.Security.Tests/analysis/xunit/System.Net.Security.Tests.ServerAsyncAuthenticateTest~2FServerAsyncAuthenticate_AllClientVsIndividualServerSupportedProtocols_Success(serverProtocol:%20Tls11)  ```text  Unhandled Exception of Type System.TimeoutException  Message :  System.TimeoutException : Task timed out after 240000  Stack Trace :     at System.Threading.Tasks.TaskTimeoutExtensions.TimeoutAfter(Task task, Int32 millisecondsTimeout) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 23     at System.Net.Security.Tests.ServerAsyncAuthenticateTest.ServerAsyncSslHelper(SslProtocols clientSslProtocols, SslProtocols serverSslProtocols, Boolean expectedToFail) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Security/tests/FunctionalTests/ServerAsyncAuthenticateTest.cs:line 134     at System.Net.Security.Tests.ServerAsyncAuthenticateTest.ServerAsyncAuthenticate_AllClientVsIndividualServerSupportedProtocols_Success(SslProtocols serverProtocol) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Security/tests/FunctionalTests/ServerAsyncAuthenticateTest.cs:line 95  --- End of stack trace from previous location where exception was thrown ---  ```    cc @davidsh 
28554	area-Infrastructure	alpine build should be built with /p:PortableBuild=true	This issue spans both `dotnet/corefx` and `dotnet/coreclr`.    In order to support our runtime on musl-based distros that are not alpine, we should be building our runtime with `/p:PortableBuild=true`.  This will enable loading the correct libicu and libssl that are on the distro.    See   - https://github.com/dotnet/corefx/blob/master/buildpipeline/pipeline.json#L52  - https://github.com/dotnet/coreclr/blob/master/buildpipeline/pipelines.json#L50    This is a follow up to: https://github.com/dotnet/core-setup/issues/3817
28553	area-System.Security	Crypo transforms should truncate long initialization vectors for compatibility	"TripleDESCryptoServiceProvider expects a 24 byte key and 8 byte initialization vector.     In .NET Framework, if an IV longer than the algorithm's block size (8 bytes) was used, [it would be truncated](https://referencesource.microsoft.com/#mscorlib/system/security/cryptography/tripledescryptoserviceprovider.cs,101). In .NET Core, though, [an exception is thrown](https://github.com/dotnet/corefx/blob/1ce37dfb5a03e5decdb25ee67ef765f89424ceb1/src/System.Security.Cryptography.Algorithms/src/Internal/Cryptography/TripleDesImplementation.cs#L64).     This makes .NET Framework-targeted libraries that would otherwise be usable from .NET Core fail. It would be good to truncate the IV for compatibility's sake.    Repro  ------    Create a .NET Framework-targeted library using a too-long IV:    ```CSharp  public class CryptoHelper  {      public static string Encrypt(string input)      {          var key = new byte[24] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B,                                   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, };            // This should only be 8 bytes          var iv = new byte[24] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B,                                   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, };            var des = new TripleDESCryptoServiceProvider();          var encryptor = des.CreateEncryptor(key, iv);                    var data = Encoding.UTF8.GetBytes(input);          return Convert.ToBase64String(encryptor.TransformFinalBlock(data, 0 , data.Length));      }  }  ```    Use the library from a .NET Core application:  ```CSharp  Console.WriteLine(CryptoHelper.Encrypt(""Hello world!""));  ```    This results in the following exception:    ```  Unhandled Exception: System.ArgumentException: Specified initialization vector (IV) does not match the block size for this algorithm.  Parameter name: rgbIV     at Internal.Cryptography.TripleDesImplementation.CreateTransform(Byte[] rgbKey, Byte[] rgbIV, Boolean encrypting)     at Internal.Cryptography.TripleDesImplementation.CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV)     at System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV)     at CryptoHelper.Encrypt(String input)     at console.Program.Main(String[] args) in C:\temp\console\Program.cs:line 12  ```    If the .NET Core app targets net461 instead, however, it works!  ```  C:\temp\console>type console.csproj  <Project Sdk=""Microsoft.NET.Sdk"">      <PropertyGroup>      <OutputType>Exe</OutputType>      <TargetFramework>net461</TargetFramework>    </PropertyGroup>      <ItemGroup>      <Reference Include=""CryptoHelper"">        <HintPath>CryptoHelper.dll</HintPath>      </Reference>    </ItemGroup>    </Project>    C:\temp\console>dotnet run  jOr/uvaiDXmJ/aKNevYkgQ==  ```"
28552	area-Serialization	Fix MatchingRefApiCompat issues in Serialization libraries	Fixes #27981  @mconnew @huanwu @zhenlan 
28551	area-Infrastructure	Packages which suppress NETStandard.Library reference cause downgrades when installed in `netcoreapp1.0`	"This is true for both the 2.1 packages we're building now as well as the 2.0 packages we shipped prior.    This manifests as `NU1605` errors.      As an example, install System.Buffers 4.4.0 in a `netcoreapp1.0` project.    For example:  ```  error NU1605: Detected package downgrade: System.IO.FileSystem.Primitives from 4.3.0 to 4.0.1. Reference the package directly from the project to select a different version.   error NU1605: project -> Microsoft.NETCore.App 1.0.5 -> NETStandard.Library 1.6.0 -> System.Console 4.0.0 -> runtime.unix.System.Console 4.3.0 -> System.IO.FileSystem.Primitives (>= 4.3.0)   error NU1605: project -> Microsoft.NETCore.App 1.0.5 -> NETStandard.Library 1.6.0 -> System.IO.FileSystem.Primitives (>= 4.0.1)  ```    The downgrade isn't caused by the common ancestor (`NETStandard.Library`) as the warning might lead you to believe.  Instead it's occurring because of the following dependency:    System.Buffers 4.4.0 -> System.Diagnostics.Debug 4.3.0 -> Microsoft.NETCore.Platforms 1.1.0 (runtime.json).    They are hitting this NuGet issue: https://github.com/NuGet/Home/issues/3541.    The set of packages impacted in the 2.1 release are the following:  - System.Buffers  - System.Diagnostics.DiagnosticSource  - System.Reflection.TypeExtensions  - System.Runtime.CompilerServices.Unsafe  - System.Security.Cryptography.Cng  - System.Security.Cryptography.OpenSsl  - System.Security.Principal.Windows  - System.Threading.Tasks.Extensions    They are only impacted on `.NETCoreApp1.0`.    If we wanted to fix this we could re-baseline to the 1.0 era packages: potentially breaking where folks counted on us bringing in the 1.1 version of packages in other TFMs.  Special case the dependencies only on NETCoreApp1.0 could limit this, but is still potentially breaking if folks even on NETCoreApp1.0 depended on a fix or API added in a 1.1 version of a package.    In the realm of workarounds, folks can suppress the warning on NETCoreApp1.0 with `<NoWarn>$(NoWarn);NU1605</NoWarn>`, however this can result in real downgrades sneaking through.  Alternatively you can lift up all of `NETStandard.Library` with `<PackageReference Include=""NETStandard.Library"" Version=""1.6.1"" />`, this bypasses the NuGet bug by lifting up every package to the 1.1 version which may be undesirable since you end up running on a mixed state.    /cc @joperezr @weshaggard "
28550	area-System.IO	Do not resume reader on 0-byte FlushAsync	https://github.com/dotnet/corefx/issues/27732
28549	area-Meta	(Out)dated JS escaping rules in JsonValue.cs	"https://github.com/dotnet/corefx/blob/master/src/System.Json/src/System/Json/JsonValue.cs    Edge, Chrome, Firefox:  Input: JSON.stringify(""</script>"")  Result: """"</script>""""    I can't verify that U+2028 (LINE SEPARATOR), U+2029 (PARAGRAPH SEPARATOR) needs to be escaped either.  Only Firefox does that at the moment."
28548	area-System.Runtime	BitConverter - Select Endianness 	Add a way to set the Endianness of the methods. Something like:  ```csharp  public static ushort ToUInt16(byte[] value, int startIndex, Endianness endianness=Endianness.BigEndian);  ```    Where the default parameter points to the system default endianness
28547	area-System.Net	IPEndPoint.Port as UInt16	A Port is a unsigned integer of 16 bits, so it have sense to define it internaly as a UInt16
28546	area-System.Threading	ValueTask<T> and ValueTask should implement the same common interface	Both class could implement an interface like this one  ```csharp      public interface IValueTask      {          bool IsCanceled { get; }          bool IsCompleted { get; }          bool IsCompletedSuccessfully { get; }          bool IsFaulted { get; }      }  ```  Another method could be added to the interface to access the underlying Task, returning a `Task` object which is possible as `Task<T>` derived from `Task`.  ```csharp  Task UnderlyingTask(): // For a lack of a better name...  ```    This way we could store `IValueTask` fields in our custom types that would address either `ValueTask` or any kind of `ValueTask<T>`    I'm aware this would introduce Boxing to define IValueTask members, but maybe it is an acceptable choice when the alternative would be to store many members because of many different `<T>`...    
28545	area-System.Net	Test failure: System.Net.Security.Tests.ServerAsyncAuthenticateTest/ServerAsyncAuthenticate_EachServerUnsupportedProtocol_Fail(protocol: Ssl3)	Opened on behalf of @Sunny-pu  The test `System.Net.Security.Tests.ServerAsyncAuthenticateTest/ServerAsyncAuthenticate_EachServerUnsupportedProtocol_Fail(protocol: Ssl3)` has failed.  Assert.Throws() Failure     Expected: typeof(System.NotSupportedException)     Actual:   typeof(System.TimeoutException): Task timed out after 240000          Stack Trace:             at System.Threading.Tasks.TaskTimeoutExtensions.TimeoutAfter(Task task, Int32 millisecondsTimeout)        at System.Net.Security.Tests.ServerAsyncAuthenticateTest.ServerAsyncSslHelper(SslProtocols clientSslProtocols, SslProtocols serverSslProtocols, Boolean expectedToFail) in /Users/buildagent/agent/_work/391/s/corefx/src/System.Net.Security/tests/FunctionalTests/ServerAsyncAuthenticateTest.cs:line 137 Build : Master - 20180328.01 (Core Tests) Failing configurations: - OSX.1012.Amd64-x64   - Release  Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180328.01/workItem/System.Net.Security.Tests/analysis/xunit/System.Net.Security.Tests.ServerAsyncAuthenticateTest~2FServerAsyncAuthenticate_EachServerUnsupportedProtocol_Fail(protocol:%20Ssl3)
28544	area-System.Net	Test failure: System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandlerTest/PostAsync_CallMethod_EmptyContent(remoteServer: https://corefx-net.cloudapp.net/Echo.ashx)	Opened on behalf of @Sunny-pu  The test `System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandlerTest/PostAsync_CallMethod_EmptyContent(remoteServer: https://corefx-net.cloudapp.net/Echo.ashx)` has failed.  Assert.Equal() Failure\r     Expected: (null)\r     Actual:   Byte[] [172, 187, 137, 202, 24, ...]          Stack Trace:             at System.Net.Http.Functional.Tests.TestHelper.VerifyResponseBody(String responseContent, Byte[] expectedMD5Hash, Boolean chunkedUpload, String requestBody)        at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<PostAsync_CallMethod_EmptyContent>d__87.MoveNext()     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) Build : Master - 20180328.01 (Full Framework Tests) Failing configurations: - Windows.10.Amd64-x86   - Release  Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fdesktop~2Fcli~2F/build/20180328.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandlerTest~2FPostAsync_CallMethod_EmptyContent(remoteServer:%20https:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx)
28543	area-System.Net	Fix perf hit from WinHttpGetProxyForUrl 	The recent addition of calling WinHttpGetProxyForUrl by default for each SocketsHttpHandler request on Windows is adding non-trivial overhead, at least 5% to each request in a local measurement.  We should avoid that.  For example, by using WinHttpDetectAutoProxyConfigUrl to see if there's an autoproxy, and if there isn't, caching that knowledge and then skipping WinHttpGetProxyForUrl for all subsequent requests.  We may also need/want to query WinHttpGetIEProxyConfigForCurrentUser in that case, again caching the results, similar to what's done on Unix.    cc: @karelz, @wfurt, @geoffkizer 
28542	area-Meta	same project dotnet build -c release  on linux is fail	"same project .  on linux   ![image](https://user-images.githubusercontent.com/20533465/38012499-47a4bfbc-3294-11e8-9cec-7a3aa58990ec.png)    on windows  ![image](https://user-images.githubusercontent.com/20533465/38012526-5e74c6b0-3294-11e8-9491-3a7f7cce620a.png)    but on linux ,run "" dotnet build -c release "" is fail  ![image](https://user-images.githubusercontent.com/20533465/38012581-a0aa5842-3294-11e8-9f11-498e01775437.png)    on windows it's run   ![image](https://user-images.githubusercontent.com/20533465/38012616-b68aa4e6-3294-11e8-984e-c6e3a765e9d3.png)      why?"
28541	area-System.Net	Replace custom date parsing for HttpDateParse	"fixes #12513    Added exploratory tests, then modified those tests into what DateTime(Offset).Parse can handle.  Also fixes the following bugs in the original:   - considered ANSI dates to be local (to the _receiver_, no less), instead of UTC/GMT like the spec says.   - accepted offset values (ie, `+05:00`), but didn't actually use them.   - would throw `ArrayIndexOutOfBoundsException` if a string token didn't have enough distinguishing characters (ie, `'S'` throws, because it needs to check the next character for `'a'`/`'u'` for Saturday/Sunday)    Retains case insensitivity of the original.  Drops ability to use partially matching day-of-week/month strings (ie, the original parses `""Surprise""` as `""Sunday""`).  Drops ability to use non-matching date/day-of-week strings (ie `""Sat, 25 Mar 2018 16:33:01 GMT""` - the 25th was actually a Sunday)  Drops ability to use arbitrary characters as separators.  Now allows arbitrary amounts of whitespace between tokens.    Attempting to retain any of the previous compatibility changes would require changes to `DateTime.Parse`, which I am somewhat loathe to do.    I'm going to assume these changes represent a performance regression, given the previous implementation was highly optimized (if somewhat buggy).  Additionally, the way the previous code was written makes me think it was pulled from C/C++ somewhere - I don't know whether that should be looked into.  "
28540	area-Meta	Nit changes in API diff between .NET Core 2.0 and .NET Core 2.1	Refer to dotnet/apireviews#63    This shows changes made in ref and some optional changes in test.  Relevant changes to src is provided in PR dotnet/coreclr#17288    cc: @terrajobst @danmosemsft @ahsonkhan 
28539	area-System.Runtime	GetTaskSchedulersForDebugger_ReturnsDefaultScheduler tests failing in CI with NullReferenceException for Unix	From https://github.com/dotnet/corefx/pull/28536  System.Threading.Tasks.Tests.TaskSchedulerTests/GetTaskSchedulersForDebugger_ReturnsDefaultScheduler  OSX.1013.Amd64.Open-x64-Debug  Ubuntu.1604.Amd64.Open-x64-Release  ...  Centos.74.Amd64.Open-x64-Release  https://mc.dot.net/#/user/dotnet-maestro-bot/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/2c74aa99ae6f5bcb1048ef1450dc9894a924c562/workItem/System.Threading.Tasks.Tests/analysis/xunit/System.Threading.Tasks.Tests.TaskSchedulerTests~2FGetTaskSchedulersForDebugger_ReturnsDefaultScheduler    ```text  Unhandled Exception of Type System.NullReferenceException  Message :  System.NullReferenceException : Object reference not set to an instance of an object.  Stack Trace :     at System.Threading.Tasks.Tests.TaskSchedulerTests.GetTaskSchedulersForDebugger_ReturnsDefaultScheduler() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Threading.Tasks/tests/TaskScheduler/TaskSchedulerTests.cs:line 298  ```    cc @tarekgh, @danmosemsft 
28538	area-Infrastructure	Mega-solution needed	As a newbie to this repo, I find it very difficult to figure out where anything is. And when I do finally find what I need, I then have to try finding out where the test classes are. I'm sure it makes sense once you get it, but I don't get it. Beyond just finding classes, I'd love to able to navigate from project to project using F12 and Shift-F12, to see where the member was defined or what other members access it.    I think a solution that contained all the projects and all the test projects would be immensely beneficial. I couldn't find an issue here on this topic, but I have seen other baffled developers on the forums.    Thoughts?
28537	area-System.Net	ProxyExplicitlyProvided_DefaultCredentials_Ignored failed in CI	https://mc.dot.net/#/user/stephentoub/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/11a515405be4fbf1cfe81c881b2ed702594ed40c/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_DefaultProxyCredentials_Test~2FProxyExplicitlyProvided_DefaultCredentials_Ignored  ```  Windows.10.Amd64.Open-x64-Debug  Unhandled Exception of Type System.Exception  Message :  System.Exception : Unexpected EOF trying to read request header  Stack Trace :     at System.Net.Test.Common.LoopbackServer.Connection.ReadRequestHeaderAsync() in D:\j\workspace\windows-TGrou---74aa877a\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 378     at System.Net.Http.Functional.Tests.HttpClientHandler_DefaultProxyCredentials_Test.<>c__DisplayClass2_1.<<ProxyExplicitlyProvided_DefaultCredentials_Ignored>b__1>d.MoveNext() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.DefaultProxyCredentials.cs:line 74  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.AcceptConnectionAsync(Func`2 funcAsync) in D:\j\workspace\windows-TGrou---74aa877a\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 117     at System.Net.Http.Functional.Tests.HttpClientHandler_DefaultProxyCredentials_Test.<>c__DisplayClass2_0.<<ProxyExplicitlyProvided_DefaultCredentials_Ignored>b__0>d.MoveNext() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.DefaultProxyCredentials.cs:line 66  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in D:\j\workspace\windows-TGrou---74aa877a\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 67     at System.Net.Http.Functional.Tests.HttpClientHandler_DefaultProxyCredentials_Test.ProxyExplicitlyProvided_DefaultCredentials_Ignored() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.DefaultProxyCredentials.cs:line 55  --- End of stack trace from previous location where exception was thrown ---  ```  cc: @wfurt 
28535	area-Infrastructure	Update CoreClr, CoreFx to servicing-26417-01, servicing-26423-01, respectively (release/1.1.0)	
28534	area-Infrastructure	Mirror changes from dotnet/coreclr	This PR contains mirrored changes from dotnet/coreclr   **Please REBASE this PR when merging**
28533	area-Infrastructure	Updating CoreClr dependencies to stable	
28530	area-Serialization	Use DataContractSerializer to serialize Lazy<T> object	"When serialize Lazy<T> object, the output xml is not as expected.               `var value = new Lazy<int>(() => 1);              DataContractSerializer dcs = new DataContractSerializer(typeof(Lazy<int>));              using (MemoryStream ms = new MemoryStream())              {                  Console.WriteLine(value.Value);  //1                  Console.WriteLine(value.IsValueCreated);  //true                  dcs.WriteObject(ms, value);                  ms.Position = 0;                  string actualOutput = new StreamReader(ms).ReadToEnd();                  Console.WriteLine(actualOutput);                  //< LazyOfint xmlns = ""http://schemas.datacontract.org/2004/07/System"" xmlns:i = ""http://www.w3.org/2001/XMLSchema-instance"" />                    ms.Position = 0;                  var deserialized = (Lazy<int>)dcs.ReadObject(ms);                  Console.WriteLine(deserialized.IsValueCreated); //false                  Console.WriteLine(deserialized.Value);  //0                  Console.WriteLine(deserialized.IsValueCreated);  //true                  Console.WriteLine(deserialized.Value);  //0              }`    Tried same code on full framework, got the following exception:     > System.Runtime.Serialization.SerializationException: 'Type 'System.Lazy`1+Boxed[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]' with data contract name 'Lazy.BoxedOfintk9wYX3t0:http://schemas.datacontract.org/2004/07/System' is not expected. Consider using a DataContractResolver if you are using DataContractSerializer or add any types not known statically to the list of known types - for example, by using the KnownTypeAttribute attribute or by adding them to the list of known types passed to the serializer.'  "
28529	area-System.Memory	Fixing naming inconsistency between System.Runtime and System.Memory refs	Related to recent changes - https://github.com/dotnet/corefx/pull/28160    The subset of types from System.Memory ref that are in System.Runtime ref should be identical:  https://github.com/dotnet/corefx/blob/master/src/System.Memory/ref/System.Memory.cs  https://github.com/dotnet/corefx/blob/master/src/System.Runtime/ref/System.Runtime.cs    cc @weshaggard, @KrzysztofCwalina, @stephentoub, @terrajobst, @davidfowl 
28528	area-Infrastructure	[release/2.1] Sync init-tools scripts with what is in source-build	cc @dagood @dseefeld 
28527	area-Infrastructure	Sync init-tools scripts with what is in source-build	cc @dagood @dseefeld 
28526	area-System.Security	Add .NET 4.5 functionality and API to WindowsIdentity	This change exposes the DeviceClaims and UserClaims properties on  WindowsIdentity and WindowsPrincipal which were added in net45.    The existing (uncallable) API for these in .NET Core was missing the Windows 8  token information, so that has been added (with sanity tests) in this change.    Aside for Interop style and detecting Win8 by feature use vs OS version,  this is a simple port from netfx.    Fixes  #27982.  Addresses some of #18073 and #17164
28524	area-System.Memory	Created ReadOnlySequence tests and fixed issues	
28523	area-System.Net	Digest parsing on SocketsHttpHandler is not as robust as on WinHttpHandler	In one of the `WWW-Authenticate` header test cases, unquoted digest parameters are successfully parsed by `WinHttpHandler`, but not by `SocketsHttpHandler`.  The test case was written to expect a `401` response, but failed on WinHttpHandler when the request successfully authenticated.    https://github.com/dotnet/corefx/blob/00547db7233076da50db7b4d6e1a8e7ff1710ed0/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs#L571    The Wireshark traces below demonstrate the issue, with `SocketsHttpHandler` on the left and `WinHttpHandler` on the right.    ![image](https://user-images.githubusercontent.com/4656175/37993307-119053cc-31c3-11e8-930c-4a03d83f715e.png)    This case isn't technically legal as per the spec, since realm and nonce are required to be quoted. I think we should fix it eventually since it is a regression from WinHttpHandler, but I'm not sure how to prioritize it. @karelz do you have any thoughts?
28522	area-System.Net	Digest authentication resubmit differences between WinHttpHandler & SocketsHttpHandler	This behavior difference causes a hang in the HTTP authentication tests. I'll summarize the issue here, with my thoughts at the bottom. I've been wrong about this particular failure before, so I'll try to stick to just the facts :)    In two of the `WWW-Authenticate` header test cases, an invalid `Digest` scheme will cause `WinHttpHandler` to resubmit the original request. `SocketsHttpHandler` will instead close the connection and return the 401 response immediately. The Wireshark traces below demonstrate both cases, with `SocketsHttpHandler` on the left.    Digest with an unsupported algorithm:  ![image](https://user-images.githubusercontent.com/4656175/37983480-7575dd50-31a8-11e8-9850-6a7ae55de978.png)  Digest with no realm or nonce:  ![image](https://user-images.githubusercontent.com/4656175/37983564-a798ffce-31a8-11e8-971b-0df28f1a1baf.png)  The extra newline in the SocketsHttpHandler case is added by wireshark and is not a part of the actual message. Note that I modified the test slightly while getting these screenshots -- I stopped the loopback server from closing the connection immediately after the 401, which was causing a hang in `WinHttpHandler` when it sent the second get request and got no response. The test case is still the same for both handlers.    The re submission happening in WinHttpHandler is primarily caused by WinHttp. We make the following call to query supported auth schemes:  https://github.com/dotnet/corefx/blob/b458c89b34ba2a84858312a487066bdc2ba350e3/src/System.Net.Http.WinHttpHandler/src/System/Net/Http/WinHttpAuthHelper.cs#L90-L95  In both cases WinHttp returns the value `WINHTTP_AUTH_SCHEME_DIGEST`, indicating that digest authentication is the only supported scheme. We then set the credentials, but when the request is sent WinHttp has not included them.    **Opinions below:**  I think that the `SocketsHttpHandler` behavior is correct, and that the `WinHttpHandler` behavior should be considered a (minor) bug. Since we rely on WinHttp to determine what auth schemes are available, I would tentatively call this a WinHttp bug. For the time being, I'd like to modify the test to support both cases. I'd like to hear what others think though.
28521	area-System.Net	WinHttpHandler does not authenticate when unknown parameters are present with basic auth	"The [RFC](https://tools.ietf.org/html/rfc7617#section-2  ) for Basic authentication states that unknown parameters must be ignored:    >No other authentication parameters are defined -- unknown  parameters MUST be ignored by recipients, and new parameters can  only be defined by revising this specification.    There are two cases that test this which are failing on `WinHttpHandler`:  ```csharp  yield return new object[] { ""Basic realm=\""testrealm1\"" basic realm=\""testrealm1\"""", true };  yield return new object[] { ""Basic something digest something"", true };  ```  The above cases look like additional auth schemes, but since they are not comma separated, they are considered additional parameters. On `WinHttpHandler` these headers are rejected, when the extra parameters should really just be ignored.    `WinHttpHandler` is depending on WinHttp to parse the `WWW-Authenticate` header, so I see this as an issue we are unlikely to fix without customer reports. With that in mind I'm moving this to future."
28518	area-System.Runtime	Delete workaround for ComImport types on Unix	Depends on a new CoreCLR build.
28517	area-System.Memory	Add Memory.Pin() to eventually replace Memory.Retain(bool)	Depends on: https://github.com/dotnet/coreclr/pull/17269    cc @KrzysztofCwalina, @jkotas, @davidfowl, @stephentoub, @dotnet/corefxlab-contrib 
28516	area-System.ComponentModel	[NO MERGE] Implement System.ComponentModel.VersionConverter	VersionConverter is a new System.ComponentModel.TypeConverter subclass that handle conversions between string and System.Version.
28515	area-System.Memory	Revert the API Compat changes for UAPAOT.	Last part of https://github.com/dotnet/corefx/issues/27094
28512	area-System.IO	Change Linux buffer size test to force small value.	/cc @sdmaclea @wfurt @stephentoub     It seems that on linux-arm64, per @sdmaclea traces, the buffer size is being created as 1MB. This PR tries to ensure that the test will pass by starting with a smaller value, there is a risk that some systems may have a minimum higher than 4KB, I want to use this PR to validate the various Linux distros, and will correct as needed.
28511	area-System.Collections	Dictionary_ContainsValue_String* regressed 112%	Dictionary_ContainsValue_Int* dropped 42% but the various string ones rose ~100%.    https://benchview/trendline?build_selector=latest&count=2000&aggregate=arithmeticMean&filterTail=one&filterVal=100&interval=INTERVAL_MIN_MAX&rtids=[957]&archids=[23]&mpids=[1292]&cfgids=[2706]&testids=[59909,59910,59911,59939,59915,59916,59918,59917,59928,59929,59930,59900,59901,59902,59894,59895,59896,59903,59904,59905,59940,59941,59942,59912,59913,59914,59891,59892,59893,59925,59926,59927,59936,59937,59938,59932,59922,59923,59924,59933,59934,59935,59931,59919,59920,59921,59906,59907,59908,59897,59898,59899]&jobid=94205&    In this range of changes https://github.com/dotnet/corefx/compare/a2cb15caef95911a0c6a118c62bb447cd65c6563...dotnet:59f6987b7fc919a438060f6c502c3c9cf7c8af29 the following are most likely culprits    02b5689   @benaadams  Improve Dictionary FindEntry CQ  …  c340cd3   @benaadams  Improve Dictionary TryInsert CQ  …  5cad7a5   @benaadams  Use EqualityComparer<TKey>.Default Intrinsic  …  926183e   @benaadams  1-base Dictionary buckets to reduce initalization  …  e12a5ec     ![image](https://user-images.githubusercontent.com/6385855/37981583-ee19013e-31a2-11e8-9c75-8f870e08e095.png)    
28509	area-Infrastructure	Wire up lldb into Unix test run scripts	  Similar to wiring up of GDB in https://github.com/dotnet/buildtools/pull/1948 we want LLDB to be wired up     It's being added to test images in https://github.com/dotnet/core-eng/issues/2998  and it already exists on some machines. You can install it locally on your Linux box to test your change, of course.    LLDB should be scripted to open the dump, do `clrstack -all` and probably `pe -nested` , and quit.    cc @stephentoub @maririos @mikem8361   
28508	area-System.Text	Improve exception handling in RegexParser	Related to https://github.com/dotnet/corefx/issues/27618    Currently RegexParser always throws ArgumentExceptions with a custom text when something's going wrong.  Do differentiate error cases (in tests) and make other uses cases like TryParse or Validate possible we should refactor the current exception handling. I'm thinking about the following options:    a) Introduce a RegexParseException which inherits from ArgumentException to not break existing code that contains an enum status code that tells the parse error code. From this we can then build the existing error messages. This options doesn't support TryParse / Validate scenarios.  b) Return a RegexParseEnum that tells what went wrong. Ultimately this will be wrapped inside an ArgumentException to not break existing code. TryParse / Validate scenarios can either return this enum or return the error message from it.  c) Keep everything as it is and only tests if ArgumentExceptions are thrown during negative tests.    cc @stephentoub @danmosemsft @CyrusNajmabadi
28504	area-System.Security	System.Security.Cryptography.Pkcs '1.2.840.113549.1.1.5' is not a known hash algorithm.	"i'm trying to compute a cms SHA1RSA using the pre release version(4.5.0-preview1-26216-02) of System.Security.Cryptography.Pkcs.    Oid.FromFriendlyName(""SHA1RSA"",OidGroup.SignatureAlgorithm) returns the corect digest algorithem, but upon calling encode, i get the exception that i,m not using any known hash algorithm.    Is there any short term plan to incorporate it?    Encoding snippet:----------  protected byte[] GenerateSignature(byte[] fileContent)          {              CmsSigner signer = new CmsSigner(SubjectIdentifierType.IssuerAndSerialNumber, ClientCert);              SignedCms signedCms = new SignedCms(new ContentInfo(fileContent), false);              signer = new CmsSigner(SubjectIdentifierType.IssuerAndSerialNumber, ClientCert);              signer.DigestAlgorithm = Oid.FromFriendlyName(""SHA1RSA"",OidGroup.SignatureAlgorithm);              signedCms.ComputeSignature(signer, false);              var signature = signedCms.Encode();              return signature;          }"
28502	area-System.Runtime	Build failing with 'CancellationTokenRegistration' does not contain a definition for 'TryDeregister'	From https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1524090    System\Threading\Tasks\AsyncInfoToTaskBridge.CoreCLR.cs(73,29): error CS1061: 'CancellationTokenRegistration' does not contain a definition for 'TryDeregister' and no extension method 'TryDeregister' accepting a first argument of type 'CancellationTokenRegistration' could be found (are you missing a using directive or an assembly reference?) [E:\A\_work\4\s\corefx\src\System.Runtime.WindowsRuntime\src\System.Runtime.WindowsRuntime.csproj]    Looks like it is related to https://github.com/dotnet/corefx/pull/28471    cc @stephentoub, @danmosemsft, @AntonLapounov, @jkotas 
28501	area-System.ComponentModel	EmailAddressAttribute behaves differently in .NET Core vs. NetFx	"It behaves differently for the following Unit Tests and I think both behaviours are not 100% correct:  Just for reference:  https://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.emailaddressattribute(v=vs.110).aspx    ```csharp  public class UnitTest1  {      private static EmailAddressAttribute AddressAttribute = new EmailAddressAttribute();        [Theory]      [InlineData(""test@test.com"", true)]      [InlineData(""test@test.co.uk"", true)]      [InlineData(""test+t@test.co.uk"", true)]      [InlineData(""test"", false)]      [InlineData(""test.com"", false)]      [InlineData(""test@test"", false)]      [InlineData(""test@test."", false)]      public void EmailValidity(string email, bool result)      {          Assert.Equal(result, AddressAttribute.IsValid(email));      }  }  ```  In NetFX 4.7 all tests succeed.  In NetCore 1.0/2.0 the tests for ""test@test"" and ""test@test."" fail.    In #25129 @PeterSmithRedmond said that atleast test@test is a valid email, but as far as i understand the spec test@test.  (notice the dot) is not, the domain part is called dot-atom in the spec https://tools.ietf.org/html/rfc2822#section-3.2.4 and has either no dot or dot and other valid symbols after the dot.    If I'm correct there are bugs in both implementations, in netfx the test for ""test@test"" should fail (because it's a valid address) and in net core the test for ""test@test."" should succeed, because it's not a valid address.    Repro:    [EmailAddressAttributeRepro.zip](https://github.com/dotnet/corefx/files/1850894/EmailAddressAttributeRepro.zip)    Just run it with the different test frameworks."
28499	area-System.Numerics	System.Numerics.Vector4 calculates incorrect in some inlining situations.	Sample Code  ```csharp  using System;  using System.Numerics;  namespace DotNetNumericTest  {      class Program      {          static void Main(string[] args)          {              var rect = new Vector4(10, 20, 100, 30);              var v = Test(rect, new Vector2(100, 100));              Console.WriteLine(v);              Console.ReadLine();          }          public static Vector4 Test(Vector4 v, Vector2 off)          {              v.X += off.X;              v.Y += off.Y;              return v;          }      }  ```  Excepted output: `<110, 120, 100, 30>`  Incorrect output: `<10, 20, 100, 30>` using release build.    After attatching `MethodImplOptions.NoInlining` to the method Test(), it prints right answer.  It seems like the operator '+=' affects the result.    Test on .netcore 2.1.103, windows.
28497	area-System.Diagnostics	Test System.Threading.Threads.Tests.ThreadTests.ApartmentState_AttributePresent failed in CI.	Test System.Threading.Threads.Tests.ThreadTests.ApartmentState_AttributePresent failed.    Details: https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_release/417/testReport/System.Threading.Threads.Tests/ThreadTests/ApartmentState_AttributePresent_AppName____STAMain_exe____mode____GetApartmentState___/    MESSAGE:  Assert.Equal() Failure\nExpected: 2\nActual: 32899  +++++++++++++++++++  STACK TRACE:  at System.Threading.Threads.Tests.ThreadTests.ApartmentState_AttributePresent(String AppName, String mode) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_release/src/System.Threading.Thread/tests/ThreadTests.cs:line 169
28496	area-System.Text	Test System.Text.RegularExpressions.Tests.RegexGroupTests failed in CI.	Test System.Text.RegularExpressions.Tests.RegexGroupTests failed.  details:  https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_release/417/testReport/System.Text.RegularExpressions.Tests/RegexGroupTests/GroupsBasic/    MESSAGE:  Exit code was 32899 but it should have been 42\nExpected: True\nActual: False  +++++++++++++++++++  STACK TRACE:  at System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Dispose(Boolean disposing) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_release/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 252        
28495	area-Infrastructure	[no merge] Just testing CI	
28494	area-System.Net	Add test for SocketsHttpHandler Brotli response	SocketsHttpHandler doesn't currently automatically decode Brotli responses, but add tests to validate we can at least do so manually.    cc: @ianhays, @joshfree, @geoffkizer 
28492	area-System.IO	Unexpected behavior with canceled CancellationToken passed to PipeWriter.FlushAsync	"The program below never terminates. It's passing a canceled CancellationToken in to `FlushAsync`, catching the exception, and then completing the pipe. However, the `ReadAsync` call on the other end is never completed. If you comment out the cancellation, the pipe is completed properly and the `ReadAsync` completes. I wouldn't have expected the pipe to be un-completable after cancelling an action on it.    cc @pakrym @davidfowl     ```csharp  using System;  using System.IO.Pipelines;  using System.Threading;  using System.Threading.Tasks;    namespace PipeCancelFlushBlug  {      class Program      {          static void Main(string[] args)          {              var pipe = new Pipe();                var receiver = Receiver(pipe.Reader);              var sender = Sender(pipe.Writer);                Task.WaitAll(sender, receiver);          }            private static async Task Sender(PipeWriter pipeWriter)          {              var cts = new CancellationTokenSource();              cts.Cancel(); // Comment this line out to fix everything.              try              {                  Console.WriteLine(""Flushing"");                  await pipeWriter.FlushAsync(cts.Token);              }              catch (OperationCanceledException)              {                  Console.WriteLine(""Flush Cancelled"");              }              finally              {                  Console.WriteLine(""Completing pipe"");                  pipeWriter.Complete();                  Console.WriteLine(""Completed pipe"");              }          }            private static async Task Receiver(PipeReader pipeReader)          {              Console.WriteLine(""Reading..."");              var result = await pipeReader.ReadAsync();              Console.WriteLine(""Receiver complete"");          }      }  }  ```    cc @davidfowl @pakrym     ### Versions:  * `System.IO.Pipelines`: 4.5.0-preview2-26313-01  * SDK: 2.1.300-preview2-008367  * .NET Core Runtime: 2.1.0-preview2-26313-01 (I realize these versions are exactly aligned"
28491	area-System.ComponentModel	DataAnnotation exposes readonly Dictionary on ValidationContext	"https://github.com/dotnet/corefx/blob/2242e106f7695578ccaa1dcc35e438a14f9be1f1/src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/ValidationContext.cs#L32    `ValidationContext` exposes the readonly dictionary as `IDictionary Items`. Should this property be changed from `IDictionary` to `IReadOnlyDictionary`?    https://github.com/dotnet/corefx/blob/2242e106f7695578ccaa1dcc35e438a14f9be1f1/src/System.ComponentModel.Annotations/tests/ValidationContextTests.cs#L54-L66    The above test will fail at L63 if the following code is added between L61 and L62.                validationContext.Items.Add(""testKey3"", ""testValue3"");  "
28490	area-System.Diagnostics	Increasing AllowedWindow time	This Process test would sometimes fail on RedHat7.3 by getting slightly out of the allowed window time.  So I am increasing 1s to 3s to make sure it passes all the time.    Fixes #28479    cc: @danmosemsft @joperezr 
28488	area-System.Net	httpclient requests to dns address that resolves to self causes authentication error	Scenario:    I am using httpclient to send log events that are generated in website A to website B.  both website A and B are using net core 2.0.6 and on the SAME IIS instance.  When sending https requests from website A to website B using defaultcredentials the client FAILS to authenticate. I have windows authentication enabled and verified that its working.    If I change one of the websites to be on a different iis instance, the authentication works and the request succeeds.
28486	area-System.Net	Uri.LocalPath in Unix when path contains '#'	"During #28475 2 failures on Unix were detected:     ```       System.Xml.Tests.XmlUriResolverTests.Resolving_LocalPath_Ok(baseUri: file:///home/pc/s/corefx/bin/tests/System.Xml.Misc.Tests/netcoreapp-Linux-Debug-x64/, path: \""/f#/t/ë/t#st.xml\"") [FAIL]          Assert.Equal() Failure                      ↓ (pos 2)          Expected: /f#/t/ë/t#st.xml          Actual:   /f                      ↑ (pos 2)          Stack Trace:             /home/pc/s/corefx/src/System.Private.Xml/tests/Misc/XmlUrlResolverTests.cs(29,0): at System.Xml.Tests.XmlUriResolverTests.Resolving_LocalPath_Ok(Uri baseUri, String path)       System.Xml.Tests.XmlUriResolverTests.Resolving_LocalPath_Ok(baseUri: file:///home/pc/s/corefx/bin/tests/System.Xml.Misc.Tests/netcoreapp-Linux-Debug-x64/, path: \""/f#/ã/ë/tëst.xml\"") [FAIL]          Assert.Equal() Failure                      ↓ (pos 2)          Expected: /f#/ã/ë/tëst.xml          Actual:   /f                      ↑ (pos 2)          Stack Trace:             /home/pc/s/corefx/src/System.Private.Xml/tests/Misc/XmlUrlResolverTests.cs(29,0): at System.Xml.Tests.XmlUriResolverTests.Resolving_LocalPath_Ok(Uri baseUri, String path)    Finished:    System.Xml.Misc.Tests  ```    See https://github.com/dotnet/corefx/pull/28475/files#r177095732 for more info"
28485	area-System.Net	[Regression] System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_SslProtocols_Test / GetAsync_UnsupportedSSLVersion_Throws	## Failure type    ### GetAsync_UnsupportedSSLVersion_Throws - The operation was canceled    ```  Assert.Throws() Failure      Expected: typeof(System.Net.Http.HttpRequestException)      Actual:   typeof(System.OperationCanceledException): The operation was canceled.  at   System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore(Stream stream,   SslClientAuthenticationOptions sslOptions, CancellationToken   cancellationToken) in E:\A\_work\36\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ConnectHelper.cs:line   154  at   System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage   request, CancellationToken cancellationToken) in E:\A\_work\36\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line   348  at   System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1   creationTask) in E:\A\_work\36\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line   467  at   System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage   request, Boolean doRequestAuth, CancellationToken cancellationToken) in   E:\A\_work\36\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line   258  at   System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request,   CancellationToken cancellationToken) in   E:\A\_work\36\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\RedirectHandler.cs:line   30  at   System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask,   HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)   in   E:\A\_work\36\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line   479  at System.Net.Test.Common.RemoteServerQuery.Run[TResult](Func`1   testCode, Func`2 remoteExceptionWrapper, String serverName)  ```    ## Failure history    Day | Build | OS | Details  -- | -- | -- | --  3/1 | 20180301.04 | Win10 | 2x  3/2 | 20180302.04 | Win10 |  3/3 | 20180303.03 | Win10 | 2x  3/4 | 20180303.04 | Win10 |  3/11 | 20180311.02 | Win10 |  3/12 | 20180312.02 | Win10 | 2x  3/15 | 20180315.04 | Win10 | 2x  3/23 | 20180323.01 | Win10 |  
28483	area-System.ComponentModel	Using System.ComponentModel.Composition vs. System.Composition to get exports	"Adding test shows getting exports on interface with complex ""where"" clause:   `IResponder<T,U> where T: U {}`   works properly when using System.ComponentModel.Composition.    System.Composition seems to have regressed behavior since 1.0.31 and as of PR submission #10219 which fixes a TypeLoadException.    Related to #23607   cc: @weshaggard @ViktorHofer "
28482	area-System.Net	Test failure: System.Net.Sockets.Tests.ExecutionContextFlowTest / ExecutionContext_FlowsOnlyOnceAcrossAsyncOperations 	Seen in https://github.com/dotnet/corefx/pull/28225#issuecomment-376299061   Fedora.26.Amd64.Open-x64-Debug  ```  System.Net.Sockets.Tests   System.Net.Sockets.Tests.ExecutionContextFlowTest/    ExecutionContext_FlowsOnlyOnceAcrossAsyncOperations    ```  ```  Assert.InRange() Failure  Range:  (1 - 60)  Actual: 117  ```  ```    at System.Net.Sockets.Tests.ExecutionContextFlowTest.<>c.<<ExecutionContext_FlowsOnlyOnceAcrossAsyncOperations>b__11_0>d.MoveNext() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Sockets/tests/FunctionalTests/ExecutionContextFlowTest.netcoreapp.cs:line 47  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ```  /cc @stephentoub     ## History of failures    Day | Build | OS | Details  -- | -- | -- | --  3/14 | 20180314.05 | Centos.74 | Actual: 99  3/26 | ? | Fedora.26 | https://github.com/dotnet/corefx/pull/28225#issuecomment-376299061  - Actual: 117
28481	area-System.Net	Enable CloseAsync_Cancel_Success test	Have run the test locally and in CI many times, no failure. Enable the test.    Closes: #27211   
28480	area-System.Net	Add test to visit sites with SocketsHttpHandler	Adds a small test to visit a list of sites using SocketsHttpHandler and allow easy debugging and comparison with platform handlers in case one needs to investigate. The tests are disabled by default and are controlled by Xunit traits.    Closes #27792 
28479	area-System.Diagnostics	Test failure: System.Diagnostics.Tests.ProcessTests/TestProcessStartTime	Opened on behalf of @danmosemsft    The test `System.Diagnostics.Tests.ProcessTests/TestProcessStartTime` has failed.    Assert.InRange() Failure\r      Range:  (3/26/18 12:54:34 PM - 3/26/18 12:54:36 PM)\r      Actual: 3/26/18 12:54:34 PM            Stack Trace:               at System.Diagnostics.Tests.ProcessTests.TestProcessStartTime() in /root/corefx-1520178/src/System.Diagnostics.Process/tests/ProcessTests.cs:line 716  Build : Master - 20180326.03 (Core Tests)  Failing configurations:  - RedHat.73.Amd64-x64    - Release      This used to be 3 seconds, Could you please bump it up again. It looks like we were <500msec too low.    ```c#          [Fact]          public void TestProcessStartTime()          {              TimeSpan allowedWindow = TimeSpan.FromSeconds(1);  ```
28477	area-Infrastructure	Archive generated performance files for investigation.	Performance runs have not been archiving their logs, which made impossible review generated lab results.  These changes sets the days to keep the archive to 30 days, and the number of artifacts to 200 (currently set to the same defaults than the coreclr repo, and we can adjust as needed).  
28475	area-System.Xml	Add a test to prevent regression when XmlUriResolver uses Uri.LocalPath	Fixes #25820    There is small logic in XmlUriResolver so this is more of an indirect test of Uri.LocalPath, anyway, users seem to find issues via Xml usage so adding this test in an attempt to prevent regressions in this regard.
28472	area-System.Linq	Check for IReadOnlyCollection	... as well as ICollection, to avoid IEnumerator loop.
28469	area-System.Net	Add readonly to s_gzipHeaderValue and s_deflateHeaderValue	Add readonly to s_gzipHeaderValue and s_deflateHeaderValue
28468	area-System.IO	Test failure: System.IO.Tests.DirectoryInfo_GetFiles_str/SearchPatternWithTrailingStar	"Opened on behalf of @Sunny-pu  The test `System.IO.Tests.DirectoryInfo_GetFiles_str/SearchPatternWithTrailingStar` has failed.  Assert.Contains() Failure     Not found: /tmp/DirectoryInfo_GetFiles_str_zl3nq3px.5uf/SearchPatternWithTrailingStar_75_30e9b6fc/Test1Dir2     In value:  String[] [\""/tmp/DirectoryInfo_GetFiles_str_zl3nq3px.5uf/Searc\""...]          Stack Trace:             at System.IO.Tests.Directory_GetFileSystemEntries_str_str.SearchPatternWithTrailingStar() in /Users/buildagent/agent/_work/433/s/corefx/src/System.IO.FileSystem/tests/Directory/GetFileSystemEntries_str_str.cs:line 85 Build : Master - 20180326.02 (Core Tests) Failing configurations: - OSX.1012.Amd64-x64   - Release  Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180326.02/workItem/System.IO.FileSystem.Tests/analysis/xunit/System.IO.Tests.DirectoryInfo_GetFiles_str~2FSearchPatternWithTrailingStar"
28466	area-System.IO	[Desktop] FileStream.ReadAsync() fails with System.IO.IOException: The media is write protected.	This occurs sporadically when copying files from an SD card whose write protect tab is not engaged. The FileStream is the only handle opened on the file and is created using        new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.Read, 1024 * 1024, FileOptions.Asynchronous | FileOptions.SequentialScan)    .NET 4.7.1, Windows 10 Fall Creators Update, Lenovo T440s built in Realtek PCI-E SD card reader with driver version 10.0.10125.21277. Some investigation shows the SD card is mounted read only in these cases, which is not expected and may signal an issue in Realtek's driver, but this doesn't explain why operations on a read only handle are failing because write permission is unavailable. There is a second concurrent task writing the data read to another file on an SSD but, for both tasks, the FileStreams are local.        new FileStream(filePath, FileMode.Create, FileAccess.Write, FileShare.None, 1024 * 1024, FileOptions.Asynchronous | FileOptions.SequentialScan | FileOptions.WriteThrough);    The underlying native API is [SetFilePointerEx()](https://msdn.microsoft.com/en-us/library/windows/desktop/aa365542.aspx). Since the two handles in use are distinct and used single threaded I don't see any obvious races in code review. It's possible the issue may be in native code under .NET and therefore external, but filing this for a look anyway.    Workaround: Copy files manually using FileExplorer. This issue also fails to reproduce with File.Copy().        System.IO.IOException: The media is write protected.      at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)      at System.IO.FileStream.SeekCore(Int64 offset, SeekOrigin origin)      at System.IO.FileStream.BeginReadCore(Byte[] bytes, Int32 offset, Int32 numBytes, AsyncCallback userCallback, Object stateObject, Int32 numBufferedBytesRead)      at System.IO.FileStream.BeginReadAsync(Byte[] array, Int32 offset, Int32 numBytes, AsyncCallback userCallback, Object stateObject)      at System.IO.FileStream.ReadAsync(Byte[] buffer, Int32 offset, Int32 count, CancellationToken cancellationToken)      at System.IO.Stream.ReadAsync(Byte[] buffer, Int32 offset, Int32 count)      at CritterShell.Images.FileCopy.<>c__DisplayClass7_0.<<StreamAsync>b__0>d.MoveNext()      --- End of stack trace from previous location where exception was thrown ---      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)      at CritterShell.Images.FileCopy.<StreamAsync>d__7.MoveNext()      --- End of stack trace from previous location where exception was thrown ---      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)      at CritterShell.CopyCameraFiles.<>c__DisplayClass26_0.<ProcessRecord>b__1(String inputSubdirectoryPath, ParallelLoopState loopState)      at System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1()      at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask)      at System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object )      --- End of inner exception stack trace ---      at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)      at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)      at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)      at System.Threading.Tasks.Parallel.ForEachWorker[TSource,TLocal](IEnumerable`1 source, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Action`3 bodyWithStateAndIndex, Func`4 bodyWithStateAndLocal, Func`5 bodyWithEverything, Func`1 localInit, Action`1 localFinally)      at System.Threading.Tasks.Parallel.ForEach[TSource](IEnumerable`1 source, ParallelOptions parallelOptions, Action`2 body)      at CritterShell.CopyCameraFiles.<>c__DisplayClass26_0.<ProcessRecord>b__0()      at System.Threading.Tasks.Task.Execute()      ---> (Inner Exception #0) System.IO.IOException: The media is write protected.        at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)      at System.IO.FileStream.SeekCore(Int64 offset, SeekOrigin origin)      at System.IO.FileStream.BeginReadCore(Byte[] bytes, Int32 offset, Int32 numBytes, AsyncCallback userCallback, Object stateObject, Int32 numBufferedBytesRead)      at System.IO.FileStream.BeginReadAsync(Byte[] array, Int32 offset, Int32 numBytes, AsyncCallback userCallback, Object stateObject)      at System.IO.FileStream.ReadAsync(Byte[] buffer, Int32 offset, Int32 count, CancellationToken cancellationToken)      at System.IO.Stream.ReadAsync(Byte[] buffer, Int32 offset, Int32 count)      at CritterShell.Images.FileCopy.<>c__DisplayClass7_0.<<StreamAsync>b__0>d.MoveNext()      --- End of stack trace from previous location where exception was thrown ---      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)      at CritterShell.Images.FileCopy.<StreamAsync>d__7.MoveNext()      --- End of stack trace from previous location where exception was thrown ---      at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)      at CritterShell.CopyCameraFiles.<>c__DisplayClass26_0.<ProcessRecord>b__1(String inputSubdirectoryPath, ParallelLoopState loopState)
28465	area-System.Collections	Improve test coverage over List.AddRange and List.InsertRange	Resolves #13970. I really wanted to wait for #23588 to be resolved so this can be verified more easily, but it is unclear when that will be done.    cc: @karelz @danmosemsft 
28464	area-System.Memory	Vectorize {RO}Span.IndexOf for T = char, similar to T = byte.	See https://github.com/aspnet/Common/pull/324#issuecomment-375997102    cc @gfoidl, @jkotas, @benaadams, @AndyAyersMS, @davidfowl, @AtsushiKan, @eerhardt 
28460	area-System.Memory	Update uses of AsBytes to use MemoryMarshal.AsBytes	Part of https://github.com/dotnet/corefx/issues/27094    Related PR: https://github.com/dotnet/corefx/pull/28296
28457	area-System.Numerics	System.Numerics.Vectors missing intrinsics	There are 100s of Vector<T> commands that would map to a single AVX or SSE instruction that are not present in System.Numerics.Vector. Also there are no Vertical Operators except Dot and BiggerThanAll.  Here are all:  https://software.intel.com/sites/landingpage/IntrinsicsGuide/#    Would help performance if some Vertical Operators would be supported. Like Max, Min, Sum,  ```  public static float Vector<float> Max()  public static float Vector<float> Min()  public static float Vector<float> Sum()    //Max:  movhlps xmm1,xmm0         ; Move top two floats to lower part of xmm1  maxps   xmm0,xmm1         ; Get maximum of the two sets of floats  pshufd  xmm1,xmm0,$55     ; Move second float to lower part of xmm1  maxps   xmm0,xmm1         ; Get minimum of the two remaining floats  ```  Vector could also be a special type in C# like Span<T> to support 0 copy operations and casts.
28454	area-System.Security	ClaimTypes.Sid has a different behaviour than the other ClaimTypes	"Hi,    I m using the namespace System.Security.Claims to generate a new JWT     ```   var tokenDescriptor = new SecurityTokenDescriptor              {                  Issuer = authSettings.Issuer,                  Audience = authSettings.Audience,                  NotBefore = DateTime.UtcNow,                  IssuedAt = DateTime.UtcNow,                  Subject = new ClaimsIdentity(new Claim[]                  {                      new Claim(ClaimTypes.Sid, user.Id.ToString()),                      new Claim(ClaimTypes.GivenName, user.Firstname),                      new Claim(ClaimTypes.Surname, user.Lastname),                      new Claim(ClaimTypes.Email, user.Email),                      new Claim(ClaimTypes.Role, role.Name),                  }),                  Expires = token.ExpirationDate,                  SigningCredentials = GenerateSigningCredentials(authSettings.SecretKey)              };  ```    When I decode the JWT (for exemple on https://jwt.io/) I can see:    ```  {    **""http://schemas.xmlsoap.org/ws/2005/05/identity/claims/sid""**: ""37cf7320-5669-4dbb-767f-08d58ddd8d0b"",    ""given_name"": ""XX"",    ""family_name"": ""XX"",    ""email"": ""XX@XX.com"",    ""role"": ""XX"",    ""nbf"": 1521957359,    ""exp"": 1522562150,    ""iat"": 1521957359,    ""iss"": ""XX"",    ""aud"": ""http://localhost:9334/""  }    ```    Is there a specific reason to encode *http://schemas.xmlsoap.org/ws/2005/05/identity/claims/sid* in the JWT instead of *sid*?  In my opinion, the behaviour must the same for all the ClaimsType.    Can you fix that?    "
28450	area-System.Collections	ConcurrentStack  PushRange idea	[ConcurrentStack](https://github.com/dotnet/corefx/blob/master/src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs) has a `PushRange` method that takes in an array/set of items.  ```c#  public void PushRange(T[] items);  public void PushRange(T[] items, int startIndex, int count);  ```    `PushRange` has a very useful optimization in that it creates a pre-made linked list, then attaches the tale to the current head, which makes it very efficient at adding the entire set **with a single successful CAS**(compare and swap). I think limiting `PushRange` to only arrays may encourage bad usage or force the user to using arrays.    I was wondering about some other signatures that could help facilitate the bulk adding of items without having to work with arrays or calling 'ToArray' on your favorite set object.    ```c#  public void PushRange(T[] items);  public void PushRange(T[] items, int startIndex, int count);    public void PushRange(IList<T> items);  public void PushRange(IList<T> items, int startIndex, int count);    public void PushRange(IEnumerable<T> items);  ```    I get this feeling that people are just doing, because it's easy enough  ```c#  foreach(var i in items)   stack.Push(i);  ```  in lieu of a bulk push method for other set types. But this will result in many more CAS operations, increasing contention.    fyi, T[] implements IList<T>, so you could just redirect `PushRange(T[] items...)` to `PushRange(IList<T> items...)`
28448	area-System.Net	NamedPipeServerStream.EndWaitForConnection throws SocketException on x86/Linux	I've been running the same code one multiple platforms (amd64/Win 10, amd64/Debian 9, arm64/Rasbian, and x86/Debian 9). In every case making a call to NamedPipeServerStream.Dispose will cause EndWaitForConnection to throw ObjectDisposedException. However when I move the same dll to x86/Debian 9 it throws System.Net.Sockets.SocketException.    Unexpected exception in background thread caused a crash.    > Unhandled Exception: System.Net.Sockets.SocketException: Operation canceled  >    at System.IO.Pipes.NamedPipeServerStream.<<WaitForConnectionAsync>g__WaitForConnectionAsyncCore|23_0>d.MoveNext() in /home/nick/Documents/builds/branches/corefx/src/System.IO.Pipes/src/System/IO/Pipes/NamedPipeServerStream.Unix.cs:line 80  >    at System.Threading.Tasks.TaskToApm.End(IAsyncResult asyncResult) in /home/nick/Documents/builds/branches/corefx/src/Common/src/System/Threading/Tasks/TaskToApm.cs:line 87  >    at System.IO.Pipes.NamedPipeServerStream.EndWaitForConnection(IAsyncResult asyncResult) in /home/nick/Documents/builds/branches/corefx/src/System.IO.Pipes/src/System/IO/Pipes/NamedPipeServerStream.cs:line 155    I built from the v2.1-preview1 branch for x86/Linux using the process outlined here.  https://github.com/liserdarts/dotnetcore-build-x86-Linux  
28447	area-System.Threading	Dequeue growth method optimizations	The [Grow()](https://github.com/dotnet/corefx/blob/master/src/System.Threading.Channels/src/System/Collections/Generic/Dequeue.cs#L94) method some peculiarities that could potentially help with reading or optimizations.    First off `Debug.Assert(_size == _array.Length);` guarantees that these two values are synonymous. Instead of a mix and match of using `_array.Length` in some areas and `_size` in others, just use `_size`.    Another is this part  ```c#  const int MinimumGrow = 4;    int capacity = (int)(_array.Length * 2L);  if (capacity < _array.Length + MinimumGrow)  {   capacity = _array.Length + MinimumGrow;  }    T[] newArray = new T[capacity];  ```  `_array` starts off as an empty array `private T[] _array = Array.Empty<T>();`. This means it is a length of zero. The only time `if (capacity < _array.Length + MinimumGrow)` will ever be true is when the array is empty or 0. If I incorporate the first idea along with this one, it could be re-written as this:    ```c#  const int MinimumGrow = 4;    int capacity = _size == 0 ? MinimumGrow : _size * 2;    T[] newArray = new T[capacity];  ```  or if you want to assume the typical condition to be `true`  ```c#  const int MinimumGrow = 4;    int capacity = _size > 0 ? _size * 2: MinimumGrow ;    T[] newArray = new T[capacity];  ```
28445	area-System.Net	ManagedWebSocket implementation doesn't efficiently support reading when small buffer size used	The end to end scenario is to allocate as little memory as possible for idle websockets since it's possible to have more concurrent websockets if we don't burn memory if there's no data (http://goroutines.com/10m). Today, the websocket implementation has an internal buffer that can be controlled during creation of the websocket. This buffer can be 14 bytes minimally (size of the largest websocket header) so specifying a buffer of that size would be ideal.     The plan is to do it at both layers. Using libuv this is already the case and we're now trying to add it to the socket transport https://github.com/aspnet/KestrelHttpServer/pull/2393. SignalR also has to do it at the websocket layer https://github.com/aspnet/SignalR/pull/1603. The chain looks like this:    ```  WebSocket.ReceiveAsync(0)     HttpUpgradeStream.ReceiveAsync(14) // This is the internal buffer for the websocket header         RequestBodyPipeReader.ReadAsync()  // This is waiting on data to be written to the transport input            Transport.Input.ReadAsync()   // This is waiting on data to be read out of the socket.                socket.ReceiveAsync(0)  ```      Turns out there's an issue with the existing implementation where it tries to read up the internal buffer size per read size regardless of the buffer that was passed into ReceiveAsync:    https://github.com/dotnet/corefx/blob/23165cee77ae4dd7a7645b7927872948bb27a73e/src/Common/src/System/Net/WebSockets/ManagedWebSocket.cs#L696-L702    This means we'll get data in 14 byte chunks even if we pass a 4K buffer in to fill.    /cc @stephentoub @BrennanConroy 
28442	area-System.Threading	Fix some monitor tests, add one for lock wait paths	- The monitor tests were not running because it was not a public class, fixed  - Fixed some tests, for instance some argument exceptions could be improved to include parameter name (this issue exists elsewhere too), for now I have just changed the tests to reflect current coreclr/desktop behavior  - Added a test to hit spinning/waiting paths for thin lock and aware lock
28439	area-Serialization	Sgen parameter conversion change: replace colon with space in arguments	#26902  @huanwu @zhenlan @mconnew    See #27332 for more information.
28438	area-System.Text	[Arm64] System.Text.Tests.EncodingTest.TestRoundtrippingSpecificCodepageEncoding fails	"```  xUnit.net console test runner (64-bit .NET Core)  Copyright (C) 2014 Outercurve Foundation.    Discovering: System.Text.Encoding.CodePages.Tests  Discovered:  System.Text.Encoding.CodePages.Tests  Starting:    System.Text.Encoding.CodePages.Tests     System.Text.Tests.EncodingTest.TestRoundtrippingSpecificCodepageEncoding(encodingName: \""GB18030\"", bytes: [129, 48, 137, 55, 129, ...], expected: \""Þßàáâã\"") [FAIL]        Assert.Equal() Failure        Expected: Byte[] [129, 48, 137, 55, 129, ...]        Actual:   Byte[] [129, 48, 137, 55, 129, ...]        Stack Trace:           /home/vmjenkins/workspace/Dotnet/build_corefx/src/System.Text.Encoding.CodePages/tests/EncodingCodePages.cs(535,0): at System.Text.Tests.EncodingTest.TestRoundtrippingSpecificCodepageEncoding(String encodingName, Byte[] bytes, String expected)  Finished:    System.Text.Encoding.CodePages.Tests    === TEST EXECUTION SUMMARY ===     System.Text.Encoding.CodePages.Tests  Total: 740, Errors: 0, Failed: 1, Skipped: 0, Time: 5.775s  ```"
28437	area-System.Net	System.Net.Tests.HttpWebRequestTest.KeepAlive_CorrectConnectionHeaderSent	"Looks like should be marked Conditional on `LocalServerAvailable`      ```  xUnit.net console test runner (64-bit .NET Core)  Copyright (C) 2014 Outercurve Foundation.    Discovering: System.Net.Requests.Tests  Discovered:  System.Net.Requests.Tests  Starting:    System.Net.Requests.Tests     System.Net.Tests.FtpWebRequestTest.Ftp_RenameFileSubDir_Success [SKIP]        Condition(s) not met: \""LocalServerAvailable\""     System.Net.Tests.FtpWebRequestTest.Ftp_LargeFile [SKIP]        Condition(s) not met: \""LocalServerAvailable\""     System.Net.Tests.FtpWebRequestTest.Ftp_CreateAndDelete [SKIP]        Condition(s) not met: \""LocalServerAvailable\""     System.Net.Tests.FtpWebRequestTest.Ftp_RenameFile [SKIP]        Condition(s) not met: \""LocalServerAvailable\""     System.Net.Tests.FtpWebRequestTest.Ftp_MakeAndRemoveDir_Success [SKIP]        Condition(s) not met: \""LocalServerAvailable\""     System.Net.Tests.FtpWebRequestTest.Ftp_AppendFile [SKIP]        Condition(s) not met: \""LocalServerAvailable\""     System.Net.Tests.HttpWebRequestTest.KeepAlive_CorrectConnectionHeaderSent(keepAlive: False) [FAIL]        Assert.Contains() Failure        Not found: ""Connection"": ""close""        In value:  {""Method"":""GET"",""Url"":""/Echo.ashx"",""Headers"": {            ""Connection"": ""Keep-Alive"",            ""Via"": ""1.1 10.38.1.212 (McAfee Web Gateway 7.6.2.8.0.22994)"",            ""Host"": ""corefx-net.cloudapp.net"",            ""X-Forwarded-For"": ""10.228.198.226""          },          ""Cookies"": {},          ""BodyContent"": """",          ""BodyLength"": 0,          ""SecureConnection"": false,          ""ClientCertificatePresent"": false,          ""ClientCertificate"": null        }        Stack Trace:           /home/vmjenkins/workspace/Dotnet/build_corefx/src/System.Net.Requests/tests/HttpWebRequestTest.cs(457,0): at System.Net.Tests.HttpWebRequestTest.KeepAlive_CorrectConnectionHeaderSent(Nullable`1 keepAlive)  Finished:    System.Net.Requests.Tests  ```"
28436	area-System.IO	System.IO.Pipes.TestsAnonymousPipeTest_Specific.Linux_BufferSizeRoundtrips needs elevated priviledges to pass	```  xUnit.net console test runner (64-bit .NET Core)  Copyright (C) 2014 Outercurve Foundation.    Discovering: System.IO.Pipes.Tests  Discovered:  System.IO.Pipes.Tests  Starting:    System.IO.Pipes.Tests     System.IO.Pipes.Tests.AnonymousPipeTest_Specific.Linux_BufferSizeRoundtrips [FAIL]        System.UnauthorizedAccessException : Access to the path is denied.        ---- System.IO.IOException : Operation not permitted        Stack Trace:           /home/vmjenkins/workspace/Dotnet/build_corefx/src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.Unix.cs(435,0): at System.IO.Pipes.PipeStream.CheckPipeCall(Int32 result)           /home/vmjenkins/workspace/Dotnet/build_corefx/src/System.IO.Pipes/src/System/IO/Pipes/AnonymousPipeServerStream.Unix.cs(31,0): at System.IO.Pipes.AnonymousPipeServerStream.Create(PipeDirection direction, HandleInheritability inheritability, Int32 bufferSize)           /home/vmjenkins/workspace/Dotnet/build_corefx/src/System.IO.Pipes/tests/AnonymousPipeTests/AnonymousPipeTest.Specific.cs(96,0): at System.IO.Pipes.Tests.AnonymousPipeTest_Specific.Linux_BufferSizeRoundtrips()           ----- Inner Stack Trace -----             Finished:    System.IO.Pipes.Tests    === TEST EXECUTION SUMMARY ===     System.IO.Pipes.Tests  Total: 505, Errors: 0, Failed: 1, Skipped: 0, Time: 20.753s  ```    Passes if run as sudo.    @jkotas 
28435	area-System.Globalization	[Arm64] System.Globalization.Tests.InvariantModeTests 79 tests are failing	"```  xUnit.net console test runner (64-bit .NET Core)  Copyright (C) 2014 Outercurve Foundation.    Discovering: Invariant.Tests  Discovered:  Invariant.Tests  Starting:    Invariant.Tests  ```  7 x  ```     System.Globalization.Tests.InvariantModeTests.TestIndexOf(source: \""Hi\"", value: \""I\"", startIndex: 0, count: 2, options: IgnoreCase, result: 1) [FAIL]        Assert.Equal() Failure        Expected: 1        Actual:   -1        Stack Trace:           /home/vmjenkins/workspace/Dotnet/build_corefx/src/System.Globalization/tests/Invariant/InvariantMode.cs(656,0): at System.Globalization.Tests.InvariantModeTests.TestIndexOf(String source, String value, Int32 startIndex, Int32 count, CompareOptions options, Int32   result)  ```  1x  ```     System.Globalization.Tests.InvariantModeTests.TestEnum [FAIL]        Assert.Equal() Failure        Expected: CultureInfo[] []        Actual:   CultureInfo[] [, af, af-NA, af-ZA, agq, ...]  ```  5x  ```     System.Globalization.Tests.InvariantModeTests.TestCultureData(cultureName: \""en-US\"") [FAIL]        Assert.Equal() Failure                   ↓ (pos 1)        Expected: AD        Actual:   A                   ↑ (pos 1)        Stack Trace:           /home/vmjenkins/workspace/Dotnet/build_corefx/src/System.Globalization/tests/Invariant/InvariantMode.cs(492,0): at System.Globalization.Tests.InvariantModeTests.TestCultureData(String cultureName)  ```  5x  ```     System.Globalization.Tests.InvariantModeTests.TestSortVersion(cultureName: \""en-US\"") [FAIL]        Assert.Equal() Failure        Expected: SortVersion { FullVersion = 0, SortId = 00000000-0000-0000-0000-00000000007f }        Actual:   SortVersion { FullVersion = 14489, SortId = 00003899-0000-0000-0000-000000000409 }  ```  8x  ```     System.Globalization.Tests.InvariantModeTests.TestNormalization(s: \""ﬁ\"", form: FormKC) [FAIL]        Assert.True() Failure        Expected: True        Actual:   False        Stack Trace:           /home/vmjenkins/workspace/Dotnet/build_corefx/src/System.Globalization/tests/Invariant/InvariantMode.cs(753,0): at System.Globalization.Tests.InvariantModeTests.TestNormalization(String s, NormalizationForm form)  ```  5x  ```     System.Globalization.Tests.InvariantModeTests.TestToLower(upper: \""THIS IS A LONGER TEST CASE\"", lower: \""this is a longer test case\"", result: True) [FAIL]        Assert.Equal() Failure        Expected: True        Actual:   False        Stack Trace:           /home/vmjenkins/workspace/Dotnet/build_corefx/src/System.Globalization/tests/Invariant/InvariantMode.cs(719,0): at System.Globalization.Tests.InvariantModeTests.TestToLower(String upper, String lower, Boolean result)  ```  5x  ```     System.Globalization.Tests.InvariantModeTests.TestToUpper(lower: \""this is a longer test case\"", upper: \""THIS IS A LONGER TEST CASE\"", result: True) [FAIL]        Assert.Equal() Failure        Expected: True        Actual:   False        Stack Trace:           /home/vmjenkins/workspace/Dotnet/build_corefx/src/System.Globalization/tests/Invariant/InvariantMode.cs(730,0): at System.Globalization.Tests.InvariantModeTests.TestToUpper(String lower, String upper, Boolean result)  ```  ..."
28434	area-System.Data	Fix SQL Server version-related failures in manual SqlCredentialTest.	"1. Fixed failures due to drop user commands, since the ""DROP _ IF EXISTS"" syntax is only supported starting in SQL Server 2016.  2. Set CHECK_POLICY to off for created test logins, since a minimum password age policy can cause test failures when trying to change the test user's password."
28433	area-System.Numerics	System.Numerics.Vectors and Span<T>	Please think about implementing this operator:  Vector3.CopyTo(Span<T> span)    Since the span can be a stackallocated Array the performance gain should be huge! Also Vertical Operators are missing from Vector<T> like T Min(Vector<T> vector)
28430	area-Meta	Last API review nits for 2.1	Aside from the regularlization of span related parameters completed recently by @Anipik , there were some other nits identified in new APIs that we want to fix before release.    These are described here  https://github.com/dotnet/apireviews/pull/63    The line numbers in the comments reference this API list  https://raw.githubusercontent.com/terrajobst/apireviews/a1671f88d1219d2a16e0abfc47e79e3d4c7ed82f/2018/NetCore20-vs-NetCore21-Diff/README.md    @maryamariyan can you please make these tweaks? They are in various areas but can simply be all done at once.    cc @terrajobst   
28428	area-Infrastructure	Fix compat pack dependencies to be live pre-release and harvest System.Buffers ref to previously shipped version	Fixes: https://github.com/dotnet/corefx/issues/28326    System.Security.Cryptography.Cng pre-release needs to be included in the compat pack since System.Security.Cryptography.Xml is now taking a dependency on it and we haven't shipped it stable, so if we depend on the Cng stable version it will fail because there will be a downgrade on that dependency.    Also this freezes the implementation for netstandard2.0 for System.Buffers to not take a reference to System.Private.CoreLib in an OOB package.    Also I'm updating the compat pack publish script to be able to generate the netcoreapp2.1 ApiCatalog layout from the live everyday build.    cc: @ericstj @weshaggard @danmosemsft @joperezr @terrajobst 
28426	area-System.Drawing	TypeConverters for System.Drawing	"Closes #21129    Added converters `FontConverter`, `IconConverter`, `ImageConverter `and `ImageFormatConverter` and tests.    What I changed against original files from Mono:    - Changed variable and other names to suit coding style.  - Used resource for `(none)` string and throwing exception using base `GetConvertFromException()`.  - [ImageConverter](https://github.com/mono/mono/blob/master/mcs/class/System.Drawing/System.Drawing/ImageConverter.cs#L80) returned string `(none)` always, even if destination type was not string. Changed it only for string destination type.  - In [Icon](https://github.com/mono/mono/blob/master/mcs/class/System.Drawing/System.Drawing/IconConverter.cs#L83) and [Image](https://github.com/mono/mono/blob/master/mcs/class/System.Drawing/System.Drawing/ImageConverter.cs#L86) converter they called `CanConvertTo` with a comment that destination is a `byte[]`. I changed it to simple type check.  - Tests for exception with `try-catch` replaced with `Assert.Throws()`.  - Tests `Assert.True(!...)` replaced with `Assert.False(...)`.  - Cryptic messages (e.g. `""CCF#9""`) in assertions replaced with meaningful ones.  - In the tests, there are `Assert.Equal()` checks. In the original files in Mono they had message (`Assert.AreEqual()`), so specific assertion could be found when test fails. In XUnit, this assertion does not have a message."
28425	area-System.Net	Disable some failing/hanging HTTP tests	Opened some issues #28423 #28424. These tests are failing/hanging on my dev box all the time.
28424	area-System.Net	PlatformHandler_HttpClientHandler_ResponseDrain_Test.GetAsyncWithMaxConnections_DisposeBeforeReadingToEnd_KillsConnection fails	Discovered this while running System.Net.Http Outerloop tests:    ```  System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_ResponseDrain_Test.GetAsyncWithMaxConnections_DisposeBeforeReadingToEnd_KillsConnection    (totalSize: 2000000, readSize: 0, mode: BytePerChunk) [FAIL]          System.IO.IOException : Unable to read data from the transport connection: An existing connection was forcibly closed by the remote host.          ---- System.Net.Sockets.SocketException : An existing connection was forcibly closed by the remote host          Stack Trace:             s:\GitHub\corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.Tasks.cs(1087,0): at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.T    hrowException(SocketError error)             s:\GitHub\corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.Tasks.cs(1079,0): at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.S    ystem.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)             E:\A\_work\104\s\src\mscorlib\shared\System\IO\StreamWriter.cs(979,0): at System.IO.StreamWriter.FlushAsyncInternal(StreamWriter _this, Boolean flus    hStream, Boolean flushEncoder, Char[] charBuffer, Int32 charPos, Boolean haveWrittenPreamble, Encoding encoding, Encoder encoder, Byte[] byteBuffer, Stream s    tream, CancellationToken cancellationToken)             E:\A\_work\104\s\src\mscorlib\shared\System\IO\StreamWriter.cs(586,0): at System.IO.StreamWriter.WriteAsyncInternal(StreamWriter _this, String value    , Char[] charBuffer, Int32 charPos, Int32 charLen, Char[] coreNewLine, Boolean autoFlush, Boolean appendNewLine)             s:\GitHub\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs(389,0): at System.Net.Test.Common.LoopbackServer.Connection.ReadRequestHeaderAnd    SendCustomResponseAsync(String response)             s:\GitHub\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs(130,0): at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass13_0.<<AcceptC    onnectionSendCustomResponseAndCloseAsync>b__0>d.MoveNext()             --- End of stack trace from previous location where exception was thrown ---             s:\GitHub\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs(117,0): at System.Net.Test.Common.LoopbackServer.AcceptConnectionAsync(Func`2 fu    ncAsync)             s:\GitHub\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs(128,0): at System.Net.Test.Common.LoopbackServer.AcceptConnectionSendCustomRespo    nseAndCloseAsync(String response)             s:\GitHub\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.ResponseDrain.cs(255,0): at System.Net.Http.Functional.Tests.HttpCl    ientHandler_ResponseDrain_Test.<>c__DisplayClass6_1.<<GetAsyncWithMaxConnections_DisposeBeforeReadingToEnd_KillsConnection>b__2>d.MoveNext()             --- End of stack trace from previous location where exception was thrown ---             s:\GitHub\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs(117,0): at System.Net.Test.Common.LoopbackServer.AcceptConnectionAsync(Func`2 fu    ncAsync)             s:\GitHub\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.ResponseDrain.cs(246,0): at System.Net.Http.Functional.Tests.HttpCl    ientHandler_ResponseDrain_Test.<>c__DisplayClass6_0.<<GetAsyncWithMaxConnections_DisposeBeforeReadingToEnd_KillsConnection>b__1>d.MoveNext()             --- End of stack trace from previous location where exception was thrown ---             s:\GitHub\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs(84,0): at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateCl    ientAndServerAsync>b__0>d.MoveNext()             --- End of stack trace from previous location where exception was thrown ---             s:\GitHub\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs(67,0): at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsy    nc, Options options)             s:\GitHub\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.ResponseDrain.cs(216,0): at System.Net.Http.Functional.Tests.HttpCl    ientHandler_ResponseDrain_Test.GetAsyncWithMaxConnections_DisposeBeforeReadingToEnd_KillsConnection(Int32 totalSize, Int32 readSize, ContentMode mode)             --- End of stack trace from previous location where exception was thrown ---             ----- Inner Stack Trace -----  ```    And after getting this exception, the test hangs due to some await problem regarding the loopback server response.  It looks like a loopback server bug or a place where a SocketException needs to be handled better.    ## Failures history    Build | OS | Details  -- | -- | --  20180225.01 | Win7 | SocketException: An existing connection was forcibly closed by the remote host  20180301.04 | Win7 | SocketException: An existing connection was forcibly closed by the remote host  20180302.06 | Win7 | SocketException: An existing connection was forcibly closed by the remote host  20180303.03 | Win7 | WinHttpException: The operation has been canceled  20180303.03 | Win7 | SocketException: An existing connection was forcibly closed by the remote host  20180304.02 | Win7 | SocketException: An existing connection was forcibly closed by the remote host  20180304.03 | Win7 | WinHttpException: The operation has been canceled  20180308.02 | Win8.1 | WinHttpException: The operation has been canceled  20180308.06 | Win7 | WinHttpException: The operation has been canceled  20180314.02 | Win10 | WinHttpException: The operation has been canceled  20180314.05 | Win7 | TaskCanceledException: A task was canceled.  20180314.05 | Win7 | WinHttpException: The handle is invalid  20180316.03 | Win7 | SocketException: An existing connection was forcibly closed by the remote host  20180318.01 | Win7 | SocketException: An existing connection was forcibly closed by the remote host   
28423	area-System.Net	PlatformHandler_HttpProtocolTests.GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly fails	"Discovered this while running System.Net.Http Outerloop tests:    ```  System.Net.Http.Functional.Tests.PlatformHandler_HttpProtocolTests.GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly(maxChunkSize: 1, lineEnding: \""\\r    \\n\"", useCopyToAsync: True) [FAIL]          System.IO.IOException : The read operation failed, see inner exception.          ---- System.Net.Http.WinHttpException : Error 12030 calling WinHttpQueryDataAvailable, 'The connection with the server was terminated abnormally'.          Stack Trace:  ```"
28418	area-System.Net	Segmentation fault (core dumped) with microsoft/dotnet:2.0-runtime-stretch-arm32v7	"@Zuendelmeister commented on [Fri Mar 23 2018](https://github.com/dotnet/dotnet-docker/issues/443)    ## Steps to reproduce the issue  1. Install docker ce on a raspberry pi 3   2. Start microsoft/dotnet:2.0-runtime-stretch-arm32v7 container with dotnet core code. Code uses http client that sends via post to a rest endpoint several times.  3. Code:  ```c#              var request = new HttpRequestMessage              {                  RequestUri = new Uri(_url),                  Method = HttpMethod.Post,                  Headers ={                      {HttpRequestHeader.Authorization.ToString(),_auth},                      {HttpRequestHeader.ContentType.ToString(),""application/json""}                  },                  Content = new StringContent(messageData)              };              using (var handler = new HttpClientHandler              {                  ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => true,                  UseProxy = false              })              {                  using (var httpClient = new HttpClient(handler)                  {                      BaseAddress = new Uri(_url)                  })                  {                      Console.WriteLine(""start sending..."");                      var response =  await httpClient.SendAsync(request); //This is where the problem occurs!!!                      Console.WriteLine($""Sending done: StatusCode: {response?.StatusCode}"");                  }              }   ```    ## Expected behavior  The code should just send data to the rest endpoint.    ## Actual behavior  It sends messages for a while (like 100) to the endpoint and dies with the error Segmentation fault (core dumped). This cannot be catched.    ## Additional information (e.g. issue happens only occasionally)  On raspberry pi 3 with the docker base-image microsoft/dotnet:2.0-runtime-stretch-arm32v7.  I changed the baseimage and it works, so it's pretty save, that this issue is due to this one. Unfortunately I don't have any idea why.    ## Output of `docker version`  ```  Client:   Version:       18.03.0-ce   API version:   1.37   Go version:    go1.9.4   Git commit:    0520e24   Built: Wed Mar 21 23:18:23 2018   OS/Arch:       linux/arm   Experimental:  false   Orchestrator:  swarm    Server:   Engine:    Version:      18.03.0-ce    API version:  1.37 (minimum version 1.12)    Go version:   go1.9.4    Git commit:   0520e24    Built:        Wed Mar 21 23:14:29 2018    OS/Arch:      linux/arm    Experimental: false    ```    ## Output of `docker info`    ```  Containers: 2   Running: 0   Paused: 0   Stopped: 2  Images: 3  Server Version: 18.03.0-ce  Storage Driver: overlay2   Backing Filesystem: extfs   Supports d_type: true   Native Overlay Diff: false  Logging Driver: json-file  Cgroup Driver: cgroupfs  Plugins:   Volume: local   Network: bridge host macvlan null overlay   Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog  Swarm: inactive  Runtimes: runc  Default Runtime: runc  Init Binary: docker-init  containerd version: cfd04396dc68220d1cecbe686a6cc3aa5ce3667c  runc version: 4fc53a81fb7c994640722ac585fa9ca548971871  init version: 949e6fa  Security Options:   apparmor   seccomp    Profile: default  Kernel Version: 4.4.0-1009-raspi2  Operating System: Ubuntu 16.04 LTS  OSType: linux  Architecture: armv7l  CPUs: 4  Total Memory: 920.1MiB  Name:   ID: UUUL:DQMQ:S7ES:WMO6:QEWB:E7UW:FQEO:QG3S:AZO7:NBK4:B2OT:D7SI  Docker Root Dir: /var/lib/docker  Debug Mode (client): false  Debug Mode (server): false  Registry: https://index.docker.io/v1/  Labels:  Experimental: false  Insecure Registries:      127.0.0.0/8  Live Restore Enabled: false    ```    [EDIT] Add C# syntax highlighting by @karelz"
28417	area-System.Net	Unify HTTP Authentication Tests	"Most of these were failing due to issues in the loopback authentication server that were fixed by @wfurt. I'll explain the other changes one by one below:    Original:  ```csharp  yield return new object[] { ""Basic realm=\""testrealm1\"" basic realm=\""testrealm1\"""", true };  ```  Updated:  ```csharp  yield return new object[] { ""Basic realm=\""testrealm1\"" basic realm=\""testrealm1\"""", true };  yield return new object[] { ""Basic realm=\""testrealm1\"", basic realm=\""testrealm1\"""", true };  ```    The first is an invalid case, but actually does work with WinHttpHandler. This test was failing just because of the loopback server. I added a valid version of this test, but left the original in to pin our current behavior.    Original (removed):  ```csharp  yield return new object[] { ""Basic something digest something"", true };  ```    The second change is to remove an invalid test case. This case highlights a minor behavior difference between WinHttpHandler and SocketsHttpHandler. Since there is no comma following the first scheme, all handlers will view this as a header requesting basic auth. The difference is that WinHttpHandler will refuse to authenticate when there are unknown tokens following the scheme. SocketsHttpHandler will just ignore the extra information. The correct behavior here isn't clear -- the only token allowed after basic auth is the realm, so either behavior sounds reasonable. I don't know if this is something we'd like to unify.    Fixes: #28065 "
28416	area-System.Runtime	grapheme enumeration	"ported from https://github.com/dotnet/corefx/issues/24093#issuecomment-375585062    [A document of `TextElementEnumerator `](https://msdn.microsoft.com/en-us/library/system.globalization.textelementenumerator(v=vs.110).aspx) says that the .NET Framework defines a text element as a grapheme. However, what exactly does this ""grapheme"" means? Should the grapheme be the same as defined in [""Grapheme Cluster Boundaries"" in UAX #29](http://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries)?    ```cs  using System;  using System.Globalization;    class Program  {      static void Main()      {          var e = StringInfo.GetTextElementEnumerator(""👩🏻‍👦🏼👨🏽‍👦🏾‍👦🏿👩🏼‍👨🏽‍👦🏼‍👧🏽👩🏻‍👩🏿‍👧🏼‍👧🏾"");          while (e.MoveNext())          {              Console.WriteLine(e.GetTextElement());          }      }  }  ```    expected result:  👩🏻‍👦🏼  👨🏽‍👦🏾‍👦🏿  👩🏼‍👨🏽‍👦🏼‍👧🏽  👩🏻‍👩🏿‍👧🏼‍👧🏾    actual result:  👩  🏻  ‍  👦  🏼  👨  🏽  ‍  👦  🏾  ‍  👦  🏿  👩  🏼  ‍  👨  🏽  ‍  👦  🏼  ‍  👧  🏽  👩  🏻  ‍  👩  🏿  ‍  👧  🏼  ‍  👧  🏾    "
28415	area-System.IO	WIP - initial serial port support for Linux	related to #18012   This still needs some work and testing but I would like to get early feedback.  I can do simple serial IO now on Linux.    This is first minimal set of changes.    - PAL uses POSIX + few BSD extensions. It builds on Linux and OSX. FreeBSD should be probably OK.  - I tested only simple test program on Ubuntu with RS-232 and USB-Serial IOgear adapter  - on Raspberry ttyAMA0 should be detected but I don't currently have gear to test actual transfer.  - no async event notifications          
28414	area-System.IO	Test failure: System.IO.Tests.Perf_Directory/RecursiveCreateDirectory(depth: 100, times: 10)	@anipik please disable RecursiveCreateDirectory perf test for .NET Framework, as it hits path limit.  The test `System.IO.Tests.Perf_Directory/RecursiveCreateDirectory(depth: 100, times: 10)` has failed.  System.IO.PathTooLongException : The specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters.          Stack Trace:             at System.IO.PathHelper.GetFullPathName()        at System.IO.Path.LegacyNormalizePath(String path, Boolean fullCheck, Int32 maxPathLength, Boolean expandShortPaths)        at System.IO.Path.GetFullPathInternal(String path)        at System.IO.Directory.InternalCreateDirectoryHelper(String path, Boolean checkHost)        at System.IO.Tests.Perf_Directory.RecursiveCreateDirectory(Int32 depth, Int32 times) Build : Master - 20180323.06 (Full Framework Tests) Failing configurations: - Windows.10.Amd64-x64   - Release - Windows.10.Amd64-x86   - Release
28413	area-System.Runtime	Skipping test on uap because retrieving info about processes not supported	Fixes #28400    cc: @danmosemsft 
28411	area-System.IO	Test failure: System.IO.Tests.Perf_Directory/RecursiveCreateDirectory(depth: 1000, times: 1)	All RecursiveCreateDirectory tests are failing  https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180323.06/workItem/System.IO.FileSystem.Performance.Tests   The test `System.IO.Tests.Perf_Directory/RecursiveCreateDirectory(depth: 1000, times: 1)` has failed.  System.Exception : Benchmark did not execute any iterations.  Please use one of the iteration methods in Microsoft.Xunit.Performance.Benchmark          Stack Trace:             at Microsoft.Xunit.Performance.BenchmarkTestInvoker.<>c__DisplayClass1_0.<<CallTestMethod>b__0>d.MoveNext()     --- End of stack trace from previous location where exception was thrown ---        at Microsoft.Xunit.Performance.Internal.BenchmarkIterator.RunAsync(Func`1 testMethod)     --- End of stack trace from previous location where exception was thrown --- Build : Master - 20180323.06 (Core Tests) Failing configurations: - OSX.1013.Amd64-x64   - Release - OSX.1012.Amd64-x64   - Release - Alpine.36.Amd64-x64   - Release - RedHat.69.Amd64-x64   - Release - Fedora.27.Amd64-x64   - Release - Fedora.26.Amd64-x64   - Release - SLES.12.Amd64-x64   - Release - OpenSuse.423.Amd64-x64   - Release - Ubuntu.1804.Amd64-x64   - Release - Ubuntu.1710.Amd64-x64   - Release - Ubuntu.1604.Amd64-x64   - Release - Ubuntu.1404.Amd64-x64   - Release - Debian.90.Amd64-x64   - Release - Debian.87.Amd64-x64   - Release - RedHat.74.Amd64-x64   - Release - RedHat.73.Amd64-x64   - Release - Centos.74.Amd64-x64   - Release - Centos.73.Amd64-x64   - Release
28410	area-System.Text	Regex Match, Split and Matches should support RegexOptions.AnyNewLine as (?=[\r\n]|\z)	From [MSDN](https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-options#Multiline):    > By default, $ matches only the end of the input string. If you specify the RegexOptions.Multiline option, it matches either the newline character (\n) or the end of the input string. It does not, however, match the carriage return/line feed character combination. To successfully match them, use the subexpression \r?$ instead of just $.    This is by far one of the biggest gotchas with using .NET Regex class.    I suggest adding a RegexOptions.AnyNewLine which treats $ as matching _both_ Windows' Environment.NewLine and UNIX' Environment.NewLine, regardless of the Environment running corefx.    *Portability concerns*  According to Wikipedia, there are a ton of different operating systems, all with different line ending settings. The current implementation hardcodes Unix line-ending style. RegexOptions.AnyNewLine, defined as (?=[\r\n]|\z), would add support for Windows line-ending style.    The advise written in the current docs is actually not portable on Unix, which is becoming a more popular option. As it is suggested, \r?$ will capture one or two lines on Unix, and one on Windows. If you try running Windows assemblies with this hack on Linux, you will change the semantics of programs.    *Backward compatibility concerns*  Fully backward compatible: This RegexOptions enum extension would not be a default, and so it would not break any clients with reasonably written code. The only existing code that might display different behavior would be reflection code that sets every option on RegexOptions enum variable. I really can't envision anyone doing this on purpose.    Here is Petr Onderka (@svick)'s summary:     OS | Line-ending style | Current | Environment.NewLine | AnyNewLine  -- | -- | -- | -- | --  Windows | Windows | ✗ | ✓ | ✓  Windows | Unix | ✓ | ✗ | ✓  Unix | Windows | ✗ | ✗ | ✓  Unix | Unix | ✓ | ✓ | ✓    
28409	area-System.Numerics	Formating of double to string using G29 format sometimes returns wrong result	"@Eneuman commented on [Fri Mar 23 2018](https://github.com/dotnet/core/issues/1376)  # Issue Title    Formating of double to string using G29 format sometimes returns wrong result.    # General    Using .Net core 2.0 latest, Windows 10 Pro, Swedish Version    Running this  ```        var test1 = double.Parse(""1,5"").ToString(""G29"");        var test2 = double.Parse(""1,6"").ToString(""G29"");        var test3 = double.Parse(""1,7"").ToString(""G29"");  ```    results in this:    ```  test1 = ""1,5""  test2 = ""1,6000000000000001""  test3 = ""1,7""  ```    I was expecting this:  ```  test1 = ""1,5""  test2 = ""1,6""  test3 = ""1,7""  ```    "
28406	area-System.Net	[Desktop] Uri(Uri, String) throws NullReferenceException for certain relativeUri values	"Short reproduction from C# interactive in Visual Studio 2017 15.6.4 on Windows 10 1709 (I'd assume this runs under .NET 4.7.1):    ```csharp  var baseUri = new Uri(""http://example.com"");  var relativeUri = ""ftp:%c3%b6"";  new Uri(baseUri, relativeUri);  ```  ```  Object reference not set to an instance of an object.    + System.Uri.CreateUriInfo(System.Uri.Flags)    + System.Uri.EnsureUriInfo()    + System.Uri.ParseRemaining()    + System.Uri.EnsureParseRemaining()    + System.Uri.CreateThis(string, bool, System.UriKind)    + System.Uri.CreateUri(System.Uri, string, bool)  ```    The exception type is unexpected, I would expect a `UriFormatException` to be thrown.    * Changing `:` to `%3a` works fine  * Changing `%c3%b6` to `a` yields a better exception: `System.UriFormatException: Invalid URI: The Authority/Host could not be parsed.`    So there seems to be something going on with the UTF-8 decoding combined with special case when a protocol is at start of the string.    (The problem is the same under mono 5.4.1.6 on macOS)    [EDIT] Update code formatting by @karelz"
28405	area-System.IO	Fixed  System.IO.FileSystem.AccessControl.Tests fails on non-English Windows	See https://github.com/dotnet/corefx/issues/27629
28404	area-System.Diagnostics	 Process: avoid performing operations on a different process with recycled pid	"With recent changes to the Process class, we know when our child processes have exited.  We can use this information to ensure a process instance doesn't start hitting a different process with a recycled pid.    Requires https://github.com/dotnet/corefx/pull/27763    Example code:  ```C#              var processes = new Dictionary<int, Process>();              for (int i = 0; i < 1_000_000; i++)              {                  if (i % 100 == 0)                  {                      Console.Write(""."");                  }                    var process = new Process();                  process.StartInfo.FileName = ""/usr/bin/sleep"";                  process.StartInfo.Arguments = ""5"";                  process.EnableRaisingEvents = true;                  process.Start();                    Process recycled;                  if (processes.TryGetValue(process.Id, out recycled))                  {                      Console.WriteLine(""Killing recycled"");                      recycled.Kill();                      recycled.WaitForExit();                        Console.WriteLine(""New process exited? "" + process.HasExited);                      return;                  }                  else                  {                      processes.Add(process.Id, process);                  }                    process.Kill();                  process.WaitForExit();              }  ```    This code will throw when the Kill operation targets a recycled pid:  ```  System.InvalidOperationException: Cannot process request because the process (12993) has exited.  ```    CC @stephentoub @danmosemsft @wfurt "
28403	area-System.Reflection	When the System.Reflection.DispatchProxy subclass's access modifier is not public it throw Access is denied	The repo is [here](https://github.com/Mutuduxf/DispatchProxyDemo)  ```  System.TypeLoadException: Access is denied: 'DynamicProxy+InvokeProxy`1[IService]'.     at System.Reflection.Emit.TypeBuilder.TermCreateClass(RuntimeModule module, Int32 tk, ObjectHandleOnStack type)     at System.Reflection.Emit.TypeBuilder.CreateTypeNoLock()     at System.Reflection.Emit.TypeBuilder.CreateTypeInfo()     at System.Reflection.DispatchProxyGenerator.ProxyBuilder.CreateType()     at System.Reflection.DispatchProxyGenerator.GenerateProxyType(Type baseType, Type interfaceType)     at System.Reflection.DispatchProxyGenerator.GetProxyType(Type baseType, Type interfaceType)     at System.Reflection.DispatchProxyGenerator.CreateProxyInstance(Type baseType, Type interfaceType)     at System.Reflection.DispatchProxy.Create[T,TProxy]()     at DispatchProxyDemo.DynamicProxy.Proxy[T]() in C:\Users\aeond\Desktop\GitHub\DispatchProxyDemo\DispatchProxyDemo\DynamicProxy.cs:line 9     at DispatchProxyDemo.Program.Main(String[] args) in C:\Users\aeond\Desktop\GitHub\DispatchProxyDemo\DispatchProxyDemo\Program.cs:line 11  ```    [EDIT] Format exception + add exception line by @karelz
28402	area-Serialization	default XmlDictionaryReader.Close implementation causes a stack overflow with an open reader	in XmlReader:  public void Dispose()  {      Dispose(true);  }  protected virtual void Dispose(bool disposing)  {      if (disposing && ReadState != ReadState.Closed)      {          Close();      }  }    in XmlDictionaryReader:  public override void Close()  {   base.Dispose();  }  = stack overflow    This causes issues with ported code as in the .NET framework implementation XmlDictionaryReader's Close does not call the base class.    A trivial sample that reproduces the issue: [XmlDictionaryReaderBug.zip](https://github.com/dotnet/corefx/files/1840539/XmlDictionaryReaderBug.zip)  
28400	area-System.Runtime	Test failure: System.Tests.StringGetHashCodeTests/GetHashCodeWithStringComparer_UseSameStringInTwoProcesses_ReturnsDifferentHashCodes(getHashCodeIndex: 0)	Opened on behalf of @Sunny-pu  The test `System.Tests.StringGetHashCodeTests/GetHashCodeWithStringComparer_UseSameStringInTwoProcesses_ReturnsDifferentHashCodes(getHashCodeIndex: 0)` has failed.  System.NullReferenceException : Object reference not set to an instance of an object.          Stack Trace:             at System.Tests.StringGetHashCodeTests.GetHashCodeWithStringComparer_UseSameStringInTwoProcesses_ReturnsDifferentHashCodes(Int32 getHashCodeIndex) in E:\A\_work\5\s\corefx\src\System.Runtime\tests\System\StringGetHashCodeTests.cs:line 32 Build : Master - 20180323.01 (UWP F5 Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x64   - Release - Windows.10.Arm64-arm   - Release - Windows.10.Amd64.ClientRS3-x86   - Release  Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fuwp~2F/build/20180323.01/workItem/System.Runtime.Tests/analysis/xunit/System.Tests.StringGetHashCodeTests~2FGetHashCodeWithStringComparer_UseSameStringInTwoProcesses_ReturnsDifferentHashCodes(getHashCodeIndex:%200)
28398	area-System.ComponentModel	LoadedFiles_NonStaticallyReferencedAssembly fails in CI with NotEmptyException	From https://github.com/dotnet/corefx/pull/28320    OSX.1012.Amd64.Open-x64-Debug  https://mc.dot.net/#/user/sputier/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/47503888725962aaad41a7b1384de12938aae16c/workItem/System.ComponentModel.Composition.Tests/analysis/xunit/System.ComponentModel.Composition.DirectoryCatalogTests~2FLoadedFiles_NonStaticallyReferencedAssembly    ```text  Unhandled Exception of Type Xunit.Sdk.NotEmptyException  Message :  Assert.NotEmpty() Failure  Stack Trace :     at System.ComponentModel.Composition.DirectoryCatalogTests.LoadedFiles_NonStaticallyReferencedAssembly() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.ComponentModel.Composition/tests/System/ComponentModel/Composition/Hosting/DirectoryCatalogTests.cs:line 356  ```
28393	area-Infrastructure	Can not load UnloadableAssembly in System.Runtime.Tests	When I run System.Runtime.Tests, the log contains `System.BadImageFormatException` exception with messages that UnloadableAssembly can non be loaded. Is it issue?
28392	area-Meta	Inconsistent compile behavior for out parameters	@marce155 commented on [Thu Mar 22 2018](https://github.com/dotnet/core/issues/1373)  When declaring an out parameter on a method I’m used to having to assign the parameter a value before leaving the method:   ```  public bool TryGet(string foo, out TimeSpan bar){   bar = TimeSpan.FromSeconds(1);   return true;  }  ```    Today I encountered a behavior which was at least unexpected and feels inconsistent. When I’m targeting netcoreapp2.0 there are some cases where the program will compile and work even if the out parameter has not been assigned.    To be exact this is the case for TimeSpan or structs containing (only) a TimeSpan (that is as far as I tested). The same code will fail to compile for .NET 4.6.    ```  class Program      {          public static void Main()          {              TimeSpan timeSpan;              Foo foo;              Bar bar;              //Baz baz;                TryTimeSpan(out timeSpan);              TryFoo(out foo);              TryBar(out bar);              //TryBaz(out baz);                Console.WriteLine(timeSpan);              Console.WriteLine(foo);              Console.WriteLine(bar);          }          private static bool TryTimeSpan(out TimeSpan timeSpan)          {       // no compile error - unexpected              return false;          }          private static bool TryFoo(out Foo foo)          {       // empty struct works with target net461 as well              return false;          }          private static bool TryBar(out Bar bar)          {       // no compile error - unexpected              return false;          }          /*          private static bool TryBaz(out Baz baz)          {              // compile error, baz not assigned for all targets - expected              return false;          }          */      }      struct Foo { }      struct Bar      {          public TimeSpan TimeSpan { get; set; }      }      struct Baz      {          public int Int { get; set; }      }  ```  I assume that somehow proper defaults are assigned, yet it still feels a little strange. Could you please clarify if this is expected behavior and what causes it?    ---  @danstur commented on [Thu Mar 22 2018](https://github.com/dotnet/core/issues/1373#issuecomment-375337998)  This definitely seems to violate the [specification](https://github.com/dotnet/csharplang/blob/master/spec/classes.md#output-parameters):     > Every output parameter of a method must be definitely assigned before the method returns.         
28390	area-System.Net	Test failed: System.Net.NetworkInformation.Tests.PingTest / SendPingAsyncWithHostAndTimeoutAndBuffer_Unix	From https://github.com/dotnet/corefx/pull/28320    OSX.1012.Amd64.Open-x64-Debug  System.Net.NetworkInformation.Tests.PingTest/SendPingAsyncWithHostAndTimeoutAndBuffer_Unix  https://mc.dot.net/#/user/sputier/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/aed8e7936300a0290bb29844f967876525ca9ffb/workItem/System.Net.Ping.Functional.Tests/analysis/xunit/System.Net.NetworkInformation.Tests.PingTest~2FSendPingAsyncWithHostAndTimeoutAndBuffer_Unix    ```text  Unhandled Exception of Type System.Net.NetworkInformation.PingException  Message :  System.Net.NetworkInformation.PingException : An exception occurred during a Ping request.  ---- System.Net.NetworkInformation.PingException : An exception occurred during a Ping request.  Stack Trace :     at System.Net.NetworkInformation.Ping.GetAddressAndSendAsync(String hostNameOrAddress, Int32 timeout, Byte[] buffer, PingOptions options) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.cs:line 364     at System.Net.NetworkInformation.Tests.PingTest.SendPingAsync(Func`2 sendPing, Action`1 pingResultValidator) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Ping/tests/FunctionalTests/PingTest.cs:line 464     at System.Net.NetworkInformation.Tests.PingTest.SendPingAsyncWithHostAndTimeoutAndBuffer_Unix() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Ping/tests/FunctionalTests/PingTest.cs:line 278  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Net.NetworkInformation.Ping.SendWithPingUtility(IPAddress address, Byte[] buffer, Int32 timeout, PingOptions options) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Unix.cs:line 210     at System.Net.NetworkInformation.Ping.SendPingAsyncCore(IPAddress address, Byte[] buffer, Int32 timeout, PingOptions options) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Unix.cs:line 31     at System.Net.NetworkInformation.Ping.GetAddressAndSendAsync(String hostNameOrAddress, Int32 timeout, Byte[] buffer, PingOptions options) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.cs:line 353  ```
28382	area-Infrastructure	perf.groovy should be archiving ETL	Right now we appear to be only archiving test results, but we have never archived perf traces     https://github.com/dotnet/corefx/blob/master/perf.groovy#L132
28380	area-System.Net	Fixed netfx System.Net.WebSockets.Client.Tests fails on non-English Windows	See https://github.com/dotnet/corefx/issues/28136
28379	area-Meta	API Proposal: Add a ValueStringBuilder	"We should consider making a value based StringBuilder to allow low allocation building of strings.  While Span allows you to provide a writable buffer, in many scenarios we have a need to get or build strings and we don't know precisely how much space will be needed ahead of time. Having an abstraction that can grow beyond a given initial buffer is particularly useful as it doesn't require looping with `Try*` APIs- which can be both complicated and have negative performance implications.    We currently use `ValueStringBuilder` for this purpose internally. It starts with an optional initial buffer (which we often stackalloc) and will grow using ArrayPool<char> if needed.    ## Design Goals    1. Allow safe usage of stack memory  2. Use pooled memory when needed to reduce GC pressure  3. Allow dynamic and explicit capacity growth  4. Facilitate interop scenarios (i.e. passing as `char* szValue`)  5. Follow API semantics of StringBuilder & string where possible  6. Be stack allocated    ## API    Here is the proposed API:    ``` C#  namespace System.Text  {      public ref struct ValueStringBuilder      {          public ValueStringBuilder(Span<char> initialBuffer);            // The logical length of the builder (end of the ""string"")          public int Length { get; set; }            // Available space in chars          public int Capacity { get; }            // Ensure there is at least this amount of space          public void EnsureCapacity(int capacity);            // Get a pinnable reference to the builder. ""terminate"" ensures the builder has a null char after Length in the buffer.          public ref char GetPinnableReference(bool terminate = false);            // Indexer, allows setting/getting individual chars          public ref char this[int index] { get; }            // Returns a string based off of the current position          public override string ToString();            // Returns a span around the contents of the builder. ""terminate"" ensures the builder has a null char after Length in the buffer.          public ReadOnlySpan<char> AsSpan(bool terminate);            // To ensure inlining perf, we have a separate overload for terminate          public ReadOnlySpan<char> AsSpan();            public bool TryCopyTo(Span<char> destination, out int charsWritten);            public void Insert(int index, char value, int count = 1);          public void Insert(int index, ReadOnlySpan<char> value, int count = 1);            public void Append(char c, int count = 1);          public void Append(ReadOnlySpan<char> value);            // This gives you an appended span that you can write to          public Span<char> AppendSpan(int length);            // Returns any ArrayPool buffer that may have been rented          public void Dispose()      }  }  ```    This is the current shape of our internal [`ValueStringBuilder`](https://github.com/dotnet/coreclr/blob/bb0e771d2d08fedce8fc598e620c5d66b361e9e7/src/mscorlib/shared/System/Text/ValueStringBuilder.cs):    ``` C#  namespace System.Text  {      internal ref struct ValueStringBuilder      {          public ValueStringBuilder(Span<char> initialBuffer);          public int Length { get; set; }          public int Capacity { get; }          public void EnsureCapacity(int capacity);            /// <summary>          /// Get a pinnable reference to the builder.          /// </summary>          /// <param name=""terminate"">Ensures that the builder has a null char after <see cref=""Length""/></param>          public ref char GetPinnableReference(bool terminate = false);          public ref char this[int index] { get; }            // Returns a string based off of the current position          public override string ToString();            /// <summary>          /// Returns a span around the contents of the builder.          /// </summary>          /// <param name=""terminate"">Ensures that the builder has a null char after <see cref=""Length""/></param>          public ReadOnlySpan<char> AsSpan(bool terminate);            // To ensure inlining perf, we have a separate overload for terminate          public ReadOnlySpan<char> AsSpan();            public bool TryCopyTo(Span<char> destination, out int charsWritten);          public void Insert(int index, char value, int count);          public void Append(char c);          public void Append(string s);          public void Append(char c, int count);          public unsafe void Append(char* value, int length);          public void Append(ReadOnlySpan<char> value);            // This gives you an appended span that you can write to          public Span<char> AppendSpan(int length);            // Returns any ArrayPool buffer that may have been rented          public void Dispose()      }  }  ```    ## Sample Code    Here is a common pattern on an API that could theoretically be made public if ValueStringBuilder was public:  (Although we would call this one GetFullUserName or something like that.)    https://github.com/dotnet/corefx/blob/050bc33738887d9d8fcc9bc5965b7d9ca65bc7f4/src/System.Runtime.Extensions/src/System/Environment.Win32.cs#L40-L56    The caller is above this method:    https://github.com/dotnet/corefx/blob/050bc33738887d9d8fcc9bc5965b7d9ca65bc7f4/src/System.Runtime.Extensions/src/System/Environment.Win32.cs#L13-L38    Usage of AppendSpan:    https://github.com/dotnet/corefx/blob/3538128fa1fb2b77a81026934d61cd370a0fd7f5/src/System.Runtime.Numerics/src/System/Numerics/BigNumber.cs#L550-L560    I'll add more usage details and possible API surface area.    ## Notes    - Does using this remove the need for having a `bool TryGet*(Span)` overload? (see https://github.com/dotnet/coreclr/pull/17097/files#r176560435)  - Should we allow you to make it non-growable? (So we can avoid TryGet above?)  - Can we get C# to allow using ref structs that have a `Dispose()` in a `using` statement? (https://github.com/dotnet/csharplang/issues/93)  - Do we care about `AppendFormat` overloads?  - `AppendSpan()` is a little tricky to grok- is there a better term/pattern?"
28378	area-System.Net	SocketsHttpHandler will attempt digest authentication with an empty nonce	The nonce is an important part of the digest authentication protocol, and we should not attempt to authenticate without one. We currently have some incorrect test cases demonstrating this issue that pass only on SocketsHttpHandler:  https://github.com/dotnet/corefx/blob/ce4ebdfbf2080a38855ab8df5c9bb553db8724af/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs#L561-L565    Without a nonce digest authentication is vulnerable to [replay attacks](https://security.stackexchange.com/questions/3001/what-is-the-use-of-a-client-nonce/3024#3024). For this to actually occur the server requesting authentication would have to fail to send the nonce in the first place, but this is still an insecure scenario that we should not support.    Since it also requires insecure behavior from the server requesting authentication I think we can probably put this issue off until after 2.1, but I'd like to hear what others think first.
28375	area-System.Net	Fix missing port number in HttpRequestMessage constructed by HttpWebRequest	Fix #28344.
28374	area-System.IO	CurrentUserOnly should allow multiple servers on Windows	Fix #28371 
28373	area-System.Net	Fixed netfx System.Net.Mail.Functional.Tests fails on non-English Windows	See https://github.com/dotnet/corefx/issues/28136
28371	area-System.IO	NamedPipeServerStream throws UnauthorizedException when creating multiple server streams on windows with PipeOptions.CurrentUserOnly	"Repro:  ```c#  static void Main(string[] args)  {      const int PipeBufferSize = 0x10000;        var pipeName = Guid.NewGuid().ToString();      // This will throw an exception after the first loop. Remove ""PipeOptions.CurrentUserOnly"" to make this work.      for (var i = 0; i < 5; i++) {          var server = new NamedPipeServerStream(              pipeName,              PipeDirection.InOut,              NamedPipeServerStream.MaxAllowedServerInstances,              PipeTransmissionMode.Byte,              PipeOptions.Asynchronous | PipeOptions.CurrentUserOnly | PipeOptions.WriteThrough,              PipeBufferSize,              PipeBufferSize);          using (var client = new NamedPipeClientStream(""."", pipeName, PipeDirection.InOut, PipeOptions.Asynchronous | PipeOptions.CurrentUserOnly))          {              client.Connect();              Console.WriteLine(""Connected!"");          }      }  }  ```    cc @pjanotti @rynowak "
28370	area-System.Runtime	StringComparers should return 0 rather than throwing for GetHashCode(null)	`EqualityComparer<string>.Default.GetHashCode` returns `0` when provided with null.    The various `StringComparer`s, however, throw `ArgumentNullException`. This is frustrating because it means you can't always swap in something like `StringComparer.OrdinalIgnoreCase` for the default comparer.    Additionally, it feels inconsistent for `StringComparer`s to throw on null for `GetHashCode` because all other methods are null-safe:  ```  StringComparer.Ordinal.Equals(default(string), default(string)) => true  StringComparer.Ordinal.Compare(default(string), default(string)) => 0  ```    Therefore, I think we should consider changing the behavior of `GetHashCode` to be consistent with everything else.
28369	area-System.Data	Fix MatchingRefApiCompat issues	This fix is for https://github.com/dotnet/corefx/issues/27974  There are API miss match issues with contract. https://github.com/dotnet/corefx/blob/2169709020cb51c95aedf66f3db7c41d7d54a725/src/System.Data.SqlClient/src/MatchingRefApiCompatBaseline.txt#L1-L5  This fix resolve the issue.
28368	area-System.Net	wrap Read in loop as it can return less bytes than asked for	fixes #27996    As described in the issue, new socket handler uses small buffers to provoke conditions like this and test was failing assuming it can always read all data at one.  
28367	area-System.Net	Fix WinHttpHandler error handling	"This PR addresses some error handling problems in WinHttpHandler as well as  improves the error messages generated for WinHttpException.    This was root caused to a bug in WinHttp where it can't do a GET request with a  request body using chunked encoding. However, this exception was masked due to  an error handling bug caused by an inconsistency in how WinHttp associates  context values for callbacks during the WinHttpSendRequest API call. This PR now  fixes the error handling around synchronous errors being returned from  WinHttpSendRequest. The root WinHttp bug itself can't be fixed. So, doing a GET request  will still throw an exception, but it will be a catchable HttpRequestException.    Another bug was discovered while investigating #26278. WinHttpCloseHandle should only be  called once and should never race between threads. This is normally protected when  the request handle is closed via SafeHandle Dispose(). But there was a place in the  callback method where we called WinHttpCloseHandle directly against the raw handle.    Finally, the error messages for WinHttpExceptions have been improved to show the  error number and the probable WinHttp API call that generated the error. This will  save diagnostic time.    Example:    Original WinHttpException message: ""The parameter is incorrect""  New WinHttpException message: ""Error 87 calling WinHttpSendRequest, 'The parameter is incorrect'.""    I also moved the WinHttpException source code back from Common. It was originally shared between WinHttpHandler and ClientWebSocket. But then ClientWebSocket moved away from WinHttp implementation. So, it makes more sense for this class to be under WinHttpHandler.    Closes #28156  Contributes to #26278"
28366	area-System.Security	System.Security.Cryptography.Algorithms has reference on the .net4.6.3	Hi,    I'm tried to include to the project that targets .net462 **System.Security.Cryptography.Algorithms** 4.3.1 nuget package using nuget package manager and I was surprised when found the reference on the ***.NETFramework4.6.3*** instead of ***.NETFramework4.6.2***, and that package manager added to the project the corresponding assembly for ***.NETFramework4.6.1.***    Does it a small mistake?
28365	area-System.Net	SSL TLS protocol mis-match not handled cleanly on Linux	"Hello,    I had a situation where I specified `SslProtocls.Tls` and tried to talk to a server with `Tls` (aka `Tlsv1`) but the server was configured to not speak that protocol.    Understandably, the handshake failed, but the exception stack trace I got was pretty opaque and it took me a while to debug.  This is on Linux. Not sure if there is more information that we can use to improve the error message, but regardless, filing an issue at least so that if someone else hits the same thing they know that it is an error in protocol negotiation. Setting `SslProtocols` to `SslProtocols.None` (aka ""use system defaults"") fixed it for me.    Detailed trace:  ```  Unhandled Exception: System.AggregateException: One or more errors occurred. (WebSocket connection failure.) ---> System.Net.WebSockets.WebSocketException: WebSocket connection failure. ---> System.Security.Authentication.AuthenticationException: A call to SSPI failed, see inner exception. ---> Interop+OpenSsl+SslException: SSL Handshake failed with OpenSSL error - SSL_ERROR_SSL. ---> System.Security.Cryptography.CryptographicException: Error occurred during a cryptographic operation.     --- End of inner exception stack trace ---     at Interop.OpenSsl.DoSslHandshake(SafeSslHandle context, Byte[] recvBuf, Int32 recvOffset, Int32 recvCount, Byte[]& sendBuf, Int32& sendCount)     at System.Net.Security.SslStreamPal.HandshakeInternal(SafeFreeCredentials credential, SafeDeleteContext& context, SecurityBuffer inputBuffer, SecurityBuffer outputBuffer, SslAuthenticationOptions sslAuthenticationOptions)     --- End of inner exception stack trace ---     at System.Net.Security.SslState.StartSendAuthResetSignal(ProtocolToken message, AsyncProtocolRequest asyncRequest, ExceptionDispatchInfo exception)     at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)     at System.Net.Security.SslState.PartialFrameCallback(AsyncProtocolRequest asyncRequest)  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Security.SslState.InternalEndProcessAuthentication(LazyAsyncResult lazyResult)     at System.Net.Security.SslState.EndProcessAuthentication(IAsyncResult result)     at System.Net.Security.SslStream.EndAuthenticateAsClient(IAsyncResult asyncResult)     at System.Net.Security.SslStream.<>c.<AuthenticateAsClientAsync>b__43_2(IAsyncResult iar)     at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)  --- End of stack trace from previous location where exception was thrown ---  ```  "
28363	area-System.Runtime	Enable AVX2, SSE42 HW intrinsics: remove unimplemented API surface and mark ISAs as fully implemented	Decision to disable not fully implemented Intel HW intrinsics was made due to the fact that corefx already exposed full ISA API while RyuJIT only partially supported them what would interfere with proper use of `ISA.IsSupported` check see issue:  https://github.com/dotnet/coreclr/issues/14930 and PR resolving it  https://github.com/dotnet/coreclr/pull/15514.    AVX2 and SSE42 intrinsics are partially implemented with many useful instructions already exposed. IMO it would be very helpful if we would expose in `System.Runtime.Intrinsics.Experimental` assembly all already supported intrinsics including partially implemented ISAs. To avoid false negative reporting by `ISA.IsSupported` check we should remove all unimplemented APIs and mark AVX2 and SSE42 ISAs as fully implemented.    In future APIs could be expanded  as new functionality is added to RyuJIT.    @CarolEidt @eerhardt @fiigii @jkotas @tannergooding 
28360	area-System.Runtime	Test failure: System.Tests.EnvironmentTests/CurrentDirectory_SetToValidOtherDirectory	Opened on behalf of @Sunny-pu  The test `System.Tests.EnvironmentTests/CurrentDirectory_SetToValidOtherDirectory` has failed.  Timed out after 60000ms waiting for remote process 25015     Expected: True     Actual:   False          Stack Trace:             at System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Dispose() in /Users/buildagent/agent/_work/74/s/corefx/src/Common/tests/System/Diagnostics/RemoteExecutorTestBase.cs:line 208 Build : 2.0.0 - 20180321.02 (Core Tests) Failing configurations: - OSX.1013.Amd64-x64   - Release  Details: https://mc.dot.net/#/product/netcore/200/source/official~2Fcorefx~2Frelease~2F2.0.0~2F/type/test~2Ffunctional~2Fcli~2F/build/20180321.02/workItem/System.Runtime.Extensions.Tests/analysis/xunit/System.Tests.EnvironmentTests~2FCurrentDirectory_SetToValidOtherDirectory
28359	area-System.Collections	Test failure: System.Collections.Tests.SortedDictionary_IDictionary_NonGeneric_Tests/IDictionary_NonGeneric_Add_NullValueWhenDefaultTValueIsNonNull(count: 0)	Opened on behalf of @Sunny-pu  The test `System.Collections.Tests.SortedDictionary_IDictionary_NonGeneric_Tests/IDictionary_NonGeneric_Add_NullValueWhenDefaultTValueIsNonNull(count: 0)` has failed.  System.OutOfMemoryException : Exception of type 'System.OutOfMemoryException' was thrown.          Stack Trace:             at System.Collections.Tests.SortedDictionary_IDictionary_NonGeneric_Tests.IDictionary_NonGeneric_Add_NullValueWhenDefaultTValueIsNonNull(Int32 count) Build : 2.0.0 - 20180321.02 (Core Tests) Failing configurations: - windows.10.amd64.iot-x64   - Release  Details: https://mc.dot.net/#/product/netcore/200/source/official~2Fcorefx~2Frelease~2F2.0.0~2F/type/test~2Ffunctional~2Fcli~2F/build/20180321.02/workItem/System.Collections.Tests/analysis/xunit/System.Collections.Tests.SortedDictionary_IDictionary_NonGeneric_Tests~2FIDictionary_NonGeneric_Add_NullValueWhenDefaultTValueIsNonNull(count:%200)
28358	area-System.Xml	Strange messages in System.Xml.Xsl.XslCompiledTransformApi.Tests log	System.Xml.Xsl.XslCompiledTransformApi.Tests log contains next messages in log:  ```      Starting:    System.Xml.Xsl.XslCompiledTransformApi.Tests    Message #2    Message #4    <Message>Message #6</Message>    <Message>Message #8</Message>      Finished:    System.Xml.Xsl.XslCompiledTransformApi.Tests  ```
28356	area-System.Runtime	Environment.SpecialFolder should expose FOLDERID_Downloads and FOLDERID_Public values	"`Environment.SpecialFolder` is the rough .NET equivalent of the [Known Folder](https://msdn.microsoft.com/en-us/library/windows/desktop/bb776911(v=vs.85).aspx) API, but it is lacking the corresponding values of `FOLDERID_Downloads` and `FOLDERID_Public`.    ## Rationale    Other known folders like documents, pictures, videos, etc. are exposed, but those two (among others) are missing.    This seems to create confusion and misguided attempts [1](https://stackoverflow.com/questions/10667012/getting-downloads-folder-in-c) [2](https://stackoverflow.com/questions/3795023/how-to-programmatically-derive-windows-downloads-folder-userprofile-downloads) [3](https://social.msdn.microsoft.com/Forums/sqlserver/en-US/b344b1dd-d751-4e0e-9025-a391edd1949a/how-do-i-determine-the-windows-download-folder-path-using-the-knownfolders-class?forum=vbgeneral) to compute the paths to these folders by taking an existing value from `Environment.SpecialFolder`, dropping its last directory and appending ""Downloads"" to it. This is very error-prone, as the folder has not only different names based on the user locale, but also can be manually changed by users.    ## Changes    Two values are added to the `SpecialFolder` enum:    ```diff            MyComputer = SpecialFolderValues.CSIDL_DRIVES,  +         Downloads = SpecialFolderValues.CSIDL_DOWNLOADS,            MyMusic = SpecialFolderValues.CSIDL_MYMUSIC,            MyPictures = SpecialFolderValues.CSIDL_MYPICTURES,            MyVideos = SpecialFolderValues.CSIDL_MYVIDEO,  +         Public = SpecialFolderValues.CSIDL_PUBLIC,            Recent = SpecialFolderValues.CSIDL_RECENT,  ```    If this is desired, I'm happy to provide a pull request."
28355	area-Infrastructure	Debugging on Unix doesn't load symbols	When trying to debug any corefx test in a Unix system the debugger is not able to load symbols. The only symbol that is correctly loaded is System.Private.Corelib one.     All the symbols are present and the debugger output's is:  ```  Loaded '/home/usr/corefx/bin/testhost/netcoreapp-Linux-Debug-x64/shared/Microsoft.NETCore.App/9.9.9/System.Reflection.Emit.ILGeneration.dll'. Module was built without symbols.  Loaded '/home/usr/corefx/bin/testhost/netcoreapp-Linux-Debug-x64/shared/Microsoft.NETCore.App/9.9.9/System.Reflection.Primitives.dll'. Module was built without symbols.  Loaded '/home/usr/corefx/bin/testhost/netcoreapp-Linux-Debug-x64/shared/Microsoft.NETCore.App/9.9.9/System.Buffers.dll'. Module was built without symbols.  ```  and this for all the loaded assemblies. Note that all the pdbs in corefx live next to the dlls.    I remember this used to work before.    This is happening with both VSCode and with Visual Studio using Remote Debugging. The symbols are found, but they are not loaded saying `Binary was not built with debug information`    ![image](https://user-images.githubusercontent.com/22899328/37756176-c5f08498-2d65-11e8-9aac-81c5977fa4f3.png)    The weird thing is that the System.Private.Corelib symbols are loaded correctly, so maybe this is happening because of the way we're building the unix pdbs in corefx?     cc: @danmosemsft @weshaggard @jkotas @ericstj 
28354	area-System.Data	System.Data.Tests.DataTableTest3/XmlSchemaTest3 failing in CI with UnauthorizedAccessException	From https://github.com/dotnet/corefx/pull/28350  https://mc.dot.net/#/user/dotnet-maestro-bot/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/f1982993db81bc168e62e059516816b78af59bb7/workItem/System.Data.Common.Tests/analysis/xunit/System.Data.Tests.DataTableTest3~2FXmlSchemaTest3    Windows.10.Amd64.Open-x64-Debug  ```text  Unhandled Exception of Type System.AggregateException  Message :  System.AggregateException : One or more errors occurred. (Could not find a part of the path 'C:\\Users\\'.) (Access to the path 'C:\\Users\\' is denied.)  ---- System.IO.DirectoryNotFoundException : Could not find a part of the path 'C:\\Users\\'.  ---- System.UnauthorizedAccessException : Access to the path 'C:\\Users\\' is denied.  Stack Trace :    ----- Inner Stack Trace #1 (System.IO.DirectoryNotFoundException) -----     at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle) in E:\A\_work\942\s\src\mscorlib\shared\System\IO\FileStream.Windows.cs:line 1650     at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options) in E:\A\_work\942\s\src\mscorlib\shared\System\IO\FileStream.Win32.cs:line 42     at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options) in E:\A\_work\942\s\src\mscorlib\shared\System\IO\FileStream.cs:line 230     at System.IO.FileStream..ctor(String path, FileMode mode) in E:\A\_work\942\s\src\mscorlib\shared\System\IO\FileStream.cs:line 164     at System.Data.Tests.DataTableTest3.XmlSchemaTest3() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Data.Common\tests\System\Data\DataTableTest3.cs:line 512  ----- Inner Stack Trace #2 (System.UnauthorizedAccessException) -----     at System.IO.FileSystem.DeleteFile(String fullPath) in D:\j\workspace\windows-TGrou---74aa877a\src\System.IO.FileSystem\src\System\IO\FileSystem.Windows.cs:line 170     at System.IO.File.Delete(String path) in D:\j\workspace\windows-TGrou---74aa877a\src\System.IO.FileSystem\src\System\IO\File.cs:line 102     at System.Data.Tests.DataTableTest3.Dispose() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Data.Common\tests\System\Data\DataTableTest3.cs:line 48     at ReflectionAbstractionExtensions.DisposeTestClass(ITest test, Object testClass, IMessageBus messageBus, ExecutionTimer timer, CancellationTokenSource cancellationTokenSource) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.execution\Extensions\ReflectionAbstractionExtensions.cs:line 76  ```    Also System.Data.Tests.DataTableTest3/XmlSchemaTest7  https://mc.dot.net/#/user/dotnet-maestro-bot/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/f1982993db81bc168e62e059516816b78af59bb7/workItem/System.Data.Common.Tests/analysis/xunit/System.Data.Tests.DataTableTest3~2FXmlSchemaTest7    ```text  Unhandled Exception of Type System.UnauthorizedAccessException  Message :  System.UnauthorizedAccessException : Access to the path 'C:\\Users\\DotNetTestRunner\\AppData\\' is denied.  Stack Trace :     at System.IO.FileSystem.DeleteFile(String fullPath) in D:\j\workspace\windows-TGrou---74aa877a\src\System.IO.FileSystem\src\System\IO\FileSystem.Windows.cs:line 170     at System.IO.File.Delete(String path) in D:\j\workspace\windows-TGrou---74aa877a\src\System.IO.FileSystem\src\System\IO\File.cs:line 102     at System.Data.Tests.DataTableTest3.Dispose() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Data.Common\tests\System\Data\DataTableTest3.cs:line 48     at ReflectionAbstractionExtensions.DisposeTestClass(ITest test, Object testClass, IMessageBus messageBus, ExecutionTimer timer, CancellationTokenSource cancellationTokenSource) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.execution\Extensions\ReflectionAbstractionExtensions.cs:line 76  ```    cc @divega, @saurabh500, @stephentoub 
28353	area-System.Net	Consider removing hard dependency on libcurl	"(https://github.com/dotnet/corefx/issues/27783#issuecomment-375096678)    For build (everything) [from source](https://github.com/dotnet/source-build), dependency on libcurl can be made optional, such that if the project was compiled in the absence of libcurl, this line instead of throwing fatal error:    https://github.com/dotnet/corefx/blob/9a2e5d8f0e7f816f983bce75f5bba22811df4994/src/Native/Unix/System.Net.Http.Native/CMakeLists.txt#L4-L6     will show a message. Then the `PAL_` methods that deal with curl will be `#ifdef`'d out. On managed side, unsetting `DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLE` or setting it to `false` will continue to use SocketHttpSocketHandler and emit (per-initialization?) EventSource warning log (https://github.com/dotnet/corefx/issues/2500) to notify ""CurlHandler is not present in this build, continue using SocketHttpSocketHandler ""."
28352	area-System.Drawing	System.Drawing.Common and RTL support	"Currently `System.Drawing.Common` version ""4.5.0-preview1-26216-02"" doesn't support RTL on operating systems other than Windows. Here is a sample to demonstrate this issue:    `SystemDrawingCommonRtlTest.csproj` file  ```xml  <Project Sdk=""Microsoft.NET.Sdk"">    <PropertyGroup>      <OutputType>Exe</OutputType>      <TargetFramework>netcoreapp2.0</TargetFramework>    </PropertyGroup>    <ItemGroup>      <PackageReference Include=""System.Drawing.Common"" Version=""4.5.0-preview1-26216-02"" />    </ItemGroup>  </Project>    ```    `Program.cs` file  ```csharp  using System.Drawing;  using System.Drawing.Drawing2D;  using System.Drawing.Imaging;  using System.Drawing.Text;  using System.Runtime.InteropServices;    namespace SystemDrawingCommonRtlTest  {      class Program      {          static void Main(string[] args)          {              var text = ""آزمايش""; // = Test              var tahomaFont = new Font(""Tahoma"", 40, FontStyle.Regular, GraphicsUnit.Pixel);                var (height, width) = getImageSize(text, tahomaFont);                using (var pic = new Bitmap(width, height))              {                  using (var graphics = Graphics.FromImage(pic))                  {                      graphics.SmoothingMode = SmoothingMode.AntiAlias;                      graphics.SmoothingMode = SmoothingMode.HighQuality;                      graphics.CompositingQuality = CompositingQuality.HighQuality;                      graphics.InterpolationMode = InterpolationMode.High;                      graphics.TextRenderingHint = TextRenderingHint.AntiAlias;                        using (var font = tahomaFont)                      {                          using (var format = new StringFormat())                          {                              format.FormatFlags = StringFormatFlags.DirectionRightToLeft;                              graphics.DrawString(                                  text,                                  font,                                  new SolidBrush(Color.Black),                                  new Rectangle(0, 0, width, height),                                  format);                                pic.Save($""rtl-text-{RuntimeInformation.OSDescription}.png"", ImageFormat.Png);                          }                      }                  }              }          }            private static (int Height, int Width) getImageSize(string text, Font font)          {              SizeF size;              using (var bmp = new Bitmap(1, 1))              {                  using (var g = Graphics.FromImage(bmp))                  {                      size = g.MeasureString(text, font);                  }              }                const int margin = 8;              return ((int)size.Height + margin, (int)size.Width + margin);          }      }  }    ```    And here are its output   On Windows 10: It works correctly  ![rtl-text-microsoft windows 10 0 16299](https://user-images.githubusercontent.com/766010/37753782-45c44e38-2dbc-11e8-8545-3441a6841bb8.png)      On Linux (Ubuntu): Characters are separated and rotated  ![rtl-text-linux 4 4 0-31-generic 50-ubuntu smp wed jul 13 00 07 12 utc 2016](https://user-images.githubusercontent.com/766010/37753785-4c7da594-2dbc-11e8-9f49-57c7efede820.png)"
28347	area-System.Memory	Leverage existing string API tests to improve coverage of span-based APIs	Partially resolves https://github.com/dotnet/corefx/issues/28238.    **Leftover for future:**  - Remove redundant span tests from System.Memory that were initially ported over from StringTests.  - Refactor the StringTests.cs to isolate these newly added span-based tests into a separate file (possibly moving them to Common) and reference them from System.Memory.Tests.csproj so that we can execute all relevant Span tests when running msbuild on S.M.T, rather than having to run tests from several places.     - This will likely result in some code duplication.    These tests won't pass until we get a new CoreCLR build with these changes: https://github.com/dotnet/coreclr/pull/17115 (along with the mirror PR).    cc @KrzysztofCwalina, @jkotas, @tarekgh, @stephentoub, @joshfree
28344	area-System.Net	Port being stripped off Host header in HttpRequestMessage constructed by HttpWebRequest	Following investigations into restsharp/RestSharp#1085, it appears that the Host header `HttpRequestMessage` constructed by `HttpWebRequest.SendRequest()` is being stripped of the port. This is evident [here](https://github.com/dotnet/corefx/blob/3dc80d215591fca7b4991ed3e60fc4ddb8e0d460/src/System.Net.Requests/src/System/Net/HttpWebRequest.cs#L1166) where only the Host of the URI is used, regardless whether or not the port is populated on the URI. This goes against the [HTTP spec](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.23) which respects the use of ports in the host header.    
28343	area-System.IO	Linux - FileStream.Length, FileStream.Seek & File.ReadAllBytes misbehaves with files in procfs	"I did the following experiment:  ```  using System;  using System.IO;    namespace TestProcStatFile  {      class Program      {          static void Main(string[] args)          {              const string procStat = ""/proc/stat"";              using (var file = File.OpenRead(procStat))              {                  Console.WriteLine($""Stream length: {file.Length}"");                  Console.WriteLine($""Actual length (via File.ReadAllBytes): {File.ReadAllBytes(procStat).Length}"");                  Console.WriteLine($""Actual length (via File.ReadAllText): {File.ReadAllText(procStat).Length}"");                    Console.WriteLine($""Can seek: {file.CanSeek}"");                  Console.WriteLine($""Seek(8192), Position: {file.Seek(8192, SeekOrigin.Begin)}"");                  try                  {                      file.Seek(0, SeekOrigin.End);                  }                  catch (Exception e)                  {                      Console.WriteLine($""Seek from end: {e}"");                  }              }          }      }  }  ```  Which reports the following:  ```  Stream length: 0  Actual length (via File.ReadAllBytes): 0  Actual length (via File.ReadAllText): 5085  Can seek: True  Seek(8192), Position: 8192  Seek from end: System.IO.IOException: Invalid argument     at System.IO.FileStream.CheckFileCall(Int64 result, Boolean ignoreNotSupported)     at System.IO.FileStream.Seek(Int64 offset, SeekOrigin origin)     at TestProcStatFile.Program.Main(String[] args) in /home/netem/RiderProjects/TestProcStatFile/Program.cs:line 21  ```  https://github.com/dotnet/corefx/blob/a8cfc6a498f0455c59b0030f74cba4dabeee86e1/src/System.IO.FileSystem/src/System/IO/File.cs#L320  This guy relays on FileStream.Length. I'm thinking if FileStream.Length should actually throw for files in procfs and CanSeek should return false for them and File.ReadAllBytes should check CanSeek and if it is false then don't pre-allocate buffer of the final size but allocate it dynamically while reading"
28342	area-System.IO	TimesIncludeMillisecondPart_Linux test failing in CI on Ubuntu	From https://github.com/dotnet/corefx/pull/28294  System.IO.Tests.FileInfo_GetSetTimes/TimesIncludeMillisecondPart_Linux  https://mc.dot.net/#/user/ahsonkhan/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/a319af0f981c27fd4bd680b6a545d44dc42fbbbc/workItem/System.IO.FileSystem.Tests/analysis/xunit/System.IO.Tests.FileInfo_GetSetTimes~2FTimesIncludeMillisecondPart_Linux    Ubuntu.1404.Amd64.Open-x64-Release  ```text  Unhandled Exception of Type Xunit.Sdk.AllException  Message :  Assert.All() Failure: 1 out of 6 items in the collection did not pass.  [1]: Xunit.Sdk.NotEqualException: Assert.NotEqual() Failure       Expected: Not 0       Actual:   0          at Xunit.Assert.NotEqual[T](T expected, T actual, IEqualityComparer`1 comparer)          at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass9_0.<TimesIncludeMillisecondPart_Linux>b__0(TimeFunction function) in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 108          at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)  ```    cc @JeremyKuhne 
28341	area-System.Runtime	StringFormat curly brace escaping error	
28339	area-System.Memory	Fix MemorExtensions.Portable Equals to use the correct argument name	See https://github.com/dotnet/corefx/pull/28239#issuecomment-375108404, where mismatch of argument names was introduced.    Also fixing the incomplete renaming from https://github.com/dotnet/corefx/pull/28160/commits/cbb1e6b892f79626370c020f81894eb0fce10838 which introduced discrepency between MemorExtensions.Fast and MemorExtensions.Portable.    cc @stephentoub 
28337	area-System.Net	Setting keepalivetime and keepaliveinterval on Linux Sockets	This question is in regards to #28061 and as per diagnosis by @saurabh500 :  > Windows impl of SqlClient sets some Keepalive values which Unix stack doesn’t  > SqlClient should set the keep alive values.    I was able to successfully set the `SocketOption` `KeepAlive` to Use Keep-Alives via `SetSocketOption` method  `_socket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);`  However I am having trouble setting `keepalivetime` and `keepaliveinterval` values.    It is my understanding that using `Socket.IOControl` method with `IOControlCode.KeepAliveValues` would be the correct method to set the above mentioned values. However, the comment in the IOControl method below seems the suggest that IOControl is used for Windows-specific IOCTL operations.  https://github.com/dotnet/corefx/blob/master/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs#L1763    If that is indeed the case then:  - Is it possible to set `keepalivetime` and `keepaliveinterval` values on Linux  - If yes, then what would the correct format of struct to use on Linux    Regards,  Keerat    
28336	area-System.Memory	Consider optimizing Span IndexOf for OrdinalIgnoreCase (portable span)	This is specific to portable span (and not fast span).    We do not necessarily need to allocate and call the string APIs when StringComparison is OrdinalIgnoreCase for IndexOf.    See https://github.com/dotnet/corefx/pull/28239#issue-176098021 for details and a proposed implementation of IndexOfOrdinalIgnoreCase as a starting point.    We would need to test and measure to make sure there isn't significant regression for certain cases as part of the optimization for the common/general case.
28335	area-System.Data	SqlDateTime.MinValue returns year 1953 instead of 1753 on netcoreapp2.0	"`SqlDateTime.MinValue` returns year 1953 instead of 1753 on `netcoreapp2.0`. I get the correct year on `net471` (date 1/1/1753).     ```  public static class DateTimeExtension  {   /// <summary>   /// Min value for Sql datetime to save in sql db.   /// </summary>   public static readonly DateTime SqlDateTimeMinUtc =    DateTime.SpecifyKind(     DateTime.Parse(SqlDateTime.MinValue.ToString()),     DateTimeKind.Utc     );     /// <summary>   /// Gets the min value for Sql datetime.   /// </summary>   public static DateTime ToSqlDateTimeMinUtc(this DateTime date)   {    return SqlDateTimeMinUtc;   }  }    [Test]  public void ToSqlDateTimeMinUtc01()  {   var date = new DateTime().ToSqlDateTimeMinUtc();   Assert.AreEqual(DateTimeKind.Utc, date.Kind);   Assert.AreEqual(""1/1/1753 12:00:00 AM"", date.ToString(CompareDateFormat));  }  ```  Below is the travis-ci log snippet and here is [full travis-ci log link](https://travis-ci.org/rmandvikar/csharp-extensions/builds/356540020#L692-L696).     ```  Failed   ToSqlDateTimeMinUtc01  Error Message:     String lengths are both 20. Strings differ at index 5.    Expected: ""1/1/1753 12:00:00 AM""    But was:  ""1/1/1953 12:00:00 AM""    ----------------^  ```  "
28334	area-System.Reflection	Fix System.Reflection.Metadata nuspec	"Corrects SCI dependency version in nuspec. Currently it's 1.4.0 for Profile7, but should be 1.5.0-*    ```  <dependencies>        <group targetFramework="".NETCoreApp2.1"" />        <group targetFramework="".NETStandard1.1"">          <dependency id=""NETStandard.Library"" version=""1.6.1"" />          <dependency id=""System.Collections.Immutable"" version=""1.5.0-preview3-26319-04"" />        </group>        <group targetFramework="".NETStandard2.0"">          <dependency id=""System.Collections.Immutable"" version=""1.5.0-preview3-26319-04"" />        </group>        <group targetFramework="".NETPortable0.0-Profile7"">          <dependency id=""System.Collections.Immutable"" version=""1.4.0"" />        </group>        <group targetFramework="".NETPortable4.5-Profile111"">          <dependency id=""System.Collections.Immutable"" version=""1.5.0-preview3-26319-04"" />        </group>        <group targetFramework=""UAP10.0.16299"" />        <group targetFramework=""WindowsPhoneApp8.1"">          <dependency id=""System.Collections.Immutable"" version=""1.5.0-preview3-26319-04"" />        </group>      </dependencies>  ```"
28333	area-Infrastructure	[Arm64/Linux] Framework packaging is not quite correct	"I just took a look at   ```  ./bin/packages/Debug/reports/runtime.linux-arm64.Microsoft.Private.CoreFx.NETCoreApp.json  ```    Looks like things are OK for v2.1  ```      "".NETCoreApp,Version=v2.1/linux-arm64"": {        ""Framework"": "".NETCoreApp,Version=v2.1"",        ""RuntimeID"": ""linux-arm64"",        ""CompileAssets"": [          {            ""LocalPath"": ""/home/sdmaclea/git/corefx/Tools/_._"",            ""PackagePath"": ""ref/netstandard/_._""          }        ],        ""RuntimeAssets"": [          {            ""LocalPath"": ""/home/sdmaclea/git/corefx/bin/AnyOS.AnyCPU.Debug/Microsoft.CSharp/netstandard/Microsoft.CSharp.dll"",            ""PackagePath"": ""runtimes/linux-arm64/lib/netcoreapp2.1/Microsoft.CSharp.dll"",            ""TargetFramework"": "".NETCoreApp,Version=v2.1"",            ""Version"": ""4.0.4.0""          },  ```  But arm64 support is not mentioned as supported in earlier versions.    @jkotas "
28332	area-System.Net	Fix assert race condition in CurlResponseMessage	If cancellation is requested between the earlier check in the method and the call to Register, Register will return a default registration, and then the callback will end up seeing a default token rather than the original token.  That will not only trigger the assert we've been seeing, but will also result in the wrong token being stored into the task.    Fixes https://github.com/dotnet/corefx/issues/28133  cc: @geoffkizer, @davidsh
28328	area-System.Collections	Adding EnsureCapacity and TrimExcess APIs to SortedSet	We want to add the EnsureCapacity and TrimExcess APIs to SortedSet.    The following APIs were approved earlier by @terrajobst at  https://github.com/dotnet/corefx/issues/24445#issuecomment-352869027    ```csharp  public int EnsureCapacity(int capacity);  public void TrimExcess(); // Calls the other passing Count  public void TrimExcess(int capacity);  ```    cc: @terrajobst @danmosemsft   
28326	area-Infrastructure	Windows.Compatibility fails restore due to downgrades	"Create the project:  ```xml  <Project Sdk=""Microsoft.NET.Sdk"">      <PropertyGroup>      <OutputType>Exe</OutputType>      <TargetFramework>netcoreapp2.1</TargetFramework>      <RestoreSources>https://dotnet.myget.org/F/dotnet-core/api/v3/index.json</RestoreSources>    </PropertyGroup>        <ItemGroup>      <PackageReference Include=""Microsoft.Windows.Compatibility"" Version=""2.0.0-preview3-26319-04"" />    </ItemGroup>    </Project>  ```    Restore it.    Observe failure:  ```  C:\test\winCompat.csproj : error NU1605:  winCompat -> Microsoft.Windows.Compatibility 2.0.0-preview3-26319-04 -> System.Security.Cryptography.Pkcs 4.5.0-preview3-26319-04 -> System.Security.Cryptography.Cng (>= 4.5.0-preview3-26319-04)  C:\test\winCompat.csproj : error NU1605:  winCompat -> Microsoft.Windows.Compatibility 2.0.0-preview3-26319-04 -> System.Security.Cryptography.Cng (>= 4.4.0)  ```    This is beceause PKCS is listed as a `PrereleaseLibraryPackage` but Cng is a *stable* `LibraryPackage`.  This results in the downgrade.    /cc @safern @weshaggard   "
28325	area-System.Net	Fix WebSockets receiving messages in chunks does not detect correct message size	Fix: #28097    It's a bug in `WebScoketBuffer`, we forget to decrease the _bufferedPayloadReceiveResult.Count.  Framework [doesn't has this problem.](https://github.com/Microsoft/referencesource/blob/4fe4349175f4c5091d972a7e56ea12012f1e7170/System/net/System/Net/WebSockets/WebSocketReceiveResult.cs#L45)    Verified with the repro provided by customer.
28324	area-System.Net	Re-enable hostname resolution test on Linux, but skip under certain conditions	"This test assumed that the host name can always be resolved, which isn't guaranteed on Unix.    In the interest of ""testing as much as we can"" I'm going to enable the test, but pass it if we get the specific error that indicates we haven't been able to resolve the localhost on Unix. That way we'll hopefully still see failures if things go wrong somewhere else.    The logic to skip the test is taken from another test in the same file:  https://github.com/dotnet/corefx/blob/643bccc7f2c24a897cc15c42486d4184e1f931eb/src/System.Net.NameResolution/tests/PalTests/NameResolutionPalTests.cs#L89-L104    Fixes: #20245"
28321	area-Serialization	NaN test fails on IL and reflection based serializer.	When a double or single property or field is attributed to say the default value is NaN, the IL and reflection based serializers still serialize the NaN value. It is expected that when a field or property has the same value as the attributed default value, that the value is not serialized.     This issue is caused by the fact that the expression `double.NaN != double.NaN` will return true. These serializers need to be modified to use the `Equals` method on double/single as that accounts for the NaN value.
28320	area-System.Memory	 Added Span.SequenceCompareTo tests for types bool, char, int, long and string	This PR resolves #28118 by adding more unit tests for the MemoryExtensions.SequenceCompareTo function.   It includes new tests for the following types : bool, char, int, long and string.    Hope this first PR will match your expectations 😄 
28319	area-Infrastructure	chmod: cannot access '/root/corefx-1502077/bin/testhost/netcoreapp-Linux-Debug-arm64/dotnet': No such file or directory	Opened on behalf of @jcagme  Warnings: 2 Status Message: failed  Build : Master - 20180321.05 (Product Build) Failing configurations: - Linux   - arm64 [Mission Control Build Info](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/build~2Fproduct~2F/build/20180321.05/workItem/Orchestration/analysis/external/Link) 
28317	area-System.Security	Make WindowsPrincipalIsInRoleNeg pass when a domain client is offline	Fixes #16511.    At least, it fixed it for my machine when I unplugged my office from corpnet.  But since it's the same message as the various versions of the issue have reported it seems like the right fix.
28316	area-System.Security	Fixed netfx System.Security.Cryptography.Xml.Tests fails on non-English Windows	Fixed netfx System.Security.Cryptography.Xml.Tests fails on non-English Windows. See https://github.com/dotnet/corefx/issues/28136
28315	area-System.Runtime	"Add more DateTime{Offset} ""r"" and ""o"" formatting tests"	"Add some tests for ""r"" and ""o"" DateTime and DateTimeOffset formatting.    cc: @danmosemsft "
28314	area-System.Collections	Allow custom equality comparer on ConcurrentDictionary TryUpdate	The method `TryUpdate` from `ConcurrentDictionary` should allow to set a custom equality comparer for the value.    ## Rationale and Usage    A custom equality comparer for `TryUpdate` can target three problems.    ### Ahead Of Time    On some platforms is demanded static compilation ahead of time. On those platforms code generation is not allowed.  When the method `TryUpdate` use `EqualityComparer<T>.Default` for value type comparison, it attempts to use Reflection to instantiate a new type which implements the `IEqualityComparer<T>` interface. That operation is not allowed on AOT compiled code.    ### Performance    Currently the method `TryUpdate` uses the equality comparer instance from `EqualityComparer<T>.Default` which not be the most optimized comparison for the case.    ### Custom comparison    For external types not controlled by the user that does not implement the intended comparison it is needed to create a wrapper to overcome the lack of a proper comparison.  The same is true if a qualified comparison is needed for specific `TryUpdate` call.    ### Usage    Given those types:    ```csharp  readonly struct Person : IEquatable<Person>  {      public long Id { get; }      public string Name { get; }      public string Email { get; }      public int Version { get; }        public Person(int version)      {          Id = default;          Name = default;          Email = default;          Version = version;      }        public bool Equals(Person other) => Id == other.Id && Name == other.Name && Email == other.Email && Version == other.Version;      public override bool Equals(object obj) => obj is Person other && Equals(other);      public override int GetHashCode() => Id.GetHashCode();  }    sealed class VersioningComparer : IEqualityComparer<Person>  {      public bool Equals(Person first, Person second) => first.Version == second.Version;      public int GetHashCode(Person obj) => obj.Version;  }  ```    Can be used as:    ```csharp  private readonly ConcurrentDictionary<long, Person> personDictionary;  private readonly VersioningComparer versionComparer;  // ...  public bool UpdatePerson(Person value)  {      Person previousVersion = new Person(value.Version - 1);      return personDictionary.TryUpdate(value.Id, value, previousVersion, versionComparer);  }  ```    ## Proposed API    ```csharp  public class ConcurrentDictionary<TKey, TValue>  {  // ...      public bool TryUpdate(TKey key, TValue newValue, TValue comparisonValue);      public bool TryUpdate(TKey key, TValue newValue, TValue comparisonValue, System.Collections.Generic.IEqualityComparer<TValue> comparer);  // ...  }  ```    ## Pull Request    A PR with the proposed changes is available: #28142
28313	area-System.IO	Fixed netfx System.IO.FileSystem.Tests fails on non-English Windows	Fixed netfx System.IO.FileSystem.Tests fails on non-English Windows. See https://github.com/dotnet/corefx/issues/28136
28312	area-System.Net	 CurlHandler: set ssl options to match X509 machine store certificates	Fixes https://github.com/dotnet/corefx/issues/28002    CC @caesar1995 @stephentoub @bartonjs @wfurt @karelz 
28311	area-System.Drawing	System.Drawing.Common.Tests fails some tests on netfx framework locally	"System.Drawing.Common.Tests fails some tests on netfx framework locally with next log:  ```        System.Drawing.Imaging.Tests.MetafileTests.Ctor_RectangleFEmpty_Success(description: ""description"") [FAIL]          System.Runtime.InteropServices.ExternalException : В GDI+ возникла ошибка общего вида.          Stack Trace:               в System.Drawing.Imaging.Metafile..ctor(String fileName, IntPtr referenceHdc, RectangleF frameRect, MetafileFrameUnit frameUnit, EmfType type, String description)               в System.Drawing.Imaging.Tests.MetafileTests.Ctor_RectangleFEmpty_Success(String description)        System.Drawing.Imaging.Tests.MetafileTests.Ctor_StringIntPtrEmfType_Success(emfType: EmfOnly) [FAIL]          System.Runtime.InteropServices.ExternalException : В GDI+ возникла ошибка общего вида.          Stack Trace:               в System.Drawing.Imaging.Metafile..ctor(String fileName, IntPtr referenceHdc, EmfType type, String description)               в System.Drawing.Imaging.Metafile..ctor(String fileName, IntPtr referenceHdc, EmfType type)               в System.Drawing.Imaging.Tests.MetafileTests.Ctor_StringIntPtrEmfType_Success(EmfType emfType)        System.Drawing.Imaging.Tests.MetafileTests.Ctor_StringIntPtrEmfType_Success(emfType: EmfPlusDual) [FAIL]          System.Runtime.InteropServices.ExternalException : В GDI+ возникла ошибка общего вида.          Stack Trace:               в System.Drawing.Imaging.Metafile..ctor(String fileName, IntPtr referenceHdc, EmfType type, String description)               в System.Drawing.Imaging.Metafile..ctor(String fileName, IntPtr referenceHdc, EmfType type)               в System.Drawing.Imaging.Tests.MetafileTests.Ctor_StringIntPtrEmfType_Success(EmfType emfType)        System.Drawing.Imaging.Tests.MetafileTests.Ctor_StringIntPtrEmfType_Success(emfType: EmfPlusOnly) [FAIL]          System.Runtime.InteropServices.ExternalException : В GDI+ возникла ошибка общего вида.          Stack Trace:               в System.Drawing.Imaging.Metafile..ctor(String fileName, IntPtr referenceHdc, EmfType type, String description)               в System.Drawing.Imaging.Metafile..ctor(String fileName, IntPtr referenceHdc, EmfType type)               в System.Drawing.Imaging.Tests.MetafileTests.Ctor_StringIntPtrEmfType_Success(EmfType emfType)        System.Drawing.Imaging.Tests.MetafileTests.Ctor_StringIntPtrEmfType_Success(description: null) [FAIL]          System.Runtime.InteropServices.ExternalException : В GDI+ возникла ошибка общего вида.          Stack Trace:               в System.Drawing.Imaging.Metafile..ctor(String fileName, IntPtr referenceHdc, EmfType type, String description)               в System.Drawing.Imaging.Tests.MetafileTests.Ctor_StringIntPtrEmfType_Success(String description)        System.Drawing.Imaging.Tests.MetafileTests.Ctor_StringIntPtrEmfType_Success(description: ""description"") [FAIL]          System.Runtime.InteropServices.ExternalException : В GDI+ возникла ошибка общего вида.          Stack Trace:               в System.Drawing.Imaging.Metafile..ctor(String fileName, IntPtr referenceHdc, EmfType type, String description)               в System.Drawing.Imaging.Tests.MetafileTests.Ctor_StringIntPtrEmfType_Success(String description)  ```  'В GDI+ возникла ошибка общего вида.' is 'A generic error occurred in GDI+' on English.  "
28310	area-Infrastructure	Opening .sln after building with CoreCLROverridePath hangs	Repro:  git clean -xdf  build.cmd -- /p:CoreCLROverridePath:c:\path\to\coreclr\release\build\  cd src\System.Runtime  System.Runtime.sln    Visual Studio opens and then sits with a progress dialog for a very long time.  After an hour the first time and a half hour the second time, I terminated the devenv process.  When I think cleaned and built without a custom runtime, the solution opened and became usable in seconds.
28309	area-System.Reflection	PEReaderTests.GetSectionData_Loaded failed in CI	https://mc.dot.net/#/user/dotnet-maestro-bot/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/ee4cab88df3d975a6f9cee26cd2c7b916d3b450e/workItem/System.Reflection.Metadata.Tests/analysis/xunit/System.Reflection.PortableExecutable.Tests.PEReaderTests~2FGetSectionData_Loaded  ```  Windows.7.Amd64.Open-x86-Release  Unhandled Exception of Type Xunit.Sdk.TrueException  Message :  Assert.True() Failure  Expected: True  Actual:   False  Stack Trace :     at System.Reflection.Metadata.Tests.LoaderUtilities.LoadPEAndValidate(Byte[] peImage, Action`1 validator, Boolean useStream) in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Reflection.Metadata\tests\TestUtilities\LoaderUtilities.cs:line 25     at System.Reflection.PortableExecutable.Tests.PEReaderTests.GetSectionData_Loaded() in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Reflection.Metadata\tests\PortableExecutable\PEReaderTests.cs:line 237  ```
28306	area-System.Net	Linux/OSX PlatformNotSupportedException calling Socket.IOControl	PlatformNotSupportedException when [using IOControl](https://github.com/graffen/NLog.Targets.Syslog/blob/v5.0.0-beta-02/src/NLog.Targets.Syslog/MessageSend/Tcp.cs#L86) to set keepAlive  ```csharp  tcp.Client.IOControl(IOControlCode.KeepAliveValues, keepAlive.ToByteArray(), null);  ```  Please look at https://github.com/graffen/NLog.Targets.Syslog/issues/119 for more info
28305	area-System.Net	Linux/OSX - setting ExclusiveAddressUse or DontLinger not supported	Operation not supported exception when [using SetSocketOption](https://github.com/graffen/NLog.Targets.Syslog/blob/v5.0.0-beta-02/src/NLog.Targets.Syslog/MessageSend/Tcp.cs#L82-L86) to set ExclusiveAddressUse or DontLinger:  ```csharp  tcp.Client.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ExclusiveAddressUse, true);  tcp.Client.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.DontLinger, false);  tcp.Client.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.Linger, new LingerOption(true, 0));  tcp.Client.IOControl(IOControlCode.KeepAliveValues, keepAlive.ToByteArray(), null);  ```  Please look at https://github.com/graffen/NLog.Targets.Syslog/issues/119 for more info
28304	area-Serialization	Netfx System.Runtime.Serialization.Json.ReflectionOnly.Tests fails 2 tests at Tomsk time zone	"Netfx System.Runtime.Serialization.Json.ReflectionOnly.Tests fails 2 tests at Tomsk time zone with next log:  ```      Starting:    System.Runtime.Serialization.Json.ReflectionOnly.Tests        DataContractJsonSerializerTests.DCJS_EnumerableCollection [FAIL]          strings differ at index 23                             [expected]:84800000+0600)\/"",""\/Date(9467    [actual  ]:84800000+0700)\/"",""\/Date(9467                             [Expected (with length=91)]:    [""\/Date(946684800000+0600)\/"",""\/Date(946771200000+0600)\/"",""\/Date(946857600000+0600)\/""]    [Actual (with length=91)]:    [""\/Date(946684800000+0700)\/"",""\/Date(946771200000+0700)\/"",""\/Date(946857600000+0700)\/""]          Test failed for input: SerializationTypes.EnumerableCollection          Expected: [""\/Date(946684800000+0600)\/"",""\/Date(946771200000+0600)\/"",""\/Date(946857600000+0600)\/""]          Actual: [""\/Date(946684800000+0700)\/"",""\/Date(946771200000+0700)\/"",""\/Date(946857600000+0700)\/""]          Expected: True          Actual:   False          Stack Trace:               в Xunit.Assert.True(Nullable`1 condition, String userMessage) в C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\BooleanAsserts.cs:строка 90               в DataContractJsonSerializerTests.SerializeAndDeserialize[T](T value, String baseline, DataContractJsonSerializerSettings settings, Func`1 serializerFactory, Boolean skipStringCompare)               в DataContractJsonSerializerTests.DCJS_EnumerableCollection()        DataContractJsonSerializerTests.DCJS_VerifyDateTimeForFormatStringDCJsonSerSetting [FAIL]          strings differ at index 23                             [expected]:40000000+0600)\/""    [actual  ]:40000000+0700)\/""                             [Expected (with length=30)]:    ""\/Date(1291140000000+0600)\/""    [Actual (with length=30)]:    ""\/Date(1291140000000+0700)\/""          Test failed for input: 01.12.2010 0:00:00          Expected: ""\/Date(1291140000000+0600)\/""          Actual: ""\/Date(1291140000000+0700)\/""          Expected: True          Actual:   False          Stack Trace:               в Xunit.Assert.True(Nullable`1 condition, String userMessage) в C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\BooleanAsserts.cs:строка 90               в DataContractJsonSerializerTests.SerializeAndDeserialize[T](T value, String baseline, DataContractJsonSerializerSettings settings, Func`1 serializerFactory, Boolean skipStringCompare)               в DataContractJsonSerializerTests.DCJS_VerifyDateTimeForFormatStringDCJsonSerSetting()      Finished:    System.Runtime.Serialization.Json.ReflectionOnly.Tests  ```  To reproduce setup Tomsk time zone and test with netfx framework.    Tomsk time zone is complex becauze some time ago   1. It was +0700 with daylight saving time  2. then it was +0600 with and without  daylight saving time  3. Now it is +0700 without daylight saving time.    Test use +0600 offset that was at 2000 year but serialization use +0700 offset that is now. So I think this is serialization issue for complex tome zones.  "
28303	area-System.Security	Support exporting cryptographic keys to PEM format.	It would be very helpful to add the functionality to most of the asymmetric cryptographic algorithm implementations to add an explicit method to both import and export the cryptographic keys to the PEM file format.    We already have ```ToXmlString``` and ```FromXmlString``` on the [AsymmetricAlgorithm](https://github.com/dotnet/corefx/blob/master/src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/AsymmetricAlgorithm.cs) base class  so adding a ```ToPemString``` and ```FromPemString``` would make sense to me at least.    I realize PEM is not exactly a standard format but it is being used extensively as format for encryption/signature keys in many utilities (like openssl) so supporting it for at least most common algorithms (RSA, ECDsa, X509, DSA, PKCS7, PKCS8) seems like a logical thing to do with .NET now being cross-platform.    The current format is mostly dictated by [RFC 7468](https://tools.ietf.org/html/rfc7468) as well as [OpenSSL's PEM handling](https://github.com/openssl/openssl/blob/master/include/openssl/pem.h).
28301	area-System.Diagnostics	Question - What is the Difference between Debug Type Full & Pdb	"Hi,  I have a question regarding the build output when setting the Debug Type Full or Pdb-Only in project properties on .NET Core. As far as I could see the assemblies produced are the same? I also don't see any difference in the pdb files which are produced... but maybe am missing something.    In full framework there is definitely a difference and it could have perf impact on resulting code, should we have the same concerns on .NET Core? or is it a non-issue.    _""One difference between -debug:pdbonly and -debug:full is that with -debug:full the compiler emits a DebuggableAttribute, which is used to tell the JIT compiler that debug information is available. Therefore, you will get an error if your code contains the DebuggableAttribute set to false if you use -debug:full. "" -  https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-options/debug-compiler-option    Thanks"
28299	area-System.Xml	Test failure: System.Xml.Tests.XmlWriterTests_Encoding/WriteWithUtf32EncodingNoBom	Opened on behalf of @Sunny-pu  The test `System.Xml.Tests.XmlWriterTests_Encoding/WriteWithUtf32EncodingNoBom` has failed.  System.PlatformNotSupportedException : Compilation of XSLT is not supported on this platform.          Stack Trace:             at System.Xml.Xsl.XslCompiledTransform.CompileQilToMsil(XsltSettings settings) in E:\A\_work\14\s\corefx\src\System.Private.Xml\src\System\Xml\Xslt\XslCompiledTransform.cs:line 204        at System.Xml.Xsl.XslCompiledTransform.LoadInternal(Object stylesheet, XsltSettings settings, XmlResolver stylesheetResolver) in E:\A\_work\14\s\corefx\src\System.Private.Xml\src\System\Xml\Xslt\XslCompiledTransform.cs:line 172        at System.Xml.Xsl.XslCompiledTransform.Load(XmlReader stylesheet) in E:\A\_work\14\s\corefx\src\System.Private.Xml\src\System\Xml\Xslt\XslCompiledTransform.cs:line 107        at System.Xml.Tests.XmlWriterTests_Encoding.WriteWithUtf32EncodingNoBom() in E:\A\_work\14\s\corefx\src\System.Private.Xml\tests\XmlWriter\WriteWithEncoding.cs:line 69 Build : ProdCon - Master - 20180321.01 (UWP F5 Tests) Failing configurations: - Windows.10.Arm64-arm   - Release - Windows.10.Amd64.ClientRS3-x64   - Release - Windows.10.Amd64.ClientRS3-x86   - Release  Details: https://mc.dot.net/#/product/netcore/prodconmaster/source/prodcon~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fuwp~2F/build/20180321.01/workItem/System.Xml.RW.XmlWriter.Tests/analysis/xunit/System.Xml.Tests.XmlWriterTests_Encoding~2FWriteWithUtf32EncodingNoBom
28296	area-System.Memory	Move Span APIs that allow skipping visibility checks to MemoryMarshal	Resolves https://github.com/dotnet/corefx/issues/27094    **TODO:** Remove AsBytes extension method once all calls have been changed to MemoryMarshal    Depends on the PR from coreclr (along with the mirror PR) - https://github.com/dotnet/coreclr/pull/17087 / https://github.com/dotnet/coreclr/pull/17106. It will fail CI until then.    cc @jkotas, @KrzysztofCwalina, @dotnet/corefxlab-contrib 
28294	area-System.Memory	Don't skip blocks passed end and simplify the Seek implementation.	Borrows the tests from https://github.com/dotnet/corefx/pull/28261 by @benaadams and builds on top of it.    - Ignore the formatting/clean up changes.  - The most important change is to the Seek and SeekMultiSegment methods. With this simplification, the fix in https://github.com/dotnet/corefx/pull/28261 is no longer necessary, since this PR supersedes it.     - This change greatly simplifies the implementation (and the disassembly shrinks, i.e. this will almost certainly help performance). The loop body shrinks to 14 instructions, from 23.    **Before (loop highlighted):**  ![image](https://user-images.githubusercontent.com/6527137/37695448-8ca866a8-2c8c-11e8-961b-caf2acac7987.png)    **After (loop highlighted):**  ![image](https://user-images.githubusercontent.com/6527137/37695437-7c3affce-2c8c-11e8-88cd-69a09e03d59e.png)      cc @AlexRadch, @pakrym, @davidfowl, @joshfree, @benaadams 
28292	area-System.IO	test enabled on redhat6	
28289	area-Infrastructure	[Arm64/Ubuntu] Rework official build flow to support bootstrapping	@mmitche @weshaggard @janvorli @stephentoub PTAL    I was concerned the `buildpipeline/DotNet-CoreFx-Trusted-Linux-Crossbuild.json` wouldn't work for arm64.  I took a detailed look and I think I understood it enough to be certain it wouldn't work for arm64.      I manually built arm64 corefx packages.  Using this process so it should be close.    The primary impact of this patch is that   ```  ./build.sh              $(PB_BuildArguments)  ```  becomes  ```  ./build-native.sh       $(PB_BuildNativeArguments)  ./build-managed.sh      $(PB_BuildManagedArguments)  ./build-packages.sh     $(PB_BuildPackagesArguments)  ```  This allows cross bootstrapped builds by allowing the managed build to be built against x64.    The original draft of the patch added a new file   `DotNet-CoreFx-Trusted-Linux-Crossbuild-Bootstrap.json`, but this shared approach seemed better.    I will also update #28280 to use a similar flow and build all the way to packages.
28285	area-Meta	Some enhancements for  existing classes	Since there is many enhancements in the framework these days, I suggest to review all existing classes and update them to benefit from new features, such as:  - methods that receive objects and/or return objects can use generics.  - methods that have out parameters can have overloads that return ValueTuples  - All properties and parameters that only deal with positive numbers like Lengths, widths, heights, can be modified to use uint instead of int (same for other signed types). This will eliminate the need checks for raising exceptions for negative values, because the compiler can discover this in design time, or the cast will raise an exception in runtime. Also, Unsigned types have a double range than signed types.  - Add some Deconstructors to classes.  - The Math.Min and Math.Max can have a param array to allow compare three or more elements. Perhaps you can add some more math functions like factorial, sum, avg..... etc.  - and so on….  and so on.  I think most of these changes will not break any code. But I don't see any problem in breaking changes as long as they are for the best. Besides, one can always choose to run old projects on old frameworks version.   
28283	area-System.Memory	Productize NativeOwnedMemory	Tracking issue original from https://github.com/dotnet/corefxlab/issues/1924  ```c#  namespace System.Buffers  {      public sealed class NativeOwnedMemory<T> : OwnedMemory<T>      {          public NativeOwnedMemory(void* pointer, int length);          ...      }  }  ```
28282	area-System.Memory	Memory<T> should implement IReadOnlyList<T>	"Migrating corefxlab issue https://github.com/dotnet/corefxlab/issues/903 on behalf of @smmalis37 now that Span/Memory have moved to the corefx repo for .NET Core 2.1:    > Essentially we're constructing a list of objects in C++ code and then accessing this list on the C# side. Since we don't want to duplicate all of these objects (as the lists can be quite large and memory consumption is a concern) we've created a type that acts similarly to the unsafe constructor on Span to access the items without duplicating them and handle type safety. There are some other lists we create on the C# side, and so to make consumption of our API simpler we just expose everything as an IReadOnlyList (since users shouldn't be modifying what we expose). **I'd love to be able to replace our type with Span for simplicity and for ""official"" support.**  "
28281	area-System.Memory	Port over non-redundant Span tests from corefxlab	From https://github.com/dotnet/corefxlab/issues/1403    Add span-based tests from corefxlab that are non-redundant and are testing interesting scenarios.    From a cursory view, here are some examples:  https://github.com/dotnet/corefxlab/blob/5b2bbc602833e4fac9a2cfe05ddfafe612dd9e86/tests/System.Buffers.Primitives.Tests/BasicUnitTests.cs#L332  https://github.com/dotnet/corefxlab/blob/5b2bbc602833e4fac9a2cfe05ddfafe612dd9e86/tests/System.Buffers.Primitives.Tests/CastTests.cs#L54  https://github.com/dotnet/corefxlab/blob/5b2bbc602833e4fac9a2cfe05ddfafe612dd9e86/tests/System.Buffers.Primitives.Tests/CastTests.cs#L90  https://github.com/dotnet/corefxlab/blob/5b2bbc602833e4fac9a2cfe05ddfafe612dd9e86/tests/System.Buffers.Primitives.Tests/CastTests.cs#L126  https://github.com/dotnet/corefxlab/blob/5b2bbc602833e4fac9a2cfe05ddfafe612dd9e86/tests/System.Buffers.Primitives.Tests/OverflowTests.cs#L27
28278	area-System.Net	Add server-side SNI support	Related issue: https://github.com/dotnet/corefx/issues/24553  This is for overview only so that it is easier to discuss the API shape.    Changes to original proposal:  - delegate is defined in the namespace and not in the SslStream (to match others)  - name has changed to ServerCertificateSelectionCallback  - removed X509CertificateCollection from return values as currently do not see what it would be used for (if other implementations require it will change it)    Left:  - https://github.com/dotnet/corefx/issues/28585 client on windows does not seem to be IDN mapping before sending. current version supports both but need to revalidate with the spec  - document what is known during the callback    cc @Drawaes  
28275	area-System.Numerics	System.Numerics give System.IndexOutOfRangeException when I try to process a vector with 2 items. The exceptions do not really help me figure out the issue	"the most basic implementation did not work for me. Vector constructor gives me System.IndexOutOfRangeException: 'Index was outside the bounds of the array.'  a thread on stackoverflow says there is a lower limit on the array size but it should be implemented inside the class    ```c#  using System;  using System.Collections.Generic;  using System.Linq;  using System.Text;  using System.Threading.Tasks;  using System.Numerics;    class Program  {      static void Main(string[] args)      {          float[] f1 = new float[] { 1, 2 };          float[] f2 = new float[] { 1, 2 };          Vector<float> v1 = new Vector<float>(f1);          Vector<float> v2 = new Vector<float>(f2);          Vector<float> v3;          v3 = Vector.Add<float>(v1, v2);            for (int i = 0; i <= 1; i++)          {              Console.WriteLine(""Item "" + i.ToString() + "": "" + v3[i].ToString());          }          Console.ReadKey();      }  }  ```    [EDIT] Format code snipper into readable form by @karelz"
28274	area-System.Memory	Running Unit Tests fail with .net Core 2.1 when using System.Memory 4.5.0-preview3 package	"I have a very simple case:  - A .net Core 2.1 (Preview 2) library project containing the library to test. Referencing the System.Memory NuGet Package (4.5.0-preview3)  - A .net Core 2.1 (Preview 2) library project for the unit test, referencing the first library.    I've tried, xUnit, nUnit frameworks and `dotnet test`, Visual Studio Runner (15.7 Preview 1) and Resharper Runner (2018.1 EAP 3) and I can't get my unit test executed.  I've used `""Microsoft.NET.Test.Sdk"" Version=""15.6.1""` and `""Microsoft.NET.Test.Sdk"" Version=""15.7.0-preview20180307""`.    I have this error:  ```  Microsoft.VisualStudio.TestPlatform.ObjectModel.TestPlatformException: Testhost process exited with error: Unhandled Exception: System.TypeLoadException: Could not load type 'System.MemoryExtensions' from assembly 'System.Memory, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.     at System.Net.IPAddress.Parse(String ipString)     at Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TcpClientExtensions.GetIPEndPoint(String value)     at Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.SocketClient.Start(String endPoint)     at Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.InitializeCommunication()     at Microsoft.VisualStudio.TestPlatform.TestHost.DefaultEngineInvoker.Invoke(IDictionary`2 argsDictionary)     at Microsoft.VisualStudio.TestPlatform.TestHost.Program.Main(String[] args)       at Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.SetupChannel(IEnumerable`1 sources, CancellationToken cancellationToken)     at Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager.StartTestRun(TestRunCriteria testRunCriteria, ITestRunEventsHandler eventHandler)    Test Run Aborted.  ```    Apparently the Microsoft.NET.Test.Sdk doesn't get along well with the System.Memory NuGet package (System.Memory 4.5.0-preview3-26318-03) that I use in my tested library because it can't load `type 'System.MemoryExtensions' from assembly 'System.Memory, Version=4.0.1.0`    Any idea?"
28271	area-System.Threading	Microsoft.Tpl.Dataflow does not contain assembly reference for .NET version 4	Hi, I am in need of a version of dataflow that targets .net version 4. This is the error I get when I try to install Microsoft.Tpl.Dataflow or System.Threading.Tasks.Dataflow.  ``` Could not install package 'Microsoft.Tpl.Dataflow 4.5.8'. You are trying to install this package into a project that targets '.NETFramework,Version=v4.0', but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.```  
28270	area-System.Data	System.Data.SqlClient.TdsParser  performance  improvement	I've done a little research and it looks like we do a lot of unnecessary allocations in the 'TryReadSqlDateTime' method.    For each call of the method we allocate the array of bytes (`` byte[] datetimeBuffer = new byte[length];``)  instead of allocating it once and then reuse existing array.    Let's imagine that we read 1 million DateTime values from database. Using existing implementation of TdsParser we will have 1 million allocations of byte[] what causes unnecessary memory traffic and isn't so good for GC.    So, if nobody minds, I'd make the described changes and then estimate benefits.  
28268	area-Infrastructure	200 to uwp6.1	@HollyAM @karelz @nattress @weshaggard PTAL    This ports servicing changes from release/2.0.0 to UWP 6.1. I made some judgement calls on what should and shouldn't be ported, so there may be some needed changes to this PR. PTAL if anything stands out.
28267	area-System.Net	 Could not load file or assembly System.Net.Http Version=4.0.0.0 in .net core app	"I've got this issue in .net core 2.0, just to give you more idea about what I'm trying to achieve. I'm trying to connect to VSTS and update the test status ""Passed"" or ""Failed"" based on my unit tests  I run of this ""Could not load file or assembly System.Net.Http Version=4.0.0.0"" issue where the code is trying to open a connection to vsts.  var connection = new VssConnection(""https://.visualstudio.com"", credentials);"
28266	area-System.Memory	Fix skipping last segment logic in ROS.TryGet	https://github.com/dotnet/corefx/issues/28251
28265	area-Infrastructure	CI Drop PR trigger for Ubuntu16.04 arm64 Debug Build leg	Due to CI capacity, it would be better to not run these on every PR.    @weshaggard Please assign to me.  I'll take care of it after #28250 merges.  @eerhardt I'll also take care of sharing more code as you suggested.
28261	area-System.Memory	ROS: Don't skip blocks passed end	Seen in https://github.com/dotnet/corefx/pull/28095#discussion_r175247253    /cc @AlexRadch @pakrym @davidfowl @ahsonkhan 
28258	area-System.IO	Add Path.TryGetFullPath()	From API proposal #27418.    Need to add:    ``` C#  namespace System.IO  {      public static class Path      {          public static bool TryGetFullPath(ReadOnlySpan<char> path, Span<char> destination, out int charsWritten);          public static bool TryGetFullPath(ReadOnlySpan<char> path, ReadOnlySpan<char> basePath, Span<char> destination, out int charsWritten);      }  }  ```    Returns false if the destination isn't large enough to fit the full path into.
28257	area-System.IO	Add Path.TryGetRelativePath()	From API proposal #27418.    Need to add:    ``` C#  namespace System.IO  {      public static class Path      {          public static bool TryGetRelativePath(ReadOnlySpan<char> relativeTo, ReadOnlySpan<char> path, Span<char> destination, out int charsWritten);      }  }  ```    Returns false if the destination isn't large enough to fit the full path into.
28256	area-System.IO	Add Path.TryGetRandomFileName()	From API proposal #27418.    Need to add:    ``` C#  namespace System.IO  {      public static class Path      {          public static bool TryGetRandomFileName(Span<char> destination, out int charsWritten);      }  }  ```    Returns false if the destination isn't large enough to fit the full path into.
28255	area-System.IO	Add Path.TryGetTempPath()	From API proposal #27418.    Need to add:    ``` C#  namespace System.IO  {      public static class Path      {          public static bool TryGetTempPath(Span<char> destination, out int charsWritten);      }  }  ```    Returns false if the destination isn't large enough to fit the full path into.
28254	area-Infrastructure	[release/2.0.0]  Share common props file for manual shim	Share common props file for the manual shims.    Add GenFacadesForceZeroVersionSeeds=true so that the assembly references  for the shims are set to 0.0.0.0 so that they will correctly unify  up and support multiple versions of OOB packages like SqlClient.    cc @ericstj     Fixes https://github.com/dotnet/corefx/issues/28139 in release/2.0.0 branch.
28253	area-System.ComponentModel	Fix wrong target type in UInt16Converter	Fixes https://github.com/dotnet/corefx/issues/28195    @AlexGhiondea, I added a test for this specific case, but I'd suggest subsequently we refactor the tests to move most of the [Fact]s to the (abstract) base class, such that this test can be made to apply to other derived test classes as well, and other tests moved down as well to avoid the duplication.  The derived types would override various properties to customize how the base tests behave (e.g. what converter to use, the target type, etc.)
28252	area-Infrastructure	Cross compile legs have machine affinity set to 'Ubuntu14.04'  'arm-cross-latest'	Since these jobs are using docker there doesn't seem to be a technical reason for this.    @mmitche Suggested this be dropped.    Opening an issue to track
28251	area-System.IO	ReadOnlySequence's Enumerator returns different results for same struct.	Repro:  I am using Pipelines to obtain a ReadOnlySequence from a PipeReader. I am then iterating over the number of chunks in the buffer to count the buffer size, and then iterating again to add them into an array. Something like:    ```C#  var pipe = new Pipe(new SlabMemoryPool());    ...  var readResult = pipe.Reader.ReadAsync();  var readOnlySequence = readResult.Buffer;  var nChunks = 0;    for (var memory in readOnlySequence)  {      nChunks++;  }    var handles = new MemoryHandle[nChunks];  var currentChunk = 0;    for (var memory in readOnlySequence)  {      handles[currentChunk] = new MemoryHandle();      currentChunk++;  }  ```    The writer to the pipe is writing and flushing memory in a loop:  ```c#  pipe.Writer.Write(buffer);  pipe.Writer.FlushAsync();  ```    My hypothesis is that the enumerator is skipping empty segments somehow.  cc/ @pakrym  @davidfowl   
28250	area-Infrastructure	[Arm64] Fix CI tar path	@stephentoub PTAL  Fixes #28247    Built in the docker image, and tested the tar path.  Matches tar path used for x86 below.
28249	area-System.Security	Create an API to manipulate PKCS12 objects	"https://tools.ietf.org/html/rfc7292    * Allow enumeration of contents by type (KeyBag, PKCS8ShroudedKeyBag, CertBag, CRLBag, SecretBag)    * SafeContents is a recursive node, so maybe it needs to be part of the enumerator and not an enumeratable thing.  Or maybe it should also be enumeratable because maybe someone wants to indicate ""these belong together"" for its contents.  * Should allow the authenticity and integrity passwords to be different (in password mode)  * Technically, the integrity mode can also be disabled.  * P2: Support for public-key modes    * P3: Support for { public key integrity, password authenticity } and { password integrity, public key authenticity }  * Virtuous: A method which, given an X509Certificate2 where HasPrivateKey=true adds the key and the cert and used an automatic cert/key relationship identifier.    * Windows-style would be to add the key to a shrouded key bag, the cert to be added to a CertBag which gets encrypted, and the key identifier to be a sequence number.      * Windows also would carry the persisted key name (as ""friendly name"") and an indicator of the CSP/KSP, and (if appropriate) an indication if the key was a machine key or user key.          * Need to decide what parts of these to do by default  * Each added item needs to be capable of having properties defined on it. (And each enumerated item capable of having the properties inspected)    Gotchas:  * The spec allows for keys to be ""shrouded"" (PKCS8 encrypted), unencrypted KeyBag, or encrypted KeyBag.  Need a way to distinguish user intent.  * The spec allows for unencrypted and encrypted CertBags.  So we need a way to distinguish user intent.  * Technically speaking, all other bags have this same conundrum.  Only private keys are tri-state, though.    Algorithms:  * Windows 7 only supports the legacy PBES1 options.  * We definitely need to allow user expression of algorithm.  Should we require it?  Or have a default of ""What Windows 7 does""?    Design:  * Maybe ""build"" and ""read"" don't need to be the same class?    * If builder is separate, does it need ""append""?  * For a separate builder, it might be easiest to require the passwords/keys at construction time, and then have an API which is AddEncryptedContents(SafeBag) and AddUnencryptedContents(SafeBag).      * Or maybe SafeBags should have a property of whether they are (reader) or should-be (builder) encrypted."
28248	area-System.Data	Fix dictionary access in SqlUDTStorage	Fixes https://github.com/dotnet/corefx/issues/28198  cc: @saurabh500 
28247	area-Infrastructure	CI Build step 'Execute shell' marked build as failure	09:35:37 [ubuntu16.04_arm64_cross_debug_prtest] $ /bin/sh -xe /tmp/jenkins6999066973616382871.sh  09:35:37 + tar -czf bin/build.tar.gz --directory=bin/runtime/netcoreapp-Linux-Debug-arm64 .  09:35:37 tar: bin/runtime/netcoreapp-Linux-Debug-arm64: Cannot open: No such file or directory  09:35:37 tar: Error is not recoverable: exiting now  09:35:37   Build step 'Execute shell' marked build as failure    https://ci.dot.net/job/dotnet_corefx/job/master/job/ubuntu16.04_arm64_cross_debug_prtest/11/consoleFull#-8536224876a086b3e-df04-41d2-bc4d-43e8f9406d07
28245	area-Infrastructure	Attempt to fix Ubuntu arm64 legs	Per @MichaelSimons' comment: https://github.com/dotnet/corefx/pull/28211#issuecomment-374622252  cc: @sdmaclea 
28243	area-Meta	Move to optimized shared Marvin implementation in corefx	
28242	area-System.IO	WIP: Enable TimesIncludeMillisecondPart on selected filesystems only	Use filesystem name to suppress the test failure
28241	area-System.Net	Memory leak in HttpClient using ASP.NET Core	"I encounter a memory leak problem when using HttpClient to access an HTTPS URL. Code running on ASP.NET Core + Linux server（AWS AMI).    After about 1000,000 requests, RAM occupation (RES in top) will grows to about 1GB and not release after all requests are done. If I send more requests, ram will eventually occupy all avaliable system ram and stop responding.    Testing environment:  AWS c4.xlarge , Linux AMI, Dotnetcore 2.0.6 Runtime  Testing method: ab -n 1000000 -c 100 http://127.0.0.1:5000/    Testing code:  ```csharp  static HttpClient client = new HttpClient();  public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)  {       app.Run(async (context) =>      {          string content = """";          using (var response = await client.GetAsync(""https://some.site.com/hello"")) // Only leak with HTTPS URLS          {              content = await response.Content.ReadAsStringAsync();          }          await context.Response.WriteAsync(content);      });  }  ```    If use a HttpClient pool with some fixed number HttpClient that HttpClient only request https one at a time, the RAM will be fine(no leakage found).    Am I using HttpClient wrong? static instance vs pooled httpclient？"
28239	area-System.Memory	Optimize the string-like Span APIs for OrdinalIgnoreCase (portable Span)	Resolves https://github.com/dotnet/corefx/issues/27379    cc @KrzysztofCwalina, @jkotas, @tarekgh     I was considering the following relatively naiive implementation of IndexOf for OrdinalIgnoreCase which performs better than allocating a string, in most cases, but could regress perf by up to 50% in the worst case:  `'aaa...aaa'.IndexOf('aaa...aaa€', StringComparison.OrdinalIgnoreCase)` which adds overhead without incrementing `i`    ```C#  private static unsafe int IndexOfOrdinalIgnoreCase(ReadOnlySpan<char> span, ReadOnlySpan<char> value)  {      if (value.Length == 0) return 0;        // Assuming changing case doesn't affect length      if (value.Length > span.Length) return -1;        int count = span.Length - value.Length + 1;      int i = 0;        uint charB = value[0];      if (charB > 0x7F) goto StringAllocation;        if ((charB - 'a') <= 'z' - 'a') charB -= 0x20;        for (; i < count; i++)      {          uint charA = span[i];          if (charA > 0x7F) goto StringAllocation;            if ((charA - 'a') <= 'z' - 'a') charA -= 0x20;            if (charA == charB)          {              int j = 1;              for (; j < value.Length; j++)              {                  charA = span[i + j];                  charB = value[j];                    if (charA > 0x7F || charB > 0x7F) goto StringAllocation;                  if (charA == charB) continue;                    // uppercase both chars                  if ((charA - 'a') <= 'z' - 'a') charA -= 0x20;                  if ((charB - 'a') <= 'z' - 'a') charB -= 0x20;                  if (charA != charB) break;              }              if (j == value.Length) return i;          }      }      if (i == count) return -1;    StringAllocation:      int result = span.Slice(i).ToString().IndexOf(value.ToString(), StringComparison.OrdinalIgnoreCase);      return result == -1 ? result : result + i;  }  ```
28238	area-System.Memory	Consolidate the string and span tests for the string-like APIs	See https://github.com/dotnet/corefx/pull/27319#discussion_r170049466 for additional details and context.    This way, all the tests will be in one place making it easier to maintain, rather than duplicated between assemblies. Consider moving them to Common as well and reference from System.Memory.csproj so that running System.Memory tests will run all the span related tests.    cc @tarekgh 
28237	area-System.Memory	Don't run LargeArray test on 32 bit platforms.	Fixes https://github.com/dotnet/corefx/issues/28205.
28236	area-System.Memory	Rename string-like Span.Equals method to SequenceEqual	"We have the following string-like extension method for `ReadOnlySpan<char>`:  ```C#  public static bool Equals(this ReadOnlySpan<char> span, ReadOnlySpan<char> other, StringComparison comparisonType)  ```    However, due to its name, we are unable to leverage the implicit cast from string to `ReadOnlySpan<char>`. The following code throws a compiler error since it fails to match the correct overload.  ```C#  string test = ""Hello World!"";  ReadOnlySpan<char> span = new char[100];  bool result = span.Equals(test, StringComparison.Ordinal);  // Current workarounds - specify the type explicitly or call AsSpan:  // bool result = span.Equals((ReadOnlySpan<char>)test, StringComparison.Ordinal);  // bool result = span.Equals(test.AsSpan(), StringComparison.Ordinal);  // bool result = MemoryExtensions.Equals(span, test, StringComparison.Ordinal);  ```    Error CS0176 Member 'object.Equals(object, object)' cannot be accessed with an instance reference; qualify it with a type name instead    Should we rename the method to SequenceEqual instead?    We already have a SequenceEqual method (which only takes a single argument), which means, we would end up with a non-generic overload, specific to `ReadOnlySpan<char>`.    ```C#  public static bool SequenceEqual<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> other) where T : System.IEquatable<T> {}  public static bool SequenceEqual<T>(this Span<T> span, ReadOnlySpan<T> other) where T : System.IEquatable<T> {}  // ADD:  public static bool SequenceEqual(this ReadOnlySpan<char> span, ReadOnlySpan<char> other, StringComparison comparisonType) {}  ```    The alternative of adding an Equals overload that takes `string` as the argument will not work in resolving the overload matching issue.    Other alternatives for names:  - EqualsTo    cc @KrzysztofCwalina, @terrajobst, @VSadov "
28235	area-System.Net	Improve support for URIs without hosts	This change fixes a regression in `System.Uri` involving URIs that have no host. The change primarily impacts implicit file URIs and URIs with unknown schemes.    Behavior will change if both of the following are true:  - The URI contains Unicode characters  - The URI is an implicit file URI, or has an unknown scheme and no host    The change is just to revert #9542 and port a fix for the same issue from .NET Framework.    Fixes: #25632
28234	area-Infrastructure	Share common props file for manual shims	Share common props file for the manual shims.    Add GenFacadesForceZeroVersionSeeds=true so that the assembly references  for the shims are set to 0.0.0.0 so that they will correctly unify  up and support multiple versions of OOB packages like SqlClient.    cc @ericstj     Fixes https://github.com/dotnet/corefx/issues/28139     depends on BuildTools update change https://github.com/dotnet/buildtools/pull/1970
28233	area-System.Globalization	Fix Globalization tests on Alpine	Fixes #28189 and #28190        
28232	area-System.Data	Improve Integrated Auth Failure message with SQL Server	When an integrated auth failure occurs, then an error message pointing to running kinit is shown. Based on the experiences of Sql Ops Studio users, it seems like lot of customers don't have an SPN registered for the SQL Server to which they are trying to connect to, hence a Kerberos token for Sql Server cannot be generated correctly from the KDC and the authentication cannot be performed correctly. The error message should hint the users to check for both kinit command on the client side and to check the server configuration to make sure that an SPN is registered.     Fixes https://github.com/dotnet/corefx/issues/25328
28230	area-System.Net	Using SslStream to make an ALPN connection - confusion over parameters to use.	"@bobuva commented on [Mon Mar 19 2018](https://github.com/dotnet/core/issues/1361)  I've updated to the .NET Core 2.1 preview in order to make an SSL connection. Our server requires an ALPN negotiation to occur. As I understand it, the preview is the first version of .NET Core to support ALPN.    Here is essentially what I'm doing:    ```   TcpClient tcpClient = new TcpClient();  tcpClient.Connect(ProxyClient.TestUbuntuHost, ProxyClient.TestUbuntuPort);  var stream = tcpClient.GetStream();  SslStream sslStream = new SslStream(stream, false, new RemoteCertificateValidationCallback(ValidateServerCertificate));    X509Certificate2 certificate = new X509Certificate2(@""<a filename provided>);  X509Certificate2Collection certColl = new X509Certificate2Collection(certificate);  sslStream.AuthenticateAsClient(                  ProxyClient.TestUbuntuHost,                  certColl,                  SslProtocols.Tls11 | SslProtocols.Tls12, false);  ```  The `ValidateServerCertificate` looks like this:  ```  public static bool ValidateServerCertificate(                object sender,                X509Certificate certificate,                X509Chain chain,                SslPolicyErrors sslPolicyErrors)  {              if (sslPolicyErrors == SslPolicyErrors.None)                  return true;                Console.WriteLine(""Certificate error: {0}"", sslPolicyErrors);                // Do not allow this client to communicate with unauthenticated servers.              return false;  }  ```  I get this error: ` System.Security.Authentication.AuthenticationException: The remote certificate is invalid according to the validation procedure.` whether or not I pass that 3rd param to the `SslStream` constructor.     Can you shed some light on whether I need to do something else to enforce the ALPN negotiation?    Thanks,   Bob  "
28229	area-System.Net	Fix ParseRoundTripTime() breaks on some cultures	Using Ping.Ping().Send() and reading the RoundTripTime property breaks on some cultures (e.g. fr_FR) or returns wrong results (e.g. on de_DE).  Fix adds InvariantCulture to the parse methode responsible for converting the round trip time to the double type.
28227	area-System.Memory	Add stress tests for Span<T> APIs	From https://github.com/dotnet/corefxlab/issues/1313    - Tests with multiple threads to confirm that Span<T> APIs are stateless and thread safe  - Tests with lots of GC allocations to confirm that when GC moves addresses around, the use of Span is still correct
28226	area-System.Net	Fix sporadically failing PreAuthenticate test on WinHttpHandler	The PreAuthenticate_FirstRequestNoHeader_SecondRequestVariousStatusCodes_ThirdRequestPreauthenticates tests a bunch of status codes, some of which are sporadically failing in CI with WinHttpHandler.  According to the RFC, several of these status codes require that there not be a response body, but the test is sending one, and it would seem there are then race conditions that are causing WinHttp to fail here and there for these status codes, e.g. 204 and 304.  This just fixes the test to not send a body.    Fixes https://github.com/dotnet/corefx/issues/28122  cc: @davidsh, @geoffkizer 
28225	area-System.Collections	Break hangs on HashSet when a loop is formed on entries due to a concurrent operation	Fixes: https://github.com/dotnet/corefx/issues/28209    cc: @danmosemsft @vancem @jkotas @stephentoub 
28224	area-Meta	Fix area owners for System.Data (no SqlClient)	@karelz I believe @ajcvickers and I should be listed for System.Data. Let me know if you have any questions.
28223	area-System.Net	HttpClient design and multiple proxies	Hi,    Many articles I have read recommend to only use one instance of HttpClient in an application but I am not sure how to use this class in the following scenario:    - Server App (ASP.NET Core)  - Heavy usage of HttpClient for outgoing requests (Http dependencies)  - A different proxy has to be used for each outgoing request (round robin proxy with thousands of entries)     Should I have one instance of HttpClient per proxy that will be used (meaning thousands of HttpClient-s allocated)? Or is it better in this scenario to use a different HttpClient instance for each request?    Thanks!                    
28221	area-System.Console	Can Console class tell us if it IsTty?	Reading this code https://github.com/Microsoft/msbuild/blob/6851538897f5d7b08024a6d8435bc44be5869e53/src/Deprecated/Engine/Logging/BaseConsoleLogger.cs#L411-L426,  it looks like information whether the console is redirected is useful for such scenarios. Other utilities written in .NET would could also utilitize this property to control colored output. Might be trickier to distinguish if it is a pseudo-tty (https://github.com/PowerShell/PowerShell/issues/6427). For now, perhaps `public bool IsTty { get; }`  addition to Console could be considered?    @rainersigwald 
28220	area-System.IO	Use FileSystemName in FileSystemWatcher	"- Uses newer spanified version in FileSystemName  - Doesn't allow extended match chars `<`, `>`, `""`  as these are legal in Unix    cc: @pjanotti, @danmosemsft    Note that there are a lot of spanification opportunities here that I'll be creating issues to follow up on.  "
28219	area-Serialization	DataContractSerializer omits properties when elements are not in alphabetical order 	"When attempting to read an xml document using the DataContractSerializer a property may not be populated if the element name is alphabetically before the first element.    It is expected that element order should not affect deserialization.    ViewModel        [DataContract]      public class ViewModel      {          [DataMember] public string Beta { get; set; }          [DataMember] public string Alpha { get; set; }      }    example xml:        <ViewModel xmlns=""http://schemas.datacontract.org/2004/07/ExampleProg"">          <Beta>Beta</Beta>          <Alpha>Alpha</Alpha>      </ViewModel>    After reading the xml to a stream and passing it to `DataContractSerializer.ReadObject` the resulting ViewModel will be set to Beta = ""Beta"", Alpha = """".    If instead, the Alpha element is first, both properties are then set."
28218	area-System.Runtime	Adding tests for randomized hashing	Adding tests for randomized hashing    Testing that hash code returned from GetHashCode() is randomized on String, StringComparer and CultureInfo classes.    Fixes #24466    cc: @danmosemsft @stephentoub 
28217	area-Infrastructure	Restore ProjectN package consistency check	Re-enable validation that ProjectN compiler and targeting pack are the same version. This was disabled while we worked to update System.Private.CoreLib with breaking public API changes.    Resolves https://github.com/dotnet/corefx/issues/27619
28214	area-Microsoft.CSharp	Add comments around static dictionaries in the Csharp Runtime Binder	Fixes #28199
28213	area-System.Net	Fix sporadic WinHttpHandler failures with cookie tests	Hopefully fixes https://github.com/dotnet/corefx/issues/27390  Hopefully fixes https://github.com/dotnet/corefx/issues/27374  Contributes to https://github.com/dotnet/corefx/issues/26092    cc: @davidsh
28210	area-System.Net	add proxy bypass list processing for windows	fixes #23150    This is last chunk for proxy configuration for HttpSocketHandler.  The functionality matches code provided by WinHttp team as well as my experiments and testing.  The pattern processing can possibly be compiled to single mega-match so we can do parallel processing but it does not seems necessary at the moment.  WinHttp does does process entries sequentially.
28209	area-System.Collections	Apply hang protection to HashSet<T>  that we added to Dictionary<K,V>	HashSet is likely prone to the same expensive hang as it uses essentially the same datastructures.     We should port dotnet/coreclr#16991 to Hashset.    cc @benaadams 
28208	area-System.Net	HttpContent.ReadAsStreamAsync is over-allocating memory	In order to reduce memory overhead, we make webrequests return when the headers have been read using:      `HttpClient.GetAsync(uri, HttpCompletionOption.ResponseHeadersRead);`    The idea is that afterwards you'll be reading the bytes from the returned stream as they trickle in from the network. Or at least that's what I had hoped. But looking at the implementation, the moment you try and get the stream from the HttpContent, the entire stream is loaded into memory:  https://github.com/dotnet/corefx/blob/master/src/System.Net.Http/src/System/Net/Http/HttpContent.cs#L253    If these responses are very large, it could exhaust the application for memory.  Instead the ReadAsStreamAsync should return a buffer immediately and have it get filled as the bytes gets downloaded.  The HttpCompletionOption doesn't really make much sense without doing this (apart from rejecting the response all-together based on the headers).
28206	area-System.Net	Test failure: System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_ResponseDrain_Test/GetAsyncWithMaxConnections_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection(totalSize: 10000, readSize: 9500, mode: BytePerChunk)	The test `System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_ResponseDrain_Test/GetAsyncWithMaxConnections_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection(totalSize: 10000, readSize: 9500, mode: BytePerChunk)` has failed.  This is on .NET Framework.  System.IO.IOException : Unable to write data to the transport connection: An established connection was aborted by the software in your host machine.\r     ---- System.Net.Sockets.SocketException : An established connection was aborted by the software in your host machine          Stack Trace:             at System.Net.Sockets.NetworkStream.BeginWrite(Byte[] buffer, Int32 offset, Int32 size, AsyncCallback callback, Object state)        at System.IO.Stream.<>c.<BeginEndWriteAsync>b__53_0(Stream stream, ReadWriteParameters args, AsyncCallback callback, Object state)        at System.Threading.Tasks.TaskFactory`1.FromAsyncTrim[TInstance,TArgs](TInstance thisRef, TArgs args, Func`5 beginMethod, Func`3 endMethod)        at System.IO.Stream.BeginEndWriteAsync(Byte[] buffer, Int32 offset, Int32 count)        at System.IO.Stream.WriteAsync(Byte[] buffer, Int32 offset, Int32 count, CancellationToken cancellationToken)        at System.IO.Stream.WriteAsync(Byte[] buffer, Int32 offset, Int32 count)        at System.IO.StreamWriter.<FlushAsyncInternal>d__68.MoveNext()     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)        at System.IO.StreamWriter.<WriteAsyncInternal>d__53.MoveNext()     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)        at System.Net.Http.Functional.Tests.HttpClientHandler_ResponseDrain_Test.<>c__DisplayClass4_1.<<GetAsyncWithMaxConnections_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection>b__2>d.MoveNext()     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)        at System.Net.Test.Common.LoopbackServer.<AcceptConnectionAsync>d__12.MoveNext()     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)        at System.Net.Http.Functional.Tests.HttpClientHandler_ResponseDrain_Test.<>c__DisplayClass4_0.<<GetAsyncWithMaxConnections_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection>b__1>d.MoveNext()     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)        at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext()     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)        at System.Net.Test.Common.LoopbackServer.<CreateServerAsync>d__9.MoveNext()     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)        at System.Net.Http.Functional.Tests.HttpClientHandler_ResponseDrain_Test.<GetAsyncWithMaxConnections_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection>d__4.MoveNext()     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     ----- Inner Stack Trace -----        at System.Net.Sockets.Socket.BeginSend(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags, AsyncCallback callback, Object state)        at System.Net.Sockets.NetworkStream.BeginWrite(Byte[] buffer, Int32 offset, Int32 size, AsyncCallback callback, Object state) Build : Master - 20180319.04 (Full Framework Tests) Failing configurations: - Windows.10.Amd64-x86   - Release
28205	area-System.Memory	Test failure: System.MemoryTests.MemoryTests/OwnedMemoryPinLargeArray	The test `System.MemoryTests.MemoryTests/OwnedMemoryPinLargeArray` has failed.  System.OutOfMemoryException : Exception of type 'System.OutOfMemoryException' was thrown.          Stack Trace:             at System.MemoryTests.MemoryTests.OwnedMemoryPinLargeArray() in E:\A\_work\63\s\corefx\src\System.Memory\tests\Memory\OwnedMemory.cs:line 125 Build : Master - 20180319.04 (Core Tests) Failing configurations: - Windows.81.Amd64-x86   - Release - Windows.7.Amd64-x86   - Release - Windows.10.Amd64.Core-x86   - Release - Windows.10.Amd64-x86   - Release  Unlike the failure a few days ago, this is on .NET Core.  @grabyourpitchforks
28204	area-System.Net	"System.Net.NetworkInformation Ping tests fail with ""permission denied"" on Alpine"	Eg  https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180319.04/workItem/System.Net.Ping.Functional.Tests/analysis/xunit/System.Net.NetworkInformation.Tests.UnixPingUtilityTests~2FPacketSizeIsRespected(payloadSize:%200)  ``` The test `System.Net.NetworkInformation.Tests.UnixPingUtilityTests/PacketSizeIsRespected(payloadSize: 0)` has failed.  System.Exception : [/bin/ping6 -c 1 -s 16 ::1] process exit code is 1.     StdOut:[PING ::1 (::1): 16 data bytes     ]     StdErr:[ping6: permission denied (are you root?)     ]          Stack Trace:             at System.Net.NetworkInformation.Tests.UnixPingUtilityTests.PacketSizeIsRespected(Int32 payloadSize)     --- End of stack trace from previous location where exception was thrown --- ``` Build : Master - 20180319.04 (Core Tests) Failing configurations: - Alpine.36.Amd64-x64   - Release  https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180319.04/workItem/System.Net.Ping.Functional.Tests
28203	area-System.Net	"System.Net.Security.Tests fail on Alpine with ""Address Not Available"""	https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180319.04/workItem/System.Net.Security.Tests  Example:  The test `System.Net.Security.Tests.ClientAsyncAuthenticateTest/ClientAsyncAuthenticate_EachClientUnsupportedProtocol_Fail(protocol: Ssl2)` has failed.  Assert.Throws() Failure     Expected: typeof(System.NotSupportedException)     Actual:   typeof(System.Net.Sockets.SocketException): Address not available          Stack Trace:             at System.Net.Sockets.Socket.UpdateStatusAfterSocketErrorAndThrowException(SocketError error, String callerName) in /root/corefx-1491859/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs:line 5154        at System.Net.Sockets.Socket.DoBind(EndPoint endPointSnapshot, SocketAddress socketAddress) in /root/corefx-1491859/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs:line 758        at System.Net.Sockets.Socket.Bind(EndPoint localEP) in /root/corefx-1491859/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs:line 701        at System.Net.Sockets.TcpListener.Start(Int32 backlog) in /root/corefx-1491859/src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs:line 142        at System.Net.Security.Tests.DummyTcpServer.StartListener(IPEndPoint endPoint) in /root/corefx-1491859/src/System.Net.Security/tests/FunctionalTests/DummyTcpServer.cs:line 38        at System.Net.Security.Tests.DummyTcpServer..ctor(IPEndPoint endPoint, Nullable`1 sslEncryptionPolicy) in /root/corefx-1491859/src/System.Net.Security/tests/FunctionalTests/DummyTcpServer.cs:line 58        at System.Net.Security.Tests.ClientAsyncAuthenticateTest.ClientAsyncSslHelper(EncryptionPolicy encryptionPolicy, SslProtocols clientSslProtocols, SslProtocols serverSslProtocols) in /root/corefx-1491859/src/System.Net.Security/tests/FunctionalTests/ClientAsyncAuthenticateTest.cs:line 152 Build : Master - 20180319.04 (Core Tests) Failing configurations: - Alpine.36.Amd64-x64   - Release
28202	area-System.Net	System.Net.Sockets tests cause exception on threadpool thread	The assert on src/.System.Net.Sockets/tests/FunctionalTests/Shutdown.cs:line 22 will cause an exception to be thrown on a threadpool thread. When it fires it will take down the whole test library.    Consider either marshaling somehow back to the test, or using RemoteInvoke for all tests that lead to this codepath.    ```c#          private static void OnOperationCompleted(object sender, SocketAsyncEventArgs args)          {              Assert.Equal(SocketError.Success, args.SocketError);  ```  ```  2018-03-19 13:18:57,213: INFO: proc(54): run_and_log_output: Output: Unhandled Exception: Xunit.Sdk.EqualException: Assert.Equal() Failure  2018-03-19 13:18:57,213: INFO: proc(54): run_and_log_output: Output: Expected: Success  2018-03-19 13:18:57,213: INFO: proc(54): run_and_log_output: Output: Actual:   OperationAborted  2018-03-19 13:18:57,214: INFO: proc(54): run_and_log_output: Output:    at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)  2018-03-19 13:18:57,214: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.Tests.Shutdown.OnOperationCompleted(Object sender, SocketAsyncEventArgs args) in /root/corefx-1491859/src/System.Net.Sockets/tests/FunctionalTests/Shutdown.cs:line 22  2018-03-19 13:18:57,214: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /root/coreclr/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166  2018-03-19 13:18:57,214: INFO: proc(54): run_and_log_output: Output: --- End of stack trace from previous location where exception was thrown ---  2018-03-19 13:18:57,215: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /root/coreclr/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166  2018-03-19 13:18:57,215: INFO: proc(54): run_and_log_output: Output: --- End of stack trace from previous location where exception was thrown ---  2018-03-19 13:18:57,215: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ThreadPoolWorkQueue.Dispatch() in /root/coreclr/src/mscorlib/src/System/Threading/ThreadPool.cs:line 588  ```    Example - this took out all S.Net.Sockets tests on Alpine.    https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180319.04/workItem/System.Net.Sockets.Tests/wilogs
28201	area-System.Globalization	"Test failure: System.Globalization.Tests.NumberFormatInfoCurrencyNegativePattern/CurrencyNegativePattern_Get(locale: \""fa-IR\"")"	"Opened on behalf of @danmosemsft  ``` The test `System.Globalization.Tests.NumberFormatInfoCurrencyNegativePattern/CurrencyNegativePattern_Get(locale: \""fa-IR\"")` has failed.  Assert.Contains() Failure     Not found: 8     In value:  Int32[] [1, 0]          Stack Trace:          null ``` Build : Master - 20180319.04 (Core Tests) Failing configurations: - Alpine.36.Amd64-x64   - Release   **Parameters to the Assert are reversed, please fix** ```c#             Assert.Contains(format.CurrencyNegativePattern, NumberFormatInfoData.GetCurrencyNegativePatterns(locale)); ```  We see ICU version < 59 so we expect { 1, 0 } but the system is returning 8. Perhaps we are reading the ICU version wrong, or perhaps this ICU version is actually returning 8."
28200	area-Infrastructure	All TimeZone related tests failing on Alpine -  could not find '/usr/share/zoneinfo/Local'.	Opened on behalf of @danmosemsft    https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180319.04/workItem/System.Runtime.Tests    Example:  ```  The test `System.Tests.TimeZoneInfoTests/Equals` has failed.    System.TypeInitializationException : The type initializer for 'System.Tests.TimeZoneInfoTests' threw an exception.      ---- System.TimeZoneNotFoundException : The time zone ID 'Local' was not found on the local computer.      -------- System.IO.DirectoryNotFoundException : Could not find a part of the path '/usr/share/zoneinfo/Local'.            Stack Trace:               at System.Tests.TimeZoneInfoTests.Equals_TestData()+MoveNext() in /root/corefx-1491859/src/System.Runtime/tests/System/TimeZoneInfoTests.cs:line 1869         at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext() in /root/corefx-1491859/src/System.Linq/src/System/Linq/Select.cs:line 129      ----- Inner Stack Trace -----         at System.TimeZoneInfo.FindSystemTimeZoneById(String id) in /root/coreclr/src/mscorlib/shared/System/TimeZoneInfo.Unix.cs:line 645         at System.Tests.TimeZoneInfoTests..cctor() in /root/corefx-1491859/src/System.Runtime/tests/System/TimeZoneInfoTests.cs:line 39      ----- Inner Stack Trace -----         at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter) in /root/coreclr/src/mscorlib/shared/Interop/Unix/Interop.IOErrors.cs:line 23         at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode) in /root/coreclr/src/mscorlib/shared/Microsoft/Win32/SafeHandles/SafeFileHandle.Unix.cs:line 78         at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options) in /root/coreclr/src/mscorlib/shared/System/IO/FileStream.cs:line 230         at Internal.IO.File.ReadAllBytes(String path) in /root/coreclr/src/mscorlib/shared/Internal/IO/File.cs:line 56         at System.TimeZoneInfo.TryGetTimeZoneFromLocalMachine(String id, TimeZoneInfo& value, Exception& e) in /root/coreclr/src/mscorlib/shared/System/TimeZoneInfo.Unix.cs:line 204  ```  Build : Master - 20180319.04 (Core Tests)  Failing configurations:  - Alpine.36.Amd64-x64    - Release  
28199	area-Microsoft.CSharp	Microsoft.CSharp code using unprotected shared dictionaries	"I did a search for ""static readonly Dictionary"" across corefx and looked for places where dictionaries were mutated without synchronization.  It looks like there are a few in Microsoft.CSharp, e.g.  https://github.com/dotnet/corefx/blob/251d65c237aa26b49bc91bac25012340a93e64de/src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Semantics/Symbols/SymbolStore.cs#L18  https://github.com/dotnet/corefx/blob/251d65c237aa26b49bc91bac25012340a93e64de/src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Semantics/Types/TypeArray.cs#L82-L83  https://github.com/dotnet/corefx/blob/251d65c237aa26b49bc91bac25012340a93e64de/src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Semantics/Types/TypeManager.cs#L18-L19  https://github.com/dotnet/corefx/blob/251d65c237aa26b49bc91bac25012340a93e64de/src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Semantics/Types/TypeTable.cs#L51-L62    It's possible there's something higher up in the call stacks that's guaranteeing safety, but it's not obvious from a quick code inspection.    cc: @VSadov, @JonHanna "
28198	area-System.Data	SqlUDTStorage.GetStaticNullForUdtType accessing shared dictionary without propery synchronization	https://github.com/dotnet/corefx/blob/251d65c237aa26b49bc91bac25012340a93e64de/src/System.Data.Common/src/System/Data/Common/SqlUDTStorage.cs#L40-L63    It looks like it was written assuming Dictionary has the same thread-safety characteristics as Hashtable, but it doesn't.  Whereas Hashtable is safe for any number of reads to be used concurrently with at most one writer, for a Dictionary a writer must have exclusive access.
28197	area-System.Memory	More test data for Convert.TryFromBase64Chars()	For better code coverage for fix for  https://github.com/dotnet/corefx/issues/24897
28196	area-System.Net	Restore EOF check in UDS test	With a previous Windows build, support for Unix domain sockets had some issues regarding connection shutdown that caused Read{Async} to not properly return 0 when the connection was shut down, and so we changed a test to not rely on that.  Now that those issues have been fixed, I'm restoring the test to its original intent.    cc: @sunilmut, @eerhardt 
28195	area-System.ComponentModel	[Regression] Wrong target type in System.ComponentModel.UInt16Converter.cs	The target type on line 18 is wrong.   It should be typeof(**ushort**), and not typeof(short) as it is today.  Ref https://stackoverflow.com/questions/49361595/why-does-the-formatexception-returned-by-a-typeconverter-for-an-ushort-type-refe
28194	area-System.Xml	Fix UTF32Encoding BOM being emitted by XmlWriter when ByteOrderMark set to false	As mentioned in #26544, the BOM is still being emitted by XmlWriter when the supplied UTF32Encoding instance has it disabled by setting ByteOrderMark, in the UTF32Encoding ctor, to false. This is due XmlWriter.Create(...) creating a new Encoding instance (with a FallbackEncoder) from the one supplied in XmlWriterSettings. However, it only uses the CodePage to create the new Encoding instance which initializes with the defaults. The default for ByteOrderMark in the UTF32Encoding class is true.    This fixes it by grabbing the BOM before creating a the new Encoding instance.    cc: @krwq @pjanotti     Resolves #26544 
28193	area-System.Diagnostics	Process.StartTime on Linux - make it deterministic & compatible	Process.StartTime on Linux - make it deterministic & compatible with other languages/frameworks, e.g. with Python's psutil.Process.create_time
28192	area-System.Net	Test failure: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest/GetAsync_IPBasedUri_Success(address: ::1)	Opened on behalf of @Sunny-pu  The test `System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest/GetAsync_IPBasedUri_Success(address: ::1)` has failed.  System.Net.Sockets.SocketException : Address not available          Stack Trace:             at System.Net.Sockets.Socket.UpdateStatusAfterSocketErrorAndThrowException(SocketError error, String callerName) in /root/corefx-1490845/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs:line 5154        at System.Net.Sockets.Socket.DoBind(EndPoint endPointSnapshot, SocketAddress socketAddress) in /root/corefx-1490845/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs:line 758        at System.Net.Sockets.Socket.Bind(EndPoint localEP) in /root/corefx-1490845/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs:line 701        at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in /root/corefx-1490845/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 63        at System.Net.Http.Functional.Tests.HttpClientHandlerTest.GetAsync_IPBasedUri_Success(IPAddress address) in /root/corefx-1490845/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs:line 380     --- End of stack trace from previous location where exception was thrown --- Build : Master - 20180319.01 (Core Tests) Failing configurations: - Alpine.36.Amd64-x64   - Release Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180319.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest~2FGetAsync_IPBasedUri_Success(address:%20::1)
28191	area-System.IO	Test failure: System.IO.Compression.BrotliStreamUnitTests/CopyTo_Roundtrip_OutputMatchesInput(useAsync: True)	Opened on behalf of @Sunny-pu  The test `System.IO.Compression.BrotliStreamUnitTests/CopyTo_Roundtrip_OutputMatchesInput(useAsync: True)` has failed.  System.UnauthorizedAccessException : Access to the path 'C:\\dotnetbuild\\work\\450db565-bf00-4d68-a490-43459d4ec859\\Work\\f82b1636-4c61-452d-b914-af7ef6b8e23c\\Unzip' is denied.          Stack Trace:             at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle) in E:\A\_work\3090\s\src\mscorlib\shared\System\IO\FileStream.Windows.cs:line 1650        at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options) in E:\A\_work\3090\s\src\mscorlib\shared\System\IO\FileStream.Win32.cs:line 42        at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options) in E:\A\_work\3090\s\src\mscorlib\shared\System\IO\FileStream.cs:line 230        at System.IO.File.InternalWriteAllBytes(String path, Byte[] bytes) in E:\A\_work\63\s\corefx\src\System.IO.FileSystem\src\System\IO\File.cs:line 362        at System.IO.File.WriteAllBytes(String path, Byte[] bytes) in E:\A\_work\63\s\corefx\src\System.IO.FileSystem\src\System\IO\File.cs:line 353        at System.IO.Compression.CompressionStreamUnitTestBase.CopyTo_Roundtrip_OutputMatchesInput(Boolean useAsync) in E:\A\_work\63\s\corefx\src\Common\tests\System\IO\Compression\CompressionStreamUnitTestBase.cs:line 1126     --- End of stack trace from previous location where exception was thrown --- Build : Master - 20180319.01 (Core Tests) Failing configurations: - Windows.7.Amd64-x86   - Release  Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180319.01/workItem/System.IO.Compression.Brotli.Tests/analysis/xunit/System.IO.Compression.BrotliStreamUnitTests~2FCopyTo_Roundtrip_OutputMatchesInput(useAsync:%20True)
28190	area-System.Globalization	"Test failure: System.Globalization.Tests.RegionInfoPropertyTests/MiscTest(lcid: 1037, geoId: 117, currencyEnglishName: \""Israeli New Shekel\"", alternativeCurrencyEnglishName:)"	"Opened on behalf of @Sunny-pu  The test `System.Globalization.Tests.RegionInfoPropertyTests/MiscTest(lcid: 1037, geoId: 117, currencyEnglishName: \""Israeli New Shekel\"", alternativeCurrencyEnglishName:)` has failed.  Assert.Equal() Failure                ↓ (pos 1)     Expected: ש״ח     Actual:   שקל חדש                ↑ (pos 1)          Stack Trace:             at System.Globalization.Tests.RegionInfoPropertyTests.MiscTest(Int32 lcid, Int32 geoId, String currencyEnglishName, String alternativeCurrencyEnglishName, String currencyNativeName, String threeLetterISORegionName, String threeLetterWindowsRegionName) in /root/corefx-1490845/src/System.Globalization/tests/RegionInfo/RegionInfoTests.Properties.cs:line 122 Build : Master - 20180319.01 (Core Tests) Failing configurations: - Alpine.36.Amd64-x64   - Release  Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180319.01/workItem/System.Globalization.Tests/analysis/xunit/System.Globalization.Tests.RegionInfoPropertyTests~2FMiscTest(lcid:%201037,%20geoId:%20117,%20currencyEnglishName:%20%5C%22Israeli%20New%20Shekel%5C%22,%20alternativeCurrencyEnglishName:)"
28189	area-System.Globalization	"Test failure: System.Globalization.Tests.NumberFormatInfoCurrencyNegativePattern/CurrencyNegativePattern_Get(locale: \""fa-IR\"")"	"Opened on behalf of @Sunny-pu  The test `System.Globalization.Tests.NumberFormatInfoCurrencyNegativePattern/CurrencyNegativePattern_Get(locale: \""fa-IR\"")` has failed.  Assert.Contains() Failure     Not found: 8     In value:  Int32[] [1, 0]          Stack Trace:          null Build : Master - 20180319.01 (Core Tests) Failing configurations: - Alpine.36.Amd64-x64   - Release  Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180319.01/workItem/System.Globalization.Tests/analysis/xunit/System.Globalization.Tests.NumberFormatInfoCurrencyNegativePattern~2FCurrencyNegativePattern_Get(locale:%20%5C%22fa-IR%5C%22)"
28188	area-System.Collections	ConcurrentDictionary<,>.IsEmpty is barely faster than checking Count	I would assume that a specialist method named `IsEmpty` is significantly faster than simply obtaining the `Count` of a `ConcurrentDictionary<,>`, yet it appears to be just a touch slower.    x-ref https://github.com/WiseTechGlobal/WTG.Analyzers/pull/23#issuecomment-374116037    Similar to the benchmark in the linked above, here's a benchmark comparing an empty dictionary to one containing 1,200 items.    I would expect `Empty_IsEmpty` to take roughly the same amount of time as `Contents_IsEmpty`, but it appears to scale up similarly to testing against `Count`.    ```  // * Summary *    BenchmarkDotNet=v0.10.13, OS=Windows 10 Redstone 3 [1709, Fall Creators Update] (10.0.16299.309)  Intel Core i5-7600K CPU 3.80GHz (Kaby Lake), 1 CPU, 4 logical cores and 4 physical cores  Frequency=3703123 Hz, Resolution=270.0423 ns, Timer=TSC  .NET Core SDK=2.1.100-preview-007326    [Host]     : .NET Core 2.0.5 (CoreCLR 4.6.26020.03, CoreFX 4.6.26018.01), 64bit RyuJIT    DefaultJob : .NET Core 2.0.5 (CoreCLR 4.6.26020.03, CoreFX 4.6.26018.01), 64bit RyuJIT                 Method |        Mean |     Error |    StdDev |  Gen 0 | Allocated |  ----------------- |------------:|----------:|----------:|-------:|----------:|      Empty_IsEmpty |    67.29 ns | 0.0808 ns | 0.0716 ns |      - |       0 B |        Empty_Count |    67.49 ns | 0.0255 ns | 0.0199 ns |      - |       0 B |      Empty_LinqAny |   180.82 ns | 0.1109 ns | 0.0926 ns | 0.0203 |      64 B |   Contents_IsEmpty | 3,907.88 ns | 1.8701 ns | 1.7493 ns |      - |       0 B |     Contents_Count | 4,129.74 ns | 1.5337 ns | 1.3596 ns |      - |       0 B |   Contents_LinqAny |    42.68 ns | 0.0471 ns | 0.0417 ns | 0.0203 |      64 B |    ```    Is `IsEmpty` actually doing anything special or could the implementation just about be replaced with:    ```csharp  public bool IsEmpty => Count == 0;  ```    ?    I don't actually see a huge difference in the two implementations.
28186	area-System.Net	Re-enable SocketsHttpHandler proxy test	Closes https://github.com/dotnet/corefx/issues/23135  Fixed by https://github.com/dotnet/corefx/pull/28047  cc: @pjanotti 
28184	area-System.Collections	ImmutableArray<T>.Builder.Add splitted in fast- and cold-path	# Description    Based on https://github.com/dotnet/corefx/pull/28177#discussion_r175290368  `Add` is split in a fast-path without resizing the array, and a cold-path that does the resize.  On the fast-path the bounds-check for the array-access is also eliminated.    # Benchmarks    Code for benchmarks is taken from [svick](https://github.com/svick/Benchmark/tree/66aed74)    `SimpleAdd` is the original code, i.e. before https://github.com/dotnet/corefx/pull/28177  `TweakedAdd` is code of https://github.com/dotnet/corefx/pull/28177  `SplitAdd` is code of this PR.    ## win-x64    ``` ini    BenchmarkDotNet=v0.10.11, OS=Windows 10 Redstone 3 [1709, Fall Creators Update] (10.0.16299.309)  Processor=Intel Core i7-7700HQ CPU 2.80GHz (Kaby Lake), ProcessorCount=8  Frequency=2742189 Hz, Resolution=364.6722 ns, Timer=TSC  .NET Core SDK=2.1.300-preview1-008174    [Host]     : .NET Core 2.1.0-preview1-26216-03 (Framework 4.6.26216.04), 64bit RyuJIT    DefaultJob : .NET Core 2.1.0-preview1-26216-03 (Framework 4.6.26216.04), 64bit RyuJIT      ```  |     Method |     Mean |     Error |    StdDev |  |----------- |---------:|----------:|----------:|  |  SimpleAdd | 4.192 us | 0.0240 us | 0.0213 us |  | TweakedAdd | 2.178 us | 0.0203 us | 0.0190 us |  |   SplitAdd | 1.950 us | 0.0140 us | 0.0124 us |    ## linux-x64    ``` ini    BenchmarkDotNet=v0.10.11, OS=ubuntu 16.04  Processor=Intel Core i7-7700HQ CPU 2.80GHz (Kaby Lake), ProcessorCount=4  .NET Core SDK=2.1.300-preview1-008174    [Host]     : .NET Core 2.1.0-preview1-26216-03 (Framework 4.6.26216.04), 64bit RyuJIT    DefaultJob : .NET Core 2.1.0-preview1-26216-03 (Framework 4.6.26216.04), 64bit RyuJIT      ```  |     Method |     Mean |     Error |    StdDev |   Median |  |----------- |---------:|----------:|----------:|---------:|  |  SimpleAdd | 4.823 us | 0.0891 us | 0.0790 us | 4.816 us |  | TweakedAdd | 2.547 us | 0.0521 us | 0.1318 us | 2.505 us |  |   SplitAdd | 2.232 us | 0.0434 us | 0.0426 us | 2.228 us |    ## linux-x64 (different CPU)    ``` ini    BenchmarkDotNet=v0.10.11, OS=ubuntu 17.10  Processor=Intel Xeon CPU 2.60GHz, ProcessorCount=2  .NET Core SDK=2.1.4    [Host]     : .NET Core 2.0.5 (Framework 4.6.0.0), 64bit RyuJIT    DefaultJob : .NET Core 2.0.5 (Framework 4.6.0.0), 64bit RyuJIT      ```  |     Method |     Mean |     Error |    StdDev |   Median |  |----------- |---------:|----------:|----------:|---------:|  |  SimpleAdd | 6.320 us | 0.1574 us | 0.2673 us | 6.182 us |  | TweakedAdd | 3.947 us | 0.0767 us | 0.0788 us | 3.933 us |  |   SplitAdd | 3.439 us | 0.2023 us | 0.2408 us | 3.306 us |    # Notes    In https://github.com/dotnet/corefx/pull/28177#discussion_r175297033 @svick reports that this change decreases perf on his machine. That's why I tested on three different machines, and all show a perf improvement. [List<T>.Add](https://github.com/dotnet/coreclr/blob/4e1ec7f1dfd70d1a84fcc3282add9bdf3be115e3/src/mscorlib/shared/System/Collections/Generic/List.cs#L238), [Stack<T>.Push](https://github.com/gfoidl/corefx/blob/36ae61031f94c7d92ce8750c088bfa640b5ccb1e/src/System.Collections/src/System/Collections/Generic/Stack.cs#L290) and similar classes use this pattern and all show an improvement.
28183	area-System.Xml	Fixed netfx System.Xml.Linq.xNodeBuilder.Tests fails on non English Windows	Fixed netfx System.Xml.Linq.xNodeBuilder.Tests fails on non English Windows. See https://github.com/dotnet/corefx/issues/28136
28182	area-System.Diagnostics	Open .dll in new console window on Linux .Net Core	"@maroallegro commented on [Tue Dec 19 2017](https://github.com/dotnet/core/issues/1177)  I am able to run program.dll in same console window by running:        var process = new Process      {            StartInfo = new ProcessStartInfo          {              FileName = ""dotnet"",              Arguments = ""program.dll"",              UseShellExecute = true,              RedirectStandardOutput = false,              RedirectStandardError = false,              CreateNoWindow = false          }      };        process.Start();    How to open program.dll in new console window on Linux using .NET Core 2.0?    Flag `CreateNoWindow = false` do not open new console as on Windows system.    Is it a bug?    "
28181	area-System.Data	Fixed netfx System.Data.Common.Tests fails on non English Windows	Fixed netfx System.Data.Common.Tests fails on non English Windows. See https://github.com/dotnet/corefx/issues/28136.
28180	area-System.Memory	SequenceEqual is very slow on .NET Framework x86	Performance regression introduced by change #28080.    A single call to SequenceEqual expands into 400 bytes of very inefficient code. .NET Framework x86 JIT is not able to optimize out the complex generic code.    If there is no way to make the type-specific optimizations work well, we should ifdef them out from the netstandard implementation. The portable System.Memory implementation will be slower, but it has to be fast enough to be usable on .NET Framework x86 because of it is likely going to be the most popular target for it.    ```  04dd1351 8b7dd8          mov     edi,dword ptr [ebp-28h]  04dd1354 8d45cc          lea     eax,[ebp-34h]  04dd1357 8810            mov     byte ptr [eax],dl  04dd1359 b9c010a371      mov     ecx,offset mscorlib_ni+0x5210c0 (71a310c0) (MT: System.Byte)  04dd135e e88da4686e      call    clr!JIT_GetRuntimeType (7345b7f0)  04dd1363 8bf0            mov     esi,eax  04dd1365 b9c010a371      mov     ecx,offset mscorlib_ni+0x5210c0 (71a310c0) (MT: System.Byte)  04dd136a e881a4686e      call    clr!JIT_GetRuntimeType (7345b7f0)  04dd136f 3bc6            cmp     eax,esi  04dd1371 741a            je      test!My.Main()+0x125 (04dd138d)  04dd1373 b9c010a371      mov     ecx,offset mscorlib_ni+0x5210c0 (71a310c0) (MT: System.Byte)  04dd1378 e873a4686e      call    clr!JIT_GetRuntimeType (7345b7f0)  04dd137d 8bf0            mov     esi,eax  04dd137f b910b3a171      mov     ecx,offset mscorlib_ni+0x50b310 (71a1b310) (MT: System.SByte)  04dd1384 e867a4686e      call    clr!JIT_GetRuntimeType (7345b7f0)  04dd1389 3bc6            cmp     eax,esi  04dd138b 7511            jne     test!My.Main()+0x136 (04dd139e)  04dd138d c745c801000000  mov     dword ptr [ebp-38h],1  04dd1394 b801000000      mov     eax,1  04dd1399 e9ea000000      jmp     test!My.Main()+0x220 (04dd1488)  04dd139e b9c010a371      mov     ecx,offset mscorlib_ni+0x5210c0 (71a310c0) (MT: System.Byte)  04dd13a3 e848a4686e      call    clr!JIT_GetRuntimeType (7345b7f0)  04dd13a8 8bf0            mov     esi,eax  04dd13aa b93806a371      mov     ecx,offset mscorlib_ni+0x520638 (71a30638) (MT: System.Char)  04dd13af e83ca4686e      call    clr!JIT_GetRuntimeType (7345b7f0)  04dd13b4 3bc6            cmp     eax,esi  04dd13b6 7434            je      test!My.Main()+0x184 (04dd13ec)  04dd13b8 b9c010a371      mov     ecx,offset mscorlib_ni+0x5210c0 (71a310c0) (MT: System.Byte)  04dd13bd e82ea4686e      call    clr!JIT_GetRuntimeType (7345b7f0)  04dd13c2 8bf0            mov     esi,eax  04dd13c4 b96839a271      mov     ecx,offset mscorlib_ni+0x513968 (71a23968) (MT: System.Int16)  04dd13c9 e822a4686e      call    clr!JIT_GetRuntimeType (7345b7f0)  04dd13ce 3bc6            cmp     eax,esi  04dd13d0 741a            je      test!My.Main()+0x184 (04dd13ec)  04dd13d2 b9c010a371      mov     ecx,offset mscorlib_ni+0x5210c0 (71a310c0) (MT: System.Byte)  04dd13d7 e814a4686e      call    clr!JIT_GetRuntimeType (7345b7f0)  04dd13dc 8bf0            mov     esi,eax  04dd13de b9fc43a371      mov     ecx,offset mscorlib_ni+0x5243fc (71a343fc) (MT: System.UInt16)  04dd13e3 e808a4686e      call    clr!JIT_GetRuntimeType (7345b7f0)  >>> 04dd13e8 3bc6            cmp     eax,esi  04dd13ea 7511            jne     test!My.Main()+0x195 (04dd13fd)  04dd13ec c745c802000000  mov     dword ptr [ebp-38h],2  04dd13f3 b801000000      mov     eax,1  04dd13f8 e98b000000      jmp     test!My.Main()+0x220 (04dd1488)  04dd13fd b9c010a371      mov     ecx,offset mscorlib_ni+0x5210c0 (71a310c0) (MT: System.Byte)  04dd1402 e8e9a3686e      call    clr!JIT_GetRuntimeType (7345b7f0)  04dd1407 8bf0            mov     esi,eax  04dd1409 b9901aa371      mov     ecx,offset mscorlib_ni+0x521a90 (71a31a90) (MT: System.Int32)  04dd140e e8dda3686e      call    clr!JIT_GetRuntimeType (7345b7f0)  04dd1413 3bc6            cmp     eax,esi  04dd1415 741a            je      test!My.Main()+0x1c9 (04dd1431)  04dd1417 b9c010a371      mov     ecx,offset mscorlib_ni+0x5210c0 (71a310c0) (MT: System.Byte)  04dd141c e8cfa3686e      call    clr!JIT_GetRuntimeType (7345b7f0)  04dd1421 8bf0            mov     esi,eax  04dd1423 b9e860a271      mov     ecx,offset mscorlib_ni+0x5160e8 (71a260e8) (MT: System.UInt32)  04dd1428 e8c3a3686e      call    clr!JIT_GetRuntimeType (7345b7f0)  04dd142d 3bc6            cmp     eax,esi  04dd142f 750e            jne     test!My.Main()+0x1d7 (04dd143f)  04dd1431 c745c804000000  mov     dword ptr [ebp-38h],4  04dd1438 b801000000      mov     eax,1  04dd143d eb49            jmp     test!My.Main()+0x220 (04dd1488)  04dd143f b9c010a371      mov     ecx,offset mscorlib_ni+0x5210c0 (71a310c0) (MT: System.Byte)  04dd1444 e8a7a3686e      call    clr!JIT_GetRuntimeType (7345b7f0)  04dd1449 8bf0            mov     esi,eax  04dd144b b95cb2a171      mov     ecx,offset mscorlib_ni+0x50b25c (71a1b25c) (MT: System.Int64)  04dd1450 e89ba3686e      call    clr!JIT_GetRuntimeType (7345b7f0)  04dd1455 3bc6            cmp     eax,esi  04dd1457 741a            je      test!My.Main()+0x20b (04dd1473)  04dd1459 b9c010a371      mov     ecx,offset mscorlib_ni+0x5210c0 (71a310c0) (MT: System.Byte)  04dd145e e88da3686e      call    clr!JIT_GetRuntimeType (7345b7f0)  04dd1463 8bf0            mov     esi,eax  04dd1465 b9700ba271      mov     ecx,offset mscorlib_ni+0x510b70 (71a20b70) (MT: System.UInt64)  04dd146a e881a3686e      call    clr!JIT_GetRuntimeType (7345b7f0)  04dd146f 3bc6            cmp     eax,esi  04dd1471 750e            jne     test!My.Main()+0x219 (04dd1481)  04dd1473 c745c808000000  mov     dword ptr [ebp-38h],8  04dd147a b801000000      mov     eax,1  04dd147f eb07            jmp     test!My.Main()+0x220 (04dd1488)  04dd1481 33d2            xor     edx,edx  04dd1483 8955c8          mov     dword ptr [ebp-38h],edx  04dd1486 33c0            xor     eax,eax  04dd1488 85c0            test    eax,eax  04dd148a 7441            je      test!My.Main()+0x265 (04dd14cd)  04dd148c 3b7dc4          cmp     edi,dword ptr [ebp-3Ch]  04dd148f 753a            jne     test!My.Main()+0x263 (04dd14cb)  04dd1491 8d45d0          lea     eax,[ebp-30h]  04dd1494 ff7008          push    dword ptr [eax+8]  04dd1497 ff7004          push    dword ptr [eax+4]  04dd149a ff30            push    dword ptr [eax]  04dd149c ff15e4950403    call    dword ptr ds:[30495E4h] (System.Runtime.InteropServices.MemoryMarshal.GetReference[[System.Byte, mscorlib]](System.Span`1<Byte>), mdToken: 06000168)  04dd14a2 8bf0            mov     esi,eax  04dd14a4 8d45bc          lea     eax,[ebp-44h]  04dd14a7 ff7008          push    dword ptr [eax+8]  04dd14aa ff7004          push    dword ptr [eax+4]  04dd14ad ff30            push    dword ptr [eax]  04dd14af ff154c960403    call    dword ptr ds:[304964Ch] (System.Runtime.InteropServices.MemoryMarshal.GetReference[[System.Byte, mscorlib]](System.ReadOnlySpan`1<Byte>), mdToken: 06000169)  04dd14b5 8bd0            mov     edx,eax  04dd14b7 8b45c8          mov     eax,dword ptr [ebp-38h]  04dd14ba 8945b8          mov     dword ptr [ebp-48h],eax  04dd14bd 0fafc7          imul    eax,edi  04dd14c0 50              push    eax  04dd14c1 8bce            mov     ecx,esi  04dd14c3 ff150c810403    call    dword ptr ds:[304810Ch] (System.SpanHelpers.SequenceEqual(Byte ByRef, Byte ByRef, System.NUInt), mdToken: 0600011a)  ```
28179	area-System.Memory	Fix major System.Memory performance regression on .NET Framework x86	JIT on .NET Framework x86 can do only a limited amount of inlining of NUint operations per method. This caused a major performance regression in `Span.SequenceEqual<byte>` on .NET Framework x86.    This change is switching the implementation of `SequenceEqual<byte>` to use pointer-based arithmetic to fix this performance regression. Also included are related performance tweaks like using Unsafe.AddByteOffset instead of Unsafe.Add where possible.
28177	area-System.Collections	Improve inling in ImmutableArray<T>.Builder	The issue https://github.com/dotnet/corefx/issues/28064 is about a benchmark whose performance is so bad that a new dangerous method was considered to improve that situation. But almost the same effect can be achieved just by ensuring that the `Add()` method and the indexer setter on `ImmutableArray<T>.Builder` can be inlined (see https://github.com/dotnet/corefx/issues/28064#issuecomment-373950250 for more details). This PR does that.    I have only verified that extracting the `throw` is useful for the indexer setter. But the indexer getter and `ItemRef` are very similar, so I assumed it makes sense for them too.    Performance results using BenchmarkDotNet ([source](https://github.com/svick/Benchmark/blob/3504a3c/Program.cs)):    Before:    |  Method |      Mean |     Error |    StdDev |    Median |  |-------- |----------:|----------:|----------:|----------:|  |     Add | 11.053 us | 0.4281 us | 1.2623 us | 11.004 us |  | Indexer |  6.246 us | 0.1827 us | 0.5242 us |  6.063 us |    After:    |  Method |     Mean |     Error |    StdDev |   Median |  |-------- |---------:|----------:|----------:|---------:|  |     Add | 5.538 us | 0.1310 us | 0.3863 us | 5.422 us |  | Indexer | 3.159 us | 0.0631 us | 0.1138 us | 3.188 us |    Relevant portions of JIT dumps:    Before:    ```  *************** In fgFindBasicBlocks() for Builder[Int64][System.Int64]:Add(long):this  weight= 10 : state   3 [ ldarg.0 ]  weight= 10 : state   3 [ ldarg.0 ]  weight= 79 : state  40 [ call ]  weight= 28 : state  24 [ ldc.i4.1 ]  weight=-12 : state  76 [ add ]  weight= 79 : state  40 [ call ]  weight= 31 : state 191 [ ldarg.0 -> ldfld ]  weight= 10 : state   3 [ ldarg.0 ]  weight= 31 : state 191 [ ldarg.0 -> ldfld ]  weight= 20 : state 199 [ stloc.0 -> ldloc.0 ]  weight= 28 : state  24 [ ldc.i4.1 ]  weight=-12 : state  76 [ add ]  weight= 31 : state 111 [ stfld ]  weight= 12 : state   7 [ ldloc.0 ]  weight= 16 : state   4 [ ldarg.1 ]  weight= 65 : state 141 [ stelem ]  weight= 19 : state  42 [ ret ]    Inline candidate callsite is in a loop.  Multiplier increased to 3.  calleeNativeSizeEstimate=445  callsiteNativeSizeEstimate=115  benefit multiplier=3  threshold=345  Native estimate for function size exceeds threshold for inlining 44.5 > 34.5 (multiplier = 3)      Inline expansion aborted, inline not profitable  INLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline' for 'Bench:Add():this' calling 'Builder[Int64][System.Int64]:Add(long):this'  INLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline'    …    INLINER impTokenLookupContextHandle for Builder[Int64][System.Int64]:set_Item(int,long):this is 0x00007FF8B1B089D1.  *************** In fgFindBasicBlocks() for Builder[Int64][System.Int64]:set_Item(int,long):this  weight= 16 : state   4 [ ldarg.1 ]  weight= 10 : state   3 [ ldarg.0 ]  weight= 79 : state  40 [ call ]  weight= 28 : state  50 [ blt.s ]  weight=227 : state 103 [ newobj ]  weight=210 : state 108 [ throw ]  weight= 31 : state 191 [ ldarg.0 -> ldfld ]  weight= 16 : state   4 [ ldarg.1 ]  weight= 35 : state   5 [ ldarg.2 ]  weight= 65 : state 141 [ stelem ]  weight= 19 : state  42 [ ret ]    Inline candidate callsite is in a loop.  Multiplier increased to 3.  calleeNativeSizeEstimate=736  callsiteNativeSizeEstimate=145  benefit multiplier=3  threshold=435  Native estimate for function size exceeds threshold for inlining 73.6 > 43.5 (multiplier = 3)      Inline expansion aborted, inline not profitable  INLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline' for 'Bench:Indexer():this' calling 'Builder[Int64][System.Int64]:set_Item(int,long):this'  INLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline'  ```    After:    ```  INLINER impTokenLookupContextHandle for Builder[Int64][System.Int64]:Add(long):this is 0x00007FF8B8698A39.  *************** In fgFindBasicBlocks() for Builder[Int64][System.Int64]:Add(long):this  weight= 31 : state 191 [ ldarg.0 -> ldfld ]  weight= 28 : state  24 [ ldc.i4.1 ]  weight=-12 : state  76 [ add ]  weight=  6 : state  11 [ stloc.0 ]  weight= 10 : state   3 [ ldarg.0 ]  weight= 12 : state   7 [ ldloc.0 ]  weight= 79 : state  40 [ call ]  weight= 31 : state 191 [ ldarg.0 -> ldfld ]  weight= 31 : state 191 [ ldarg.0 -> ldfld ]  weight= 16 : state   4 [ ldarg.1 ]  weight= 65 : state 141 [ stelem ]  weight= 10 : state   3 [ ldarg.0 ]  weight= 12 : state   7 [ ldloc.0 ]  weight= 31 : state 111 [ stfld ]  weight= 19 : state  42 [ ret ]    Inline candidate is mostly loads and stores.  Multiplier increased to 3.  Inline candidate callsite is in a loop.  Multiplier increased to 6.  calleeNativeSizeEstimate=369  callsiteNativeSizeEstimate=115  benefit multiplier=6  threshold=690  Native estimate for function size is within threshold for inlining 36.9 <= 69 (multiplier = 6)  …  Successfully inlined Builder[Int64][System.Int64]:Add(long):this (42 IL bytes) (depth 1) [profitable inline]  --------------------------------------------------------------------------------------------    INLINER: during 'fgInline' result 'success' reason 'profitable inline' for 'Bench:Add():this' calling 'Builder[Int64][System.Int64]:Add(long):this'  INLINER: during 'fgInline' result 'success' reason 'profitable inline'    …    INLINER impTokenLookupContextHandle for Builder[Int64][System.Int64]:set_Item(int,long):this is 0x00007FF8B8698A39.  *************** In fgFindBasicBlocks() for Builder[Int64][System.Int64]:set_Item(int,long):this  weight= 16 : state   4 [ ldarg.1 ]  weight= 10 : state   3 [ ldarg.0 ]  weight= 79 : state  40 [ call ]  weight= 28 : state  50 [ blt.s ]  weight= 79 : state  40 [ call ]  weight= 31 : state 191 [ ldarg.0 -> ldfld ]  weight= 16 : state   4 [ ldarg.1 ]  weight= 35 : state   5 [ ldarg.2 ]  weight= 65 : state 141 [ stelem ]  weight= 19 : state  42 [ ret ]    Inline candidate callsite is in a loop.  Multiplier increased to 3.  calleeNativeSizeEstimate=378  callsiteNativeSizeEstimate=145  benefit multiplier=3  threshold=435  Native estimate for function size is within threshold for inlining 37.8 <= 43.5 (multiplier = 3)  …  Successfully inlined Builder[Int64][System.Int64]:set_Item(int,long):this (28 IL bytes) (depth 1) [profitable inline]  --------------------------------------------------------------------------------------------    INLINER: during 'fgInline' result 'success' reason 'profitable inline' for 'Bench:Indexer():this' calling 'Builder[Int64][System.Int64]:set_Item(int,long):this'  INLINER: during 'fgInline' result 'success' reason 'profitable inline'  ```
28175	area-System.Data	Enable OdbcConnection.GetSchema 	The pull requests primarily enable OdbcConnection.GetSchema() API and its overloads.     The following changes were made to address this  1. System.Data.Odbc.OdbcMetaData.xml was added to System.Data.Odbc  2. Refactored the files in System.Data.Odbc and System.Data.SqlClient and moved them to Common/src/System/Data/ProviderBase  2.a Only moved the files needed to make OdbcConnection.GetSchema() work.   2.b Added partial qualifier on some of the classes which had diverged because SqlClient supports TransactionScope.    Fixes https://github.com/dotnet/corefx/issues/27260    cc @saurabh500 
28174	area-System.IO	Pipelines Rename OnCompleted to Register as per API Review	Fixes #27705     renames all tests and the actual methods
28173	area-System.ComponentModel	Bug fix: Add Assembly.LoadFrom() fallback attempt	"Fixes #27433     I did a test with https://github.com/superriva/MEF_examples.    I don't know if we need to write a ""custom test"" for this(create an assembly on the fly and try to load etc..).    I attach ""debug result"".    ```csharp   var catalog = new DirectoryCatalog(@""D:\JOB\Repos\MEF_examples\MEF1-bug\ExportComponents\Components"", ""*.dll"");  ```  Before  ![nofix](https://user-images.githubusercontent.com/7894084/37558383-88c7c78e-2a13-11e8-9762-3112516fd39b.png)  After  ![fix](https://user-images.githubusercontent.com/7894084/37558387-90f8ee9c-2a13-11e8-8e27-24f087dd99fe.png)  (the exception on Parts is due to missing interface lib)  No more log on debug console.    cc: @weshaggard @safern         "
28171	area-System.Net	Removed dead code: SafeWinHttpHandleWithCallback	As per discussion in #2501 - this removes the unused SafeWinHttpHandleWithCallback.    Fixes #2501
28170	area-System.Runtime	Inconsistent null parameter handling in IEqualityComparer.GetHashCode(Object)	"The [docs](https://docs.microsoft.com/en-us/dotnet/api/system.collections.iequalitycomparer.gethashcode?view=netframework-4.7.1#System_Collections_IEqualityComparer_GetHashCode_System_Object_) state that `IEqualityComparer.GetHashCode(Object)` should throw `ArgumentNullException` when ""The type of `obj` is a reference type and `obj` is `null`"".    However, this contract is inconsistently implemented across the framework:  1. `null` parameter leads to `ArgumentNullException` as expected: https://github.com/dotnet/corefx/blob/2b805ce320feab0d7d9b72123767cc017c32948f/src/Common/src/CoreLib/System/StringComparer.cs#L305  1. `null` parameter results in no exception and returns 0: https://github.com/dotnet/corefx/blob/6dd451f51451a7d0ceea6104b51bd17005e9a0e6/src/System.Collections/src/System/Collections/Generic/HashSetEqualityComparer.cs#L34  1. `null` parameter is not checked at all, leading to `NullReferenceException`: https://github.com/dotnet/corefx/blob/1514f1cb419ada9461730b05c1b67caef4aba0e2/src/System.Private.Xml/src/System/Xml/Core/SecureStringHasher.cs#L28"
28169	area-System.Net	[HttpListener] [GetContext] GetContext method call should unblock after call to Stop	"Hello,    It looks like there is an issue with HttpListener.GetContext call on windows. It should somehow unblock when HttpListener.Stop is called. However, It hangs on Windows, while on Ubuntu it works fine, i.e. throws HttpListenerException: Listener closed. The code is below:    ```c#  var listener = new HttpListener();    listener.Prefixes.Add(""http://+:9000/test/"");    listener.Start();    var listenerTask = Task.Run(() =>  {      try      {          var context = listener.GetContext();      }      catch(Exception ex)      {          Console.WriteLine($""Listener exception: {ex.GetType().Name}, {ex.Message}"");      }  });    Console.WriteLine(""Running"");    Console.ReadLine();    listener.Stop();  listener.Close();  ```    By the way, GetContextAsync version works properly on both platforms: it throws ObjectDisposedException    [EDIT] Add C# syntax highlighting by @karelz"
28168	area-System.ComponentModel	Fixed netfx System.ComponentModel.TypeConverter.Tests-InvariantCulture on non English Windows	Fixed netfx System.ComponentModel.TypeConverter.Tests-InvariantCulture on non English Windows  See https://github.com/dotnet/corefx/issues/28136
28167	area-System.ComponentModel	Bug fix: Force properties reload	Fixes #23127    I think this should be fixed also on [netfx](https://referencesource.microsoft.com/#System/compmod/system/componentmodel/design/DesignerOptionService.cs,156).    cc: @safern 
28163	area-System.Net	add proxy bypass list processing for windows	fixes #23150    This is last chunk for proxy configuration for HttpSocketHandler.  The functionality matches code provided by WinHttp team as well as my experiments and testing.   The pattern processing can possibly be compiled to single mega-match so we can do parallel processing but it does not seems necessary at the moment.  WinHttp does does process entries sequentially.
28161	area-System.IO	Use Win32Marshal from CoreLib shared code	Fix hr issue caught by Common.Tests.    Follow through for https://github.com/dotnet/corefx/pull/28158    cc: @pjanotti, @Anipik 
28160	area-System.Memory	API consistency for System.Memory APIs (argument names)	Here is an attempt to keep argument names consistent across the board for all the System.Memory APIs, based on our discussion (see https://github.com/dotnet/apireviews/pull/62).    I have split each change into separate commits if that makes things easier to review.    **List of changes:**    - AsBytes and Cast: Change arg name source -> span  - CopyTo: Change arg name array/sequence -> source  - Several APIs: Change arg name arraySegment -> segment  - Several APIs: Change arg name readOnlyMemory -> memory  - BinaryPrimitives and Utf8Formatter: Change arg name buffer -> source or destination  - Utf8Parser: Change arg name text -> source  - Base64: Change arg name consumed/written -> bytesConsumed/bytesWritten  - TryGetOwnedMemory: Change arg name ownedMemory -> owner, index -> start  - BuffersExtensions.Write: Change arg name bufferWriter -> writer  - Span Compare APIs: Change arg name first -> span, second/value -> other  - ROSequence.TryGet & BuffersExtensions: Change arg name data -> memory, sequence -> source  - BufferExtensions.Write: Change arg name source -> span  - SequencePosition.Equals: Change arg name position -> other    cc @KrzysztofCwalina, @joshfree, @terrajobst, @stephentoub, @davidfowl, @pakrym, @benaadams, @jkotas, @JeremyKuhne, @dotnet/corefxlab-contrib, @karelz, @danmosemsft 
28159	area-System.Reflection	System.Reflection.Metadata.Tests frequently hanging OSX CI	"Seeing multiple hits for this over the past few days. #27959, #28158, etc.    ```  2018-03-16 19:46:19,493: INFO: proc(54): run_and_log_output: Output: ===========================================================================================================  2018-03-16 19:46:19,493: INFO: proc(54): run_and_log_output: Output: ~/dotnetbuild/work/2692d885-466d-4e4e-afe7-34097847e712/Work/a2747181-713a-4b9a-a434-03a7690bc637/Unzip ~/dotnetbuild/work/2692d885-466d-4e4e-afe7-34097847e712/Work/a2747181-713a-4b9a-a434-03a7690bc637/Unzip  2018-03-16 19:46:19,699: INFO: proc(54): run_and_log_output: Output: Traceback (most recent call last):  2018-03-16 19:46:19,700: INFO: proc(54): run_and_log_output: Output:   File ""/Users/dotnet-bot/.dumpling/dumpling.py"", line 33, in <module>  2018-03-16 19:46:19,700: INFO: proc(54): run_and_log_output: Output:     import psutil  2018-03-16 19:46:19,700: INFO: proc(54): run_and_log_output: Output: ImportError: No module named psutil  2018-03-16 19:46:19,877: INFO: proc(54): run_and_log_output: Output: xUnit.net console test runner (64-bit .NET Core)  2018-03-16 19:46:19,877: INFO: proc(54): run_and_log_output: Output: Copyright (C) 2014 Outercurve Foundation.  2018-03-16 19:46:19,877: INFO: proc(54): run_and_log_output: Output:   2018-03-16 19:46:19,960: INFO: proc(54): run_and_log_output: Output: Discovering: System.Reflection.Metadata.Tests  2018-03-16 19:46:20,152: INFO: proc(54): run_and_log_output: Output: Discovered:  System.Reflection.Metadata.Tests  2018-03-16 19:46:20,277: INFO: proc(54): run_and_log_output: Output: Starting:    System.Reflection.Metadata.Tests  ```"
28156	area-System.Net	System.NullReferenceException in System.Net.Http.WinHttpRequestCallback.RequestCallback	Couldn't find any issue that seemed to cover the problem. I'm running kestrel in tests, and writing a reverse proxy component.    At an unknown point in running the tests, I get the following exception:  ```  System.NullReferenceException: Object reference not set to an instance of an object.     at System.Net.Http.WinHttpRequestCallback.RequestCallback(IntPtr handle, WinHttpRequestState state, UInt32 internetStatus, IntPtr statusInformation, UInt32 statusInformationLength)     at System.Net.Http.WinHttpRequestCallback.WinHttpCallback(IntPtr handle, IntPtr context, UInt32 internetStatus, IntPtr statusInformation, UInt32 statusInformationLength)     at Interop.WinHttp.WinHttpCloseHandle(IntPtr handle)     at Interop.WinHttp.SafeWinHttpHandle.ReleaseHandle()     at System.Runtime.InteropServices.SafeHandle.InternalDispose()     at System.Net.Http.WinHttpRequestState.ClearSendRequestState()     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)     at System.Threading.ThreadPoolWorkQueue.Dispatch()  ```    Repro:   - code: openrasta/openrasta-core@e2b2c5d   - tests: https://github.com/openrasta/openrasta-core/blob/1e006fddfd91b14d92177c3948517a809074f553/src/Tests/Plugins.ReverseProxy/errors/proxied_timeout.cs   - build failing: https://ci.appveyor.com/project/OpenRasta/openrasta-core/build/2.6.0-preview.1.1298+master    It looks like the same stacktrace as in #26278     Note builds and tests succeed on core 2 on libcurl-based http client.    I tried not disposing request/response messages from the client, no change. I'm refactoring the code at the moment, so maybe the problem will go away, but i'm pretty confused.
28152	area-System.Runtime	Proposal TypeListAttribute	# Suggestion:  Define a TypeListAttribute tilke this:    ```  public class TypeListAttribute : Attribute  {      public Type[] Types;      public TypeListAttribute(params Type[] types)      {          Types = types;      }  }   ```    This attribute can be used to mark generic classes like this:  ```  [TypeList(typeof(int), typeof(float), typeof(byte))]  class foo<T>    {          void DoSomething(T x, T y)           {                   T z = x + y;            }   }  ```  Then C# or VB.NET can use the TypeListAttribute.Types[] to validate the generic class code.  The compiler should test the foo<T> for all these types, i.e. foo< int >, foo< float > , foo< byte >.  if the code of the foo class is ok in all these cases, then it should compile correctly (i.e doesn't complain about the x + y operation) .    # Benefit:  This will solve some problems when there is no common interface to use as a constraint. for more details: https://github.com/dotnet/corefx/issues/27167    # Note: I asked also for C# syntax to define the list to avoid the long attribute syntax (https://github.com/dotnet/csharplang/issues/1388). This would be:  ```  class foo<T>  where T: {int, float, byte}  {          void DoSomething(T x, T y)           {                   T z = x + y;            }   }    ```
28150	area-System.Net	Make ClientWebSocket always use CONNECT tunneling through a proxy	Manually verified with the [Proxy_ConnectThruProxy_Success](https://github.com/dotnet/corefx/blob/02c3892380a392458a4d1f41c53ce2048cb6681d/src/System.Net.WebSockets.Client/tests/ClientWebSocketOptionsTests.cs#L73) test.    Here is the output after the fix. For non-secure (WS) connection:    ```  Connected: [::1]:59184  CONNECT corefx-net.cloudapp.net:80 HTTP/1.1  Host: corefx-net.cloudapp.net:80    Trying to connect to corefx-net.cloudapp.net  Connected to corefx-net.cloudapp.net  HTTP/1.1 200 Connection established  ```    Fix #28024.
28145	area-System.Globalization	Culture info ru-BY missed in .NET core 2.0.6 on Windows Server 2012 R2	_From @NGancevich on March 16, 2018 7:16_  I have Localization on my asp.net core 2.0.6 and it's working on local machine. But when I publish to IIS on server 2012 r2 it's throwing an exception  Application startup exception: System.Globalization.CultureNotFoundException: Culture is not supported.  Parameter name: name  ru-by is an invalid culture identifier.     at System.Globalization.CultureInfo.InitializeFromName(String name, Boolean useUserOverride)    According to the link https://msdn.microsoft.com/en-us/library/cc233982.aspx it's valid culture info.    Event microsoft has this localization on site https://www.microsoft.com/ru-by  _Copied from original issue: aspnet/Home#2967_
28143	area-System.Reflection	Add more test coverage for System.Reflection.Pointer	* Test that null object reference is properly converted to a null pointer value (this requires special handling)  * Test `Delegate.DynamicInvoke`. This one also uses `System.Reflection.Pointer` and on .NET Native is handled by separate code paths.    Currently adding as disabled on UapAot because I'm working on that support right now. We'll unblock it with the rest later.    Cc @sergiy-k 
28141	area-System.Net	Expose ClientWebSocketOptions.RemoteCertificateValidationCallback	Fixes https://github.com/dotnet/corefx/issues/12038  cc: @davidsh, @caesar1995 
28140	area-Infrastructure	Update cross build-rootfs for modern world	As part of building docker image for arm64 cross compiling I spent a lot of time looking at build--rootfs.sh.  The following seem like changes which should be done...    + Add latest Ubuntu version: Artful and Bionic  + Remove unsupported Ubuntu versions: Vivid and Wily  + Add latest lldbdev versions: 4.0, 5.0, 6.0  + Update lldb default to 3.9 to be consistent with non-cross build  + Drop old lldb versions 3.6 and 3.8  + Add error checking which is present in core-setup version    See https://github.com/dotnet/core-setup/issues/3843    @janvorli FYI
28139	area-Infrastructure	System.Data.SqlClient cannot be found	Hi    In a specific scenario, I cannot load `System.Data.SqlClient` using the 2.0.6 runtime. The 2.0.5 runtime works.    A small repro : https://github.com/johnkors/sqlclient.runtime.test    A build of both runtimes:  https://travis-ci.org/johnkors/sqlclient.runtime.test/builds/354338277    In 2.0.5, I can use System.Data.SqlClient (ok, it fails to connect to a unknown db here - but using the dll works).  In 2.0.6, I get the FileNotFoundException.    >Unhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly 'System.Data.SqlClient, Version=4.2.0.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified.    (bumping the the dependency on `System.Data.SqlClient` to 4.4.3 makes it work with both runtimes.)
28138	area-System.Net	WebSocketProtocol.CreateFromStream should allow specifying a receive buffer and a send buffer	Currently you can specify a receive buffer to the WebSocketProtocol.CreateFromStream API but you cannot control the send buffer. Currently the managed websocket implementation always allocates a pooled array for sends which may not be optimal if the underlying stream is already buffered (it introduces an extra layer of unnecessary buffering).    I'd like to propose we change this method to the following:    ```C#  using System.IO;    namespace System.Net.WebSockets  {      public static class WebSocketProtocol      {          public static WebSocket CreateFromStream(Stream stream, bool isServer, string subProtocol, TimeSpan keepAliveInterval, int? receiveBufferSize = null, int? sendBufferSize = null) { throw null; }          // Existing API:          public static WebSocket CreateFromStream(Stream stream, bool isServer, string subProtocol, TimeSpan keepAliveInterval, Memory<byte> buffer = default) { throw null; }      }  }  ```    I'd also like to get this in for 2.1 if possible 😄     A few questions:  - Today we allow passing a single buffer to the websocket API for receives but if you use a pooled buffer, you can only return it when the websocket is disposed. That would be the same deal for the sendBuffer.  - The existing WebSocket.CreateClient API just lets you specify the size of the internal buffer instead of taking a buffer directly. While this is less flexible, I'm not sure how useful it is to allow passing in the buffer itself to the WebSocket constructor. I might be missing something here.    Note: Existing API:  https://github.com/dotnet/corefx/blob/cc590fd30b7000458d055164c641461d616ed33c/src/System.Net.WebSockets.WebSocketProtocol/ref/System.Net.WebSockets.WebSocketProtocol.cs#L14    /cc @stephentoub @karelz 
28137	area-System.Runtime	ConcurrentDictionary is not marked as serializable	The following code crashes:  ```  var cd = new ConcurrentDictionary<int, int>();  cd[0] = 42;  var bf = new BinaryFormatter();  bf.Serialize(new MemoryStream(), cd);  ```  with  ```  System.Runtime.Serialization.SerializationException : Type  'System.Collections.Concurrent.ConcurrentDictionary`2[[System.Int32, System.Private.CoreLib,   Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32,   System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]' in   Assembly 'System.Collections.Concurrent, Version=4.0.14.0, Culture=neutral,   PublicKeyToken=b03f5f7f11d50a3a' is not marked as serializable.  ```  (tested on .net core 2.0, 2.1-preview and master).  The regular dictionary serializes just fine.    UPD: just found https://github.com/dotnet/corefx/pull/19742  I am wondering will it be fixed or it's by design now?
28136	area-Meta	Testing netfx fails in 27 tests localy on non english Windows	Testing netfx fails in 27 tests localy on non english Windows with next log:  ```           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.ComponentModel.Annotations.Tests  Total: 527, Errors: 0, Failed: 1, Skipped: 0, Time: 1,779s [C:\Code\corefx2\src\System.ComponentModel.Annotations\tests\System.ComponentModel.Annotations.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.CodeDom.Tests  Total: 2107, Errors: 0, Failed: 6, Skipped: 0, Time: 4,078s [C:\Code\corefx2\src\System.CodeDom\tests\System.CodeDom.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.Diagnostics.TraceSource.Tests  Total: 271, Errors: 0, Failed: 2, Skipped: 0, Time: 3,905s [C:\Code\corefx2\src\System.Diagnostics.TraceSource\tests\System.Diagnostics.TraceSource.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.Configuration.ConfigurationManager.Tests  Total: 551, Errors: 0, Failed: 3, Skipped: 0, Time: 1,316s [C:\Code\corefx2\src\System.Configuration.ConfigurationManager\tests\System.Configuration.ConfigurationManager.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.DirectoryServices.Tests  Total: 250, Errors: 0, Failed: 1, Skipped: 27, Time: 3,777s [C:\Code\corefx2\src\System.DirectoryServices\tests\System.DirectoryServices.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.ComponentModel.TypeConverter.Tests  Total: 5725, Errors: 0, Failed: 7, Skipped: 0, Time: 1,738s [C:\Code\corefx2\src\System.ComponentModel.TypeConverter\tests\System.ComponentModel.TypeConverter.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.Data.Common.Tests  Total: 1723, Errors: 0, Failed: 25, Skipped: 0, Time: 10,809s [C:\Code\corefx2\src\System.Data.Common\tests\System.Data.Common.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.Diagnostics.EventLog.Tests  Total: 61, Errors: 0, Failed: 2, Skipped: 42, Time: 0,598s [C:\Code\corefx2\src\System.Diagnostics.EventLog\tests\System.Diagnostics.EventLog.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.Xml.Linq.xNodeBuilder.Tests  Total: 19, Errors: 0, Failed: 3, Skipped: 0, Time: 0,646s [C:\Code\corefx2\src\System.Private.Xml.Linq\tests\xNodeBuilder\System.Xml.Linq.xNodeBuilder.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.Diagnostics.StackTrace.Tests  Total: 85, Errors: 0, Failed: 9, Skipped: 0, Time: 1,183s [C:\Code\corefx2\src\System.Diagnostics.StackTrace\tests\System.Diagnostics.StackTrace.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.Linq.Tests  Total: 2612, Errors: 0, Failed: 1, Skipped: 6, Time: 11,738s [C:\Code\corefx2\src\System.Linq\tests\System.Linq.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.Runtime.Serialization.Json.ReflectionOnly.Tests  Total: 167, Errors: 0, Failed: 2, Skipped: 0, Time: 7,378s [C:\Code\corefx2\src\System.Runtime.Serialization.Json\tests\ReflectionOnly\System.Runtime.Serialization.Json.ReflectionOnly.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.Drawing.Common.Tests  Total: 4488, Errors: 0, Failed: 10, Skipped: 0, Time: 48,900s [C:\Code\corefx2\src\System.Drawing.Common\tests\System.Drawing.Common.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.IO.FileSystem.Tests  Total: 4450, Errors: 0, Failed: 1, Skipped: 160, Time: 56,357s [C:\Code\corefx2\src\System.IO.FileSystem\tests\System.IO.FileSystem.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.Security.Cryptography.Xml.Tests  Total: 524, Errors: 0, Failed: 2, Skipped: 16, Time: 3,766s [C:\Code\corefx2\src\System.Security.Cryptography.Xml\tests\System.Security.Cryptography.Xml.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.DirectoryServices.AccountManagement.Tests  Total: 60, Errors: 0, Failed: 1, Skipped: 12, Time: 1,274s [C:\Code\corefx2\src\System.DirectoryServices.AccountManagement\tests\System.DirectoryServices.AccountManagement.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.Text.Encoding.Tests  Total: 9742, Errors: 0, Failed: 1, Skipped: 0, Time: 4,804s [C:\Code\corefx2\src\System.Text.Encoding\tests\System.Text.Encoding.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.Threading.Tasks.Tests  Total: 577, Errors: 0, Failed: 5, Skipped: 2, Time: 6,944s [C:\Code\corefx2\src\System.Threading.Tasks\tests\System.Threading.Tasks.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.IO.FileSystem.AccessControl.Tests  Total: 88, Errors: 0, Failed: 14, Skipped: 0, Time: 0,362s [C:\Code\corefx2\src\System.IO.FileSystem.AccessControl\tests\System.IO.FileSystem.AccessControl.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.Xml.Xsl.XslCompiledTransformApi.Tests  Total: 1237, Errors: 0, Failed: 7, Skipped: 0, Time: 29,381s [C:\Code\corefx2\src\System.Private.Xml\tests\Xslt\XslCompiledTransformApi\System.Xml.Xsl.XslCompiledTransformApi.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.Runtime.Extensions.Tests  Total: 2167, Errors: 0, Failed: 1, Skipped: 9, Time: 5,727s [C:\Code\corefx2\src\System.Runtime.Extensions\tests\System.Runtime.Extensions.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.Runtime.Serialization.Json.Tests  Total: 167, Errors: 0, Failed: 2, Skipped: 0, Time: 3,108s [C:\Code\corefx2\src\System.Runtime.Serialization.Json\tests\System.Runtime.Serialization.Json.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.Net.Mail.Functional.Tests  Total: 163, Errors: 0, Failed: 2, Skipped: 0, Time: 303,994s [C:\Code\corefx2\src\System.Net.Mail\tests\Functional\System.Net.Mail.Functional.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.Net.WebSockets.Client.Tests  Total: 19, Errors: 0, Failed: 3, Skipped: 0, Time: 0,363s [C:\Code\corefx2\src\System.Net.WebSockets.Client\tests\System.Net.WebSockets.Client.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.Runtime.Serialization.Formatters.Tests  Total: 6867, Errors: 0, Failed: 10, Skipped: 0, Time: 17,936s [C:\Code\corefx2\src\System.Runtime.Serialization.Formatters\tests\System.Runtime.Serialization.Formatters.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.Runtime.Tests  Total: 12053, Errors: 0, Failed: 2, Skipped: 0, Time: 9,801s [C:\Code\corefx2\src\System.Runtime\tests\System.Runtime.Tests.csproj]           C:\Code\corefx2\Tools\tests.targets(492,5): warning :    System.Security.Cryptography.Cng.Tests  Total: 136, Errors: 0, Failed: 1, Skipped: 1, Time: 2,824s [C:\Code\corefx2\src\System.Security.Cryptography.Cng\tests\System.Security.Cryptography.Cng.Tests.csproj]  ```    I can make logs for each failed tests.
28135	area-System.Net	Why does HttpClient in Core allow GET requests with bodies, while Framework version does not?	"_Opened on behalf of @IanKemp from https://github.com/dotnet/core/issues/1333_    -------  _@IanKemp writes -_   As per the title, the `HttpClient` implementation between Core and Framework differs in this regard. Consider the following example:    ```csharp  using (var client = new HttpClient())  {      var request = new HttpRequestMessage      {          RequestUri = new Uri(""some url""),          Method = HttpMethod.Get,      };        request.Content = new ByteArrayContent(Encoding.UTF8.GetBytes(""some json""));        request.Content.Headers.ContentType = new MediaTypeHeaderValue(""application/json"");        var result = client.SendAsync(request).Result;      result.EnsureSuccessStatusCode();        var responseBody = await result.Content.ReadAsStringAsync().ConfigureAwait(false);  }  ```    * In .NET Core (tested with 1.0 and 2.0), the above executes successfully.  * In .NET framework (tested with 4.7.1, 4.6.1, 4.5), the above throws a `ProtocolViolationException` with the message `Cannot send a content-body with this verb-type` on the `SendAsync` call.    While I am very happy that Core allows this (technically correct, but unusual) request type, I am less happy that the Framework does not support it. Why does Core allow this why Framework does not? Is this intentional or an oversight? Is there somewhere where these differences/idiosyncrasies are documented?    (For another example of differing HTTP behaviour in Core vs Framework, [see this issue](https://github.com/AngleSharp/AngleSharp/issues/607#issuecomment-345596448).)    -----  _@AppBeat writes -_  Interesting. According to this post: https://stackoverflow.com/questions/978061/http-get-with-request-body  standard does not explicitly forbid this. GET body should be ignored by server.    -----  _@IanKemp writes -_  @AppBeat The server is free to ignore or accept the body; that should not prevent the client from sending a request that the server may ignore. It is ultimately up to the client to determine whether the server accepts requests like this.    A popular example of a product (server) that supports GET requests with bodies is Elasticsearch, [specifically their REST query API](https://www.elastic.co/guide/en/elasticsearch/guide/current/_empty_search.html). In particular, the section on that page ""A GET Request with a Body?"" explains their rationale (but note that they do also allow POST as a fallback option for clients that do not support this).    ----  _@AppBeat writes -_   I didn't say that this should be removed from .NET Core :) Although this is not common (bad?) practice I think .NET Core version in this case is more correct than .NET Framework implementation.    I will try to test this on new managed implementation of SocketsHttpHandler which will probably be prefered HttpHandler in future for more consistent behaviour across all different platforms.  https://github.com/dotnet/corefx/tree/master/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler    I created new functional test for SocketsHttpHandler and it works as it should:    ```  [Fact]  public async Task SendAsync_HttpGetWithPayload_Success()  {      await LoopbackServer.CreateServerAsync(async (server, url) =>      {          string responseBody =              ""HTTP/1.1 200 OK\r\n"" +              $""Date: {DateTimeOffset.UtcNow:R}\r\n"" +              ""Content-Length: 0\r\n"" +              ""Connection: close\r\n"" +              ""\r\n"";            using (HttpClient client = CreateHttpClient())          {              var request = new HttpRequestMessage              {                  RequestUri = url,                  Method = HttpMethod.Get,              };                request.Content = new StringContent(""{}"", Encoding.UTF8, ""application/json"");              Task<HttpResponseMessage> getResponseTask = client.SendAsync(request);              await server.AcceptConnectionAsync(async connection =>              {                  Task<List<string>> serverTask = connection.ReadRequestHeaderAndSendCustomResponseAsync(responseBody);                  await TestHelper.WhenAllCompletedOrAnyFailed(getResponseTask, serverTask);              });                Assert.True(getResponseTask.IsCompletedSuccessfully);              var result = getResponseTask.Result;              Assert.True(result.IsSuccessStatusCode);          }      });  }  ```"
28134	area-System.Net	Remove some low-hanging fruit allocations from SocketsHttpHandler connections	Most of these aren't actually in SocketsHttpHandler itself, but rather in System.Net.Security or System.Security.Cryptography.X509Certificates.  I took a memory allocation trace of creating a bunch of authenticated connections, and started eliminating some of the easier allocations. https://github.com/dotnet/coreclr/pull/16984 is part of this, as was https://github.com/dotnet/corefx/pull/28086 and https://github.com/dotnet/corefx/pull/28084, and https://github.com/dotnet/coreclr/issues/16982 is showing up as well.  There's still _a lot_ more there, but this is a start.  Reviewing commit by commit is probably easiest.    cc: @geoffkizer, @bartonjs, @JeremyKuhne, @davidsh
28133	area-System.Net	System.Net.Http.Functional.Tests Assertion Failed - We should only be here if cancellation was requested	"From https://github.com/dotnet/corefx/pull/28080 on OSX.1013.Amd64.Open:Debug-x64  https://mc.dot.net/#/user/ahsonkhan/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/be5aaa6aafd5a19086974af807cb66588586e825/workItem/System.Net.Http.Functional.Tests/wilogs    ```text  2018-03-15 20:58:52,865: INFO: proc(54): run_and_log_output: Output:    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandlerTest.Ctor_ExpectedDefaultPropertyValues_UapPlatform [SKIP]  2018-03-15 20:58:52,865: INFO: proc(54): run_and_log_output: Output:       Condition(s) not met: \""IsUap\""  2018-03-15 20:58:53,369: INFO: proc(54): run_and_log_output: Output: Assertion Failed  2018-03-15 20:58:53,369: INFO: proc(54): run_and_log_output: Output: We should only be here if cancellation was requested.  2018-03-15 20:58:53,369: INFO: proc(54): run_and_log_output: Output:   2018-03-15 20:58:53,370: INFO: proc(54): run_and_log_output: Output:    at System.Net.Http.CurlHandler.CurlResponseStream.<>c.<ReadAsync>b__30_1(Object s2) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Http/src/System/Net/Http/CurlHandler/CurlHandler.CurlResponseMessage.cs:line 344  2018-03-15 20:58:53,370: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/buildagent/agent/_work/147/s/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166  2018-03-15 20:58:53,371: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 2440  2018-03-15 20:58:53,371: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ThreadPoolWorkQueue.Dispatch() in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Threading/ThreadPool.cs:line 588  2018-03-15 20:58:56,769: INFO: proc(54): run_and_log_output: Output: /Users/dotnet-bot/dotnetbuild/work/9bbf5ba5-b5a1-4f68-9dea-4a703567af54/Work/cb238724-1a11-4068-a19a-892967c9bc11/Unzip/RunTests.sh: line 87: 67860 Abort trap: 6           (core dumped) $RUNTIME_PATH/dotnet xunit.console.netcore.exe System.Net.Http.Functional.Tests.dll -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonosxtests -notrait category=OuterLoop -notrait category=failing  2018-03-15 21:01:35,012: INFO: proc(54): run_and_log_output: Output: processing dump file /Users/dotnet-bot/dotnetbuild/work/9bbf5ba5-b5a1-4f68-9dea-4a703567af54/Work/cb238724-1a11-4068-a19a-892967c9bc11/Unzip/core.67860  2018-03-15 21:01:35,013: INFO: proc(54): run_and_log_output: Output: creating dumpling dump f8701e01613c9f7a2232ed89cd62ac0334dce3fa  ```    @davidsh, @wfurt, @stephentoub "
28132	area-System.Runtime	Get the .NET Core version number at runtime	@IvanFarkas commented on [Sat Jan 27 2018](https://github.com/dotnet/core/issues/1242)  Is there a reliable way to get the **.NET Core version number** at runtime that works on **Nano Server** and **Ubuntu** **Docker** containers as well, please?  I've seen some hacks deriving it from folder structure that breaks when the app is deployed onto Nano Server and Ubuntu Docker container images.  
28131	area-System.Net	Span Support for Socket SendTo and UdpClient 	Checking out the new Span based socket apis in 2.1 preview 1, I noticed the api of UdpClient doesn't have span based overloads.      Falling back to Socket, it appears there too the SendTo api is missing any overloads for Span and friends.      Digging deeper into [SocketPal.Windows](https://github.com/dotnet/corefx/blob/master/src/System.Net.Sockets/src/System/Net/Sockets/SocketPal.Windows.cs#L203-L238), there's no SendTo supporting span there but [SocketPal.Unix](https://github.com/dotnet/corefx/blob/master/src/System.Net.Sockets/src/System/Net/Sockets/SocketPal.Unix.cs#L706-L750) does seem to have some Span support.      The corresponding receive methods are also lacking Span support.      To add actual non-allocating support, it would also appear that endpoint serialization in these methods would need to be tweaked but that seems to be somewhat the point of [SocketAddress](https://github.com/dotnet/corefx/blob/master/src/Common/src/System/Net/SocketAddress.cs) so maybe calling code would need to pass the SocketAddress instead of the IPEndPoint/EndPoint?    Was this an intentional gap in the api or just something that wasn't priority / low use case?    
28129	area-System.IO	Shortcutting the code path of LongFileTime.ToDateTimeOffset()	Shortcutted `LongFileTime.ToDateTimeOffset()` avoiding conversions from UTC to Local back to UTC again.    Clearly, I have a lot to improve on my Git-Fu. Sorry for the extraneous commits.
28125	area-Infrastructure	[1.1] Add OpenSuse423 and Ubuntun1804 to init-tools cli initialization	This updates the default tools version for an opensuse platform to 42.3 and adds detection for Ubuntu18.04.     This will cause those platforms to explicitly fail unless they have a bootstrap cli version uploaded to blob storage.    A similar change will need to go into core-setup, but only after the above step is completed and those cli packages are made available.    cc @janvorli 
28124	area-System.IO	Check for name surrogates when deleting reparse points	Name surrogates are the only type of reparse points that we should be simply detaching.  All other reparse points we should be drilling into- this was causing issues for OneDrive  cloud files.    Fixes #24250    cc: @CAllredMSFT, @pjanotti, @maryamariyan, @danmosemsft     Note that I don't have a way to write an automated test for this yet. I'm looking into that. I've manually tested against my personal OneDrive folder to validate the behavior.
28123	area-System.Collections	Flag unprotected concurrent dictionary access	"`Dictionary<K, V>` is not threadsafe for concurrent access involving writes. If this occurs the datastructure can get corrupted and more and more threads can get ""captured"" inside `FindEntry` or `TryInsert` (or certain other methods), looping continously until the process terminates. `HashSet<T>` has a similar backing datastructure and can similarly ""capture"" threads inside `AddIfNotPresent` (or one of several other methods).    [Aside on how these work: lookups in these datastructures use hashing into a `_buckets` array to find an index into the `_entries` array (named `_slots` in `HashSet<T>`). If there is no hash collision that `Entry` (`Slot`) contains the sought after entry. If there is a collision on that hash, it begins a chain, and lookup follows the chain. If the desired entry is not present in the collection then the chain should terminate in an empty entry and the method returns (possibly after adding the entry). When entries are added, they are prepended to this chain and `_buckets` and then `_entries` are fixed up. After removes, unused slots are kept in a free chain with a head is stored in `_freelist` to avoid needing to scan `_entries` for unused slots. Concurrent updates to these chains (or possibly concurrent traverse and write) can lead to loops at which point any read or write can potentially be sucked into a busy loop.]    Although this always indicates a bug in the calling code we have now seen this impact several large services and it can cause expensive and growing CPU monopolization until much or all of the host machine is looping endlessly. Given that we should consider whether there is a cheap way that we can flag buggy callers and throw, similar to how we maintain a `version` counter purely to flag buggy callers.    @vancem suggested a check could be done only on insert/remove (ie write), so there would be no perf impact on readers."
28122	area-System.Net	CI fail in System.Net.Http.Functional.Tests.HttpClientHandler_Authentication_Test.PreAuthenticate_FirstRequestNoHeader_SecondRequestVariousStatusCodes_ThirdRequestPreauthenticates	## Failure details    ```  Unhandled Exception of Type System.Net.Http.HttpRequestException  Message :  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The server returned an invalid or unrecognized response     at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 479     at System.Net.Http.Functional.Tests.HttpClientHandler_Authentication_Test.<>c__DisplayClass12_0.<<PreAuthenticate_FirstRequestNoHeader_SecondRequestVariousStatusCodes_ThirdRequestPreauthenticates>b__0>d.MoveNext() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.Authentication.cs:line 307  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext() in D:\j\workspace\windows-TGrou---74aa877a\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 84  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in D:\j\workspace\windows-TGrou---74aa877a\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 67     at System.Net.Http.Functional.Tests.HttpClientHandler_Authentication_Test.PreAuthenticate_FirstRequestNoHeader_SecondRequestVariousStatusCodes_ThirdRequestPreauthenticates(HttpStatusCode statusCode) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.Authentication.cs:line 297  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Environment.get_StackTrace() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Runtime.Extensions\src\System\Environment.cs:line 146     at System.Runtime.ExceptionServices.ExceptionStackTrace.AddCurrentStack(Exception exception) in D:\j\workspace\windows-TGrou---74aa877a\src\Common\src\System\Runtime\ExceptionServices\ExceptionStackTrace.cs:line 23     at System.Net.Http.WinHttpException.CreateExceptionUsingError(Int32 error) in D:\j\workspace\windows-TGrou---74aa877a\src\Common\src\System\Net\Http\WinHttpException.cs:line 56     at System.Net.Http.WinHttpRequestCallback.OnRequestError(WinHttpRequestState state, WINHTTP_ASYNC_RESULT asyncResult) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestCallback.cs:line 324     at System.Net.Http.WinHttpRequestCallback.RequestCallback(IntPtr handle, WinHttpRequestState state, UInt32 internetStatus, IntPtr statusInformation, UInt32 statusInformationLength) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestCallback.cs:line 104     at System.Net.Http.WinHttpRequestCallback.WinHttpCallback(IntPtr handle, IntPtr context, UInt32 internetStatus, IntPtr statusInformation, UInt32 statusInformationLength) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestCallback.cs:line 47  --- End of stack trace from AddCurrentStack ---     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in D:\j\workspace\windows-TGrou---74aa877a\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62     at System.Net.Http.WinHttpHandler.StartRequest(WinHttpRequestState state) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 856  ```    ## History of failures    Date | Build | Details  -- | -- | --  2018/3/15 | de2b82fe34b19d1faa8eb45f0a180f80d932bd3a | [link](https://mc.dot.net/#/user/tarekgh/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/de2b82fe34b19d1faa8eb45f0a180f80d932bd3a/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_Authentication_Test~2FPreAuthenticate_FirstRequestNoHeader_SecondRequestVariousStatusCodes_ThirdRequestPreauthenticates(statusCode:%20ResetContent))  2018/3/17 | b0e34ea8071b37ab68b244c977e0882ed291a821 | [link](https://mc.dot.net/#/user/matekm/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/b0e34ea8071b37ab68b244c977e0882ed291a821/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_Authentication_Test~2FPreAuthenticate_FirstRequestNoHeader_SecondRequestVariousStatusCodes_ThirdRequestPreauthenticates(statusCode:%20NoContent))  
28121	area-Meta	Change csharp_indent_labels from flush_left to one_less_than_current	Most of the places where we use goto and labels (that I have come across) use one_less_than_current formatting pattern.    I will make the same change in coreclr as well - https://github.com/dotnet/coreclr/pull/16983    cc @jkotas, @danmosemsft, @cod7alex, @karelz, @tannergooding 
28119	area-System.Net	HttpClient can sometime take long time to get response	"This was originally reported by @avanderhoorn. According to their telemetry  some simple requests are taking more than 30s to complete:    > We have an issue where around 2.75% of our Http Client requests to the server are taking longer than 5s and around 1% take longer than 20s.  >    > Normally this wouldn’t be that hard to track down, but unfortunately in all cases the server is saying that it responded in under 1.5s, 2s at the absolute most (note this finding is consistent between app level and nginx telemetry), yet the client is reporting very different figures.  >    > Looking at the data, this issue seems to happen statically more on a Mac than it does on windows (data since Thurs):  > 5s>  > Win        74 machines, 142 hits  > Mac       156 machines, 639 hits  > 20s >  > Win        16 machines, 36 hits  > Mac       110 machines, 199 hits  > All  > Win        1102 machines, 11683 hits  > Mac       1130 machines, 16991 hits    After some investigation it seems like this is caused by using stalled connection from connection pool.   The basic repro is to make HTTP request, wait 5+ minutes and do do another request.  When second request goes out write to socket buffer succeeds and client waits Timeout for response. TCP stack keeps retransmitting data and it will eventually fail ~ 30s on OSX.       ``` c#  using System;  using System.Threading;  using System.Threading.Tasks;  using System.Net.Http;  using System.Diagnostics;    namespace osx  {      class Program      {            static public async Task Run()          {              var httpClient = new HttpClient()              {                  BaseAddress = new Uri(""https://insiders.liveshare.vsengsaas.visualstudio.com/"")              };                var runCount = 1;              var timeoutIncrement = 30000;              var timeout = 390000; //6.5min                while (true)              {                  Console.WriteLine($""Run: {runCount++} ({timeout})"");                    var timer = Stopwatch.StartNew();                  try                  {                      var request = new HttpRequestMessage(HttpMethod.Get, $""/api/v0.2/workspace/a{runCount}"");                      var response = await httpClient.SendAsync(request);                      Console.WriteLine($""\tStatus: {(int)response.StatusCode} - {response.RequestMessage.RequestUri.AbsoluteUri}"");                      response = null;                  }                  catch (Exception e)                  {                      timer.Stop();                      Console.WriteLine($""\tError: {timer.ElapsedMilliseconds} - {e.ToString()}"");                      Console.ReadLine();                  }                    timer.Stop();                  Console.WriteLine($""\tCompleted: {timer.ElapsedMilliseconds}"");                    Thread.Sleep(timeout);                  timeout += timeoutIncrement;              }          }              static void Main(string[] args)          {              Console.WriteLine(""Hello World!"");               Run().GetAwaiter().GetResult();               Console.WriteLine(""All DONE"");          }      }  }  ```  The server uses Azure load-ballancer and it will drop idle connections after while without sending FIN, RST or ICMP. This is similar to behavior of some firewalls.    Using code above it is trivial to reproduce on OSX with 2.0 core. 2.1 with curl handler has same issue.  On Ubuntu 16 the code above does not repro.  Client starts sending keep-alive probes after 75s and connection fails before next attempt happen. (at least with current repro and firewall setting)   Note that there may be differences between versions as there is nothing explicit HttpClient does to make it happen.    On Windows 10, we seems to drop the connection after being idle for 60s and the delay does not repro. This can be perhaps impacted by version or OS setting. Telemetry show predominant failures on Windows 7.      I also tested this with 2.1 and HttpSocketHandler. It does not repro as we retire connection from pool after 2 minutes. I have not seen any attempts for keep-alive and the problem could re-surface if default timeout is increased on pool or if there is more aggressive firewall cleanup.   This would probably be good thing to consider.     As workaround one can use ""Connection: close"" header or stop reusing connection pooling.                  "
28118	area-System.Memory	Improve test coverage of Span.SequenceCompareTo for T != byte	We need to add more tests for MemoryExtensions SequenceCompareTo for T = int, long, string, etc.    For context - https://github.com/dotnet/corefx/pull/28080#discussion_r174811155
28116	area-System.Net	System.Net.Http.Functional.Tests are consistently failing in OSX CI	Most of the runs are failing with -3 running System.Net.Http.Functional.Tests:    https://ci3.dot.net/job/dotnet_corefx/job/master/job/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/    @davidsh, @wfurt
28115	area-System.Collections	Adding a null value to ConcurrentDictionary using System.Collections.IDictionary interface causes exception	Fixes #26447    There are quite a lot of changes in `ConcurrentDictionary.cs`, but they are only trailing whitespaces (I have an extension which removes them automatically). The real change is on the line 1580.
28114	area-Meta	Announcement: Driving towards zero 2.1 bugs by March 31 (ZBB)	"As we are getting closer to .NET Core 2.1 [ship dates](https://github.com/dotnet/core/blob/master/roadmap.md#upcoming-ship-dates), we would like to **drive [2.1.0 bugs](https://github.com/dotnet/corefx/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aopen%20milestone%3A2.1.0) close to 0 by March 31** = ZBB (zero bug bounce) date.  Note: We will keep fixing 2.1 issues after that, until the final release (exact dates are not announced yet), but hopefully not in large masses.    We would like to encourage and ask our contributors to help us drive towards that goal. **Be part of .NET Core 2.1 release!**    How can you, the CoreFX contributors, help?  1. If you're picking up issues to work on, **prefer issues marked as [2.1.0 bugs](https://github.com/dotnet/corefx/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aopen%20milestone%3A2.1.0)** (some are even [up-for-grabs](https://github.com/dotnet/corefx/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aopen%20milestone%3A2.1.0%20label%3Aup-for-grabs)).  2. If you spot something in [Future](https://github.com/dotnet/corefx/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aopen%20milestone%3AFuture) milestone that should be part of 2.1, please say so and explain why (loop in @karelz). Conversely if there's something in 2.1 that is not as significant as it seems.      * We strive to deliver high-quality product, so **impactful bugs, compatibility, reliability and performance issues** are top priority. We want to be highly compatible with .NET Core 2.0.      * Adding additional new APIs, fixing pre-existing bugs or fixing corner-case issues with lower impact and with existing workaround is lower priority, not tracked as 2.1. We will delay such contributions until master branch reopens for post-2.1 work (early April).  3. Issues with [no milestone](https://github.com/dotnet/corefx/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aopen%20no%3Amilestone) - we expect to set their milestone by end of week (part of ongoing ""triage""), so if you see something must-have for 2.1 there, please say so and explain why (loop in @karelz).  4. Watch for upcoming official preview announcements (on [.NET blog](https://blogs.msdn.microsoft.com/dotnet/) or on [dotnet/Announcements repo](https://github.com/dotnet/announcements)) to help validate and dogfood the end-to-end .NET Core 2.1 experience before final release.      * You can start with [.NET Core 2.1 Preview 1](https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/) released on Feb 27.      * You can also dogfood our daily builds - see [dogfooding steps](https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/dogfooding.md)    Not surprisingly, to deliver overall end-to-end .NET Core 2.1 experience, similar ZBB efforts happen in our sister repos like [CoreCLR](https://github.com/dotnet/coreclr), [core-setup](https://github.com/dotnet/core-setup), etc. - we will welcome help in those as well, if you're interested.    Twitter announcement: https://twitter.com/ziki_cz/status/974383981436088320"
28113	area-Serialization	Area-Serialization Sprint 133	The issue is for tracking issues to be done in sprint 133 (due by 4/6/2018)
28111	area-Infrastructure	 [1.1] Add packaging for Fedora27, OpenSuse423, Ubuntu1804	Adds packaging for servicing builds for Fedora27, OpenSuse 423, and Ubuntu1804. Requires https://github.com/dotnet/corefx/pull/28079    cc: @weshaggard @ericstj 
28108	area-System.Net	Fix WebException to handle SocketsHttpHandler generated errors	Now that we are using the new handler within HttpClient, we have to revise the code  that maps various exceptions to enum values of the WebExceptionStatus. We have separate  versions of this mapping for Windows vs. Linux. But the new handler runs on both. So,  added a common helper method.    There will probably be additional mappings we need to do here. But for now, this  PR fixes the issue.    Fixes #27906
28107	area-System.Net	Issue with HttpClient with Client Certificate on Ubuntu 16.04	"Ubuntu 16.04  .net sdk 2.1.4    We have an issue making a Https Request with httpClient in Ubuntu 16.04  Sample code  ```  using (var client = new HttpClient())  {      var contents = await client.GetStringAsync(""https://mplampla.org/get"");      Console.WriteLine(contents);  }  ```  We get this error  ```  Unhandled Exception: System.AggregateException: One or more errors occurred. (An error occurred while sending the request.) ---> System.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.Net.Http.CurlException: Problem with the SSL CA cert (path? access rights?)     at System.Net.Http.CurlHandler.ThrowIfCURLEError(CURLcode error)     at System.Net.Http.CurlHandler.MultiAgent.FinishRequest(StrongToWeakReference`1 easyWrapper, CURLcode messageResult)     --- End of inner exception stack trace ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()     at System.Net.Http.HttpClient.<FinishSendAsyncUnbuffered>d__59.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()     at System.Net.Http.HttpClient.<GetStringAsyncCore>d__27.MoveNext()     --- End of inner exception stack trace ---     at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)     at tests.Program.Main(String[] args) in /home/user/tests/Program.cs:line 14    ```    In our windows pc works perfectly. This website uses Let'sEncrypt for ssl.  Do we have any workaround?  We searched the backlog and there are a lot similar issues but no workaround was found.     thank you"
28106	area-System.Net	Enable SendReceive_VaryingLengthBuffers_Success test	Have run the test 200 times locally on Ubuntu VM, no failure. Will enable the test.    Related: #23765
28105	area-System.Net	WinHttpHandler: Check available credentials when choosing authentication scheme	When choosing what authentication scheme to use, WinHttpHandler picks the most secure scheme supported by the server. When the client does not support this scheme it closes the connection. We need to instead pick the most secure scheme offered by the server and supported by the client.    The incorrect behavior occurs under the following conditions:   - There are at least two authentication schemes enabled on the server.   - The user only provides credentials that have an authentication scheme less secure than the most secure option offered by the server.    In the conditions described in the original report, the user provides NTLM credentials, but the server supports both NTLM and Negotiate (which is considered more secure). WinHttpHandler erroneously chooses to attempt authentication with Negotiate. When we later detect that there are no credentials in the cache that support Negotiate, we close the connection.    The fix is a simple change to `WinHttpAuthHelper`, and an additional test. There is an open issue tracking auth problems with Windows Nano, so depending on the results in CI I may disable the test there.    Fixes: #27672
28104	area-System.Runtime	Changes string constructor	```csharp  new String ((sbyte*) null, 0, 0, Encoding.Default)  ```    System.ArgumentOutOfRangeException: Pointer startIndex and length do not refer to a valid string.  Parameter name: value    to throw the same exception as with    ```csharp  new String ((sbyte*) null, 0, 0, null)  ```    Unhandled Exception: System.ArgumentNullException: Value cannot be null.  Parameter name: value
28101	area-Serialization	Update warning messages	Fix #27488  @zhenlan @huanwu @mconnew 
28100	area-System.Reflection	Using System.Reflection.TypeExtensions.GetProperties in .NET Core 2.0	"I am using a Class Library project, whose target frameworks are `net451` and `netstandard1.6`, which dynamically compiles a class in a way similar to the example here (a ""standard"" way to do the compilation):    https://github.com/dotnet/roslyn/issues/16211#issuecomment-372998985    but inside a method in `MyClass`, I want to retrieve all public properties like this (the actual code is the string of this, which is passed to `CSharpSyntaxTree.ParseText`:  ```csharp  using System;  public class MyClass  {      public static void Print()      {  #if NET451              var props = this.GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);  #else              var props = System.Reflection.TypeExtensions.GetProperties(this.GetType(), System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);  #endif               //additional code      }     }  ```  Now, the Class Library project is referenced by an ASP.NET Core web app (assume any third party app that I have no control over), which targets `netcore1.1` and as [`System.Reflection.TypeExtensions.GetProperties` is available](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.typeextensions.getproperties?view=netcore-1.1#System_Reflection_TypeExtensions_GetProperties_System_Type_System_Reflection_BindingFlags_), it is working as expected.    However, targeting `netcore2.0` throws an error although it looks like the [method should still be available](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.typeextensions.getproperties?view=netcore-2.0#System_Reflection_TypeExtensions_GetProperties_System_Type_System_Reflection_BindingFlags_). The alternative (used for `net451` above):  ```csharp  var props = this.GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);  ```  is actually working for `netcore2.0`, but not for `netcore1.0` or `netcore1.1`. Also note that this happens only when compiling the class dynamically - using the `MyClass`s `Print` method definition works OK in both `netcore1.0` and `netcore2.0` without the dynamic compilation.    Can you provide more information why this is happening and if it is required for the `netcore2.0` project to ""provide"" the `System.Reflection.TypeExtensions` package?"
28099	area-System.Diagnostics	Flaky tests BasicEventSourceTests.TestsWriteEvent/Test_WriteEvent_SelfDescribing_ETW and Test_WriteEvent_Manifest_ETW	Opened on behalf of @danmosemsft  The test `BasicEventSourceTests.TestsWriteEvent/Test_WriteEvent_SelfDescribing_ETW` has failed.  Assert.Equal() Failure\r     Expected: \r     Actual:   x          Stack Trace:             at BasicEventSourceTests.TestsWriteEvent.<>c__DisplayClass10_1.<Test_WriteEvent>b__31(Event evt) in E:\A\_work\63\s\corefx\src\System.Diagnostics.Tracing\tests\BasicEventSourceTest\TestsWriteEvent.cs:line 351        at BasicEventSourceTests.EventTestHarness.<>c__DisplayClass2_0.<RunTests>b__0(Event data) in E:\A\_work\63\s\corefx\src\System.Diagnostics.Tracing\tests\BasicEventSourceTest\Harness\EventTestHarness.cs:line 82        at BasicEventSourceTests.EtwListener.OnEventHelper(TraceEvent data) in E:\A\_work\63\s\corefx\src\System.Diagnostics.Tracing\tests\BasicEventSourceTest\Harness\Listeners.cs:line 258        at Microsoft.Diagnostics.Tracing.Parsers.DynamicTraceEventData.Dispatch()        at Microsoft.Diagnostics.Tracing.TraceEventDispatcher.DoDispatch(TraceEvent anEvent)        at Microsoft.Diagnostics.Tracing.TraceEventDispatcher.Dispatch(TraceEvent anEvent)        at Microsoft.Diagnostics.Tracing.ETWTraceEventSource.RawDispatch(EVENT_RECORD* rawData)        at Microsoft.Diagnostics.Tracing.TraceEventNativeMethods.ProcessTrace(UInt64[] handleArray, UInt32 handleCount, IntPtr StartTime, IntPtr EndTime)        at Microsoft.Diagnostics.Tracing.ETWTraceEventSource.ProcessOneFile()        at Microsoft.Diagnostics.Tracing.ETWTraceEventSource.Process()        at BasicEventSourceTests.EtwListener.Dispose() in E:\A\_work\63\s\corefx\src\System.Diagnostics.Tracing\tests\BasicEventSourceTest\Harness\Listeners.cs:line 238        at BasicEventSourceTests.EventTestHarness.RunTests(List`1 tests, Listener listener, EventSource source, FilteringOptions options) in E:\A\_work\63\s\corefx\src\System.Diagnostics.Tracing\tests\BasicEventSourceTest\Harness\EventTestHarness.cs:line 170        at BasicEventSourceTests.TestsWriteEvent.Test_WriteEvent(Listener listener, Boolean useSelfDescribingEvents) in E:\A\_work\63\s\corefx\src\System.Diagnostics.Tracing\tests\BasicEventSourceTest\TestsWriteEvent.cs:line 430        at BasicEventSourceTests.TestsWriteEvent.Test_WriteEvent_SelfDescribing_ETW() in E:\A\_work\63\s\corefx\src\System.Diagnostics.Tracing\tests\BasicEventSourceTest\TestsWriteEvent.cs:line 79 Build : Master - 20180314.07 (Core Tests) Failing configurations: - Windows.10.Amd64.Core-x86   - Debug - Windows.10.Amd64-x86   - Debug 
28098	area-System.Net	Avoid recvmsg system call when 0-byte receive completes async	This eliminates a system call when user does a zero-byte receive.  Zero-bytes receives are used on servers to avoid allocating memory to idle connections.  The zero-byte receive returns when the socket becomes readable.    When the socket becomes readable, the implementation performs a receive. This is needed to get the result for a non zero-byte receive. For the zero-byte receive, we can eliminate this system call.
28097	area-System.Net	Websockets - receiving messages in chunks does not detect message size or properly set EndOfMessage flag	see https://stackoverflow.com/questions/49299333/websockets-in-net-core-2-0-receiving-messages-in-chunks    This works correctly in .NET 4.6.1 but not in .NET Core.
28096	area-System.IO	Enumeration.ExampleTests.TestGetFilesWithExtensions failed in CI	"https://mc.dot.net/#/user/jkotas/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/a327a1bfaf988ecb8a45dc6b61462ada4f1af52d/workItem/System.IO.FileSystem.Tests/analysis/xunit/System.IO.Tests.Enumeration.ExampleTests~2FTestGetFilesWithExtensions  ```  OSX.1012.Amd64.Open-Debug-x64  Unhandled Exception of Type Xunit.Sdk.EqualException  Message :  Assert.Equal() Failure  Expected: SelectIPartitionIterator<String, String> [\""file.one\"", \""file.three\""]  Actual:   SelectIPartitionIterator<String, String> [\""file.one\"", \""file.three\""]  Stack Trace :     at System.IO.Tests.FSAssert.EqualWhenOrdered[T](IEnumerable`1 expected, IEnumerable`1 actual) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.IO.FileSystem/tests/FSAssert.cs:line 70     at System.IO.Tests.Enumeration.ExampleTests.TestGetFilesWithExtensions() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.IO.FileSystem/tests/Enumeration/ExampleTests.netcoreapp.cs:line 70  ```  cc: @JeremyKuhne "
28095	area-System.Memory	 Expanded the CommonReadOnlySequenceTests 	I expanded the ReadOnlySequence Common Tests and some of them fails.  I think this is code issues.
28094	area-System.IO	Fixing NonBreakingSpace test on OSX	Fixes https://github.com/dotnet/corefx/issues/28093
28093	area-System.IO	System.IO.Tests.EnumerableTests/EnumerateDirectories_NonBreakingSpace failing on OSX	"```  Assert.Equal() Failure  Expected: String[] [\""/tmp/EnumerableTests_zyuc5nbu.hrc/EnumerateDirecto\""..., \""/tmp/EnumerableTests_zyuc5nbu.hrc/EnumerateDirecto\""...]  Actual:   FileSystemEnumerable<String> [\""/tmp/EnumerableTests_zyuc5nbu.hrc/EnumerateDirecto\""..., \""/tmp/EnumerableTests_zyuc5nbu.hrc/EnumerateDirecto\""...]  ```  https://mc.dot.net/#/user/Anipik/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/26b967e2aab520a0da79c316024360f635dc937d/workItem/System.IO.FileSystem.Tests/analysis/xunit/System.IO.Tests.EnumerableTests~2FEnumerateDirectories_NonBreakingSpace    cc @JeremyKuhne @danmosemsft "
28089	area-System.IO	Windows interop fixes for System.Runtime.Extensions	- Allow for long paths in GetCurrentDirectory  - Use ValueStringBuilder instead of StringBuilder  - Handle buffer growth    cc: @danmosemsft, @Anipik, @pjanotti, @jkotas, @joperezr, @AlexGhiondea
28088	area-System.Net	improve handling of proxy environmental variables	fixes #27871    This change has three improvements:  - The special characters in passwords mentioned  in linked issue  - handling of [xx::xx] IPv6 format   - domain\user format    I added new test with parametrized execution. 
28087	area-System.Threading	Test failure: System.Threading.Threads.Tests.ThreadTests/ApartmentStateTest_ChangeBeforeThreadStarted_Windows(getApartmentState: Func`2 { Method = System.Threading.ApartmentState <ApartmentStateTest_MemberData>)	Opened on behalf of @Sunny-pu  The test `System.Threading.Threads.Tests.ThreadTests/ApartmentStateTest_ChangeBeforeThreadStarted_Windows(getApartmentState: Func`2 { Method = System.Threading.ApartmentState <ApartmentStateTest_MemberData>)` has failed.  Assert.Equal() Failure\r     Expected: MTA\r     Actual:   STA          Stack Trace:             at System.Threading.Threads.Tests.ThreadTests.ApartmentStateTest_ChangeBeforeThreadStarted_Windows(Func`2 getApartmentState, Func`3 setApartmentState, Int32 setType) Build : 2.0.0 - 20180314.01 (Core Tests) Failing configurations: - windows.10.amd64.iot-x64   - Release  Details: https://mc.dot.net/#/product/netcore/200/source/official~2Fcorefx~2Frelease~2F2.0.0~2F/type/test~2Ffunctional~2Fcli~2F/build/20180314.01/workItem/System.Threading.Thread.Tests/analysis/xunit/System.Threading.Threads.Tests.ThreadTests~2FApartmentStateTest_ChangeBeforeThreadStarted_Windows(getApartmentState:%20Func%602%20%7B%20Method%20=%20System.Threading.ApartmentState%20%3CApartmentStateTest_MemberData%3E)
28086	area-System.Net	Avoid allocating long[] in Uri's ParseNonCanonical	Avoid the long[] allocated while creating a Uri from an IPv4 address.    cc: @krwq, @ahsonkhan 
28085	area-System.IO	Test failure: System.IO.Tests.PathTests/GetInvalidFileNameChars_OtherCharsValid	Opened on behalf of @Sunny-pu  The test `System.IO.Tests.PathTests/GetInvalidFileNameChars_OtherCharsValid` has failed.  Assert.Equal() Failure\r                  ↓ (pos 3)\r     Expected: C:\\data\\helix\\work\\71360258-a4a4-4a3a-806f-b···\r     Actual:   C:\\Data\\helix\\work\\71360258-a4a4-4a3a-806f-b···\r                  ↑ (pos 3)          Stack Trace:             at System.IO.Tests.PathTests.GetInvalidFileNameChars_OtherCharsValid() Build : 2.0.0 - 20180314.01 (Core Tests) Failing configurations: - windows.10.amd64.iot-x64   - Release  Details: https://mc.dot.net/#/product/netcore/200/source/official~2Fcorefx~2Frelease~2F2.0.0~2F/type/test~2Ffunctional~2Fcli~2F/build/20180314.01/workItem/System.Runtime.Extensions.Tests/analysis/xunit/System.IO.Tests.PathTests~2FGetInvalidFileNameChars_OtherCharsValid
28084	area-System.Net	Avoid lots of small allocations when parsing Uri with IP address	"When using a member like Uri.AbsoluteUri on a Uri created from an IPv4 address string like ""127.0.0.1"", it ends up calling ParseCanonicalName, which boxes four bytes and then allocates an object[] to store them and periods to pass to string.Concat. We can instead just format ourselves onto a span on the stack, avoiding all four boxes and the object[].    cc: @krwq, @ahsonkhan "
28083	area-System.Globalization	Test failure: System.Globalization.Tests.CalendarHelpers/ToDateTime_Invalid(calendar: JapaneseLunisolarCalendar { AlgorithmType = LunisolarCalendar, Eras = [5, 4, 3], IsReadOnl)	Opened on behalf of @Sunny-pu  The test `System.Globalization.Tests.CalendarHelpers/ToDateTime_Invalid(calendar: JapaneseLunisolarCalendar { AlgorithmType = LunisolarCalendar, Eras = [5, 4, 3], IsReadOnl)` has failed.  Assert.Throws() Failure\r     Expected: typeof(System.ArgumentOutOfRangeException)\r     Actual:   (No exception was thrown)          Stack Trace:             at System.Globalization.Tests.CalendarHelpers.ToDateTime_Invalid(Calendar calendar) Build : 2.0.0 - 20180314.01 (Core Tests) Failing configurations: - windows.10.amd64.iot-x64   - Release  Details:https://mc.dot.net/#/product/netcore/200/source/official~2Fcorefx~2Frelease~2F2.0.0~2F/type/test~2Ffunctional~2Fcli~2F/build/20180314.01/workItem/System.Globalization.Calendars.Tests
28082	area-System.Console	Test failure: ReadAndWrite/OutputEncodingPreamble	Opened on behalf of @Sunny-pu  The test `ReadAndWrite/OutputEncodingPreamble` has failed.  System.IO.IOException : The parameter is incorrect          Stack Trace:             at System.ConsolePal.SetConsoleOutputEncoding(Encoding enc)        at System.Console.set_OutputEncoding(Encoding value)        at ReadAndWrite.OutputEncodingPreamble() Build : 2.0.0 - 20180314.01 (Core Tests) Failing configurations: - windows.10.amd64.iot-x64   - Release  Details: https://mc.dot.net/#/product/netcore/200/source/official~2Fcorefx~2Frelease~2F2.0.0~2F/type/test~2Ffunctional~2Fcli~2F/build/20180314.01/workItem/System.Console.Tests/analysis/xunit/ReadAndWrite~2FOutputEncodingPreamble
28080	area-System.Memory	Use vectorized T=byte implementations to optimize all MemoryExtensions APIs for T != byte	Related to https://github.com/dotnet/corefx/issues/27487 and partially addresses https://github.com/dotnet/corefx/issues/27379    Builds on top of https://github.com/dotnet/corefx/pull/27859 / https://github.com/dotnet/corefx/pull/28073    **TODO:** ~Add more unit tests and~ ~measure performance impact~    cc @AtsushiKan, @jkotas, @stephentoub, @KrzysztofCwalina 
28079	area-Infrastructure	[1.1] Expand the RID graph, fix clang5 build	This ports the change necessary to fix building on clang5 and updates the RID graph to be up-to-date with recent new OSs.     Unblocks running on Fedora27, OpenSuse42.3 in particular.
28075	area-System.Net	Ensure SocketsHttpHandler throws TaskCanceledExceptions instead of OperationCanceledExceptions	To increase compatibility, as other handlers often throw the derived type instead of the base type, as a side-effect of how they were implemented.    Depends on https://github.com/dotnet/coreclr/pull/16939  cc: @geoffkizer
28073	area-System.Memory	Port SequentialEqual() optimizations to ReadOnlySpan overloads	
28069	area-System.Xml	Investigate if there is a duplicate code in the common folder for XmlSchema	As @danmosemsft has mentioned in https://github.com/dotnet/corefx/issues/28055 there are two copies of XsdDateTime which might be the same:    ```  C:\git\corefx\src\Common\src\System\Xml\Schema\XsdDateTime.cs  C:\git\corefx\src\System.Private.Xml\src\System\Xml\Schema\XsdDateTime.cs  ```    If that is the case there might be more copies of other files from XmlSchema as well. Investigate and remove any duplicate code.
28068	area-System.Xml	Fix XAttribute Date Formatting	.net core is producing slightly different date format than what the full framework does.  This change is fixing that for the compatibility sake.    Fixes #28055
28067	area-System.Runtime	StringBuilder Insert causes suboptimal memory allocation	See https://github.com/dotnet/corefx/issues/27625#issuecomment-369791334 for full discussion.     https://github.com/dotnet/coreclr/pull/16926 fixes the major problem which is unbounded growth. However in #27625 it's also observed that Insert has a potentially suboptimal chunk use strategy:    Insert does not try hard to reuse space (it won't shuffle along more than 32 characters) so it's fairly easy to end up prepending a new block.     Those prepended blocks are made only as big as needed but no less than the default of 16. So Inserts of less than 16 leave slack space that will remain unused unless there are more inserts into that chunk no more than 16 from the end of it so that its contents get shuffled along. If there's an insert at the end of that block it will create a new block rather than writing to the dead area. eg given  `|0123456789012345|` (where | is block end) inserting `0123456789` leaves us with `|0123456789......|0123456789012345|` . This leaves 6 array entries permanently dead unless there is another insert after the 10th character.    Still one could argue it is optimizing for inserting directly after the last insert rather than at the front again. However it doesn't do that either as then inserting `abc` at offset 10 gives us `|0123456789......|abc.............|0123456789012345|` rather than `|0123456789abc..|0123456789012345|` as you might expect.    Two potential changes to make here    * When insert pre-pends a new first chunk, consider writing the characters to the end of the chunk rather than the start of it since it's probably more likely that a subsequent Insert would be at index 0 rather than index n+1.   (As for insert adding interior chunks, I do not know whether the behavior is better one way or the other)    * Insert should certainly write to slack space before making a new block.    StringBuilder is intentionally heavily optimized for Append not Insert and it's already complex. Any changes to improve Insert must not impair Append nor make the implementation even more complex.    
28066	area-System.Net	[wcf.stress]: SocketsHttpHandler has worse perf than WinHttpHandler w/ https and HttpClientCredentialType:Windows	"[EDIT: Numbers below were obtained with debug build and do not reflect the difference between the release builds]    The settings for this issue were:  ```  Test:HelloWorld Binding:Https HttpClientCredentialType:Windows BindingSecurityMode:Transport  ```    Summary:    SocketsHttpHandler:    - StressLevel:1,  StressRunDuration:8  No IOException, no pool recycle, single work reported 500  - StressLevel:4, StressRunDuration: 8  Various IOException, no pool recycle, each work reported 100    WinHttpHandler:    - StressLevel:1, StressRunDuration:8  Few clr exceptions right at start (~20) no more after, 1 pool recycle, single work reported 1900  - StressLevel:4, StressRunDuration: 8  More clr exceptions right at start (seems proportional to the number of workers) no more after, 1 pool recycle, each work reported 600    So roughly WinHttpHandler can perform 4x more work for single worker and 6x more for 4 workers when Binding:Https HttpClientCredentialType:Windows. The IOExceptions mentioned on the second run of SocketsHttpHandler likely are related to the slowness to complete the requests, here is the callstack of such exceptions:    ```  CLR exception type: System.IO.IOException      ""Unable to read data from the transport connection: The I/O operation has been aborted because of either a thread exit or an application request.""  First chance exceptions are reported before any exception handling.  This exception may be expected and handled.  *** WARNING: Unable to verify checksum for E:\s\wcf-stress-client\publish\coreclr.dll  KERNELBASE!RaiseException+0x68:  00007ffa`17154008 488b8c24c0000000 mov     rcx,qword ptr [rsp+0C0h] ss:00000056`3dff9610=0000dbfd92f4e02d  0:059> !pe  Exception object: 0000017ec8826fb8  Exception type:   System.IO.IOException  Message:          Unable to read data from the transport connection: The I/O operation has been aborted because of either a thread exit or an application request.  InnerException:   System.Net.Sockets.SocketException, Use !PrintException 0000017ec8762d58 to see more.  StackTrace (generated):      SP               IP               Function      000000563DFFDDF0 00007FF97C0BBA1E System_Net_Sockets!System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs.ThrowException(System.Net.Sockets.SocketError)+0x3e      000000563DFFDE30 00007FF97BE026F3 System_Net_Sockets!System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs.GetResult(Int16)+0xb3      000000563DFFDE90 00007FF9D1C71308 System_Private_CoreLib!System.Threading.Tasks.ValueTask`1[[System.Int32, System.Private.CoreLib]].get_Result()+0xd8      000000563DFFDF10 00007FF9D1D08BA8 System_Private_CoreLib!System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1+ConfiguredValueTaskAwaiter[[System.Int32, System.Private.CoreLib]].GetResult()+0x28      000000563DFFDF50 00007FF97C055F59 System_Net_Security!System.Net.Security.SslStreamInternal+<<FillBufferAsync>g__InternalFillBufferAsync|38_0>d`1[[System.Net.Security.SslStreamInternal+SslReadAsync, System.Net.Security]].MoveNext()+0x169    StackTraceString: <none>  HResult: 80131620  0:059> !CLRStack  OS Thread Id: 0x49fc (59)          Child SP               IP Call Site  000000563dff9ae8 00007ffa17154008 [HelperMethodFrame: 000000563dff9ae8]   000000563dff9df0 00007ff9d1b2ea21 System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()  000000563dff9e20 00007ff9d1cec431 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)  000000563dff9ec0 00007ff9d1cec2ab System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)  000000563dff9f20 00007ff9d1cec1e7 System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(System.Threading.Tasks.Task)  000000563dff9f60 00007ff9d1c712c7 System.Threading.Tasks.ValueTask`1[[System.Int32, System.Private.CoreLib]].get_Result()  000000563dff9fe0 00007ff9d1d08ba8 System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1+ConfiguredValueTaskAwaiter[[System.Int32, System.Private.CoreLib]].GetResult()  000000563dffa020 00007ff97c0547c6 System.Net.Security.SslStreamInternal+d__34`1[[System.Net.Security.SslStreamInternal+SslReadAsync, System.Net.Security]].MoveNext()  000000563dffa3f0 00007ff9d1d6e10e System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1+c[[System.Int32, System.Private.CoreLib],[System.__Canon, System.Private.CoreLib]].b__9_0(System.Object)  000000563dffa440 00007ff9d1a80c4b System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)  000000563dffa570 00007ff9d1d4ac0f System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Int32, System.Private.CoreLib],[System.__Canon, System.Private.CoreLib]].MoveNext()  000000563dffa600 00007ff9d1cee0f7 System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean)  000000563dffa690 00007ff9d1c67840 System.Threading.Tasks.Task.RunContinuations(System.Object)  000000563dffa890 00007ff9d1c6759f System.Threading.Tasks.Task.FinishContinuations()  000000563dffa900 00007ff9d1c64a17 System.Threading.Tasks.Task.FinishStageThree()  000000563dffa940 00007ff9d1c649ad System.Threading.Tasks.Task.FinishStageTwo()  000000563dffaa10 00007ff9d1c64561 System.Threading.Tasks.Task.FinishSlow(Boolean)  000000563dffaab0 00007ff9d1c644ba System.Threading.Tasks.Task.Finish(Boolean)  000000563dffaaf0 00007ff9d1c6f69e System.Threading.Tasks.Task`1[[System.Int32, System.Private.CoreLib]].TrySetException(System.Object)  000000563dffab40 00007ff9d1d13b79 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Int32, System.Private.CoreLib]].SetException(System.Exception)  000000563dffabc0 00007ff97c056151 System.Net.Security.SslStreamInternal+g__InternalFillBufferAsync|38_0>d`1[[System.Net.Security.SslStreamInternal+SslReadAsync, System.Net.Security]].MoveNext()  000000563dffdae8 00007ff9d9ed73da [HelperMethodFrame: 000000563dffdae8]   000000563dffddf0 00007ff97c0bba1e System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs.ThrowException(System.Net.Sockets.SocketError)  000000563dffde30 00007ff97be026f3 System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs.GetResult(Int16)  000000563dffde90 00007ff9d1c71308 System.Threading.Tasks.ValueTask`1[[System.Int32, System.Private.CoreLib]].get_Result()  000000563dffdf10 00007ff9d1d08ba8 System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1+ConfiguredValueTaskAwaiter[[System.Int32, System.Private.CoreLib]].GetResult()  000000563dffdf50 00007ff97c055f59 System.Net.Security.SslStreamInternal+g__InternalFillBufferAsync|38_0>d`1[[System.Net.Security.SslStreamInternal+SslReadAsync, System.Net.Security]].MoveNext()  000000563dffe050 00007ff9d1d6e10e System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1+c[[System.Int32, System.Private.CoreLib],[System.__Canon, System.Private.CoreLib]].b__9_0(System.Object)  000000563dffe0a0 00007ff9d1a80c4b System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)  000000563dffe1d0 00007ff9d1d4ac0f System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Int32, System.Private.CoreLib],[System.__Canon, System.Private.CoreLib]].MoveNext()  000000563dffe260 00007ff9d1d45f10 System.Runtime.CompilerServices.ValueTaskAwaiter+c.b__11_1(System.Object)  000000563dffe2b0 00007ff97be02613 System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs.InvokeContinuation(System.Action`1, System.Object, Boolean)  000000563dffe3a0 00007ff97be0222e System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs+c.b__27_2(System.Object, System.Net.Sockets.SocketAsyncEventArgs)  000000563dffe450 00007ff97bde07da System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)  000000563dffe4b0 00007ff97bde0740 System.Net.Sockets.SocketAsyncEventArgs.ExecutionCallback(System.Object)  000000563dffe4f0 00007ff9d1a80c4b System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)  000000563dffe620 00007ff9d1a80a75 System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)  000000563dffe660 00007ff97c0bb7af System.Net.Sockets.SocketAsyncEventArgs.FinishOperationAsyncFailure(System.Net.Sockets.SocketError, Int32, System.Net.Sockets.SocketFlags)  000000563dffe6b0 00007ff97c0bb67d System.Net.Sockets.SocketAsyncEventArgs.HandleCompletionPortCallbackError(UInt32, UInt32, System.Threading.NativeOverlapped*)  000000563dffe730 00007ff97bddf602 System.Net.Sockets.SocketAsyncEventArgs+c.b__173_0(UInt32, UInt32, System.Threading.NativeOverlapped*)  000000563dffe790 00007ff9d1d483f4 System.Threading.ThreadPoolBoundHandleOverlapped.CompletionCallback(UInt32, UInt32, System.Threading.NativeOverlapped*)  000000563dffe810 00007ff9d1d84441 System.Threading._IOCompletionCallback.PerformIOCompletionCallback(UInt32, UInt32, System.Threading.NativeOverlapped*)  000000563dffeb68 00007ff9da584fc3 [GCFrame: 000000563dffeb68]   000000563dfff000 00007ff9da584fc3 [DebuggerU2MCatchHandlerFrame: 000000563dfff000]   0:059> !PrintException /d 0000017ec8762d58  Exception object: 0000017ec8762d58  Exception type:   System.Net.Sockets.SocketException  Message:          The I/O operation has been aborted because of either a thread exit or an application request  InnerException:   <none>  StackTrace (generated):  <none>  StackTraceString: <none>  HResult: 80004005  ```"
28065	area-System.Net	HttpClientHandler authentication test cases failing on WinHttpHandler & CurlHandler	"Contributes: #27113    Authentication test cases will fail on CurlHandler with two errors, `Assert.Equal() Failure` & `TimeoutException`.    ## For CurlHandler:    ### `Assert.Equal() Failure Expected: OK Actual:   Unauthorized` for:    `HttpClientHandler_Authentication_Succeeds()` test  ```  yield return new object[] { $""Digest realm=\""testrealm\"", nonce=\""{Convert.ToBase64String(Encoding.UTF8.GetBytes($""{DateTimeOffset.UtcNow}:XMh;z+$5|`i6Hx}}\"", qop=auth-int, algorithm=MD5""))}\"""", true };  yield return new object[] { ""Digest realm=\""api@example.org\"", qop=\""auth\"", algorithm=MD5-sess, nonce=\""5TsQWLVdgBdmrQ0XsxbDODV+57QdFR34I9HAbC/RVvkK\"", "" +                      ""opaque=\""HRPCssKJSGjCrkzDg8OhwpzCiGPChXYjwrI2QmXDnsOS\"", charset=UTF-8, userhash=true"", true };  yield return new object[] { ""dIgEsT realm=\""api@example.org\"", qop=\""auth\"", algorithm=MD5-sess, nonce=\""5TsQWLVdgBdmrQ0XsxbDODV+57QdFR34I9HAbC/RVvkK\"", "" +                      ""opaque=\""HRPCssKJSGjCrkzDg8OhwpzCiGPChXYjwrI2QmXDnsOS\"", charset=UTF-8, userhash=true"", true };  yield return new object[] { $""Basic realm=\""testrealm\"", "" +                      $""Digest realm=\""testrealm\"", nonce=\""{Convert.ToBase64String(Encoding.UTF8.GetBytes($""{DateTimeOffset.UtcNow}:XMh;z+$5|`i6Hx}}""))}\"", algorithm=MD5"", true };  ```    `HttpClientHandler_MultipleAuthenticateHeaders_WithSameAuth_Succeeds` test  ```  [InlineData(""WWW-Authenticate: Digest realm=\""hello\"", nonce=\""hello\"", algorithm=MD5\r\nWWW-Authenticate: Digest realm=\""hello\"", nonce=\""hello\"", algorithm=MD5\r\n"")]  [InlineData(""WWW-Authenticate: Digest realm=\""hello1\"", nonce=\""hello\"", algorithm=MD5\r\nWWW-Authenticate: Digest realm=\""hello\"", nonce=\""hello\"", algorithm=MD5\r\n"")]  ```    `HttpClientHandler_MultipleAuthenticateHeaders_Succeeds` test  ```  [InlineData(""WWW-Authenticate: Basic realm=\""hello\""\r\nWWW-Authenticate: Digest realm=\""hello\"", nonce=\""hello\"", algorithm=MD5\r\n"")]  [InlineData(""WWW-Authenticate: Digest realm=\""hello\"", nonce=\""hello\"", algorithm=MD5\r\nWWW-Authenticate: Basic realm=\""hello\""\r\n"")]  ```    ### System.TimeoutException : WhenAllOrAnyFailed timed out after 60000, for:    `HttpClientHandler_Authentication_Succeeds()` test    ```  yield return new object[] { ""Digest realm=\""testrealm\"" nonce=\""testnonce\"""", false };  yield return new object[] { ""Digest realm=withoutquotes, nonce=withoutquotes"", false };  yield return new object[] { ""Digest realm=\""testrealm1\"", nonce=\""testnonce1\"" Digest realm=\""testrealm2\"", nonce=\""testnonce2\"""", false };  ```    [EDIT]: Remove Windows failures that are now tracked in separate issues - rmkerr"
28064	area-System.Collections	Proposal: ImmutableArray.UnsafeFreeze<T>(T[])	Use case: efficiently creating an `ImmutableArray` with a fixed (>4) number of elements.    Presently if you need to create an `ImmutableArray<T>` with a known collection of elements, the most efficient way to do so is to create an `ImmutableArray<T>.Builder`, set its `Capacity` to allocate an array of the correct size, fill the `Builder` with repeated calls to `Add`, and then use `MoveToImmutable` to create the `ImmutableArray`. (This strategy can be marginally improved by storing a cached `Builder` in a `ThreadLocal`.)    For element counts smaller than 4, there are [overloads of `ImmutableArray.Create`](https://github.com/dotnet/corefx/blob/99d4271b02b4b0408fa0879651d964bebd3c5cf1/src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray.cs#L85) which are implemented by creating an array and then immediately turning it into an `ImmutableArray`, but for more than 4 `Create` takes a `params[]` and [copies it](https://github.com/dotnet/corefx/blob/99d4271b02b4b0408fa0879651d964bebd3c5cf1/src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray.cs#L157) into an `ImmutableArray`. There is no way to create an array directly, fill it, and freeze it into an `ImmutableArray` without copying while pinky-promising never to mutate the original array again.    I set up a microbenchmark (see below) which uses codegen to call `ImmutableArray<T>`'s private `T[]` constructor, and it's around 4-5 times faster for an array of 1000 `long`s. I found that a library of mine was spending a reasonable chunk of its time creating `ImmutableArray`s, and [implementing this hack](https://github.com/benjamin-hodgson/Eighty/commit/92a84c826b00a61158a5d17a50e88fb8c925c37a) led to a global ~10% speedup in my end-to-end benchmarks. I'm not entirely happy about depending upon private implementation details like that though.    I propose adding a officially-supported static method to freeze an array into an `ImmutableArray` without copying it. I suggest calling it `UnsafeFreeze` to emphasise the fact that this method is risky: to use it correctly you have to make sure never to mutate the array that you passed in. (This name may be confusing given that it doesn't have anything to do with C#'s `unsafe`; I'm open to alternative suggestions.)    ```csharp  public static class ImmutableArray  {      [EditorBrowsable(EditorBrowsableState.Never)]      // might wanna add [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static ImmutableArray<T> UnsafeFreeze<T>(T[] array)          => new ImmutableArray<T>(array);  }  ```    There may be a use case for a similar `UnsafeThaw` method which turns an `ImmutableArray<T>` into a `T[]` without copying, but I can't think of one right now.    NB. There is precedent in the BCL for APIs which ask you to relinquish ownership of the argument. `ArrayPool.Return` requires you not to continue using the array you returned because it is liable to get handed out to a future caller of `Rent`.    ----------    Here's the code for the microbenchmark I mentioned above (using BenchmarkDotNet):    ```csharp  public class Bench  {      static readonly ThreadLocal<ImmutableArray<long>.Builder> _cachedBuilder = new ThreadLocal<ImmutableArray<long>.Builder>(ImmutableArray.CreateBuilder<long>);      static readonly Func<long[], ImmutableArray<long>> _unsafeFreeze = GetUnsafeFreeze<long>();        [Benchmark(Baseline = true)]      public void CachedBuilder()      {          var builder = _cachedBuilder.Value;          builder.Capacity = 1000;          for (long i = 0; i < builder.Capacity; i++)          {              builder.Add(i);          }          builder.MoveToImmutable();      }      [Benchmark]      public void UnsafeFreeze()      {          var array = new long[1000];          for (long i = 0; i < array.Length; i++)          {              array[i] = i;          }          _unsafeFreeze(array);      }        static Func<T[], ImmutableArray<T>> GetUnsafeFreeze<T>()      {          var ctor = typeof(ImmutableArray<T>)              .GetConstructors(BindingFlags.NonPublic | BindingFlags.Instance)              .Single(c => c.GetParameters().Count() == 1 && c.GetParameters().Single().ParameterType.Equals(typeof(T[])));          var param = Expression.Parameter(typeof(T[]));          var body = Expression.New(ctor, param);          var func = Expression.Lambda<Func<T[], ImmutableArray<T>>>(body, param);          return func.Compile();      }  }  ```    And the results:  ```          Method |     Mean |     Error |    StdDev | Scaled | ScaledSD |  -------------- |---------:|----------:|----------:|-------:|---------:|   CachedBuilder | 8.439 us | 0.1667 us | 0.4089 us |   1.00 |     0.00 |    UnsafeFreeze | 1.944 us | 0.0399 us | 0.1169 us |   0.23 |     0.02 |  ```
28063	area-System.Reflection	A callback was made on a garbage collected delegate of type 'System.Reflection.Emit.ILGeneration.Tests!System.Reflection.Emit.Tests.ILGeneratorEmit4+StringReverseCdecl::Invoke'.	  OSX10.12  https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180314.02/workItem/System.Reflection.Emit.ILGeneration.Tests/wilogs    ```  2018-03-14 06:18:11,331: INFO: proc(54): run_and_log_output: Output: Discovering: System.Reflection.Emit.ILGeneration.Tests  2018-03-14 06:18:11,481: INFO: proc(54): run_and_log_output: Output: Discovered:  System.Reflection.Emit.ILGeneration.Tests  2018-03-14 06:18:11,545: INFO: proc(54): run_and_log_output: Output: Starting:    System.Reflection.Emit.ILGeneration.Tests  2018-03-14 06:18:11,759: INFO: proc(54): run_and_log_output: Output: FailFast:  2018-03-14 06:18:11,760: INFO: proc(54): run_and_log_output: Output: A callback was made on a garbage collected delegate of type 'System.Reflection.Emit.ILGeneration.Tests!System.Reflection.Emit.Tests.ILGeneratorEmit4+StringReverseCdecl::Invoke'.  2018-03-14 06:18:11,760: INFO: proc(54): run_and_log_output: Output:   2018-03-14 06:18:11,760: INFO: proc(54): run_and_log_output: Output:    at T.F(IntPtr, System.String)  2018-03-14 06:18:11,760: INFO: proc(54): run_and_log_output: Output:    at System.RuntimeMethodHandle.InvokeMethod(System.Object, System.Object[], System.Signature, Boolean, Boolean)  2018-03-14 06:18:11,761: INFO: proc(54): run_and_log_output: Output:    at System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)  2018-03-14 06:18:11,761: INFO: proc(54): run_and_log_output: Output:    at System.Reflection.Emit.Tests.ILGeneratorEmit4.TestEmitCalliNonBlittable()  2018-03-14 06:18:11,761: INFO: proc(54): run_and_log_output: Output:    at System.RuntimeMethodHandle.InvokeMethod(System.Object, System.Object[], System.Signature, Boolean, Boolean)  2018-03-14 06:18:11,761: INFO: proc(54): run_and_log_output: Output:    at System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)  2018-03-14 06:18:11,761: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestInvoker`1+<>c__DisplayClass46_1+<<InvokeTestMethodAsync>b__1>d[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()  2018-03-14 06:18:11,762: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+<>c__DisplayClass46_1+<<InvokeTestMethodAsync>b__1>d[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.2.0.3300, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<<InvokeTestMethodAsync>b__1>d<System.__Canon> ByRef)  2018-03-14 06:18:11,762: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestInvoker`1+<>c__DisplayClass46_1[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].<InvokeTestMethodAsync>b__1()  2018-03-14 06:18:11,762: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExecutionTimer+<AggregateAsync>d__4.MoveNext()  2018-03-14 06:18:11,763: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExecutionTimer+<AggregateAsync>d__4, xunit.execution.dotnet, Version=2.2.0.3300, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<AggregateAsync>d__4 ByRef)  2018-03-14 06:18:11,763: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExecutionTimer.AggregateAsync(System.Func`1<System.Threading.Tasks.Task>)  2018-03-14 06:18:11,763: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator+<RunAsync>d__9.MoveNext()  ```
28062	area-System.Memory	Test failure: System.MemoryTests.MemoryTests/OwnedMemoryPinLargeArray	Opened on behalf of @danmosemsft  The test `System.MemoryTests.MemoryTests/OwnedMemoryPinLargeArray` has failed.  System.OutOfMemoryException : Array dimensions exceeded supported range.          Stack Trace:             at System.MemoryTests.MemoryTests.OwnedMemoryPinLargeArray() Build : Master - 20180314.02 (Full Framework Tests) Failing configurations: - Windows.10.Amd64-x86   - Release - Windows.10.Amd64-x64   - Release 
28061	area-System.Data	SqlConnection fails to reliably keep long-running connection open	This issue affects applications such as SQL Operations Studio which have long-running connections (e.g. backing a T-SQL Editor) based on the .Net Core stack. On the .Net Full stack, the connection reliably stays open or reports as non-open in the ConnectionState, allowing the application to reopen as needed. However on the .Net Core stack the state is shown as Open but on attempting any command the command will attempt to run for ~60sec, then fail with an error message    > A transport-level error has occurred when receiving results from the server. (provider: TCP Provider, error: 35 - An internal exception was caught)    This has a high impact on reliability of tools build on top of .Net Core for SqlClient usage.    **Related issue:** https://github.com/Microsoft/sqlopsstudio/issues/870.     **Diagnosis by @saurabh500 **:  Windows impl of SqlClient sets some Keepalive values which Unix stack doesn’t   SqlClient should set the keep alive values.     **Original issue details**:  - SQL Operations Studio Version: Feb release & latest from master    Steps to Reproduce:  - Use a macOS machine, such as the one owned by @twright-msft. Not all machines will work (mine is super-reliable for instance)  - Run a query against any DB  - Walk away for 30min  - Re-run the query    **Expected**:  - Query executes 2nd time around    **Actual**:  - Executing... spins for ~1minute, then we get an error message in the batch stating     - Note that even if we could just get a quick failure in a way where we could then close & reopen the connection that'd be OK. It's the lack of reliability plus a long wait that's making this quite bad.    > A transport-level error has occurred when receiving results from the server. (provider: TCP Provider, error: 35 - An internal exception was caught)    - If you are running 2 batches, you may see another message:    > Query failed: BeginExecuteReader requires an open and available Connection. The connection's current state is open.    Note that we're actually checking if the connection isn't open but this isn't reliable when it comes to TCP sockets closing. This may well be a driver-side issue, but any fix/workaround we can apply would be good.    Here's our code to close & reopen on issues:  ```C#          private void VerifyConnectionOpen(DbConnection connection)          {              if (connection == null)              {                  // Ignore this connection                  return;              }                 if (connection.State != ConnectionState.Open)              {                  // Note: this will fail and throw to the caller if something goes wrong.                  // This seems the right thing to do but if this causes serviceability issues where stack trace                  // is unexpected, might consider catching and allowing later code to fail. But given we want to get                  // an opened connection for any action using this, it seems OK to handle in this manner                  ClearPool(connection);                  connection.Open();              }          }  ```    We can add connection.Close() in this case which _might_ fix issues where connection is in a broken state, but definitely doesn't fix the error all up.       
28060	area-System.Net	HttpClientHandler authentication test cases failing (hang) on Framework run	"Contributes: #27113    The `HttpClientHandler_Authentication_Succeeds()` test will fail on Framework run with `System.TimeoutException : WhenAllOrAnyFailed timed out after 60000`, for the below four test data:    ```  yield return new object[] { ""Digest realm=withoutquotes, nonce=withoutquotes"", false };    yield return new object[] { ""Digest realm=\""testrealm1\"", nonce=\""testnonce1\"" Digest realm=\""testrealm2\"", nonce=\""testnonce2\"""", false };  yield return new object[] { ""Basic something, Digest something"", false };  yield return new object[] { $""Digest realm=\""testrealm\"", nonce=\""testnonce\"", algorithm=MD5 "" +                  $""Basic realm=\""testrealm\"""", false };  ```"
28059	area-System.Runtime	Rethrown exception call stack tests	Added tests to verify the reported call stack for rethrown exceptions, as specified by dotnet/coreclr#15780.    1. **Exception rethrown in a method different than the method where it was originally thrown:** the stack trace contains both the location in the method where the exception was originally thrown, and the location where the method that threw the exception was called.    2. **Exception is thrown and later rethrown in the same method:** the stack trace only contains the location where the exception was originally thrown and does not include the location where the exception was rethrown.
28058	area-System.IO	DeflateStream decompression throughput is dependent on size of internal buffer	We have an internal buffer in `DeflateStream` and its size has significant impact on the throughput of the API.  Currently this buffer is defined by DefaultBufferSize which is [fixed at 8KB](https://github.com/dotnet/corefx/blob/3fca26cedf6c54aabc100e69106fc7e263db7815/src/System.IO.Compression/src/System/IO/Compression/DeflateZLib/DeflateStream.cs#L16)    This was brought to my attention by some partner code that re-implemented DeflateStream to get better performance.  The primary difference in their implementation was the size of the backing buffer.    A simple fix would be to expose our buffer size.  Here's a change that does so:  https://github.com/ericstj/corefx/commit/423b9bb0644a432ac565ec1382b571a28012ab8b    I measured our performance in relation to this using a [benchmark](https://gist.github.com/ericstj/0651461ac37b1420097f285148c59c80) (partner code removed).  Here's the result:  ```                 Method |     Mean |     Error |    StdDev |  --------------------- |---------:|----------:|----------:|       <partner-stream> | 26.52 ms | 0.5310 ms | 0.9159 ms |   DeflateStreamDefault | 42.59 ms | 0.8534 ms | 1.2239 ms |      DeflateStream32kb | 27.21 ms | 0.5415 ms | 0.5318 ms |     DeflateStream128kb | 24.76 ms | 0.4891 ms | 0.6007 ms |     DeflateStream512kb | 22.09 ms | 0.2712 ms | 0.2265 ms |    DeflateStream1024kb | 22.86 ms | 0.4036 ms | 0.3775 ms |  ```    Now this may not be the only / best solution but it does put control in the hands of the caller.  Other things to consider might be some internal heuristic, pipelines, or even exposing the backing DEFLATE alogrithm as [was done with Brotli](https://github.com/dotnet/corefx/issues/25785).   
28057	area-Infrastructure	Use Intermediate path for GenerateReferenceSource	After the new reverse APICompat checks we fail the  src build if the ref doesn't match so we don't have  a great way to regenerate the reference assembly.  By using the intermediate path we can still generate  the reference assembly without having a successful  src build.    cc @ericstj 
28056	area-System.Text	Regex.Split with RegexOptions.RightToLeft implementation/documentation behavior	"I wonder if the current Regex.Split implementation when using in combination with RegexOptions.RightToLeft is what a user would expect. See the below example:     ```csharp  > Regex.Split(""111-a1b2-111"", @""a(\d)b(\d)"")  string[4] { ""111-"", ""1"", ""2"", ""-111"" }  > Regex.Split(""111-a1b2-111"", @""a(\d)b(\d)"", RegexOptions.RightToLeft)  string[4] { ""111-"", ""2"", ""1"", ""-111"" }  ```    The only difference is that the capture groups, if some are used are evaluated from right to left, but not the matches themselves. That's because in the implementation the list of string is reversed at the end but the capture groups are added always from left to right (for loop): (https://github.com/dotnet/corefx/blob/master/src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.Split.cs#L158).    The docs state the following (https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-options#right-to-left-mode)  > The RegexOptions.RightToLeft option changes the search direction only; it does not interpret the regular expression pattern from right to left.    That could indicate that the current behavior is fine but that with this rule an iterator implementation is not possible because you would already need the last result (the first from left to right) when you just got the first result (the last from left to right). I think the only way to implement an iterator here is to change the behavior to return the results right to left when RegexOptions.RightToLeft is chosen.    cc @vancem @danmosemsft @jkotas @stephentoub @terrajobst @joshfree "
28055	area-System.Xml	XAttribute.ToString() on .NET Core produces different DateTime formats compared to .NET Framework and Mono	"On .NET Framework and Mono:    ``` cs  new DateTime(2018, 1, 1, 12, 13, 14, DateTimeKind.Utc).ToString(""o""); // 2018-01-01T12:13:14.0000000Z  new XAttribute(""CreatedTime"", new DateTime(2018, 1, 1, 12, 13, 14, DateTimeKind.Utc)).ToString(); // CreatedTime=""2018-01-01T12:13:14Z""  ```    On .NET Core:    ``` cs  new DateTime(2018, 1, 1, 12, 13, 14, DateTimeKind.Utc).ToString(""o""); // 2018-01-01T12:13:14.0000000Z  new XAttribute(""CreatedTime"", new DateTime(2018, 1, 1, 12, 13, 14, DateTimeKind.Utc)).ToString(); // CreatedTime=""2018-01-01T12:13:14.0000000Z""  ```    Note that on .NET Core, the `XAttribute` serialization uses the same format as the [ISO 8601 DateTime format specifier](https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings#Roundtrip). Whereas, on .NET Framework and Mono, the `XAttribute` serialization uses a reduced format where the "".0000000"" are not present.    For us this causes issues because it does not make our XML bidirectionally roundtrippable between client and server (client is Mono and server is .NET Core).  "
28053	area-System.Text	Consider adding a Regex.Split options overload similar to StringSplitOptions	"```csharp  namespace System.Text.RegularExpressions  {      public class Regex      {          public string[] Split(string input, int count, int startat, RegexSplitOptions options);      }        public enum RegexSplitOptions      {          None,          IgnoreEmptyEntries      }  }  ```    ## Rationale  In cases where you want to split by a specified pattern which is a capturing group itself i.e. (\d+) you will get empty entries back for the following inputs:    | Input | Output | Desired |  | ------ | -------- | ---------- |  | ABC123456DEF | ""ABC"", ""123456"", ""DEF"" | ""ABC"", ""123456"", ""DEF"" |  | 123456 | """", ""123456"", """" | ""123456"" |  | ABC123456 | ""ABC"", ""123456"", """", | ""ABC"", ""123456"" |  | 123456DEF | """", ""123456"", ""DEF"" | ""123456"", ""DEF"" |    Also see examples in https://msdn.microsoft.com/en-us/library/ze12yx1d(v=vs.110).aspx"
28052	area-System.Drawing	System.Drawing.Font equality on Linux platform	"font family is a singleton on the windows platform, but not on Linux    ```              var font1 = new System.Drawing.Font(""Arial"", 9);              var font2 = new System.Drawing.Font(""Arial"", 9);              Console.WriteLine(font1.Equals(font2)); // false on the Linux platform only  ```    may be the Equals method on the Linux platform should be different."
28051	area-System.Net	System.Net.Internals.SocketExceptionFactory+ExtendedSocketException : No such device or address	"tests failed on Ubuntu16.04 when COMPlus_GCStress=3:    ```  <test name=""System.Net.NameResolution.Tests.GetHostByNameTest.DnsObsoleteGetHostByName_EmptyString_ReturnsHostName"" type=""System.Net.NameResolution.Tests.GetHostByNameTest"" method=""DnsObsoleteGetHostByName_EmptyString_ReturnsHostName"" time=""0.2165148"" result=""Fail"">          <failure exception-type=""System.Net.Internals.SocketExceptionFactory+ExtendedSocketException"">            <message><![CDATA[System.Net.Internals.SocketExceptionFactory+ExtendedSocketException : No such device or address]]></message>            <stack-trace><![CDATA[   at System.Net.Dns.InternalGetHostByName(String hostName) in /home/gcsuser/corefx/src/System.Net.NameResolution/src/System/Net/DNS.cs:line 65     at System.Net.Dns.GetHostByName(String hostName) in /home/gcsuser/corefx/src/System.Net.NameResolution/src/System/Net/DNS.cs:line 32     at System.Net.NameResolution.Tests.GetHostByNameTest.DnsObsoleteGetHostByName_EmptyString_ReturnsHostName() in /home/gcsuser/corefx/src/System.Net.NameResolution/tests/FunctionalTests/GetHostByNameTest.cs:line 108]]></stack-trace>          </failure>        </test>        <test name=""System.Net.NameResolution.Tests.GetHostByNameTest.DnsObsoleteBeginEndGetHostByName_EmptyString_ReturnsHostName"" type=""System.Net.NameResolution.Tests.GetHostByNameTest"" method=""DnsObsoleteBeginEndGetHostByName_EmptyString_ReturnsHostName"" time=""0.1970667"" result=""Fail"">          <failure exception-type=""System.Net.Internals.SocketExceptionFactory+ExtendedSocketException"">            <message><![CDATA[System.Net.Internals.SocketExceptionFactory+ExtendedSocketException : No such device or address]]></message>            <stack-trace><![CDATA[   at System.Net.Dns.InternalGetHostByName(String hostName) in /home/gcsuser/corefx/src/System.Net.NameResolution/src/System/Net/DNS.cs:line 65     at System.Net.Dns.ResolveCallback(Object context) in /home/gcsuser/corefx/src/System.Net.NameResolution/src/System/Net/DNS.cs:line 208  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Dns.HostResolutionEndHelper(IAsyncResult asyncResult) in /home/gcsuser/corefx/src/System.Net.NameResolution/src/System/Net/DNS.cs:line 358     at System.Net.Dns.EndGetHostByName(IAsyncResult asyncResult) in /home/gcsuser/corefx/src/System.Net.NameResolution/src/System/Net/DNS.cs:line 383     at System.Net.NameResolution.Tests.GetHostByNameTest.DnsObsoleteBeginEndGetHostByName_EmptyString_ReturnsHostName() in /home/gcsuser/corefx/src/System.Net.NameResolution/tests/FunctionalTests/GetHostByNameTest.cs:line 117]]></stack-trace>          </failure>        </test>  ```"
28050	area-System.Net	Test failure: System.Net.Sockets.Tests.SendReceiveSyncForceNonBlocking / SendRecv_Stream_TCP_LargeMultiBufferSends	The test `System.Net.Sockets.Tests.SendReceiveSyncForceNonBlocking/SendRecv_Stream_TCP_LargeMultiBufferSends(listenAt: 127.0.0.1)` has failed.    ```  Assert.Equal() Failure      Expected: 2490258837      Actual:   3446844880  at System.Net.Sockets.Tests.SendReceive`1.SendRecv_Stream_TCP_LargeMultiBufferSends(IPAddress listenAt) in /root/corefx-1474281/src/System.Net.Sockets/tests/FunctionalTests/SendReceive.cs:line 282  --- End of stack trace from previous location where exception was thrown ---  ```    ## History of failures    Day | Build | OS | Details  -- | -- | -- | --  3/14 | 20180314.01 | Ubuntu14.04 | [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180314.01/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.SendReceiveSyncForceNonBlocking~2FSendRecv_Stream_TCP_LargeMultiBufferSends(listenAt:%20127.0.0.1))    (history up to 4/3)
28049	area-System.Net	"Test System.Net.Tests.HttpRequestStreamTests.Read_FullLengthSynchronous_Success failed with ""Assert.Equal() Failure\nExpected: 9\nActual: 6"""	"The test: System.Net.Tests.HttpRequestStreamTests.Read_FullLengthSynchronous_Success(transferEncodingChunked: False, text: \""Non-Empty\"") has failed.    Details: https://ci.dot.net/job/dotnet_corefx/job/master/job/centos7.1_debug/5762/testReport/System.Net.Tests/HttpRequestStreamTests/Read_FullLengthSynchronous_Success_transferEncodingChunked__False__text____Non_Empty___/    ~~~  MESSAGE:  Assert.Equal() Failure\nExpected: 9\nActual: 6  +++++++++++++++++++  STACK TRACE:  at System.Net.Tests.HttpRequestStreamTests.Read_FullLengthSynchronous_Success(Boolean transferEncodingChunked, String text) in /mnt/resource/j/workspace/dotnet_corefx/master/centos7.1_debug/src/System.Net.HttpListener/tests/HttpRequestStreamTests.cs:line 157 --- End of stack trace from previous location where exception was thrown ---  ~~~"
28048	area-System.Net	Improve HTTP proxy tests	This is essentially same as #27344 after doing rebase to current master.   It also adds test to demonstrate #27870
28047	area-System.Net	Fix SocketsHttpHandler.PreAuthenticate behavior	Previously PreAuthenticate was causing SocketsHttpHandler to always add a basic auth header on every request if a basic credential could be retrieved from the supplied credentials.  This is not how PreAuthenticate is supposed to work.  Rather, the handler is supposed to track credentials that have previously been used to successfully authenticate, and then on subsequent requests use credentials from that successfully-authenticated cache.    Closes https://github.com/dotnet/corefx/issues/27597  cc: @geoffkizer, @davidsh, @mconnew 
28046	area-System.Collections	Support struct Enumerator for ConcurrentDictionary	ConcurrentDictionary enables enumerating the dictionary while other threads are modifying it, making it very useful in a variety of scenarios.  But its GetEnumerator allocates an enumerator object.  We can't change the return type of GetEnumerator, but we can at least expose an enumerator struct to enable enumeration without allocating.    Proposal:  ```C#  namespace System.Collections.Concurrent  {      public class ConcurrentDictionary<TKey, TValue>      {          public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator(); // existing            public struct Enumerator // new          {              public Enumerator(ConcurrentDictionary<TKey, TValue> dictionary);              public bool MoveNext();              public KeyValuePair<TKey, TValue> Current { get; }          }      }  }  ```    Example usage:  ```C#  private static ConcurrentDictionary<string, int> s_dict = new ConcurrentDictionary<string, int>();  ...  var enumerator = new ConcurrentDictionary<string, int>.Enumerator(s_dict);  while (enumerator.MoveNext())  {      Use(enumerator.Current);  }  ```
28045	area-System.Net	Need a thread-safe/scalable credential cache for use in System.Net.Http	HttpClientHandler implementations supporting preauthenticate currently use a CredentialCache to store credentials, but CredentialCache is not thread-safe, and since requests might be modifying the cache, all access to it needs to be locked.  That means when preauthenticate is enabled, every request needs to take the same lock while accessing the cache to see if it contains credentials for use in that request.
28044	area-System.Memory	ReadOnlySequence constructor validation issues	`public ReadOnlySequence(ReadOnlySequenceSegment<T> startSegment, int startIndex, ReadOnlySequenceSegment<T> endSegment, int endIndex)` constructor does not validate some issues.    I suggest to add next validations:    1. `endSegment.RunningIndex < 0`  to validate that endSegment.RunningIndex not negative.    2. `startSegment != endSegment && (ulong)startSegment.RunningIndex > (ulong)endSegment.RunningIndex - startSegment.Memory.Length`  to validate that startSegment.RunningIndex not negative  and startSegment.RunningIndex + startSegment.Memory.Length <= endSegment.RunningIndex (validate correct order of startSegment and endSegment).    3. Should we check that end is reachable and all `RunningIndex` are correct?    4. Also this constructor throw `ThrowArgumentValidationException` exception without endIndex parameter.  `ThrowHelper.ThrowArgumentValidationException(startSegment, startIndex, endSegment);`  I think it should be  `ThrowHelper.ThrowArgumentValidationException(startSegment, startIndex, endSegment, endIndex);`  If so then `ThrowHelper.ThrowArgumentValidationException` message should be changed also.  
28043	area-System.Security	System.Security.Cryptography.Rsa.Tests.EncryptDecrypt_Span and System.Security.Cryptography.Rsa.Tests.EncryptDecrypt_Array [FAIL]	"tests failed on windows when COMPlus_GCStress=3:  1. System.Security.Cryptography.Rsa.Tests.EncryptDecrypt_Array.RsaDecryptOaepWrongDataLength [FAIL]  ```<test name=""System.Security.Cryptography.Rsa.Tests.EncryptDecrypt_Span.RsaDecryptOaepWrongDataLength"" type=""System.Security.Cryptography.Rsa.Tests.EncryptDecrypt_Span"" method=""RsaDecryptOaepWrongDataLength"" time=""0.3193518"" result=""Fail"">          <failure exception-type=""Xunit.Sdk.ThrowsException"">            <message><![CDATA[Assert.Throws() Failure\r\nExpected: typeof(System.Security.Cryptography.CryptographicException)\r\nActual:   (No exception was thrown)]]></message>            <stack-trace><![CDATA[   at System.Security.Cryptography.Rsa.Tests.EncryptDecrypt.RsaDecryptOaepWrongDataLength() in c:\Users\vseqa1\corefx\src\Common\tests\System\Security\Cryptography\AlgorithmImplementations\RSA\EncryptDecrypt.cs:line 456]]></stack-trace>          </failure>        </test>  ```    2. System.Security.Cryptography.Rsa.Tests.EncryptDecrypt_Span.RsaDecryptOaepWrongDataLength [FAIL]      ```  <test name=""System.Security.Cryptography.Rsa.Tests.EncryptDecrypt_Array.RsaDecryptOaepWrongDataLength"" type=""System.Security.Cryptography.Rsa.Tests.EncryptDecrypt_Array"" method=""RsaDecryptOaepWrongDataLength"" time=""0.2229951"" result=""Fail"">          <failure exception-type=""Xunit.Sdk.ThrowsException"">            <message><![CDATA[Assert.Throws() Failure\r\nExpected: typeof(System.Security.Cryptography.CryptographicException)\r\nActual:   (No exception was thrown)]]></message>            <stack-trace><![CDATA[   at System.Security.Cryptography.Rsa.Tests.EncryptDecrypt.RsaDecryptOaepWrongDataLength() in c:\Users\vseqa1\corefx\src\Common\tests\System\Security\Cryptography\AlgorithmImplementations\RSA\EncryptDecrypt.cs:line 456]]></stack-trace>          </failure>        </test>  ```    Attached the full testResults.txts:  [testResults_System.Security.Cryptography.Cng.Tests.txt](https://github.com/dotnet/corefx/files/1809438/testResults_System.Security.Cryptography.Cng.Tests.txt)  [testResults_System.Security.Cryptography.Algorithms.Tests.txt](https://github.com/dotnet/corefx/files/1809439/testResults_System.Security.Cryptography.Algorithms.Tests.txt)  "
28042	area-System.Runtime	Add SuppressMetaPackage to break circular dependency during package restore	See https://github.com/dotnet/corefxlab/pull/2150#issuecomment-372785112 for context (where the issue was manifesting as a VS crash due to stackoverflow).    I tested this locally (by building and referencing the System.Threading.Tasks.Extensions/System.IO.Pipelines packages with this fix in a netstandard1.3 class library).    cc @weshaggard, @ericstj 
28040	area-System.Memory	API Proposal: Helper to get ReadOnlySpan<char> from string with terminator	In some cases we want null terminated spans of char (interop for example). There isn't a convenient helper to get a span from a string with the terminator included.    ``` diff  namespace System  {      public static partial class MemoryExtensions      {          public static ReadOnlySpan<char> AsSpan(this string text);  +       public static ReadOnlySpan<char> AsSpanWithTerminator(this string text);       }  }  ```    This is useful when you want to take a ReadOnlySpan<char> as a parameter that you then need to pass to something (notably a native API) that expects a null terminated string. We can easily validate that we have a null and not have to copy.    ``` C#  public static void Foo(ReadOnlySpan<char> bar)  {      if (bar.Length > 0 && bar[bar.Length - 1] == '\0')      {          NativeFoo(ref MemoryMarshal.GetReference(path));      }      else      {          // make a copy, add a null, and call NativeFoo()      }  }  ```    ** Notes **    - Perhaps this should live in `MemoryMarshal` as it is a little more advanced? It isn't a terribly difficult concept though.  - Should also return default if passed null for string.    cc: @KrzysztofCwalina, @terrajobst, @ahsonkhan, @jkotas 
28038	area-System.Runtime	Adding test for StringBuilder.Clear() making sure Capacity wont grow unboundedly	Fixes #27625    Tests for PR dotnet/coreclr#16926
28037	area-System.Globalization	Add GetHashCode test for invariant mode	
28036	area-System.Net	Update the disabled test with the new bug numbers	Close: #27113
28035	area-System.Memory	Should we add extention method to write ReadOnlySequence to IBufferWriter ?	Now `System.Buffers.BuffersExtensions` have method to write ReadOnlySpan to IBufferWriter. Should we add similar method for `ReadOnlySequence`?  ```cs      public static class BuffersExtensions      {          public static void Write<T>(this IBufferWriter<T> bufferWriter, ReadOnlySpan<T> source);          // new          public static void Write<T>(this IBufferWriter<T> bufferWriter, ReadOnlySequence<T> source);      }  ```
28033	area-System.Threading	Ensuring order in case of exception in System.Threading.Tasks.Dataflow blocks	Dataflow blocks shut down in case of an exception, but a few more items may get propagated before actual completion, including items that appeared after the faulty one in the input sequence.  I may provide a few lines of code to show this, but looking at the source code it seems this is intended. I don't get the rationale of this behavior: skipping a faulty item but propagating a few subsequent ones seems at odd with the (very useful) ordering guarantee that all blocks provide by default.    In my use case, for example, I process items (file lines) with some degree of parallelism in a transform block, linked to a (sequential) action block in charge of storing a kind of 'commit point'.  In case of an error I'd like to restart from the previously saved commit point, skipping most of the input lines already processed but still ensuring 'at least once' processing.    I think that items following a faulty one should not be propagated.  
28031	area-System.Net	Add tests for ClientWebSocket connections thru a proxy	Created new tests for verifying ClientWebSocket connections end-to-end thru a proxy.    Opened new issues #28024 and #28027 which cause the new tests to fail.    Fixes #26957
28030	area-System.Collections	BlockingCollection.TryTake throws ArgumentNullException	Per MSDN https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.blockingcollection-1.trytake?view=netframework-4.7.1, BlockingCollection.TryTake should not throw ArgumentNullException, however we found this is not true, which cause unhandled exception.    The source code: https://referencesource.microsoft.com/#System/sys/system/collections/concurrent/BlockingCollection.cs,462c00bfa4630957 shows the function will call CheckDisposed() then proceed if it is not disposed, however this is not thread safe because another thread could dispose it once it passes the CheckDispose() check.      Is this a known issue?  Below is a mini-repro app:        class Test      {          public static async Task Run()          {              BlockingCollection<int> bd = new BlockingCollection<int>();              bd.Add(0);              Task[] tasks = new Task[2];                tasks[0] = Task.Run(() => TakeTask(bd));              tasks[1] = Task.Run(() => DisposeTask(bd));                await Task.WhenAll(tasks).ConfigureAwait(false);          }            private static void TakeTask(BlockingCollection<int> bd)          {                          try              {                  int unused = 0;                  bd.TryTake(out unused);              }              catch (ObjectDisposedException)              {                  //expected, swallow              }              catch (ArgumentNullException ex)              {                  // UNEXPECTED ArgumentNullException exception                  Console.WriteLine(ex);              }          }            private static void DisposeTask(BlockingCollection<int> bd)          {              bd.Dispose();          }      }      class Program      {                    static void Main(string[] args)          {              Task.WhenAll(Enumerable.Range(0, 1000).Select(i => Test.Run())).GetAwaiter().GetResult();          }  }    
28027	area-System.Net	ClientWebSocket aborts on closes when going thru a proxy	"While working on #26957, I noticed that the following test will fail. There seems to be a problem with the close frame exchange and final TCP socket close when going thru a proxy.    Repro test (not yet in repo):    ```c#  [OuterLoop] // TODO: Issue #11345  [ConditionalTheory(nameof(WebSocketsSupported)), MemberData(nameof(EchoServers))]  public async Task Proxy_ConnectThruProxy_Success(Uri server)  {      IWebProxy proxy = new WebProxy(new Uri(""http://localhost:8080/""));      using (ClientWebSocket cws = await WebSocketHelper.GetConnectedWebSocket(          server,          TimeOutMilliseconds,          _output,          default(TimeSpan),          proxy))      {          var cts = new CancellationTokenSource(TimeOutMilliseconds);          Assert.Equal(WebSocketState.Open, cws.State);            var closeStatus = WebSocketCloseStatus.NormalClosure;          string closeDescription = ""Normal Closure"";            await cws.CloseAsync(closeStatus, closeDescription, cts.Token);            // Verify a clean close frame handshake.          Assert.Equal(WebSocketState.Closed, cws.State); // *** FAILS HERE ***          Assert.Equal(closeStatus, cws.CloseStatus);          Assert.Equal(closeDescription, cws.CloseStatusDescription);      }  }  ```    Fails with error:    ```      System.Net.WebSockets.Client.Tests.ClientWebSocketOptionsTests.Proxy_SecureConnectThruProxy_Success(server: ws://corefx-net.cloudapp.net/WebSocket/EchoWeb    Socket.ashx) [FAIL]          Assert.Equal() Failure          Expected: Closed          Actual:   Aborted          Stack Trace:             s:\GitHub\corefx\src\System.Net.WebSockets.Client\tests\ClientWebSocketOptionsTests.cs(90,0): at System.Net.WebSockets.Client.Tests.ClientWebSocketO    ptionsTests.Proxy_SecureConnectThruProxy_Success(Uri server)             --- End of stack trace from previous location where exception was thrown ---       System.Net.WebSockets.Client.Tests.ClientWebSocketOptionsTests.Proxy_SecureConnectThruProxy_Success(server: wss://corefx-net.cloudapp.net/WebSocket/EchoWe    bSocket.ashx) [FAIL]          Assert.Equal() Failure          Expected: Closed          Actual:   Aborted          Stack Trace:             s:\GitHub\corefx\src\System.Net.WebSockets.Client\tests\ClientWebSocketOptionsTests.cs(90,0): at System.Net.WebSockets.Client.Tests.ClientWebSocketO    ptionsTests.Proxy_SecureConnectThruProxy_Success(Uri server)             --- End of stack trace from previous location where exception was thrown ---  ```"
28025	area-System.Threading	Blazing-Fast replacement for the System.Threading.Task.Dataflow (as an extension to System.Threading.Channels)	"@dmitriyse commented on [Mon Mar 12 2018](https://github.com/dotnet/corefxlab/issues/2154)    The problem.  ---  When you developing DotNet application that should handle more than 10k+ items/sec on a single ServerNode, You are facing with DotNet framework botlenecks and app architecture bottlenecks.    System.Threading.Tasks.Dataflow solves the architecture problems. It's allows to decouple operations from a async/awaits processing chains and balance processing with help of queues between operations blocks.    For example if you have 10 processing blocks and wants to have 10k+ items/sec final performance, than the communication speed between each opration block should be greater that 100k+ items/sec and   1M+ items/sec to get framework overhead less than 10%.    Unfortunately current CoreFX API was not designed for 1M+ Operation/sec performance and full reimplementation of subsystems is required.    When we summarize all overheads:  1) System.Threading.Tasks.Dataflow overheads  2) TPL overheads  3) Synchrnization overheads (lock or Interlocked are cheap but not cost-free and in fully async cases it's called too many times). Even lock-free collections which are based on ""LOCK CMPXCHG"" assmbly instruction eats big amount CPU time (especially in a NUMA environments).   4) Array allocations/ memory copying  5) Async/Await methods state machines overheads  6) etc.    Final overhead in the best case allows to handle 10k+ items, but with 100% of framework overhead with no room to application logic.    This proposal perfectly fits into the roadmap https://github.com/dotnet/corefxlab/blob/master/docs/roadmap.md  When the ""PROCESSING"" block is not empty, DotNet moves down from 10th place to ~50th.    The solution approaches.  ----  1) Use batch mode communication between Processing Blocks  2) Avoid memory copying and allocation where it's possible (zero-copy and buffer pooling approaches)  3) Design API with keeping optimization in mind in every method signature  4) Do something with TPL (in CoreCLR 2.1 will already have a new IValueTaskSource approach that reduces TPL overhead)  5) Use Event-loops with TPL API adoption and faster Non-TPL API, (this is separate issue dotnet/corefxlab#2168). Workflows sharded across multiple event-loops can dramatically reduce synchronization performance leaks.    The new API proposal.  ---  CoreFX now has the new API System.Threading.Channels which contains the abstractions and base implementation for async friendly queues as a replacement for synchronous thread-safe BlockingCollection and ConcurrentQueue.  Also System.Threading.Channels API is a partial replacement for the System.Threading.Tasks.Dataflow async friendly queues (which is implicitly implemented inside BufferBlock and other blocks).    We can extend System.Threading.Channels API to get more feature complete alternative to the System.Threading.Tasks.Dataflow:    1) Replace Task with ValueTask in the ChannelReader/ChannelWriter  2) Make contracts IChannelReader/IChannelWriter as a first-class abstractions (instead of abstract classes ChannelReader/ChannelWriter)   3) Add a rich set of batch mode methods to IChannelReader/IChannelWriter with zero-copy, with copy and with buffer ownership and passthrough of buffers from a writer to a reader as is.  4) Instead of Channel<TReader, TWriter> introduce interfaces IDataFlowSource<T> and IDataFlowTarget<T>   5) Implement common types of Buffers with rich options set (for example read aggregation amount/timeout)  6) Implement some shaper/load balancer solutions that helps to balance the load among executors.  7) Implement new contracts in some other API (probably Pipes) and adaptors to old well-known API    IDataFlowConsumer/IDataFlowProducer :  ``` CSharp      /// <summary>      /// The data flow consumer.      /// </summary>      /// <typeparam name=""T"">Specifies the type of data that may be written to the consumer.</typeparam>      public interface IDataFlowConsumer<T>      {          /// <summary>          /// Opens the new writer.          /// </summary>          /// <remarks>          /// Producer can use some load balancing logic between known open writers. You can close a writer through the          /// <see cref=""IDisposable""/> interface.          /// </remarks>          /// <returns>The new writer.</returns>          IChannelWriter<T> OpenWriter();      }        /// <summary>      /// The data flow producer.      /// </summary>      /// <typeparam name=""T"">      /// Specifies the type of data that may be read from the producer.      /// </typeparam>      public interface IDataFlowProducer<T>      {          /// <summary>          /// Opens the new reader.          /// </summary>          /// <remarks>          /// Producer can use some load balancing logic between known open readers. You can close a reader through the          /// <see cref=""IDisposable""/> interface.          /// </remarks>          /// <returns>The new reader.</returns>          IChannelReader<T> OpenReader();      }    ```    IChannelWriter:  ```CSharp      /// <summary>      /// Provides a base class for writing to a channel.      /// </summary>      /// <typeparam name=""T"">Specifies the type of data that may be written to the channel.</typeparam>      [NoReorder]      public interface IChannelWriter<T>: IDisposable      {          /// <summary>          /// Mark the channel as being complete, meaning no more items will be written to it.          /// </summary>          /// <param name=""error"">Optional Exception indicating a failure that's causing the channel to complete.</param>          /// <exception cref=""InvalidOperationException"">The channel has already been marked as complete.</exception>          void Complete(Exception error = null);            /// <summary>          /// Attempts to mark the channel as being completed, meaning no more data will be written to it.          /// </summary>          /// <param name=""error"">          /// An <see cref=""Exception""/> indicating the failure causing no more data to be written, or          /// null for success.          /// </param>          /// <returns>          /// true if this operation successfully completes the channel; otherwise, false if the channel could not be marked for          /// completion,          /// for example due to having already been marked as such, or due to not supporting completion.          /// </returns>          bool TryComplete(Exception error = null);            /// <summary>          /// Attempts to write the specified item to the channel.          /// </summary>          /// <param name=""item"">The item to write.</param>          /// <returns>true if the item was written; otherwise, false if it wasn't written.</returns>          bool TryWrite(T item);            /// <summary>          /// Returns a <see cref=""ValueTask{T}""/> that will complete when space is available to write an          /// item.          /// </summary>          /// <param name=""cancellationToken"">A <see cref=""CancellationToken""/> used to cancel the wait operation.</param>          /// <returns>          /// A <see cref=""ValueTask{T}""/> that will complete with a <c>true</c> result when space is available to          /// write an item          /// or with a <c>false</c> result when no further writing will be permitted.          /// </returns>          ValueTask<bool> WaitToWriteValueTaskAsync(CancellationToken cancellationToken = default);            /// <summary>Asynchronously writes an item to the channel.</summary>          /// <param name=""item"">The value to write to the channel.</param>          /// <param name=""cancellationToken"">          /// A <see cref=""CancellationToken""/> used to cancel the write          /// operation.          /// </param>          /// <returns>A <see cref=""ValueTask{T}""/> that represents the asynchronous write operation.</returns>          ValueTask<ValueVoid> WriteValueTaskAsync(T item, CancellationToken cancellationToken = default);    #region The zero-copy batch mode interface            /// <summary>          /// Allocates a buffer slice to write to.          /// </summary>          /// <param name=""count"">The preferred amount of items to write.</param>          /// <param name=""slice"">The buffer slice with to write data to.</param>          /// <returns>          /// <see langword=""true""/> if the buffer slice was allocated; otherwise, <see langword=""false""/> if it wasn't          /// allocated.          /// </returns>          bool TryStartWrite(int count, out ChannelWriterBufferSlice<T> slice);            /// <summary>          /// Releases a part of previously allocated buffer slice.          /// </summary>          /// <param name=""newCount"">The number of items to remain allocated.</param>          /// <param name=""writeSlice"">The buffer slice.</param>          void PartialFree(int newCount, ref ChannelWriterBufferSlice<T> writeSlice);            /// <summary>          /// Finalizes write operation.          /// </summary>          /// <param name=""processedCount"">The number of processed items.</param>          /// <param name=""writeSlice"">The buffer slice.</param>          void CompleteWrite(int processedCount, ref ChannelWriterBufferSlice<T> writeSlice);    #endregion    #region Copy-based batch mode interface            /// <summary>          /// Attempts to write the specified item to the channel.          /// </summary>          /// <param name=""items"">The item to write.</param>          /// <param name=""written"">The amount of items written.</param>          /// <returns>true if the item was written; otherwise, false if it wasn't written.</returns>          bool TryWrite(ReadOnlySpan<T> items, out int written);            /// <summary>          /// Asynchronously writes an item to the channel.          /// </summary>          /// <param name=""items"">The value to write to the channel.</param>          /// <param name=""cancellationToken"">          /// A <see cref=""CancellationToken""/> used to cancel the write          /// operation.          /// </param>          /// <returns>A <see cref=""ValueTask{T}""/> that represents the asynchronous write operation and returns the number of items has been written.</returns>          ValueTask<int> WriteAsync(ReadOnlySpan<T> items, CancellationToken cancellationToken = default);    #endregion    #region Array pass-through interface            /// <summary>          /// Attempts to write the specified items to the channel and gives ownership of the provided array to the channel.          /// </summary>          /// <remarks>          /// This method allows to pass-through array to be read by the reader without changes to the array and any copying.          /// </remarks>          /// <param name=""items"">The item to write.</param>          /// <returns>true if the items was fully written; otherwise, false if it wasn't fully written.</returns>          bool TryWriteWithOwnership(T[] items);            /// <summary>          /// Asynchronously writes an item to the channel.          /// </summary>          /// <remarks>          /// This method allows to pass-through array to be read by the reader without changes to the array and any copying.          /// </remarks>          /// <param name=""items"">The value to write to the channel.</param>          /// <param name=""cancellationToken"">          /// A <see cref=""CancellationToken""/> used to cancel the write          /// operation.          /// </param>          /// <returns>A <see cref=""ValueTask{T}""/> that represents the asynchronous write operation.</returns>          ValueTask<ValueVoid> WriteAsyncWithOwnership(T[] items, CancellationToken cancellationToken = default);    #endregion      }  ```    IChannelReader:  ```CSharp      /// <summary>      /// Provides a base contract for reading from a channel.      /// </summary>      /// <typeparam name=""T"">      /// Specifies the type of data that may be read from the channel.      /// </typeparam>      [NoReorder]      public interface IChannelReader<T>: IDisposable      {          /// <summary>          /// Gets a <see cref=""Task""/> that completes when no more data will ever          /// be available to be read from this channel.          /// </summary>          /// <remarks>          /// Task is slow, we needs IValueTaskSource everywhere !          /// </remarks>          ValueTask<ValueVoid> ValueTaskCompletion { get; }            /// <summary>          /// Asynchronously reads an item from the channel.          /// </summary>          /// <param name=""cancellationToken"">A <see cref=""CancellationToken""/> used to cancel the read operation.</param>          /// <returns>A <see cref=""ValueTask{T}""/> that represents the asynchronous read operation.</returns>          ValueTask<T> ReadAsync(CancellationToken cancellationToken = default);            /// <summary>          /// Attempts to read an item to the channel.          /// </summary>          /// <param name=""item"">The read item, or a default value if no item could be read.</param>          /// <returns><see langword=""true""/> if an item was read; otherwise, <see langword=""false""/> if no item was read.</returns>          bool TryRead(out T item);            /// <summary>          /// Returns a <see cref=""ValueTask{T}""/> that will complete when data is available to read.          /// </summary>          /// <param name=""cancellationToken"">A <see cref=""CancellationToken""/> used to cancel the wait operation.</param>          /// <returns>          /// A <see cref=""ValueTask{T}""/> that will complete with a <c>true</c> result when data is available to          /// read          /// or with a <c>false</c> result when no further data will ever be available to be read.          /// </returns>          ValueTask<bool> WaitToReadValueTaskAsync(CancellationToken cancellationToken = default);            #region The zero-copy batch mode interface          /// <summary>          /// Finalizes read operation.          /// </summary>          /// <param name=""processedCount"">The number of processed items.</param>          /// <param name=""slice"">The buffer slice.</param>          void CompleteRead(int processedCount, ref ChannelReaderBufferSlice<T> slice);            /// <summary>          /// Releases a part of previously allocated buffer slice.          /// </summary>          /// <param name=""newCount"">The number of items to remain allocated.</param>          /// <param name=""slice"">The buffer slice.</param>          void PartialFree(int newCount, ref ChannelReaderBufferSlice<T> slice);            /// <summary>          /// Allocates a buffer slice with data.          /// </summary>          /// <remarks>          /// Resulting slice can has less length than requested.          /// </remarks>          /// <param name=""count"">The preferred amount of items to read.</param>          /// <param name=""slice"">The buffer slice with the data.</param>          /// <returns>          /// <see langword=""true""/> if the buffer slice was allocated; otherwise, <see langword=""false""/> if it wasn't          /// allocated.          /// </returns>          bool TryStartRead(int count, out ChannelReaderBufferSlice<T> slice);            #endregion            #region The batch mode interface with copying.            /// <summary>          /// Attempts to read with copying the specified amount of items from the channel.          /// </summary>          /// <param name=""outBuffer"">The output buffer to read to.</param>          /// <param name=""readCount"">The amount of items read (can be less than <see cref=""outBuffer""/> length.</param>          /// <returns><see langword=""true""/> if at least one item was read; otherwise, <see langword=""false""/> if no items was read.</returns>          bool TryRead(Span<T> outBuffer, out int readCount);            /// <summary>          /// Attempts to read the specified amount of items to an array.          /// </summary>          /// <remarks>          /// This method allows to pass-through pushed array without changes and copying.          /// </remarks>          /// <param name=""count"">The number of items to read.</param>          /// <param name=""items"">The array with read items. (Array can have less items than has been requested.)</param>          /// <returns><see langword=""true""/> if at least one item was read; otherwise, <see langword=""false""/> if no items was read.</returns>          bool TryRead(int count, out T[] items);            /// <summary>          /// Asynchronously reads the specified amount of items from the channel.          /// </summary>          /// <remarks>          /// This method allows to pass-through pushed array without changes and copying.          /// </remarks>          /// <param name=""count"">The number of items to read.</param>          /// <param name=""cancellationToken"">A <see cref=""CancellationToken""/> used to cancel the read operation.</param>          /// <returns>A <see cref=""ValueTask{T}""/> that represents the asynchronous read operation.</returns>          ValueTask<T[]> ReadAsync(int count, CancellationToken cancellationToken);            #endregion      }  ```    Misc:  ```CSharp      /// <summary>      /// The channel writer allocated buffer slice.      /// </summary>      /// <remarks>      /// Memory can also be encapsulated in this <see langword=""struct""/>.      /// </remarks>      /// <typeparam name=""T"">Specifies the type of data that may be written to the channel.</typeparam>      public struct ChannelWriterBufferSlice<T>      {          private T[] _array;            private int _start;            private int _length;            private int _id;            /// <summary>          /// Initializes a new instance of the <see cref=""ChannelWriterBufferSlice{T}""/> class.          /// </summary>          /// <param name=""array"">The array.</param>          /// <param name=""start"">The slice start in the array.</param>          /// <param name=""length"">The slice length.</param>          /// <param name=""id"">The slice identifier.</param>          public ChannelWriterBufferSlice(T[] array, int start, int length, int id)          {  #if DEBUG                // TODO: checks  #endif              _array = array;              _start = start;              _length = length;              _id = id;          }            /// <summary>          /// The span interface for writing.          /// </summary>          public Span<T> Span => new Span<T>(_array, _start, _length);            /// <summary>          /// The slice id.          /// </summary>          public int Id => _id;            /// <summary>          /// Decreases slice length.          /// </summary>          /// <param name=""newLength"">The new length.</param>          public void DecreaseLength(int newLength)          {              _length = newLength;          }      }        /// <summary>      /// The channel reader allocated buffer slice.      /// </summary>      /// <remarks>      /// Memory can also be encapsulated in this <see langword=""struct""/>.      /// </remarks>      /// <typeparam name=""T"">Specifies the type of data that may be read from the channel.</typeparam>      public struct ChannelReaderBufferSlice<T>      {          private T[] _array;            private int _start;            private int _length;            private int _id;            /// <summary>          /// Initializes a new instance of the <see cref=""ChannelReaderBufferSlice{T}""/> struct.          /// </summary>          /// <param name=""array"">The array.</param>          /// <param name=""start"">The slice start in the array.</param>          /// <param name=""length"">The slice length.</param>          /// <param name=""id"">The slice identifier.</param>          public ChannelReaderBufferSlice(T[] array, int start, int length, int id)          {  #if DEBUG                // TODO: checks  #endif              _array = array;              _start = start;              _length = length;              _id = id;          }            /// <summary>          /// Decreases slice length.          /// </summary>          /// <param name=""newLength"">The new length.</param>          public void DecreaseLength(int newLength)          {              _length = newLength;          }            /// <summary>          /// The span interface for reading.          /// </summary>          public ReadOnlySpan<T> Span => new ReadOnlySpan<T>(_array, _start, _length);            /// <summary>          /// The slice id.          /// </summary>          public int Id => _id;      }        /// <summary>      /// Special type that can be used in places where usage of System.Void currently is impossible.      /// </summary>      /// <remarks>      /// See discussion https://github.com/dotnet/csharplang/issues/696.      /// </remarks>      [StructLayout(LayoutKind.Sequential, Size = 1)]      [PublicAPI]      public struct ValueVoid : IEquatable<ValueVoid>, IStructuralEquatable      {          /// <inheritdoc/>          public bool Equals(ValueVoid other)          {              return true;          }            /// <inheritdoc/>          public override bool Equals([CanBeNull] object obj)          {              return obj is ValueVoid;          }            bool IStructuralEquatable.Equals([CanBeNull] object other, [CanBeNull] IEqualityComparer comparer)          {              return other is ValueTuple;          }            /// <inheritdoc/>          public override int GetHashCode()          {              return 0;          }            int IStructuralEquatable.GetHashCode([CanBeNull] IEqualityComparer comparer)          {              return 0;          }      }    ```    ---    @ahsonkhan commented on [Mon Mar 12 2018](https://github.com/dotnet/corefxlab/issues/2154#issuecomment-372403391)    cc @tarekgh, @stephentoub     ---    @tarekgh commented on [Mon Mar 12 2018](https://github.com/dotnet/corefxlab/issues/2154#issuecomment-372407034)    @stephentoub should we move this request to corefx repo?     ---    @joshfree commented on [Tue Mar 13 2018](https://github.com/dotnet/corefxlab/issues/2154#issuecomment-372805801)    @tarekgh yes please move issues/suggestions related to Channels to dotnet/corefx now that Channels is in corefx and no longer in corefxlab.  Thanks.    "
28024	area-System.Net	ClientWebSocket should always use CONNECT tunneling thru a proxy	While working on https://github.com/dotnet/corefx/issues/26957, I noticed that WS (websocket non-secure) connections thru a proxy don't use CONNECT tunneling. Instead, they appear to be using just a fully qualified GET request thru the proxy.    This differs from .NET Framework and .NET Core 2.0 (originally used WinHTTP).  In order to maximize success with websocket connections thru proxies, .NET Framework and other stacks typically always use CONNECT tunneling even if the destination server is not a TLS/SSL connection.    Using a test proxy server, I saw the following being sent to/thru the proxy:    ```  GET http://corefx-net.cloudapp.net/WebSocket/EchoWebSocket.ashx HTTP/1.1  Connection: Upgrade  Upgrade: websocket  Sec-WebSocket-Version: 13  Sec-WebSocket-Key: zmboERimu0GSCsWNRKsDZA==  Host: corefx-net.cloudapp.net  ```    It appears that ClientWebSocket is only using a CONNECT verb to the server when the destination websocket server is using the WSS (secure) connection.  In that case, we see the following thru the proxy:    ```  CONNECT corefx-net.cloudapp.net:443 HTTP/1.1  Host: corefx-net.cloudapp.net:443    Trying to connect to corefx-net.cloudapp.net  Connected to corefx-net.cloudapp.net  HTTP/1.1 200 Connection established  ```    ClientWebSocket should be fixed to always use CONNECT tunneling for all connections thru a proxy regardless of whether the websocket server is a secure connection.
28021	area-System.Globalization	ArgumentNullException with StringComparer.CurrentCultureIgnoreCase when GlobalizationMode.Invariant=true	"When GlobalizationMode.Invariant=true is in effect (such as on Alpine in the `microsoft/dotnet:2.1-runtime-deps-alpine` image), attempts to use `StringComparer.CurrentCultureIgnoreCase` cause crashes.    This appears to have changed between runtime 2.0 and current builds of 2.1.    Simple repro:    ```c#  using System;  using System.Collections;    namespace hashtable  {      class Program      {          static void Main(string[] args)          {              Hashtable h = new Hashtable(StringComparer.CurrentCultureIgnoreCase);                h[""Foo""] = ""bar"";                Console.WriteLine(h.ContainsKey(""foo""));              Console.WriteLine(""Hello World!"");          }      }  }  ```    Working:    ```sh-session  raines@raines-z220u:~/src/hashtable$ dotnet --info  .NET Command Line Tools (2.1.101)    Product Information:   Version:            2.1.101   Commit SHA-1 hash:  6c22303bf0    Runtime Environment:   OS Name:     ubuntu   OS Version:  17.10   OS Platform: Linux   RID:         linux-x64   Base Path:   /usr/share/dotnet/sdk/2.1.101/    Microsoft .NET Core Shared Framework Host      Version  : 2.0.6    Build    : 74b1c703813c8910df5b96f304b0f2b78cdf194d    raines@raines-z220u:~/src/hashtable$ DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=true dotnet exec /home/raines/src/hashtable/bin/Debug/netcoreapp2.0/hashtable.dll  True  Hello World!  ```    Failing:    ```sh-session  $ dotnet --info  .NET Comma$ DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=true dotnet exec bin/Debug/netcoreapp2.0/hashtable.dll     Unhandled Exception: System.ArgumentNullException: SafeHandle cannot be null.  Parameter name: pHandle     at System.StubHelpers.StubHelpers.SafeHandleAddRef(SafeHandle pHandle, Boolean& success)     at Interop.Globalization.GetSortKey(SafeSortHandle sortHandle, String str, Int32 strLength, Byte* sortKey, Int32 sortKeyLength, CompareOptions options)     at System.Globalization.CompareInfo.GetHashCodeOfStringCore(String source, CompareOptions options)     at System.Collections.Hashtable.GetHash(Object key)     at System.Collections.Hashtable.InitHash(Object key, Int32 hashsize, UInt32& seed, UInt32& incr)     at System.Collections.Hashtable.ContainsKey(Object key)     at hashtable.Program.Main(String[] args) in /home/raines/src/hashtable/Program.cs:line 12  Aborted (core dumped)nd Line Tools (2.1.300-preview2-008251)    Product Information:   Version:            2.1.300-preview2-008251   Commit SHA-1 hash:  94fd3fd392    Runtime Environment:   OS Name:     alpine   OS Version:  3.6   OS Platform: Linux   RID:         alpine.3.6-x64   Base Path:   /usr/share/dotnet/sdk/2.1.300-preview2-008251/    Microsoft .NET Core Shared Framework Host      Version  : 2.1.0-preview2-26131-06    Build    : b13a0d5c331f374afd35ded57b9a4b4ab128864c    $DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=true dotnet exec bin/Debug/netcoreapp2.0/hashta  ble.dll     Unhandled Exception: System.ArgumentNullException: SafeHandle cannot be null.  Parameter name: pHandle     at System.StubHelpers.StubHelpers.SafeHandleAddRef(SafeHandle pHandle, Boolean& success)     at Interop.Globalization.GetSortKey(SafeSortHandle sortHandle, String str, Int32 strLength, Byte* sortKey, Int32 sortKeyLength, CompareOptions options)     at System.Globalization.CompareInfo.GetHashCodeOfStringCore(String source, CompareOptions options)     at System.Collections.Hashtable.GetHash(Object key)     at System.Collections.Hashtable.InitHash(Object key, Int32 hashsize, UInt32& seed, UInt32& incr)     at System.Collections.Hashtable.Insert(Object key, Object nvalue, Boolean add)     at System.Collections.Hashtable.set_Item(Object key, Object value)     at hashtable.Program.Main(String[] args) in /home/raines/src/hashtable/Program.cs:line 12  Aborted (core dumped)  ```"
28020	area-System.Net	Constructing an absolute URI from a relative URI sometimes results in an incorrect encoding	"When using a relative URI built from `Uri.MakeRelativeUri` to create a new URI with the constructor `Uri(Uri, Uri)`, the resulting URI has a `LocalPath` property that is not escaped properly.    ```csharp  var baseUri = new Uri(@""C:\test \"", UriKind.Absolute);   var absolute = new Uri(@""C:\test \space .txt"", UriKind.Absolute);   var relative = new Uri(""space .txt"", UriKind.Relative);   var combined = new Uri(baseUri, relative);     Uri extracted = baseUri.MakeRelativeUri(absolute);   var rebuilt = new Uri(baseUri, extracted);     Console.WriteLine(baseUri.LocalPath); // Outputs C:\test \   Console.WriteLine(absolute.LocalPath); // Outputs C:\test \space .txt   Console.WriteLine(combined.LocalPath); // Outputs C:\test \space .txt   Console.WriteLine(rebuilt.LocalPath); // Outputs C:\test \space%20.txt  ```  The user that reported this issue was able to use the following workaround:  ```csharp  var temp = Uri.UnescapeDataString(extracted.ToString());   var rebuilt = new Uri(baseUri, temp);  ```  The use case here is very obscure, so I'm marking this issue as future."
28017	area-Serialization	Updated an error message	Fix #27492  @zhenlan @huanwu @mconnew 
28015	area-System.Threading	"Add official type for ""Void for Generic arguments"" cases (and kill brand new non-generic ""ValueTask"")"	"The problem:  ---  CLR denies to use System.Void in generic arguments.  And as a result we have code like that:  ```CSharp  public struct MyType { }    public struct MyType<T>{ }    public void DoOperation(MyType p) { }    public void DoOperation<T>(MyType<T> p) { }  ```  Language/CLR solution:  ---  This proposal https://github.com/dotnet/csharplang/issues/696 probably would not be implemented at all.    Temporary solution:  ---  We are defining special type internally like System.Void  ``` CSharp  internal struct MyVoid {}  public struct MyType<T>{ }    public void DoOperation<T>(MyType<T> p) { }    public void UsageExapmle()  {       DoOperation(new MyType<MyVoid> p);       // Why we have no TaskCompletionSource ???       // Becuse it's not so difficult to use:       TaskCompletionSource<MyVoid> tcs;       // Or       TaskCompletionSource<bool> tcs1;  }  ```  Fresh example:  https://github.com/dotnet/corefx/blob/master/src/System.Threading.Channels/src/System/VoidResult.cs  Internally many many projects reinventing the wheel again and again.  There are many places in CoreCLR, CoreFX, Roslyn, etc. and other 100+ projects    Temporary-Permanent Solution:  ---  1) Add official  ""Void for Generic arguments""   ``` CSharp  namespace Sysem  {      public struct VoidResult {}  }  ```  2) Improve Framework-Design guidelines and describe that ""VoidResult"" is a good practice.  3) Kill brand-new non-generic ValueTask, IValueTaskSource classes as a first example of new design principles. UNTIL IT'S NOT TOO LATE!    Otherwise please add non-generic TaskCompletionSource class as a ""Logic shugar"". ;)    Suggestion:  ---  With 90% probability proposal https://github.com/dotnet/csharplang/issues/696 will be implemened in a way where  ""void"" literals in generic arguments will be replaced to ""VoidResult"" from this proposal."
28014	area-System.IO	Upgrade our ZLib version for Windows to 1.2.11	Fixes https://github.com/dotnet/corefx/issues/25844
28013	area-System.IO	Forward-port the Intel optimizations to Zlib 1.2.11	
28012	area-System.Drawing	Tests System.Drawing.Tests.FontTests failing on CharSet on non English culture	These two tests are failing on my system:    - [ToLogFont_Invoke_ReturnsExpected](https://github.com/dotnet/corefx/blob/6cd1708e72a863342f6c6b6a7a735cf55ceff048/src/System.Drawing.Common/tests/FontTests.cs#L719)  - [ToLogFont_InvokeGraphics_ReturnsExpected](https://github.com/dotnet/corefx/blob/6cd1708e72a863342f6c6b6a7a735cf55ceff048/src/System.Drawing.Common/tests/FontTests.cs#L756)    Both are failing on asserting `logFont.lfCharSet`. Expected value is always **1** (once as a constant, once as a property `font.GdiCharSet`), but my value is **238**.    I do not know exactly what charset 238 is, but I think, that it is because of my system's culture, which is **Slovak**.  
28011	area-System.Net	Expose SocketsHttpHandler.ResponseDrainTimeout	Fixes https://github.com/dotnet/corefx/issues/27685    Just renames the internal property, makes it public, and fixes the tests to use it directly rather than via reflection.    cc: @geoffkizer 
28010	area-System.Runtime	[Discussion] Microsoft Security Advisory CVE-2018-0875: Hash Collision can cause Denial of Service	# Microsoft Security Advisory CVE-2018-0875: Hash Collision can cause Denial of Service  ## Executive Summary    Microsoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).  This advisory also provides guidance on what developers can do to update their applications correctly.    Microsoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.    System administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.    ## Original Announcement    The original announcement is located at https://github.com/dotnet/announcements/issues/62    ### Mitigation Factors    None    ### Affected Software    Any application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected.     ### Advisory FAQ  #### How do I know if I am affected?  Any application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected.     A complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:    | Operating System | Location |  |------------------|----------|  | Windows | `C:\Program Files\dotnet\shared\Microsoft.NETCore.App\` |  | macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |  | Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |    Each runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.    Additionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be updated to target the updated .NET Core runtime, recompiled and redeployed.    #### How do I fix my affected application?    Applications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed.   Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md).   .NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.    If you've built a self-contained application, you must install the new runtime and SDK, update your application to target the updated .NET Core runtime, recompile and redeploy. To update your runtime version edit the `RuntimeFrameworkVersion` property in the project's .csproj file to indicate the desired target version. For example:    ```xml  <PropertyGroup>    <RuntimeFrameworkVersion>2.0.6</RuntimeFrameworkVersion>  </PropertyGroup>  ```    #### What if the update breaks my application?  An application can be pinned to a previous version of the runtime by editing the `{applicationName}.runtimeconfig.json` file for that application., where `{applicationName}` is the name of the executable, for example `example.exe` would have a runtime configuration file titled `example.runtimeconfig.json`. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.    Since the `{applicationName}.runtimeconfig.json` file is an optional file, you may need to create one for each application and add it alongside the executable.    ### Acknowledgments  [Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)    ### External Links  [CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)    ### Revisions    V1.2 (Mar 26, 2018): Corrected instructions for runtimeconfig.json  V1.1 (Mar 14, 2018): Added instructions for self contained application retargetting.  V1.0 (Mar 13, 2018): Advisory published.    _Version 1.2_  _Last Updated 2018-03-26_
28009	area-System.Text	RFC: MARK in Regular Expressions	"First of all, I'm hoping that this is the right place to post this.    [Here](https://stackoverflow.com/questions/49256716/regex-mark-to-see-which-capture-group-was-matched) is the original StackOverflow post.    There's this neat little `MARK` keyword in the PCRE Regex specification:  https://pcre.org/current/doc/html/pcre2syntax.html#SEC23    https://3v4l.org/ErCrp  ```php  <?php    $string = 'true';  $matches = [];    preg_match('~(?|true(*:1)                 |false(*:1)                 |\d+(*:2))~x', $string, $matches);    // *MARK:1 stands for a boolean  // *MARK:2 stands for a integer literal    var_dump($matches);    //> array(2) {   //>     [0]=> string(4) ""true""   //>     [""MARK""]=> string(1) ""1""   //> }     $token = new Token(      $lexeme = $matches[0],      $type = $matches['MARK']  );  ```    As you can see, `MARK` allows you to understand which group matched, not just if it was matched. In this example `MARK` would contain the token type which would make tokenizing mind blowingly elegant.    Unfortunately, right now I have to create capture groups and then manually check which capture group was matched when.    ```csharp  var pattern = @""(      (?<true>true)      |(?<false>false)      |(?<integer>\d+)  )"";    var regexOptions = RegexOptions.ExplicitCapture | RegexOptions.IgnorePatternWhitespace;  var regex = new Regex(pattern, regexOptions);  var matches = regex.Matches(""true"");    foreach (Match match in matches)  {      int? mark = null;        if (match.Groups[""true""].Success || match.Groups[""false""].Success)      {          mark = 1;      }      else if (match.Groups[""integer""].Success)      {          mark = 2;      }  }  ```    I mean, it works. But this will have to be repeated for every symbol, every operator, everything. Since the regex engine already knows what happened it should be able to report it back.    Do you see any use in this feature?"
28008	area-System.Net	Change behavior of SocketsHttpHandler for redirects	When exceeding the max number of redirecs, .NET Framework will  not throw an exception. Instead, it will return the 3xx response.  This PR changes the behavior of SocketsHttpHandler to match.    Fixes #27285
28004	area-System.IO	Fix unbounded stackalloc in System.IO.FileSystem	
28002	area-System.Net	HttpClientUsesSslCertEnvironmentVariables() test will fail on Linux with SocketsHttpHandler	"The [HttpClientUsesSslCertEnvironmentVariables test](https://github.com/dotnet/corefx/blob/eb892471f8691dad65ff47f5b12ddc8d378ae460/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.ServerCertificates.Unix.cs#L79) will fail on Linux with SocketsHttpHandler for these two test data:    `[InlineData(false, false, true, true, true)]`  `[InlineData(false, false, true, false, true)]`    ```diff          [Theory]          [PlatformSpecific(~TestPlatforms.OSX)] // Not implemented          [InlineData(false, false, false, false, false)] // system -> ok          [InlineData(true, true, true, true, true)]      // empty dir, empty bundle file -> fail          // It is enough to override the bundle, since all tested platforms don't have a default dir:          [InlineData(false, false, true, true, true)]    // empty bundle -> fail          [InlineData(false, false, true, false, true)]   // non-existing bundle -> fail          public void HttpClientUsesSslCertEnvironmentVariables(bool setSslCertDir, bool createSslCertDir,              bool setSslCertFile, bool createSslCertFile, bool expectedFailure)          {              // This test sets SSL_CERT_DIR and SSL_CERT_FILE to empty/non-existing locations and then              // checks the http request fails.              // Some platforms will use the system default when not specifying a value, while others              // will not use those certificates. Due to these platform differences, we only check specific              // combinations that are expected to work the same cross-platform.              var psi = new ProcessStartInfo();              if (setSslCertDir)              {                  string sslCertDir = GetTestFilePath();                  if (createSslCertDir)                  {                      Directory.CreateDirectory(sslCertDir);                  }                  psi.Environment.Add(""SSL_CERT_DIR"", sslCertDir);              }                if (setSslCertFile)              {                  string sslCertFile = GetTestFilePath();                  if (createSslCertFile)                  {                      File.WriteAllText(sslCertFile, """");                  }                  psi.Environment.Add(""SSL_CERT_FILE"", sslCertFile);              }                RemoteInvoke(async arg =>              {                  bool shouldFail = bool.Parse(arg);                  const string Url = ""https://www.microsoft.com"";    +                // Here, if we change to client = CreateHttpClient(useSocketsHttpHandlerBoolString: ""true""), the test will always fail. Test will pass if client = CreateHttpClient(useSocketsHttpHandlerBoolString: ""false""). (Not using SocketsHttpHandler)  +                using (HttpClient client = new HttpClient())                  {                      if (shouldFail)                      {                          await Assert.ThrowsAsync<HttpRequestException>(() => client.GetAsync(Url));                      }                      else                      {                          await client.GetAsync(Url);                      }                  }                  return SuccessExitCode;              }, expectedFailure.ToString(), new RemoteInvokeOptions { StartInfo = psi }).Dispose();          }  ```      Callstack:    ```  Unhandled Exception: Xunit.Sdk.ThrowsException: Assert.Throws() Failure  2018-03-12 22:36:11,472: INFO: proc(54): run_and_log_output: Output: Expected: typeof(System.Net.Http.HttpRequestException)  2018-03-12 22:36:11,472: INFO: proc(54): run_and_log_output: Output: Actual:   (No exception was thrown)  2018-03-12 22:36:11,472: INFO: proc(54): run_and_log_output: Output:    at Xunit.Assert.Throws(Type exceptionType, Exception exception)  2018-03-12 22:36:11,472: INFO: proc(54): run_and_log_output: Output:    at Xunit.Assert.ThrowsAsync[T](Func`1 testCode)  2018-03-12 22:36:11,473: INFO: proc(54): run_and_log_output: Output:    at System.Net.Http.Functional.Tests.HttpClientHandler_ServerCertificates_Test.<>c.<<HttpClientUsesSslCertEnvironmentVariables>b__29_0>d.MoveNext() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_true_prtest/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.ServerCertificates.Unix.cs:line 117  2018-03-12 22:36:11,474: INFO: proc(54): run_and_log_output: Output: --- End of stack trace from previous location where exception was thrown ---  2018-03-12 22:36:11,474: INFO: proc(54): run_and_log_output: Output:    at RemoteExecutorConsoleApp.Program.Main(String[] args) in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_true_prtest/src/Common/tests/System/Diagnostics/RemoteExecutorConsoleApp/RemoteExecutorConsoleApp.cs:line 63  2018-03-12 22:36:11,475: INFO: proc(54): run_and_log_output: Output: --- End of stack trace from previous location where exception was thrown ---  2018-03-12 22:36:11,475: INFO: proc(54): run_and_log_output: Output:    at RemoteExecutorConsoleApp.Program.Main(String[] args) in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_true_prtest/src/Common/tests/System/Diagnostics/RemoteExecutorConsoleApp/RemoteExecutorConsoleApp.cs:line 92  2018-03-12 22:36:12,308: INFO: proc(54): run_and_log_output: Output:    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_ServerCertificates_Test.HttpClientUsesSslCertEnvironmentVariables(setSslCertDir: False, createSslCertDir: False, setSslCertFile: True, createSslCertFile: True, expectedFailure: True) [FAIL]  2018-03-12 22:36:12,310: INFO: proc(54): run_and_log_output: Output:       System.Diagnostics.RemoteExecutorTestBase+RemoteInvokeHandle+RemoteExecutionException : Remote process failed with an unhandled exception.  2018-03-12 22:36:12,342: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2018-03-12 22:36:12,767: INFO: proc(54): run_and_log_output: Output:            2018-03-12 22:36:12,768: INFO: proc(54): run_and_log_output: Output:          Child exception:  2018-03-12 22:36:12,778: INFO: proc(54): run_and_log_output: Output:            Xunit.Sdk.ThrowsException: Assert.Throws() Failure  2018-03-12 22:36:12,779: INFO: proc(54): run_and_log_output: Output:          Expected: typeof(System.Net.Http.HttpRequestException)  2018-03-12 22:36:12,779: INFO: proc(54): run_and_log_output: Output:          Actual:   (No exception was thrown)  2018-03-12 22:36:12,796: INFO: proc(54): run_and_log_output: Output:          /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_true_prtest/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.ServerCertificates.Unix.cs(117,0): at System.Net.Http.Functional.Tests.HttpClientHandler_ServerCertificates_Test.<>c.<<HttpClientUsesSslCertEnvironmentVariables>b__29_0>d.MoveNext()  2018-03-12 22:36:12,797: INFO: proc(54): run_and_log_output: Output:          --- End of stack trace from previous location where exception was thrown ---  2018-03-12 22:36:12,797: INFO: proc(54): run_and_log_output: Output:          /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_true_prtest/src/Common/tests/System/Diagnostics/RemoteExecutorConsoleApp/RemoteExecutorConsoleApp.cs(63,0): at RemoteExecutorConsoleApp.Program.Main(String[] args)  2018-03-12 22:36:12,798: INFO: proc(54): run_and_log_output: Output:            2018-03-12 22:36:12,798: INFO: proc(54): run_and_log_output: Output:          Child process:  2018-03-12 22:36:12,798: INFO: proc(54): run_and_log_output: Output:            System.Net.Http.Functional.Tests, Version=4.2.1.0, Culture=neutral, PublicKeyToken=9d77cc7ad39b68eb System.Net.Http.Functional.Tests.HttpClientHandler_ServerCertificates_Test+<>c System.Threading.Tasks.Task`1[System.Int32] <HttpClientUsesSslCertEnvironmentVariables>b__29_0(System.String)  2018-03-12 22:36:12,799: INFO: proc(54): run_and_log_output: Output:            2018-03-12 22:36:12,799: INFO: proc(54): run_and_log_output: Output:          Child arguments:  2018-03-12 22:36:12,799: INFO: proc(54): run_and_log_output: Output:            True  2018-03-12 22:36:12,799: INFO: proc(54): run_and_log_output: Output:            ```"
28001	area-System.Memory	Proposal: Add support for ROS comparison with specified culture	```csharp  namespace System  {      public static partial class MemoryExtensions      {          public static int CompareTo(this ReadOnlySpan<char> span, ReadOnlySpan<char> value, CultureInfo culture, CompareOptions options);      }  }  ```    ### Rationale    While doing some Span optimizations in Regex I noticed that the current comparison extension methods on ROS don't support comparison with a specific culture: `MemoryExtensions.CompareTo(this ReadOnlySpan<char> span, ReadOnlySpan<char> value, StringComparison comparisonType)`.    With string I can do that in different ways either by `string.Compare(string, string, CultureInfo, CompareOptions);` or by `StringComparer.Create(CultureInfo, bool ignoreCase).Compare(string, string)`.    Is there a specific reason that we excluded a CultureInfo overload in the extension method?    cc @tarekgh @ahsonkhan 
27998	area-System.IO	Add tilde path tests	Related to https://github.com/dotnet/coreclr/pull/16901.  Also clean up existing test data a bit.    Needs https://github.com/dotnet/coreclr/pull/16901 to pass. Marking as no merge for now.    cc: @danmosemsft, @pjanotti, @Anipik 
27996	area-System.Net	System.Net.Tests.HttpRequestStreamTests failures with SocketsHttpHandler	"These tests only fail on OSX in `HttpListener` if set SocketsHttpHandler as the default handler:    [Read_FullLengthAsynchronous_Success(transferEncodingChunked: False, text: \""Non-Empty\"")   Read_FullLengthSynchronous_Success(transferEncodingChunked: False, text: \""Non-Empty\"")  Read_NotEnoughThenCloseAsynchronous_Success(transferEncodingChunked: False)](https://mc.dot.net/#/user/caesar1995/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/7e55e2a154087633b5f365bb05310e1700e835a4/workItem/System.Net.HttpListener.Tests)    [Read_FullLengthAsynchronous_PadBuffer_Success(transferEncodingChunked: False, text: \""Non-Empty\"")   Read_FullLengthAsynchronous_Success(transferEncodingChunked: False, text: \""Non-Empty\"")  Read_NotEnoughThenCloseAsynchronous_Success(transferEncodingChunked: False)  Read_TooMuchAsynchronous_Success(transferEncodingChunked: False)  Read_TooMuchSynchronous_Success(transferEncodingChunked: False)](https://mc.dot.net/#/user/pjanotti/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/fc263ec2f48b14a381d2c5ebbbfb75e3163d3891/workItem/System.Net.HttpListener.Tests)    These failures cannot be repro-ed consistently."
27995	area-Infrastructure	System.Resources.Reader/Writer packages needs Xamarin support	We've added facades for System.Resources.Reader.dll and System.Resources.Writer.dll inbox so we'd like to add the placeholders for the usual Xamarin platforms to those packages.  
27994	area-System.Net	Use shared SocketsHttpHandler for some ClientWebSocket options	Currently we're creating a new SocketsHttpHandler for each ClientWebSocket.  This change makes it so that if mostly default options are used (namely no credentials, no proxy, no cookies, and no client certificates), we'll use a shared handler instance.    cc: @geoffkizer, @davidsh, @pjanotti 
27993	area-System.Net	Give WebSocket server time to close connection	Per RFC 6455, a websocket client should try to let the server close the connection.    I also removed some unnecessary passing of cancellation tokens.    cc: @geoffkizer, @mconnew, just FYI @anurse 
27992	area-Infrastructure	Add auto-updater for Microsoft.SymbolUploader.Build.Task package	On the dotnet/versions side, copy the files from https://github.com/dotnet/versions/tree/master/build-info/dotnet/buildtools/master into a new folder, say, `build-info/dotnet/sym-uploader/master/`, then edit the files to correspond to this single package and its version.    In dependenices.props:   * Look at https://github.com/dotnet/corefx/commit/18f7ad2ddcfd72c3b6473a4a4a0edd6ab5283f1b for `...CurrentRef` and `RemoteDependencyBuildInfo`. The new CurrentRef needs to point to a commit that has the new `build-info` files merged in.   * Look at https://github.com/dotnet/corefx/commit/997fa4b6a9edc8f793a88b2c983ca1322b92b4a8#diff-54339bb49aae3cad78638955e8cda9f7 for the `XmlUpdateStep`.    (As of writing, the package isn't added yet--see https://github.com/dotnet/corefx/pull/27975.)
27990	area-System.Console	Console.CursorLeft and CursorTop always returns 0 when used in Shell-in-a-box	"[ShellInABox](https://github.com/shellinabox/shellinabox) enables a shell within a browser.  Currently [PowerShell Core 6](https://github.com/powershell/powershell) has an experience problem within ShellInABox because Console.CursorLeft and Console.CursorTop always returns 0.    Repro:    ```bash  # using Ubuntu 16.04  sudo apt install shellinabox  xdg-open https://localhost:4200  # Should open browser to a shell window  dotnet new console -n test  ```    replace program.cs with this:    ```csharp  using System;    namespace contest  {      class Program      {          static void Main(string[] args)          {              Console.Clear();              Console.Write(""Hello World!"");              Console.Write(""[left:{0}]"", Console.CursorLeft);              Console.WriteLine(""Bye!"");              Console.Write(""[Top:{0}]"", Console.CursorTop);              Console.SetCursorPosition(20,5);              Console.Write(""[20,5]"");          }      }  }  ```    ```bash  dotnet publish  dotnet run  ```    Expected:  ```none  Hello World![left:12]Bye!  [Top:1]  ```    Actual:  ```none  Hello World![left:0]Bye!  [Top:0]  ```    Blocking https://github.com/PowerShell/PowerShell/issues/3849"
27989	area-System.Data	Test System.Data.Tests.SqlTypes.SqlDoubleTest.Conversions fails on non english culture	The test is failing on [this line](https://github.com/dotnet/corefx/blob/444e6bb7fd274be680fb3bf4b22258821e77ae2c/src/System.Data.Common/tests/System/Data/SqlTypes/SqlDoubleTest.cs#L408) (and I believe [this will be the same](https://github.com/dotnet/corefx/blob/444e6bb7fd274be680fb3bf4b22258821e77ae2c/src/System.Data.Common/tests/System/Data/SqlTypes/SqlDoubleTest.cs#L413)).    Failing message is:    > Assert.Equal() Failure  > Expected: 6.4E+65  > Actual:   6,4E+65    The value is the same, but notice the **difference in decimal separator**. My Windows' culture is Slovak and we have comma as a decimal separator. The method of `SqlDouble.ToString()` and its conversion to `SqlString` is done without specifying the culture, so it uses the system's one, hence the difference.  
27988	area-System.Net	CurlHandler: Remove Transfer-Encoding on redirect from POST to GET	This fix removes the TransferEncoding header from a request when it is redirected from POST to GET. I chose to modify the request for the following reasons:    1. It's consistent with the behavior of WinHttpHandler.  2. At this point the header has already been modified by the code linked below.    https://github.com/dotnet/corefx/blob/444e6bb7fd274be680fb3bf4b22258821e77ae2c/src/System.Net.Http/src/System/Net/Http/CurlHandler/CurlHandler.cs#L777-L781    I also tagged the locations where the TransferEncoding header is being modified with an issue tracking removal of those modifications.    If anyone feels strongly about not modifying the request (despite the above), I think that it is possible. It's just a much more significant rework.    Fixes: #27301
27985	area-System.Memory	Add a _malloca-like API Span<T>.Alloc(int length)	"(This is distinct from the proposal at https://github.com/dotnet/corefx/issues/26954, which considers a more powerful API that can give the caller specific information about the current stack. The proposal under consideration here is only for a ""[KISS](https://en.wikipedia.org/wiki/KISS_principle)"" API. Both proposals could exist side-by-side depending on the scenario, and in fact this proposal could depend on the more powerful API if we decide that's the right behavior.)    As the pattern `Span<T> span = stackalloc T[len];` becomes more commonplace, we're seeing a rise in incorrect usage where developers are piping through untrusted _len_ values, potentially making their applications susceptible to reliability issues or DoS attacks. The __safe__ language construct is `Span<T> span = ((uint)len <= 128 /* or other const */) ? stackalloc T[len] : new T[len];`. We can't rely on our larger developer audience remembering the safe pattern, and even our more knowledgeable advanced developers can forget the check from time to time.    Following are concrete proposals from the security team as to how this can be addressed.    First, create a utility method `public static Span<T> Span<T>.Alloc(int length)`. This API will `stackalloc` in the current frame if appropriate; otherwise the method will heap-alloc, similar to the CRT's [_malloca](https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/malloca) API. Adding this method and getting the desired runtime behavior would not require compiler changes, but it would require JIT changes. The implementation of the method would default simply to `new T[length]` if _length_ is negative or is too large. Advanced developers who want to pull from an existing array pool as fallback wouldn't use this API; they'd perform the check manually.    Second, once the utility method is in place, the compiler should be smart enough to treat `return Span<T>.Alloc(...);` as a compile-time error, just as it does today for `Span<T> span = stackalloc T[...]; return span;`. This _would_ require a compiler change.    Third, the developer should be warned when passing a non-constant and non-bounds-checked value into `stackalloc`, and the warning should direct the developer to use `Span<T>.Alloc` instead. The developer should also be warned when using `stackalloc` or `Span<T>.Alloc` in a loop. (We considered warning on recursive method calls, but that really belongs in a different analyzer.) Making this a proper compiler warning is probably a bit too noisy, so it could be a Roslyn code analyzer instead. This wouldn't require a compiler or JIT change; it'd just be a new version of the analyzers package for developers who run it as part of build.    Finally, remember that this is a KISS proposal. It's intended for the majority use case for developers who may want to consume `Span`-based APIs but need a bit of a safety net. Advanced developers could still use the other APIs under consideration or perform their own custom checks as appropriate for their applications."
27982	area-System.Security	MatchingRefApiCompat issues in System.Security.Principal.Windows	See baseline file  https://github.com/dotnet/corefx/blob/master/src/System.Security.Principal.Windows/src/MatchingRefApiCompatBaseline.txt    We should do one of the following:  1. Expose the APIs publicly in the reference assembly  2. Make the APIs in the implementation internal  3. Add a comment to the baseline file why you cannot do either (1) or (2) and keep them baselined.    See PR https://github.com/dotnet/corefx/pull/27881/ for extra context.
27981	area-Serialization	MatchingRefApiCompat issues in Serialization libraries	See baseline files  https://github.com/dotnet/corefx/blob/master/src/System.Xml.XmlSerializer/src/MatchingRefApiCompatBaseline.uap.txt  https://github.com/dotnet/corefx/blob/master/src/System.Xml.XmlSerializer/src/MatchingRefApiCompatBaseline.uapaot.txt  https://github.com/dotnet/corefx/blob/master/src/System.Xml.XmlSerializer/src/MatchingRefApiCompatBaseline.netcoreapp.txt  https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Serialization.Xml/src/MatchingRefApiCompatBaseline.txt  https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Serialization.Formatters/src/MatchingRefApiCompatBaseline.txt    We should do one of the following:  1. Expose the APIs publicly in the reference assembly  2. Make the APIs in the implementation internal  3. Add a comment to the baseline file why you cannot do either (1) or (2) and keep them baselined.    See PR https://github.com/dotnet/corefx/pull/27881/ for extra context.  
27980	area-System.Runtime	MatchingRefApiCompat issues in System.Runtime.Caching	See baseline file  https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Caching/src/MatchingRefApiCompatBaseline.txt    We should do one of the following:  1. Expose the APIs publicly in the reference assembly  2. Make the APIs in the implementation internal  3. Add a comment to the baseline file why you cannot do either (1) or (2) and keep them baselined.    See PR https://github.com/dotnet/corefx/pull/27881/ for extra context.  
27979	area-System.Net	MatchingRefApiCompat issues in System.Net.*	See baseline files  https://github.com/dotnet/corefx/blob/master/src/System.Net.Requests/src/MatchingRefApiCompatBaseline.txt  https://github.com/dotnet/corefx/blob/master/src/System.Net.Http/src/MatchingRefApiCompatBaseline.uap.txt  https://github.com/dotnet/corefx/blob/master/src/System.Net.Primitives/src/MatchingRefApiCompatBaseline.uap.txt  https://github.com/dotnet/corefx/blob/master/src/System.Net.Primitives/src/MatchingRefApiCompatBaseline.netcoreapp.txt  https://github.com/dotnet/corefx/blob/master/src/System.Net.NameResolution/src/MatchingRefApiCompatBaseline.txt    We should do one of the following:  1. Expose the APIs publicly in the reference assembly  2. Make the APIs in the implementation internal  3. Add a comment to the baseline file why you cannot do either (1) or (2) and keep them baselined.    See PR https://github.com/dotnet/corefx/pull/27881/ for extra context.  
27978	area-System.IO	MatchingRefApiCompat issues in System.IO.*	See baseline file  https://github.com/dotnet/corefx/blob/master/src/System.IO.FileSystem/src/MatchingRefApiCompatBaseline.txt and  https://github.com/dotnet/corefx/blob/master/src/System.IO.IsolatedStorage/src/MatchingRefApiCompatBaseline.txt    We should do one of the following:  1. Expose the APIs publicly in the reference assembly  2. Make the APIs in the implementation internal  3. Add a comment to the baseline file why you cannot do either (1) or (2) and keep them baselined.    See PR https://github.com/dotnet/corefx/pull/27881/ for extra context.  
27977	area-Infrastructure	Cannot build on ARM (aarch64)	"I tried to build corefx from scratch on my aarch64 box running Fedora 27, but I get the following error:  ```  [bkeys@localhost corefx]$ ./build.sh release skiptests  Installing dotnet cli...  Restoring BuildTools version 2.1.0-preview2-02612-01...  /home/bkeys/Devel/dotnet/corefx/init-tools.sh: line 144: /home/bkeys/Devel/dotnet/corefx/Tools/dotnetcli/dotnet: cannot execute binary file: Exec format error  ERROR: Could not restore build tools correctly.  Please check the detailed log that follows.  Running: /home/bkeys/Devel/dotnet/corefx/init-tools.sh  Installing 'https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.2/dotnet-sdk-2.1.2-linux-x64.tar.gz' to '/home/bkeys/Devel/dotnet/corefx/Tools/dotnetcli/dotnet.tar'  Running: /home/bkeys/Devel/dotnet/corefx/Tools/dotnetcli/dotnet restore ""/home/bkeys/Devel/dotnet/corefx/init-tools.msbuild"" --no-cache --packages /home/bkeys/Devel/dotnet/corefx/packages --source https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json /p:BuildToolsPackageVersion=2.1.0-preview2-02612-01  Using RID linux-x64 for BuildTools native tools  Initializing BuildTools...  chmod: cannot access '/home/bkeys/Devel/dotnet/corefx/packages/microsoft.dotnet.buildtools/2.1.0-preview2-02612-01/lib/init-tools.sh': No such file or directory  /home/bkeys/Devel/dotnet/corefx/init-tools.sh: line 165: /home/bkeys/Devel/dotnet/corefx/packages/microsoft.dotnet.buildtools/2.1.0-preview2-02612-01/lib/init-tools.sh: No such file or directory  ERROR: An error occurred when trying to initialize the tools.  Please check the detailed log that follows.  Running: /home/bkeys/Devel/dotnet/corefx/init-tools.sh  Installing 'https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.2/dotnet-sdk-2.1.2-linux-x64.tar.gz' to '/home/bkeys/Devel/dotnet/corefx/Tools/dotnetcli/dotnet.tar'  Running: /home/bkeys/Devel/dotnet/corefx/Tools/dotnetcli/dotnet restore ""/home/bkeys/Devel/dotnet/corefx/init-tools.msbuild"" --no-cache --packages /home/bkeys/Devel/dotnet/corefx/packages --source https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json /p:BuildToolsPackageVersion=2.1.0-preview2-02612-01  Running: /home/bkeys/Devel/dotnet/corefx/packages/microsoft.dotnet.buildtools/2.1.0-preview2-02612-01/lib/init-tools.sh /home/bkeys/Devel/dotnet/corefx /home/bkeys/Devel/dotnet/corefx/Tools/dotnetcli/dotnet /home/bkeys/Devel/dotnet/corefx/Tools /home/bkeys/Devel/dotnet/corefx/packages  ```"
27976	area-System.Drawing	MatchingRefApiCompat issues with System.Drawing.Common	See baseline file  https://github.com/dotnet/corefx/blob/master/src/System.Drawing.Common/src/MatchingRefApiCompatBaseline.txt    We should do one of the following:  1. Expose the APIs publicly in the reference assembly  2. Make the APIs in the implementation internal  3. Add a comment to the baseline file why you cannot do either (1) or (2) and keep them baselined.    See PR https://github.com/dotnet/corefx/pull/27881/ for extra context.  
27975	area-Infrastructure	Publish symbols using Microsoft.SymbolUploader.Build.Task package	"Added PB_SymbolExpirationInDays (settable at queue time), PB_MsdlSymbolServerPAT, PB_SymwebSymbolServerPAT variables.    Added ""msdl"" (publish symbols to public Microsoft server) and ""symweb"" (publish symbols to symweb) variables to PB_PublishType.    There was a little cleanup of the build def variable names between publish and symbol publish and between corefx and coreclr.    Issue #27343"
27974	area-System.Data	MatchingRefApiCompat issues with System.Data.SqlClient	See baseline file  https://github.com/dotnet/corefx/blob/master/src/System.Data.SqlClient/src/MatchingRefApiCompatBaseline.txt    We should do one of the following:  1. Expose the APIs publicly in the reference assembly  2. Make the APIs in the implementation internal  3. Add a comment to the baseline file why you cannot do either (1) or (2) and keep them baselined.    See PR https://github.com/dotnet/corefx/pull/27881/ for extra context.  
27971	area-System.Net	"Getting error ""System.InvalidOperationException: The stream was already consumed. It cannot be read again."" when using Proxy settings to make a request."	"I am making an Http request where the body is a stream. I am getting an error ""System.InvalidOperationException: The stream was already consumed. It cannot be read again."" as a response. The stream in the message body has a CanSeek value set to false. While going through the corefx code base I noticed the line of code here (https://github.com/dotnet/corefx/blob/53be85c2fe473fdea8c001e3d9fd81dd478b858e/src/System.Net.Http/src/System/Net/Http/StreamContent.cs#L88) that is responsible for the error response. I didnt encounter this issue in Net45. Why this change in behavior?"
27970	area-System.Net	Web Calls failing with error - An error occurred while sending the request.  System.Net.Http.CurlException: Failure when receiving data from the peer at System.Net.Http.CurlHandler.ThrowIfCURLEError(CURLcode error)	"Getting failures when making web call-  ```  System.Net.WebException: An error occurred while sending the request. Failure when receiving data from the peer ---> System.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.Net.Http.CurlException: Failure when receiving data from the peer     at System.Net.Http.CurlHandler.ThrowIfCURLEError(CURLcode error)     at System.Net.Http.CurlHandler.MultiAgent.FinishRequest(StrongToWeakReference`1 easyWrapper, CURLcode messageResult)     --- End of inner exception stack trace ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()     at System.Net.Http.HttpClient.<FinishSendAsyncUnbuffered>d__59.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()     at System.Net.HttpWebRequest.<SendRequest>d__194.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()     at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)     --- End of inner exception stack trace ---     at Company.Platform.Common.WebRequestConnector.<GetHttpResponseAsync>d__5.MoveNext() in /var/lib/jenkins/workspace/mycompany-product-connector-subsystem/code/subsystem/submodule/productsCommon/platform-common/Company.Platform.Common/WebCaller/WebRequestConnector.cs:line 97  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Company.Platform.Common.WebRequestConnector.<SendAsync>d__4.MoveNext() in /var/lib/jenkins/workspace/mycompany-product-connector-subsystem/code/subsystem/submodule/productsCommon/platform-common/Company.Platform.Common/WebCaller/WebRequestConnector.cs:line 81  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Company.Platform.Common.HttpConnectorFilter.<ApplyAsync>d__2.MoveNext() in /var/lib/jenkins/workspace/mycompany-product-connector-subsystem/code/subsystem/submodule/productsCommon/platform-common/Company.Platform.Common/WebCaller/Internal/HttpConnectorFilter.cs:line 19  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Company.Platform.Common.HttpFilter.<ApplyAsync>d__2.MoveNext() in /var/lib/jenkins/workspace/mycompany-product-connector-subsystem/code/subsystem/submodule/productsCommon/platform-common/Company.Platform.Common/WebCaller/Internal/HttpFilter.cs:line 21  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Company.Connector.products.subsystem.Common.WebCaller.ResponseDataExtractorHttpFilter`2.<ApplyAsync>d__2.MoveNext() in /var/lib/jenkins/workspace/mycompany-product-connector-subsystem/code/subsystem/Company.Connector.products.subsystem/Common/WebCaller/ResponseDataExtractorHttpFilter.cs:line 19  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Company.Platform.Common.HttpFilter.<ApplyAsync>d__2.MoveNext() in /var/lib/jenkins/workspace/mycompany-product-connector-subsystem/code/subsystem/submodule/productsCommon/platform-common/Company.Platform.Common/WebCaller/Internal/HttpFilter.cs:line 21  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Company.Connector.products.subsystem.Common.WebCaller.LoggingHttpFilter.<ApplyAsync>d__4.MoveNext() in /var/lib/jenkins/workspace/mycompany-product-connector-subsystem/code/subsystem/Company.Connector.products.subsystem/Common/WebCaller/LoggingHttpFilter.cs:line 39  ```  We are using following code -    ```csharp  public class WebRequestConnector : IHttpConnector  {   private readonly IMemoryStreamPool _memoryStreamPool;   private static byte[] EmptyPayload = new byte[0];     public WebRequestConnector(IMemoryStreamPool memoryStreamPool = null)   {    _memoryStreamPool = memoryStreamPool ?? HttpSettings.Default.MemoryPool;   }     private HttpWebRequest CreateBasicWebRequest(HttpRequest request)   {    var webRequest = WebRequest.Create(request.Uri) as HttpWebRequest;    if (webRequest == null)     return null;      webRequest.Headers = new WebHeaderCollection();    webRequest.Method = request.Method;    webRequest.ContentType = request.ContentType;    // webRequest.ProtocolVersion = new Version(request.ProtocolVersion);    // webRequest.ServicePoint.Expect100Continue = false;    // webRequest.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;    // webRequest.Timeout = (int)request?.TimeOut.Value.TotalMilliseconds;    foreach (var header in request.Headers)     webRequest.Headers[header.Key] = header.Value;    return webRequest;   }     public async Task<HttpResponse> SendAsync(HttpRequest request, CancellationToken cancellationToken = default(CancellationToken))   {    var webRequest = CreateBasicWebRequest(request);      if (request.SendRequestBody == true)    {     Stream compressionStream = null;     request.Payload = request.Payload ?? EmptyPayload;     using (var requestStream = await webRequest.GetRequestStreamAsync())     {      if (request.IsCompressionEnabled == false)       await requestStream.WriteAsync(request.Payload, 0, request.Payload.Length, cancellationToken);      else      {       webRequest.Headers[HeaderNames.ContentEncoding] = request.CompressionType.ToString().ToLower();       if (request.CompressionType == CompressionType.Gzip)        compressionStream = new GZipStream(requestStream, CompressionMode.Compress, false);       else        compressionStream = new DeflateStream(requestStream, CompressionMode.Compress, false);       using (compressionStream)       {        await compressionStream.WriteAsync(request.Payload, 0, request.Payload.Length, cancellationToken);       }      }     }    }      var timeOut = request.TimeOut.Value;    var cts = new CancellationTokenSource(timeOut);    var token = cts.Token;    var responseTask = GetHttpResponseAsync(request, webRequest, token);    await Task.WhenAny(responseTask, Task.Delay(timeOut, token));      if (!responseTask.IsCompleted)     throw new CommunicationException(""32"", ""A timeout exception occured"", HttpStatusCode.GatewayTimeout);      return await responseTask;   }     private async Task<HttpResponse> GetHttpResponseAsync(HttpRequest request, HttpWebRequest webRequest, CancellationToken cancellationToken = default(CancellationToken))   {    HttpWebResponse webResponse;    try    {       webResponse = await webRequest.GetResponseAsync() as HttpWebResponse;    }    catch (WebException webException)    {     webResponse = webException.Response as HttpWebResponse;     if (webResponse == null)     {      throw webException;     }    }      using (var responseStream = webResponse.GetResponseStream())    {     Stream streamToCopy = responseStream;     using (var memoryStream = await CreateStreamAsync())     {      var contentEncodingKey = webResponse.Headers.AllKeys.ToList().FirstOrDefault(h => h.ToLower().Equals(""content-encoding""));      if (!string.IsNullOrEmpty(contentEncodingKey))      {       Stream decompressStream = null;       if (webResponse.Headers[contentEncodingKey].Contains(""gzip""))        decompressStream = new GZipStream(responseStream, CompressionMode.Decompress, false);       else if (webResponse.Headers[contentEncodingKey].Contains(""deflate""))        decompressStream = new DeflateStream(responseStream, CompressionMode.Decompress, false);       using (decompressStream)       {        if (decompressStream != null)         await decompressStream.CopyToAsync(memoryStream);        else         await responseStream.CopyToAsync(memoryStream);       }      }      else       await responseStream.CopyToAsync(memoryStream);      var payload = memoryStream.ToArray();      var response = new HttpResponse(webResponse.StatusCode, payload, request.Settings);      WriteHeaders(webResponse?.Headers, response);      return response;     }    }   }     private void SetTimeOut(CancellationTokenSource cancellationTokenSource, TimeSpan? timeOut)   {    if (timeOut != null)    {     cancellationTokenSource.CancelAfter(timeOut.Value);    }   }     private async Task<MemoryStream> CreateStreamAsync()   {    if (_memoryStreamPool == null)     return new MemoryStream();    else return await _memoryStreamPool.GetMemoryStream();   }     private void WriteHeaders(WebHeaderCollection headers, HttpResponse response)   {    if (headers != null)    {     foreach (var header in headers.AllKeys)      response.Headers[header] = headers[header];    }   }  }  ```    Following are the server configuration -    OS - Linux 14.02  Framework - dotnet 2.0    Can someone please help me to fix this issue.  "
27969	area-Infrastructure	AD0001: CSharpAsAndNullCheckDiagnosticAnalyzer throws NRE	This is likely something brought by VS but I didn't investigate to be 100% sure.    ```  Analyzer 'Microsoft.CodeAnalysis.CSharp.UsePatternMatching.CSharpAsAndNullCheckDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException' with message 'Object reference not set to an instance of an object.'. System.IO.Pipes.Tests  1 Active Analyzer 'Microsoft.CodeAnalysis.CSharp.UsePatternMatching.CSharpAsAndNullCheckDiagnosticAnalyzer' threw the following exception:  'Exception occurred with following context:  Compilation: System.IO.Pipes.Tests  SyntaxTree: C:\s\github\pjanotti\corefx\src\System.IO.Pipes\tests\NamedPipeTests\NamedPipeTest.CurrentUserOnly.netcoreapp.Windows.cs  SyntaxNode: return; [ReturnStatementSyntax]@[3603..3610) (80,16)-(80,23)    System.NullReferenceException: Object reference not set to an instance of an object.     at Microsoft.CodeAnalysis.CSharp.UsePatternMatching.CSharpAsAndNullCheckDiagnosticAnalyzer.GetLeftmostCondition(SyntaxNode node)     at Microsoft.CodeAnalysis.CSharp.UsePatternMatching.CSharpAsAndNullCheckDiagnosticAnalyzer.SyntaxNodeAction(SyntaxNodeAnalysisContext syntaxContext)     at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.<>c__43`1.<ExecuteSyntaxNodeAction>b__43_0(ValueTuple`2 data)     at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)  ```  
27967	area-System.Threading	Use a cached canceled task in ValueTask	When an IValueTaskSource reports it completed due to cancellation by the time we AsTask it, we can use a cached canceled task if a) this is the netstandard build, or b) this is the netcoreapp build and it reported cancellation but threw an exception other than a cancellation exception.  We cache the non-generic one in a readonly static, since there's only one of them, but lazily cache the generic one.    Fixes https://github.com/dotnet/coreclr/issues/16886  cc: @kouvel 
27965	area-Serialization	Test failure: System.Runtime.Serialization.Xml.Canonicalization.Tests.XmlCanonicalizationTest/C14NWriterNegativeTests	Opened on behalf of @Sunny-pu  The test `System.Runtime.Serialization.Xml.Canonicalization.Tests.XmlCanonicalizationTest/C14NWriterNegativeTests` has failed.  System.TypeInitializationException : A type initializer threw an exception. To determine which type, inspect the InnerException's StackTrace property.\r     ---- System.InvalidOperationException : There is an error in XML document (2, 2).\r     -------- System.MissingMethodException : Method 'MemoryExtensions.AsSpan<char>(char[], int, int)' from assembly 'System.Memory' was not included in compilation, but was referenced in NameTable.ComputeHash32(char[], int, int). There may have been a missing assembly, or a dependency on a more recent Windows SDK release.          Stack Trace:             at System.Runtime.CompilerServices.ClassConstructorRunner.EnsureClassConstructorRun$catch$0() in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\CompilerServices\ClassConstructorRunner.cs:line 114        at System.Runtime.CompilerServices.ClassConstructorRunner.CheckStaticClassConstruction(Void* returnValue, StaticClassConstructionContext* pContext) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\CompilerServices\ClassConstructorRunner.cs:line 37        at System.Runtime.Serialization.Xml.Canonicalization.Tests.XmlCanonicalizationTest.CryptoCanonicalizationTest() in E:\A\_work\4\s\corefx\src\System.Runtime.Serialization.Xml\tests\Canonicalization\XmlCanonicalizationTest.cs:line 15732480        at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetV(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtrForDynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566        at System.Runtime.CompilerServices.ClassConstructorRunner.EnsureClassConstructorRun(StaticClassConstructionContext* pContext) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\CompilerServices\ClassConstructorRunner.cs:line 92        at System.Runtime.CompilerServices.ClassConstructorRunner.CheckStaticClassConstruction(Void* returnValue, StaticClassConstructionContext* pContext) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\CompilerServices\ClassConstructorRunner.cs:line 37        at System.Runtime.Serialization.Xml.Canonicalization.Tests.XmlCanonicalizationTest.C14NWriterNegativeTests() in E:\A\_work\4\s\corefx\src\System.Runtime.Serialization.Xml\tests\Canonicalization\XmlCanonicalizationTest.cs:line 15732480        at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetV(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtrForDynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566          ----- Inner Stack Trace -----        at System.Xml.Serialization.XmlSerializer.Deserialize$catch$1() in E:\A\_work\4\s\corefx\src\System.Private.Xml\src\System\Xml\Serialization\XmlSerializer.cs:line 653        at System.Xml.Serialization.XmlSerializer.Deserialize(Stream stream) in E:\A\_work\4\s\corefx\src\System.Private.Xml\src\System\Xml\Serialization\XmlSerializer.cs:line 539        at TestConfigHelper.LoadAllTests(String path) in E:\A\_work\4\s\corefx\src\System.Runtime.Serialization.Xml\tests\Canonicalization\TestConfigHelper.cs:line 31        at System.Runtime.Serialization.Xml.Canonicalization.Tests.XmlCanonicalizationTest..cctor() in E:\A\_work\4\s\corefx\src\System.Runtime.Serialization.Xml\tests\Canonicalization\XmlCanonicalizationTest.cs:line 18        at System.Runtime.CompilerServices.ClassConstructorRunner.EnsureClassConstructorRun(StaticClassConstructionContext* pContext) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\CompilerServices\ClassConstructorRunner.cs:line 91          ----- Inner Stack Trace -----        at System.Xml.NameTable.Add(Char[] key, Int32 start, Int32 len) in E:\A\_work\4\s\corefx\src\System.Private.Xml\src\System\Xml\NameTable.cs:line 103        at System.Xml.XmlTextReaderImpl.ParseElement() in E:\A\_work\4\s\corefx\src\System.Private.Xml\src\System\Xml\Core\XmlTextReaderImpl.cs:line 4417        at System.Xml.XmlTextReaderImpl.ParseDocumentContent() in E:\A\_work\4\s\corefx\src\System.Private.Xml\src\System\Xml\Core\XmlTextReaderImpl.cs:line 4037        at System.Xml.XmlTextReaderImpl.Read() in E:\A\_work\4\s\corefx\src\System.Private.Xml\src\System\Xml\Core\XmlTextReaderImpl.cs:line 1204        at System.Xml.XmlTextReader.Read() in E:\A\_work\4\s\corefx\src\System.Private.Xml\src\System\Xml\Core\XmlTextReader.cs:line 238        at System.Xml.XmlReader.MoveToContent() in E:\A\_work\4\s\corefx\src\System.Private.Xml\src\System\Xml\Core\XmlReader.cs:line 825        at Microsoft.Xml.Serialization.GeneratedAssembly.XmlSerializationReader1.Read6_testcases(String defaultNamespace) in C:\Users\DotNetTestRunner\AppData\Local\Temp\Ilc931199730\xunit.console.netcore.Sg\System.Xml.XmlSerializer.Generated.cs:line 185        at Microsoft.Xml.Serialization.GeneratedAssembly.TestCasesConfigSerializer.Deserialize($XmlSerializationReader reader) in C:\Users\DotNetTestRunner\AppData\Local\Temp\Ilc931199730\xunit.console.netcore.Sg\System.Xml.XmlSerializer.Generated.cs:line 533        at System.Xml.Serialization.XmlSerializer.Deserialize($XmlReader xmlReader, String encodingStyle, $XmlDeserializationEvents events) in E:\A\_work\4\s\corefx\src\System.Private.Xml\src\System\Xml\Serialization\XmlSerializer.cs:line 626      Build : Master - 20180312.01 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x86   - Release - Windows.10.Amd64.ClientRS3-x64   - Release  Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Filc~2F/build/20180312.01/workItem/Canonicalization.Tests/analysis/xunit/System.Runtime.Serialization.Xml.Canonicalization.Tests.XmlCanonicalizationTest~2FC14NWriterNegativeTests
27964	area-System.Net	Test failure: System.Net.Http.Functional.Tests.HttpClientHandlerTest/AllowAutoRedirect_True_PostToGetDoesNotSendTE(statusCode: 300)	Opened on behalf of @Sunny-pu  The test `System.Net.Http.Functional.Tests.HttpClientHandlerTest/AllowAutoRedirect_True_PostToGetDoesNotSendTE(statusCode: 300)` has failed.  System.NullReferenceException : Object reference not set to an instance of an object.          Stack Trace:             at System.Net.Http.Functional.Tests.HttpClientTestBase.CreateHttpClientHandler(Boolean useSocketsHttpHandler) in E:\A\_work\14\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientTestBase.cs:line 39        at System.Net.Http.Functional.Tests.HttpClientHandlerTest.AllowAutoRedirect_True_PostToGetDoesNotSendTE(Int32 statusCode)     --- End of stack trace from previous location where exception was thrown --- Build : Master - 20180312.01 (UWP F5 Tests) Failing configurations: - Windows.10.Arm64-arm   - Release - Windows.10.Amd64.ClientRS3-x64   - Release - Windows.10.Amd64.ClientRS3-x86   - Release  Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fuwp~2F/build/20180312.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandlerTest~2FAllowAutoRedirect_True_PostToGetDoesNotSendTE(statusCode:%20300)
27963	area-System.ComponentModel	"Test failure: System.ComponentModel.DataAnnotations.Tests.RangeAttributeTests/DotDecimalExtremaAndValuesInvariantParse(type: typeof(double), min: \""1.0\"", max: \""3.0\"", value: \""2.99999999999999\"")"	"Opened on behalf of @Sunny-pu  The test `System.ComponentModel.DataAnnotations.Tests.RangeAttributeTests/DotDecimalExtremaAndValuesInvariantParse(type: typeof(double), min: \""1.0\"", max: \""3.0\"", value: \""2.99999999999999\"")` has failed.  Assert.Throws() Failure\r     Expected: typeof(System.ArgumentException)\r     Actual:   (No exception was thrown)          Stack Trace:             at System.ComponentModel.DataAnnotations.Tests.RangeAttributeTests.DotDecimalExtremaAndValuesInvariantParse(Type type, String min, String max, String value) Build : Master - 20180312.01 (UWP F5 Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x64   - Release  Details:https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fuwp~2F/build/20180312.01/workItem/System.ComponentModel.Annotations.Tests/analysis/xunit/System.ComponentModel.DataAnnotations.Tests.RangeAttributeTests~2FDotDecimalExtremaAndValuesInvariantParse(type:%20typeof(double),%20min:%20%5C%221.0%5C%22,%20max:%20%5C%223.0%5C%22,%20value:%20%5C%222.99999999999999%5C%22)"
27962	area-System.Runtime	Mutating a read-only struct passed by-ref with S.R.CS.Unsafe	The value of the System.Runtime.CompilerServices.Unsafe class is in that it can do safe things that the compiler however cannot verify. For using Unsafe methods safely, it is essential that their semantics are fully understood. Currently, the methods are a bit under-documented.    One thing that seems apparently possible is mutating an instance of a read-only struct if that instance is passed by mutable reference:    ```csharp  public readonly struct Point  {      private readonly int x;      private readonly int y;        public static void Move(ref Point point, int dx, int dy)      {          Unsafe.AsRef(in point.x) += dx;          Unsafe.AsRef(in point.y) += dy;      }  }  ```    On a scale from 1 to 10, how evil is that?
27961	area-System.IO	"The test System.IO.Pipes.Tests.NamedPipeTest_CurrentUserOnly_Unix.Connection_UnderDifferentUsers_BehavesAsExpected failed with ""System.Diagnostics.RemoteExecutorTestBase+RemoteInvokeHandle+RemoteExecutionException : Remote process failed with an unhandled exception. """	Details: https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_centos7.1_release/337/testReport/System.IO.Pipes.Tests/NamedPipeTest_CurrentUserOnly_Unix/Connection_UnderDifferentUsers_BehavesAsExpected_serverPipeOptions__None__clientPipeOptions__CurrentUserOnly_/    ~~~  MESSAGE:  System.Diagnostics.RemoteExecutorTestBase+RemoteInvokeHandle+RemoteExecutionException : Remote process failed with an unhandled exception.  +++++++++++++++++++  STACK TRACE:  Child exception: Xunit.Sdk.ThrowsException: Assert.Throws() Failure Expected: typeof(System.UnauthorizedAccessException) Actual: (No exception was thrown) at System.IO.Pipes.Tests.NamedPipeTest_CurrentUserOnly_Unix.ConnectClientFromRemoteInvoker(String pipeName, String isCurrentUserOnly) in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_centos7.1_release/src/System.IO.Pipes/tests/NamedPipeTests/NamedPipeTest.CurrentUserOnly.netcoreapp.Unix.cs:line 57 Child process: System.IO.Pipes.Tests, Version=4.1.1.0, Culture=neutral, PublicKeyToken=9d77cc7ad39b68eb System.IO.Pipes.Tests.NamedPipeTest_CurrentUserOnly_Unix Int32 ConnectClientFromRemoteInvoker(System.String, System.String) Child arguments: /tmp/lriiefdf.zt4, true    ~~~
27960	area-System.IO	Add more tests for NamedPipe under different users on Windows	Since we added tests under different users with CurrentUserOnly in mind I am also adding tests that enforce the behavior that was already shipped when the option is not used. This is a complement to #27954.
27959	area-System.IO	Add a test to validate sensitivity on OSX	See #26797    cc: @danmosemsft, @pjanotti 
27958	area-System.Net	fix NTLM auth and add some manually enabled tests	Fixes #27922    Handling of authContext.IsCompleted was wrong, which would screw up the NTLM handling (but not Negotiate).    Add some manual HttpListener-based tests.  These can be enabled by changing the LocalHttpListenerTestsEnabled static to true.  For now at least, the HttpListeners keep running until tests complete, since it's not easy to determine when all the HttpListener-based tests have run.  This is rather hacky, so I'm open to other suggestions on how to enable this...    @stephentoub @davidsh @wfurt @Tratcher 
27955	area-System.IO	More FileSystem tests	- Fix #27244 validation  - Add more enumerable tests    Fixes #27244    cc: @danmosemsft, @Anipik, @pjanotti 
27954	area-System.IO	Add tests to cover CurrentUserOnly in Unix when users are actually different.	Leveraging sudo to run pipe client as a different user and enforcing expected behavior regarding `PipeOptions.CurrentUserOnly` in such scenario.
27953	area-System.Net	HttpClient: Bunch of UAP tests disabled with closed issue #20010	There are a bunch of HttpClient tests disabled on UAP with a reference to #20010.  However, this issue is closed.  We should either change the tests to be disabled with a better issue/explanation, or reenable the tests.      
27952	area-System.Runtime	"Segmentation fault with NLog on linux-arm, related to ""Recursive resource lookup bug""?"	"I had a dotnet core 2.0 app running fine on a Raspberry Pi 2 (running Raspbian) fine for many months, until the sd card gave up, so setup a new card with a fresh install of Raspbian & deployed an upgraded version (still targeting 2.0) with upgrades to the latest NuGet projects suddenly caused it to fail with the following error:    >Assert Failure  >Expression: [Recursive resource lookup bug]  >Description: Infinite recursion during resource lookup within System.Private.CoreLib.  This may be a bug in System.Private.CoreLib, or potentially in certain extensibility points such as assembly resolve events or CultureInfo names.  Resource name: ArgumentNull_Generic  >Stack Trace:  >   at System.SR.InternalGetResourceString(String key)  >   at System.SR.GetResourceString(String resourceKey, String defaultString)  >   at System.ArgumentNullException..ctor(String paramName)  >   at System.Runtime.Loader.AssemblyLoadContext.GetLoadContext(Assembly assembly)  >   at System.Reflection.Assembly.LoadFromResolveHandler(Object sender, ResolveEventArgs args)  >   at System.AppDomain.OnAssemblyResolveEvent(RuntimeAssembly assembly, String assemblyFullName)  >   at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks, IntPtr ptrLoadContextBinder)  >   at System.Reflection.RuntimeAssembly.InternalGetSatelliteAssembly(String name, CultureInfo culture, Version version, Boolean throwOnFileNotFound, StackCrawlMark& stackMark)     at System.Resources.ManifestBasedResourceGroveler.GetSatelliteAssembly(CultureInfo lookForCulture, StackCrawlMark& stackMark)     at System.Resources.ManifestBasedResourceGroveler.GrovelForResourceSet(CultureInfo culture, Dictionary`2 localResourceSets, Boolean tryParents, Boolean createIfNotExists, StackCrawlMark& stackMark)     at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo requestedCulture, Boolean createIfNotExists, Boolean tryParents, StackCrawlMark& stackMark)     at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo culture, Boolean createIfNotExists, Boolean tryParents)     at System.Resources.ResourceManager.GetString(String name, CultureInfo culture)     at System.SR.InternalGetResourceString(String key)     at System.SR.GetResourceString(String resourceKey, String defaultString)     at System.ArgumentNullException..ctor(String paramName)     at System.Runtime.Loader.AssemblyLoadContext.GetLoadContext(Assembly assembly)     at System.Reflection.Assembly.LoadFromResolveHandler(Object sender, ResolveEventArgs args)     at System.AppDomain.OnAssemblyResolveEvent(RuntimeAssembly assembly, String assemblyFullName)     at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks, IntPtr ptrLoadContextBinder)     at System.Reflection.RuntimeAssembly.InternalGetSatelliteAssembly(String name, CultureInfo culture, Version version, Boolean throwOnFileNotFound, StackCrawlMark& stackMark)     at System.Resources.ManifestBasedResourceGroveler.GetSatelliteAssembly(CultureInfo lookForCulture, StackCrawlMark& stackMark)     at System.Resources.ManifestBasedResourceGroveler.GrovelForResourceSet(CultureInfo culture, Dictionary`2 localResourceSets, Boolean tryParents, Boolean createIfNotExists, StackCrawlMark& stackMark)     at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo requestedCulture, Boolean createIfNotExists, Boolean tryParents, StackCrawlMark& stackMark)     at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo culture, Boolean createIfNotExists, Boolean tryParents)     at System.Resources.ResourceManager.GetString(String name, CultureInfo culture)     at System.SR.InternalGetResourceString(String key)     at System.SR.GetResourceString(String resourceKey, String defaultString)     at System.SR.get_Arg_ArgumentException()     at PowerPi.Program.Main(String[] args) in C:\Users\grant\source\repos\PowerPi\PowerPi\Program.cs:line 22  Segmentation fault    This sounded rather similar to https://github.com/dotnet/corefx/issues/23608 (just one of many though), and using it's advice I created a new ArgumetnException() in my main to trigger it faster (as seen above in stacktrace).    Whittling things down into a standalone repro... I build a new stand alone project, added a NuGet reference to NLog.Extensions.Logging, added a NLog.config to the project which always copies to output directory, with the following contents:    ```<?xml version=""1.0"" encoding=""utf-8"" ?>  <nlog xmlns=""http://www.nlog-project.org/schemas/NLog.xsd""        xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">    <targets>      <target name=""console"" xsi:type=""Console"" />    </targets>      <rules>      <logger name=""*"" minlevel=""Info"" writeTo=""console"" />    </rules>  </nlog>  ```    Then updated the Program.cs file to be the following:    ```using NLog;  using System;    namespace foo1  {      class Program      {          static Logger logger = LogManager.GetLogger(""GoingToCrash"");          static void Main(string[] args)          {              logger.Info(""Hello World!"");              new ArgumentException();              logger.Info(""Boom?"");          }      }  }  ```    When I build/publish this demo app with:    dotnet publish --runtime linux-arm --configuration Release    To my Pi2... it fails with the above stacktrace. If I follow the advice of https://github.com/dotnet/corefx/issues/26292 and add the bolded text to the rather simple csproj:    ```<Project Sdk=""Microsoft.NET.Sdk"">      <PropertyGroup>      <OutputType>Exe</OutputType>      <TargetFramework>netcoreapp2.0</TargetFramework>    </PropertyGroup>  ***  <PropertyGroup>      <RuntimeFrameworkVersion>2.0.5</RuntimeFrameworkVersion>    </PropertyGroup>***      <ItemGroup>      <PackageReference Include=""NLog.Extensions.Logging"" Version=""1.0.0-rtm-rc7"" />    </ItemGroup>      <ItemGroup>      <None Update=""NLog.config"">        <CopyToOutputDirectory>Always</CopyToOutputDirectory>      </None>    </ItemGroup>    </Project>  ```    There is a slight improvement... it still suffers from a segmentation fault, only you don't see the stack trace.    Attached is the rather simplistic repro, which of course works fine on my Windows 10 machine, but fails on Raspbian GNU/Linux 9 (stretch).    Build environment details:  ```C:\Users\grant\source\repos\foo1>dotnet --info  .NET Command Line Tools (2.1.100)    Product Information:   Version:            2.1.100   Commit SHA-1 hash:  b9e74c6520    Runtime Environment:   OS Name:     Windows   OS Version:  10.0.16299   OS Platform: Windows   RID:         win10-x64   Base Path:   C:\Program Files\dotnet\sdk\2.1.100\    Microsoft .NET Core Shared Framework Host      Version  : 2.0.5    Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54  ```    [coreclr-segfault-with-nlog-on-linux-arm.zip](https://github.com/dotnet/corefx/files/1800626/coreclr-segfault-with-nlog-on-linux-arm.zip)  "
27951	area-System.Net	Segmentation fault on dotnet [name-of-app].dll on Debian	@ChristianHaase commented on [Sun Feb 11 2018](https://github.com/dotnet/core/issues/1266)  Getting segmentation fault when running the application. Only on HTTP client request sending to external API. The app start fine and I can navigate fine, but whenever I try to login _(calling external API)_, I'm getting the segfault. Same goes for creating a new user, when calling the external API from my MVC backend.    Running the app locally, everything works as expected, and I can login fine, as well as creating a new user.    I have a try/catch around the enitre method, but I'm never hitting the catch. The segfault happens instead of the catch.    # Technical details  dotnet --info        .NET Command Line Tools (1.0.4)            Product Information        Version: 1.0.4        Commit SHA-1 hash: afefd        Runtime Environment        OS Name: debian        OS Version: 9        OS Platform: Linux        RID: debian.8-x64        Base Path: /opt/dotnet/sdk/1..4    Is there any fancy way for me te debug, or get some kind of log about what's happenening?    ---  @Petermarcu commented on [Tue Feb 20 2018](https://github.com/dotnet/core/issues/1266#issuecomment-367186826)  @leecow is Debian 9 supported by 1.0?  ---  @leecow commented on [Wed Feb 21 2018](https://github.com/dotnet/core/issues/1266#issuecomment-367401765)  No, Debian 9 is 2.0. https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md.   ---  @ChristianHaase commented on [Wed Feb 21 2018](https://github.com/dotnet/core/issues/1266#issuecomment-367422860)  I suppose that would explain some issues, but the application runs fine on the server. It's only remote HTTP request that causes the segfault?  ---  @wfurt commented on [Wed Feb 21 2018](https://github.com/dotnet/core/issues/1266#issuecomment-367425295)  What version of curl and openssl do you have? This may be same as #24891 and #24552  You can try container with supported OS. That should get you around linkage problems.   ---  @ChristianHaase commented on [Wed Feb 21 2018](https://github.com/dotnet/core/issues/1266#issuecomment-367429887)  @wfurt     OpenSSL version:  `OpenSSL 1.10f 25 May 2017`    curl version:  `curl 7.52.1 (x86_64-pc-linux-gnu) libcurl/7.52.1 OpenSSL/1.0.2l zlib/1.2.8 libidn2/0.16 libpsl/0.17.0 (+libidn2/0.16) libssh2/1.7.0 nghttp2/1.18.1 librtmp/2.3`    I don't know what issues you are referring to (#24891 and #24552)?  ---  @wfurt commented on [Wed Feb 21 2018](https://github.com/dotnet/core/issues/1266#issuecomment-367433750)  oh, the link did not work ;(   https://github.com/dotnet/corefx/issues/24552 and https://github.com/dotnet/corefx/issues/24891   ---  @ChristianHaase commented on [Wed Feb 21 2018](https://github.com/dotnet/core/issues/1266#issuecomment-367448529)  I'm trying to convert my project to .NET core 2.0, and updating the installed version on my server. I will update my progress here once done. Thanks for the inputs.  ---  @ChristianHaase commented on [Sat Feb 24 2018](https://github.com/dotnet/core/issues/1266#issuecomment-368251675)  I updated the project to 2.0, but it's still a problem. I'll take a look at the links you provided @wfurt   ---  @ChristianHaase commented on [Sat Feb 24 2018](https://github.com/dotnet/core/issues/1266#issuecomment-368252318)  I looked at the installed version of libcurl, and this is what I could find:   ![libcurl](https://user-images.githubusercontent.com/7237574/36634093-b2b8545c-199f-11e8-93b9-1b161627d681.PNG)    Anything I can do here?    ---  @Petermarcu commented on [Sun Mar 11 2018](https://github.com/dotnet/core/issues/1266#issuecomment-372127397)  I'm going to move this to the corefx repo where it will be tracked better.  
27949	area-System.Net	Option to have more control when resolving endpoint IP address in SocketsHttpHandler	I think it may be useful in some cases to have more control over endpoint address resolving.  This would be new optional feature in SocketsHttpHandler implementation. Here is my initial idea.    ## Proposed API    ```  public sealed class SocketsHttpHandler : HttpMessageHandler  {     //existing members     //...       //Proposed API     public Func<HttpRequestMessage, string, int, CancellationToken, ValueTask<IPEndPoint>> ResolveEndpointAsync {get;set;}  }  ```  where delegate inputs are:  - HttpRequestMessage -> request details  - string -> request.RequestUri.IdnHost  - int -> request.RequestUri.Port  - CancellationToken    and delegate output is:  - ValueTask\<IPEndPoint\> -> representing resolved IP address based on given input    Similar Func<> pattern is used in WinHttpHandler.ServerCertificateValidationCallback    ## Example usage    ```  socketsHttpHandlerInstance.ResolveEndpointAsync = async delegate (HttpRequestMessage request, string host, int port, CancellationToken cancellationToken)  {   var addresses = await Dns.GetHostAddressesAsync(host).ConfigureAwait(false);   //resolve hostname to IPv6   var address = addresses.Where(addr => addr.AddressFamily == AddressFamily.InterNetworkV6).FirstOrDefault();   return address != null ? new IPEndPoint(address, port) : null;  };    ```  ## Main goals  - feature is optional and should not change current behaviour in any way  - if feature is not used it should not affect existing performance    ## Possible use cases  - one could implement ResolveEndpointAsync to use Google DNS or other DNS server for resolving addresses, without changing system settings  - one could implement ResolveEndpointAsync to use round-robin for resolving IP Addresses  - better control over IPv4/IPv6 resolving  - could be used in functional testing to resolve test IP addresses    Prototype implementation: https://github.com/AppBeat/corefx  Very early PR: https://github.com/dotnet/corefx/pull/27937    Kind regards,  Vladimir
27948	area-System.Memory	Deriving from OwnedMemory	"```csharp  public sealed class SafeMemoryHandle : SafeHandle  {      public static SafeMemoryHandle Alloc(UIntPtr size) => VirtualAlloc(IntPtr.Zero, size, 0x3000, 0x04);      private SafeMemoryHandle() : base(IntPtr.Zero, true) { }      public override bool IsInvalid => handle == IntPtr.Zero;      protected override bool ReleaseHandle() => VirtualFree(handle, UIntPtr.Zero, 0x8000) != 0;      [DllImport(""Kernel32.dll"")]      private static extern SafeMemoryHandle VirtualAlloc(IntPtr address, UIntPtr size, uint allocationType, uint protect);      [DllImport(""Kernel32.dll"")]      private static extern int VirtualFree(IntPtr address, UIntPtr size, uint freeType);  }  ```    A SafeHandle like this has [a number of features](https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.safehandle(v=vs.110).aspx#Does):    * it has magic P/Invoke support to avoid leaks,  * it is thread-safe,  * it does reference counting, and  * disposing it doesn't release the handle until the reference count reaches 0.    Overall, very similar to OwnedMemory.    I would assume that a NativeOwnedMemory implementation should do most (all?) of this as well.    The question is: Is it envisioned that there will be implementations of OwnedMemory that are not thread-safe, not reference counting, or not delaying release when they are disposed before the reference count reaches 0? If not, shouldn't OwnedMemory provide the implementations for most of its methods and only leave allocation and release to derived classes (like SafeHandle)?    Should NativeOwnedMemory wrap a SafeHandle to get those leak preventing features or is it fine to wrap an IntPtr? Should (Native)OwnedMemory  derive from CriticalFinalizerObject?  "
27947	area-System.Memory	Does ReadOnlySequence open write access to ReadOnlyMemory?	As I see when `ReadOnlySequence` created with `ReadOnlyMemory`, it extract internal object of `ReadOnlyMemory` (`array`, `string` or `OwnedMemory`) and give access to that object throw GetPosition method.    So `ReadOnlySequence` opens access to `array` or `OwnedMemory`. But `array` or `OwnedMemory` are not read only objects and they opens write access to `ReadOnlyMemory`.  So any code can get write access to `ReadOnlyMemory` (over `array` or `OwnedMemory`) in safe code by using `ReadOnlySequence`.    Am I right? And **is it correct API design?**    Also I does not understand benefits of using `ReadOnlySequence` that contains only one segment. If your use only one segment you can use `ReadOnlyMemory` or `string` or `OwnedMemory` directly.    So I think that all one segment optimizations are usefulness because they drawback performance for `ReadOnlySequence`  with few segments.
27945	area-System.IO	Add more alternate data stream tests	cc: @danmosemsft, @Anipik, @pjanotti 
27941	area-System.Net	 Promptly close SocketsHttpHandler pooled connection when receiving EOF	Fixes https://github.com/dotnet/corefx/issues/27908  cc: @geoffkizer, @davidsh
27939	area-Infrastructure	Bootstrapping & lldb package name	@janvorli @weshaggard 
27938	area-System.IO	PipeCompletionCallbacks shouldn't use ArrayPool for callbacks	We should make a few optimizations here  - There's hardly more than one callback so we can use the track that tasks use for continuations (store it as an object and then detect the case where we have more than one and allocate an array).  - We don't need an the array pool here, we should just store state on the pipe itself and reset that state when Reset is called.    /cc @pakrym 
27937	area-System.Net	SocketsHttpHandler, support for custom endpoint address resolving	Hello.    I created my first commit to corefx fork / System.Net.Http project with small improvement to SocketsHttpHandler where user can now have more control over endpoint address resolving.    For example user can prefer IPv6 resolving over IPv4 version or even write custom logic which completely overrides system DNS resolve.    This feature is optional and should be backwards compatible.    Please check if this feature could be generally useful :)    @stephentoub @geoffkizer @karelz
27936	area-System.Net	Broken libcurl dependency on openSUSE Tumbleweed	@bwalkenhorst commented on [Thu Mar 08 2018](https://github.com/dotnet/core/issues/1327)  # Broken libcurl dependency on openSUSE Tumbleweed    Trying to install dotnet core on openSUSE Tumbleweed, following the instructions found here, I get the following error message:  ```  [20:06|root@schwarzgeraet:~]# zypper in dotnet-sdk-2.0.0  Loading repository data...  Reading installed packages...  Resolving package dependencies...    Problem: nothing provides libcurl needed by dotnet-runtime-2.0.0-2.0.0-1.x86_64   Solution 1: do not install dotnet-sdk-2.0.0-2.0.0-1.x86_64   Solution 2: break dotnet-runtime-2.0.0-2.0.0-1.x86_64 by ignoring some of its dependencies  ```    When I ask the package manager about it, I get the following reply:  ```  [20:06|root@schwarzgeraet:~]# zypper se libcurl  Loading repository data...  Reading installed packages...    S  | Name                | Summary                                | Type     ---+---------------------+----------------------------------------+--------     | libcurl-devel       | A Tool for Transferring Data from URLs | package     | libcurl-devel-32bit | A Tool for Transferring Data from URLs | package  i+ | libcurl4            | Version 4 of cURL shared library       | package  i  | libcurl4-32bit      | Version 4 of cURL shared library       | package  ```    So there is a libcurl, it is just called libcurl4. I am not certain who I should blame here. But I hope that updating the dependencies on dotnet will be less work than getting the openSUSE developers to rename the package.    ---  @omajid commented on [Thu Mar 08 2018](https://github.com/dotnet/core/issues/1327#issuecomment-371599203)  Related to https://github.com/dotnet/core-setup/issues/3791  ---  @bwalkenhorst commented on [Thu Mar 08 2018](https://github.com/dotnet/core/issues/1327#issuecomment-371609046)  FWIW: I tried `Solution 2: break dotnet-runtime-2.0.0-2.0.0-1.x86_64 by ignoring some of its dependencies`    I wasn't all that surprised, but it seems to have worked. MonoDevelop still isn't convinced .Net Core 2.0 is actually installed, but when I try to build and run a simple Hello-World project from the command line, it works  
27935	area-System.Console	Don't dup stdin & stderr as this can break some std io redicection code	_From @TheLastRar on March 10, 2018 13:8_  Consider a program that does the follow;    Create pipes and dup2 the write fd onto stdin, stderr,   Have a thread continually read the pipes until EOF is reached (at which point the thread will terminate).  Use coreclr.  ...  Restore the original stdin, stderr,  Close the write fd of pipes,  Wait for the pipe reader thread to terminate.    As coreclr dups the fd for stdin & stderr, there is still a write fd for the pipe, meaning the read thread will never receive an EOF and the program to hang at the last step.  _Copied from original issue: dotnet/coreclr#16880_
27934	area-System.Net	Change CurlHandler to only request HTTP/2 over TLS	https://github.com/dotnet/corefx/issues/27912  cc: @geoffkizer 
27933	area-System.Runtime	System.Runtime.Caching using app/web.config problems	"Hi,  I'm currently trying to port a few things to .netstandard2.0 using `System.Runtime.Caching` and I'm running into problems using the ""old"" configuration system.    To reproduce the problems, I created a blank new netcoreapp2.0 console app and added     ```  <PackageReference Include=""System.Configuration.ConfigurationManager"" Version=""4.5.0-preview1-26216-02"" />  <PackageReference Include=""System.Runtime.Caching"" Version=""4.5.0-preview1-26216-02"" />  ```    I'm using   ```  dotnet --info  .NET-Befehlszeilentools (2.1.4)    Product Information:   Version:            2.1.4   Commit SHA-1 hash:  5e8add2190    Runtime Environment:   OS Name:     Windows   OS Version:  10.0.16299   OS Platform: Windows   RID:         win10-x64   Base Path:   C:\Program Files\dotnet\sdk\2.1.4\    Microsoft .NET Core Shared Framework Host      Version  : 2.0.5    Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54  ```  ---    1. **Using app.config from [examples in documentation](https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/system-runtime-caching-element-cache-settings#example)**    *Minor thing:*  According to the docs, the section has the attribute `physicalMemoryPercentage`, but it is now `physicalMemoryLimitPercentage`. Is this an error in the documentation or copy&paste issue? ;)    ```  <?xml version=""1.0"" encoding=""utf-8"" ?>  <configuration>    <system.runtime.caching>      <memoryCache>        <namedCaches>          <add name=""default""               cacheMemoryLimitMegabytes=""69""               physicalMemoryLimitPercentage=""42""               pollingInterval=""00:10:00"" />        </namedCaches>      </memoryCache>    </system.runtime.caching>  </configuration>  ```    Running   ```  static void Main(string[] args)  {      var cache = MemoryCache.Default;  ```    Will throw an exception  ```  System.Configuration.ConfigurationErrorsException: 'Configuration system failed to initialize'  ```    because the `system.runtime.caching` section is unknown.    2. **Manually adding the missing section group + section**  ```  <?xml version=""1.0"" encoding=""utf-8"" ?>  <configuration>    <configSections>      <sectionGroup name=""system.runtime.caching"" type=""System.Runtime.Caching.Configuration.CachingSectionGroup, System.Runtime.Caching"">              <section name=""memoryCache"" type=""System.Runtime.Caching.Configuration.MemoryCacheSection, System.Runtime.Caching"" />      </sectionGroup>    </configSections>    <system.runtime.caching>      <memoryCache>        <namedCaches>          <add name=""default""               cacheMemoryLimitMegabytes=""69""               physicalMemoryLimitPercentage=""42""               pollingInterval=""00:10:00"" />        </namedCaches>      </memoryCache>    </system.runtime.caching>  </configuration>  ```    Now, the code works, **but** the settings for ""default"" are not used by `MemoryCache.Default`. Polling interval for example will be the default of 2 minutes.    ---    Using a named cache and loading it via `var cache = new MemoryCache(""notdefault"");` actually works and uses the custom settings (only if you add the section group/section manually ofc).    Is this the intended behavior?    Thanks"
27931	area-System.IO	Start adding alternate data stream tests	Also fill out ExampleTests.    We couldn't do this before without `\\?\` due to our path validation.    cc: @danmosemsft, @pjanotti, @Anipik 
27930	area-System.Linq	ParallelEnumerable.GroupJoin/Join output ordering (fixes #1155)	The current implementations of ParallelEnumerable.GroupJoin and Join do not preserve the order of right(inner) elements.    The common implementation, `HashJoinQueryOperatorEnumerator` currently implements a `QueryOperatorEnumerator` with an order key of the same type as the left(outer) query, thus Join operations are unable to take into account the order of the right elements in their output. It also completely ignores the right order key when building a `HashLookup` of the right elements, so order is not preserved for GroupJoins.    The proposed changes attempt to leave the cases where the right query is unordered with a relatively similar performance profile while adding ordering (when appropriate) in the cases where the right query is ordered (fixes #1155).    Join with an unordered left and ordered right results in unordered output and right ordering is completely ignored.  Join with an ordered left and ordered right results in ordered output ordered first by left order key then by right order key. If collisions exist in the ordering of left elements, then the output will likely not be intuitive, as results with the same left element are not guaranteed (and in fact will probably not be) grouped together. (tests **not** added to confirm the ordering of elements with left collisions...)    GroupJoin with an unordered left and ordered right also still produce unordered output. However, the enumerables of right elements are ordered.  GroupJoin with an ordered left and ordered right will produce results ordered first by the left element order key, then by the least right element order key. An empty grouping of right elements is treated as less than any non-empty grouping. (tests added to confirm the ordering of elements with left collisions)  
27929	area-System.Runtime	Add test for logging for Exception passed to Environment.FailFast()	https://github.com/dotnet/coreclr/pull/16622 added logging for Exception object passed to ```Environment.FailFast```. This should be test-protected, as per comments in https://github.com/dotnet/coreclr/issues/15203.
27926	area-Infrastructure	Try repro crash from #27737	Related to #27737 (Update BuildToold/CoreCLR PR)
27925	area-Infrastructure	Updates for ILLink integration.	1. Update ILLink.Tasks version.  2. Embed ILLinkTrim.xml as an assembly resource. The linker knows     how to process embedded xml files.     This will ensure that the types, methods, and fields     specified in ILLinkTrim.xml won't be removed when customers run     ILLink on shipped assemblies.  3. Add --skip-unresolved true so that the linker is tolerant     to missing assembly references.  4. Remove the option that hard-coded netstandard by name.  5. ClearInitLocals is now exposed as a parameter of ILLInk task.     Use it instead of specifying the plugin option in ILLinkArgs.    I verified that the set of things removed by the linker didn't change.
27924	area-Infrastructure	Fix shim APICompat checks to fail build	Update baseline files for netcoreapp and uap.    Compat issues complaining about class vs delegate and  class vs struct are because of a bug in APICompat tool  where the implementation is picking the wrong core assembly.  It is picking System.Runtime instead of System.Private.CoreLib,  there isn't any straight forward way to fix so baselining.    fixes https://github.com/dotnet/corefx/issues/26361    cc @danmosemsft @joperezr 
27923	area-System.IO	Test changes for System.IO.FileSystem	- Add new tests for more coverage on enumeration  - Re-enable tests    cc: @Anipik, @danmosemsft, @pjanotti 
27922	area-System.Net	SocketsHttpHandler NTLM doesn't work	"Version 2.1.0-preview2-26308-01    Negotiate works, NTLM doesn't. It doesn't even make a second request, it returns the first 401.    Repro:  ```          public static void Main(string[] args)          {              var serverTask = RunServer();              Console.WriteLine(""Press any key to send request."");              Console.ReadKey();              var clientTask = RunClient();              Task.WaitAll(serverTask, clientTask);          }            private static async Task RunServer()          {              var listener = new HttpListener();              listener.Prefixes.Add(""http://localhost:8080/"");              listener.AuthenticationSchemes = System.Net.AuthenticationSchemes.Ntlm;              listener.Start();              var context = await listener.GetContextAsync();              context.Response.Close();          }            private static async Task RunClient()          {              Environment.SetEnvironmentVariable(""DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER"", ""true"");              var handler = new HttpClientHandler();              handler.UseDefaultCredentials = true;              var client = new HttpClient(handler);              var response  = await client.GetAsync(""http://localhost:8080/"");              Console.WriteLine(response);          }  ```    Expected result: 200 OK  ```  Press any key to send request.   StatusCode: 200, ReasonPhrase: 'OK', Version: 1.1, Content: System.Net.Http.NoWriteNoSeekStreamContent, Headers:  {    Date: Fri, 09 Mar 2018 23:49:25 GMT    Transfer-Encoding: chunked    Server: Microsoft-HTTPAPI/2.0  }  ```  Actual: 401 Unauthorized  ```  Press any key to send request.   StatusCode: 401, ReasonPhrase: 'Unauthorized', Version: 1.1, Content: System.Net.Http.HttpConnection+HttpConnectionResponseContent, Headers:  {    Server: Microsoft-HTTPAPI/2.0    WWW-Authenticate: NTLM [Token]    Date: Fri, 09 Mar 2018 23:48:29 GMT    Content-Length: 0  }  ```"
27919	area-Infrastructure	Update CoreClr, CoreFx, Standard to stable, servicing-26403-03, servicing-26419-02, respectively (release/2.0.0)	
27917	area-System.Memory	Move MutableDecimal from System.Memory to Common	For context - https://github.com/dotnet/corefx/pull/25078#discussion_r150349963    cc @AtsushiKan, @ericstj 
27915	area-Infrastructure	Update Buildtools in 1.0 branch (DO NOT MERGE)	CC @dagood
27914	area-Infrastructure	Update Buildtools in 1.1 branch (DO NOT MERGE)	CC @dagood
27912	area-System.Net	HttpClient POST with content is broken on High-Sierra	If you make a POST request with content in the body on High-Sierra to a KestrelHttpServer endpoint the request will fail because the default HttpRequest version has changed to 2 and High-Sierra's libcurl handler will try to upgrade to 2 instead of falling back.    Run the client and server in the repro project to reproduce the issue  https://github.com/BrennanConroy/ReproProject
27911	area-System.Runtime	Proposals for Intel HW intrinsic API changes for vNext	Writing real code with already implemented HW intrinsics provides very good tests for their usability and quality of design. We start to create implementations which immediately provide direct test of quality of available API surface. I would like to propose to discuss issues and possible change proposals using this issue as an umbrella.  
27910	area-System.Net	*NOT TO MERGE* Just to force all tests w/ SocketsHttpHandler	Just in case something else depends on Http handler, provides a baseline that @caesar1995 can use for #27821  
27909	area-Infrastructure	Add gdb and lldb to test machine dockerfiles and enable dump collection	We want to run gdb and lldb on dumps created by tests. The experiments in https://github.com/dotnet/corefx/pull/27899#issuecomment-371901222 show that on some machiens (eg Fedora, OpenSuse) apparently dumps are not enabled. On others (eg some Ubuntu and Debian) dumps are enabled but gdb is not present. We also want lldb so we can do more operations on the dumps.    So we need to add install of gdb and lldb to all dockerfiles, and enable dumps with ulimit on all of them.
27908	area-System.Net	SocketsHttpHandler should process idle disconnect from server promptly	For idle connections, we have a _readAheadTask we use to determine if the server sent an EOF to close the connection (or other unexpected data).  We don't check this until we either pull the connection out of the pool, or timeout the connection.  So often there will be a large delay (10s of seconds) between when we receive the EOF and when we actually close the connection on our side.    RFC 7230 says the following:     ```     To avoid the TCP reset problem, servers typically close a connection     in stages.  First, the server performs a half-close by closing only     the write side of the read/write connection.  The server then     continues to read from the connection until it receives a     corresponding close by the client, or until the server is reasonably     certain that its own TCP stack has received the client's     acknowledgement of the packet(s) containing the server's last     response.  Finally, the server fully closes the connection.  ```    https://tools.ietf.org/html/rfc7230#section-6.6    In the interest of being a well-behaved client and trying to make it easier for servers to adhere to the above behavior, we should close the connection promptly when we receive a disconnect from the server.    (I hit this originally because I was trying to implement the above logic in LoopbackServer for tests, but it cause large delays on a bunch of tests because the client didn't promptly close its connection.)
27907	area-Infrastructure	System.Net.Http not the same types for .Net461 when using System.Threading.Tasks.Extensions	"Visual Studio: 2017  Project: .Net4.6.1  Package:   ```<package id=""System.Threading.Tasks.Extensions"" version=""4.4.0"" targetFramework=""net461"" />```    ### Problem  .NET 4.6.1 doesn't see the System.Net.Http as the same types. I get type exceptions or missing method exceptions when trying to call code from System.Net.Http namespace.     It seems to fail in many uses of the System.Net.Http namespace.  Once particular example, I have an IHttpClient interface and an HttpClientWrapper class to wrap HttpClient and allow for unit test. My unit tests don't work.    ### Workaround    The csproj is pointing at the Netstandard2.0 version of the dll, which must have some bug that makes the System.Net stuff look like they are different types.    ```      <Reference Include=""System.Threading.Tasks.Extensions, Version=4.1.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL"">        <HintPath>..\..\packages\System.Threading.Tasks.Extensions.4.4.0\lib\netstandard2.0\System.Threading.Tasks.Extensions.dll</HintPath>      </Reference>  ```    Manually edit the project. Change it to point to the portable-net45+win8+wp8+wpa81.    ```      <Reference Include=""System.Threading.Tasks.Extensions, Version=4.1.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL"">        <HintPath>..\..\packages\System.Threading.Tasks.Extensions.4.4.0\lib\portable-net45+win8+wp8+wpa81\System.Threading.Tasks.Extensions.dll</HintPath>      </Reference>  ```    ### Expectation  I shouldn't have to manually edit my project every time I update System.Threading.Tasks.Extensions in a NuGet package.    I expect referenced dlls to work with .Net461.     ### Issues  1. Why does netstandard2.0 not work? Why does it thinks the types are different? I have no idea what the cause of this is or how long it would take to fix.  2. Why does the NuGet package install choose netstandard2.0 over portable-net45+win8+wp8+wpa81 when dlls in the netstandard2.0 don't work and dlls int the portable-net45+win8+wp8+wpa81 do work? My guess is precedence or preference. NuGet is coded to prefer netstandard2.0 dlls over dlls in portable-net45+win8+wp8+wpa81. Is that precedence correct? Probably.  3. Since System.Threading.Tasks.Extensions dlls in the netstandard2.0 folder of the NuGet package do not work, why does the NuGet package not have a net45, net461, or such folder that will take precedence of netstandard2.0? Adding a folder for Net461 with dlls that work takes a few minutes.     So until the first issue is fixed, can we get an updated NuGet package that properly points net461 projects to working dll?    "
27906	area-System.Net	GetResponseAsync_ServerNameNotInDns_ThrowsWebException() test fails with SocketsHttpHandler 	Expecting `WebExceptionStatus.NameResolutionFailure` get `UnknownError` instead.    Call stack for WinHttpHandler:  ```    +  ex {System.Net.WebException: An error occurred while sending the request. The server name or address could not be resolved ---> System.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.Net.Http.WinHttpException: The server name or address could not be resolved     at System.Environment.get_StackTrace() in D:\corefx\src\System.Runtime.Extensions\src\System\Environment.cs:line 146     at System.Runtime.ExceptionServices.ExceptionStackTrace.AddCurrentStack(Exception exception) in D:\corefx\src\Common\src\System\Runtime\ExceptionServices\ExceptionStackTrace.cs:line 23     at System.Net.Http.WinHttpException.CreateExceptionUsingError(Int32 error) in D:\corefx\src\Common\src\System\Net\Http\WinHttpException.cs:line 56     at System.Net.Http.WinHttpRequestCallback.OnRequestError(WinHttpRequestState state, WINHTTP_ASYNC_RESULT asyncResult) in D:\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestCallback.cs:line 324     at System.Net.Http.WinHttpRequestCallback.RequestCallback(IntPtr handle, WinHttpRequestState state, UInt32 internetStatus, IntPtr statusInformation, UInt32 statusInformationLength) in D:\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestCallback.cs:line 104     at System.Net.Http.WinHttpRequestCallback.WinHttpCallback(IntPtr handle, IntPtr context, UInt32 internetStatus, IntPtr statusInformation, UInt32 statusInformationLength) in D:\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestCallback.cs:line 47  --- End of stack trace from AddCurrentStack ---     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in D:\corefx\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62     at System.Net.Http.WinHttpHandler.StartRequest(WinHttpRequestState state) in D:\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 856     --- End of inner exception stack trace ---     at System.Net.Http.DiagnosticsHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\corefx\src\System.Net.Http\src\System\Net\Http\DiagnosticsHandler.cs:line 98     at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in D:\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 501     at System.Net.HttpWebRequest.SendRequest() in D:\corefx\src\System.Net.Requests\src\System\Net\HttpWebRequest.cs:line 1209     at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult) in D:\corefx\src\System.Net.Requests\src\System\Net\HttpWebRequest.cs:line 1259     --- End of inner exception stack trace ---     at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult) in D:\corefx\src\System.Net.Requests\src\System\Net\HttpWebRequest.cs:line 1263     at System.Net.WebRequest.<>c.<GetResponseAsync>b__68_2(IAsyncResult iar) in D:\corefx\src\System.Net.Requests\src\System\Net\WebRequest.cs:line 550     at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization) in E:\A\_work\1045\s\src\mscorlib\src\System\Threading\Tasks\FutureFactory.cs:line 529  --- End of stack trace from previous location where exception was thrown ---     at Xunit.Assert.RecordExceptionAsync(Func`1 testCode) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\Record.cs:line 76} System.Net.WebException          ex.Status NameResolutionFailure System.Net.WebExceptionStatus  ```    Call stack for SocketsHttpHandler:  ```  +  ex {System.Net.WebException: No such host is known No such host is known ---> System.Net.Http.HttpRequestException: No such host is known ---> System.Net.Sockets.SocketException: No such host is known     at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in D:\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ConnectHelper.cs:line 78     --- End of inner exception stack trace ---     at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in D:\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ConnectHelper.cs:line 98     at System.Threading.Tasks.ValueTask`1.get_Result() in E:\A\_work\1045\s\src\mscorlib\shared\System\Threading\Tasks\ValueTask.cs:line 713     at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 309     at System.Threading.Tasks.ValueTask`1.get_Result() in E:\A\_work\1045\s\src\mscorlib\shared\System\Threading\Tasks\ValueTask.cs:line 713     at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask) in D:\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 450     at System.Threading.Tasks.ValueTask`1.get_Result() in E:\A\_work\1045\s\src\mscorlib\shared\System\Threading\Tasks\ValueTask.cs:line 713     at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in D:\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 243     at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\RedirectHandler.cs:line 30     at System.Net.Http.DiagnosticsHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\corefx\src\System.Net.Http\src\System\Net\Http\DiagnosticsHandler.cs:line 98     at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in D:\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 501     at System.Net.HttpWebRequest.SendRequest() in D:\corefx\src\System.Net.Requests\src\System\Net\HttpWebRequest.cs:line 1209     at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult) in D:\corefx\src\System.Net.Requests\src\System\Net\HttpWebRequest.cs:line 1259     --- End of inner exception stack trace ---     at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult) in D:\corefx\src\System.Net.Requests\src\System\Net\HttpWebRequest.cs:line 1263     at System.Net.WebRequest.<>c.<GetResponseAsync>b__68_2(IAsyncResult iar) in D:\corefx\src\System.Net.Requests\src\System\Net\WebRequest.cs:line 550     at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization) in E:\A\_work\1045\s\src\mscorlib\src\System\Threading\Tasks\FutureFactory.cs:line 529  --- End of stack trace from previous location where exception was thrown ---     at Xunit.Assert.RecordExceptionAsync(Func`1 testCode) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\Record.cs:line 76} System.Net.WebException        ex.Status UnknownError System.Net.WebExceptionStatus  ```  
27905	area-System.Memory	Optimize Span CompareTo for Ordinal	See https://github.com/dotnet/corefx/issues/27379
27904	area-System.Net	Disposing the SocketsHttpHandler does not abort draining sockets	Related to drain timeouts: https://github.com/dotnet/corefx/issues/27685.     Version 2.1.0-preview2-26225-03.    Reference code: https://github.com/aspnet/HttpSysServer/blob/80345b7f8ffd7a2b623d2e449f6854e3037c1ccc/test/Microsoft.AspNetCore.Server.HttpSys.FunctionalTests/Listener/ResponseBodyTests.cs#L602-L615    This code gets the response without buffering, disposes it which starts a background drain that blocks without timeout, and then the client/handler is disposed. The already draining socket is not closed when the handler is disposed, and without the proposed timeout in #27685 it may keep the socket alive indefinitely.    @stephentoub
27901	area-System.Xml	Can't open XML	"Hello. I'm trying to open XML with this code:  `XDocument File = XDocument.Load(FileName); //FileName = ""SomeFile.xml""`  Unfortunately I am getting an error ArgumentOutOfRangeException: Index and count must refer to a location within the string.    What am I doing wrong?    P.S. Windows 8  ASP.NET Core 2.0  .NET Framework 4.6.1"
27898	area-System.Net	Eat exceptions from SocketsHttpHandler's readahead task	When SocketsHttpHandler puts a connection back into the pool, it issues a pre-emptive asynchronous read on the transport stream.  This enables us to check whether any unexpected data has arrived on the connection, whether the connection has been closed, etc., and without polling (which could be done with a NetworkStream but not well with an SslStream).  However, when we dispose of a connection from the pool, this task will potentially end up getting faulted, and while it won't crash the application by default, it will end up invoking the TaskScheduler.UnobservedException event.    This commit address this by ensuring that we always observe any exceptions that come from the read ahead task when the connection is disposed of (in the rare case where an HttpConnection is instead left for finalization, the event may still be raised, which is arguably a good thing, as the developer should be disposing responses.)    (The alternative would be to stop using the read ahead, and instead poll every time we wanted to know if the connection was still valid.  That would mean storing the socket in addition to the stream on the connection, and would mean we might miss some errant data that was already pulled from the socket into an SslStream.  It would also mean at least one more syscall for each request, as we'd check whether a connection from the pool was valid.  For now I'm sticking with the read ahead.)    Fixes https://github.com/dotnet/corefx/issues/27877  cc: @geoffkizer 
27897	area-System.Net	Add ExecutionContext flowing tests for Socket async operations	Contributes to https://github.com/dotnet/corefx/issues/27892  cc: @geoffkizer 
27896	area-System.ComponentModel	Deprecate BackgroundWorker.RunWorkerAsync	For me, it is very misleading that `BackgroundWorker.RunWorkerAsync` uses the convention with suffix *Async but doesn't return a Task.    Please consider deprecating this method and come with a new methodname.  The same applies to `CancelAsync`    Fixing it would not be possible because it's a breaking change.    Or... deprecate BackgroundWorker completely and come with an (better) alternative.  For example one with async/await, cancellationtoken support etc. Would that be `Task.Factory.StartNew` or `Task.Run`?
27895	area-System.Net	Allow Socket.GetOrAllocateThreadPoolBoundHandle to fully inline	Fixes https://github.com/dotnet/corefx/issues/27893  cc: @geoffkizer 
27894	area-System.Net	Ensure SendAsync token source is disposed when handler throws	If HttpClient has a non-infinite timeout set, and/or if a cancelable token is passed in, it creates a token source linked to the pending requests token source and the passed in token, and passes that token into base.SendAsync, which in turn just delegates to the wrapped handler's SendAsync.  If that wrapped handler throws an exception synchronously that propagates out of SendAsync, we never end up disposing of the linked token, which will end up leaving a reference to it in both the pending requests token source and the provided token's source.    cc: @davidsh, @geoffkizer 
27893	area-System.Net	Optimize Socket.GetOrAllocateThreadPoolBoundHandle 	This method isn't getting inlined, presumably because there's just enough logic here between this call and the call to SafeCloseSocket.GetOrAllocateThreadPoolBoundHandle (which does get inlined) to prevent inlining.    We should change the logic to simply do a quick check for whether the handle is not null, and then return it; if null, call out to a separate function that does the demand creation.
27892	area-System.Net	Socket async callbacks on Windows process the callback's ExecutionContext twice	We have logic to capture the ExecutionContext and restore it for callbacks in both the IAsyncResult path and the SocketAsyncEventArgs path.  However, on Windows, we are already getting dispatched to the correct ExecutionContext by the Overlapped infrastructure, which on .NET Core always handles the execution context capture and dispatch.    On Unix, the equivalent infrastructure in SocketAsyncContext.Unix.cs does not handle ExecutionContext, so it's only being handled once.    We should add ExecutionContext capture and dispatch to SocketAsyncContext.Unix.cs and then remove it from the higher layers in the Socket stack.    The impact here is small, but every bit helps.
27890	area-System.IO	Reverting the generic scheduler changes	- This forces allocations on some implementations of schedulers (in particular kestrel)  - We never pass a struct to Schedule    Fixes #27887 
27887	area-System.IO	Change PipeScheduler.Schedule to be non generic	This is forcing kestrel to allocate per call to schedule where it didn't before. We don't need it to be generic since we're always passing an object as state in the fast path. We box today when there's a sync context or execution context.    /cc @pakrym @halter73 
27886	area-System.Net	SocketsHttpHandler: fix logic to check for Proxy-support header	Currently we're looking for this header when we do proxy auth.  This is wrong.  We should look for this header when we are trying to do regular auth through a proxy.    @davidsh @wfurt @stephentoub     Fixes #27872     @wfurt can you test and confirm that this fixes #27872?  (Windows only)
27885	area-System.IO	Getting error on windows => System.PlatformNotSupportedException: 'System.IO.Ports is currently only supported on Windows.'	I have a .net standard 2.0 dll (Drivers.CommunicationLocal) which is referencing SerialPort class. When I try to use this from a .Net 4.6.1 console app or a xUnit (.net core 2.0) on windows 10, I get the following exception. Using it from UWP app works fine.    > System.PlatformNotSupportedException: System.IO.Ports is currently only supported on Windows.  >    at System.IO.Ports.SerialPort..ctor(String portName, Int32 baudRate, Parity parity, Int32 dataBits)  >    at Drivers.CommunicationLocal.CommunicationLayerSerialPortLocal..ctor(SettingSerialPortLocal settings) in C:\Users\abc\Documents\Visual Studio 2017\Projects\experiment\senna\src\Drivers.CommunicationLocal\CommunicationLayerSerialPortLocal.cs:line 24     I am using nuget package `System.IO.Ports`. 
27884	area-System.Net	Leaking System.Net.Http.HttpConnectionPool in WCF web socket tests	It seems that the new web sockets implementation is leaking objects by leaving them rooted by the timers. Here is the typical GC root:  ~~~  0:080> !gcroot 0000020209eb6650  HandleTable:      000001fe883215f8 (pinned handle)      -> 0000020289ea1038 System.Object[]      -> 0000020189ea2988 System.Threading.TimerQueue[]      -> 0000020189ea2a88 System.Threading.TimerQueue      -> 0000020209eb7b30 System.Threading.TimerQueueTimer  ...      -> 0000020209eb65a0 System.Threading.TimerQueueTimer      -> 0000020209eb6280 System.Net.Http.HttpConnectionPoolManager      -> 0000020209eb62c0 System.Collections.Concurrent.ConcurrentDictionary`2[[System.Net.Http.HttpConnectionPoolManager+HttpConnectionKey, System.Net.Http],[System.Net.Http.HttpConnectionPool, System.Net.Http]]      -> 0000020209eb6548 System.Collections.Concurrent.ConcurrentDictionary`2+Tables[[System.Net.Http.HttpConnectionPoolManager+HttpConnectionKey, System.Net.Http],[System.Net.Http.HttpConnectionPool, System.Net.Http]]      -> 0000020209eb6438 System.Collections.Concurrent.ConcurrentDictionary`2+Node[[System.Net.Http.HttpConnectionPoolManager+HttpConnectionKey, System.Net.Http],[System.Net.Http.HttpConnectionPool, System.Net.Http]][]      -> 0000020209eb6700 System.Collections.Concurrent.ConcurrentDictionary`2+Node[[System.Net.Http.HttpConnectionPoolManager+HttpConnectionKey, System.Net.Http],[System.Net.Http.HttpConnectionPool, System.Net.Http]]      -> 0000020209eb6650 System.Net.Http.HttpConnectionPool    ~~~  The leak is especially fast in stress where we get about 100K leaked pools each 10 minutes of stress run.  
27883	area-System.Memory	Add back reference to corelib files so they are visible in Visual Studio	From https://github.com/dotnet/corefx/pull/27831/files#r173342441    cc @ericstj, @eerhardt, @weshaggard, @KrzysztofCwalina
27881	area-Infrastructure	Enable reverse APICompat for 1:1 libraries	This PR fixes up corefx to correctly work for the new reverse APICompat check added via https://github.com/dotnet/buildtools/pull/1949 to address https://github.com/dotnet/corefx/issues/27639.     I fixed a few issues but mostly these are just baseline files being added that I will individually tag owners to investigate. For those owners I tag please have a look at the baseline file and see whether or not those APIs are intentionally not in the reference assembly and if so nothing needs to be done but perhaps add a comment in the baseline file. If they should be in the reference assembly or shouldn't be in the implementation assembly then please file a tracking issue to fix.     PTAL @ericstj @jkotas     FYI @tmat 
27880	area-System.IO	Pipe internal state could be damaged by not observing cancellation	Test case:    ```diff  +        [Fact]  +        public async Task AdvanceBetweenGetResultAndOnCompleted()  +        {  +            PipeWriter buffer = Pipe.Writer.WriteEmpty(MaximumSizeHigh);  +  +            ValueTaskAwaiter<FlushResult> awaiter = buffer.FlushAsync().GetAwaiter();  +            awaiter.OnCompleted(() => { });  +            bool awaiterIsCompleted = awaiter.IsCompleted;  +            Pipe.Writer.CancelPendingFlush();  +            bool awaiterIsCompletedAfterCancel = awaiter.IsCompleted;  +  +            var result = await Pipe.Reader.ReadAsync();  +            Pipe.Reader.AdvanceTo(result.Buffer.End);  +  +            Pipe.Writer.WriteEmpty(1);  +  +            var flushTask = buffer.FlushAsync();  +  +            result = await Pipe.Reader.ReadAsync();  +            Pipe.Reader.AdvanceTo(result.Buffer.End);  +  +            Assert.True(flushTask == new ValueTask<FlushResult>(flushTask.Result));  +            Assert.False(awaiterIsCompleted);  +            Assert.True(awaiterIsCompletedAfterCancel);  +        }  ```
27878	area-System.Text	Investigate generating matching strings for test regexes and adding to testbed	The regexes we may port in https://github.com/dotnet/corefx/issues/27618 will exercise our parser but not our runner.    Experiment with using REX (https://www.microsoft.com/en-us/research/project/rex-regular-expression-exploration/) to generate interesting strings for each of those interesting patterns. Then preserve some of those strings in the tests - so we have a large body of new positive tests for regex matching.    We could also generate negative tests, for example by making small changes to the positive matching strings until they did not match, and preserving those also. Those should continue to not-match.    @CyrusNajmabadi @ViktorHofer @maryamariyan 
27877	area-System.Net	Unobserved task exception thrown with new SocketsHttpHandler	```  OnUnobservedTaskException() System.AggregateException: A Task's exception(s) were not observed either by Waiting on the Task or accessing its Exception property. As a result, the unobserved exception was rethrown by the finalizer thread. (Unable to read data from the transport connection: Operation canceled.) ---> System.IO.IOException: Unable to read data from the transport connection: Operation canceled. ---> System.Net.Sockets.SocketException: Operation canceled     --- End of inner exception stack trace ---     at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error)     at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.GetResult(Int16 token)     at System.Net.Security.SslStreamInternal.<FillBufferAsync>g__InternalFillBufferAsync|38_0[TReadAdapter](TReadAdapter adap, ValueTask`1 task, Int32 min, Int32 initial)     at System.Net.Security.SslStreamInternal.ReadAsyncInternal[TReadAdapter](TReadAdapter adapter, Memory`1 buffer)     --- End of inner exception stack trace ---  ---> (Inner Exception #0) System.IO.IOException: Unable to read data from the transport connection: Operation canceled. ---> System.Net.Sockets.SocketException: Operation canceled     --- End of inner exception stack trace ---     at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error)     at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.GetResult(Int16 token)     at System.Net.Security.SslStreamInternal.<FillBufferAsync>g__InternalFillBufferAsync|38_0[TReadAdapter](TReadAdapter adap, ValueTask`1 task, Int32 min, Int32 initial)     at System.Net.Security.SslStreamInternal.ReadAsyncInternal[TReadAdapter](TReadAdapter adapter, Memory`1 buffer)<---  ```    Not a fatal error but it should not be written to `TaskScheduler.UnobservedTaskException`. Thanks!    ```  .NET Core SDK (reflecting any global.json):   Version:   2.1.300-preview2-008318   Commit:    f29118002c    Runtime Environment:   OS Name:     debian   OS Version:   OS Platform: Linux   RID:         debian-x64   Base Path:   /opt/dotnet/sdk/2.1.300-preview2-008318/    Host (useful for support):    Version: 2.1.0-preview2-26308-01    Commit:  dd5407cc77    .NET Core SDKs installed:    2.1.300-preview2-008318 [/opt/dotnet/sdk]    .NET Core runtimes installed:    Microsoft.AspNetCore.All 2.1.0-preview2-30248 [/opt/dotnet/shared/Microsoft.AspNetCore.All]    Microsoft.AspNetCore.App 2.1.0-preview2-30248 [/opt/dotnet/shared/Microsoft.AspNetCore.App]    Microsoft.NETCore.App 2.1.0-preview2-26308-01 [/opt/dotnet/shared/Microsoft.NETCore.App]  ```
27876	area-System.Net	SocketHttpHandler does not work with negotiate/kerberos auth on Linux	I have setup where Linux machine joined domain (using MIT krb5)    > clruser@CLRPERFTST003:$ kinit  > Password for clradmin@COREFX.NET:  > clruser@CLRPERFTST003:$ klist  > Ticket cache: FILE:/tmp/krb5cc_1000  > Default principal: clradmin@COREFX.NET  >   > Valid starting       Expires              Service principal  > 2018-03-08 14:16:54  2018-03-09 00:16:54  krbtgt/COREFX.NET@COREFX.NET  >  renew until 2018-03-09 14:16:48  > 2018-03-08 14:37:52  2018-03-09 00:16:54  HTTP/clrperftst003.corefx.net@COREFX.NET  >  renew until 2018-03-09 14:16:48  >     and I verified that curl can get pages using kerberos authentication:    > clruser@CLRPERFTST003:~/Downloads/proxy-test/proxy-test$ curl --proxy-nego  --proxy-user ':'  --proxy  CLRperftst003.corefx.net:3128  -v http://mytest.com/  > > GET http://mytest.com/ HTTP/1.1  > > Host: mytest.com  > > Proxy-Authorization: Negotiate YIIFgAYGKwYBBQUCoIIFdDCCBXCgJzAlBgkqhkiG9xIBAgIGBSsFAQUCBgkqhkiC9xIBAgIGBisGAQUCBaKCBUMEggU/YIIFOwYJKoZIhvcSAQICAQBuggUqMIIFJqADAgEFoQMCAQ6iBwMFACAAAACjggQlYYIEITCCBB2gAwIBBaEMGwpDT1JFRlguTkVUoiswKaADAgEDoSIwIBsESFRUUBsYY2xycGVyZnRzdDAwMy5jb3JlZngubmV0o4ID2TCCA9WgAwIBF6EDAgEFooIDxwSCA8O5w6rgIY6bddCzO6I+f0Rke4L137Pv44srNrToc/p3/HhYN8FpjS1uVwKywvekT86iedtMwYEo5TuLs2+1IOMJ+pUjChcqNBvUfwiTMWctTOMHnQN/7FzDBJ0UgZ8336lNx7+OSJLx4td5O1kEDGogUqQZI2A2h0TyOcFfvfDoyhPkMzcmc+3k/7ulgmt72EsoJaYRdnr/HKj8wggsktw5A8EQ2jh3NfSkeMD0Wi/tXEu/45yr3klFCD6JiyGjAIDcNpMTRI4awOPpXSet1J2ET+r7ASXfRRV1FDs1PyExQ3+//2SEdPdBxh96/d3a1ddu3j6Lzk0ybJXe2DMjq8fZmo5zAnZ6iQIzBhgUahtbp2ZSR7s/cMGM9zh0VCZbIkvuj+qogV+uLX3o14XwA7GMvwU9/wlw7AtxYXaMI/I1G7KA5kx+psDouFvEujcQZpuFxEx3sm2voCKuzl0Vr9tETaquXTs7lVuJRBnTmQYg0Erhx5GAaN+09WCR2mZs2mu7CcoeHtgamGxJby1P9Kbht7QWVFZZevuhQLjatbEUWmFUomze52NjcBZD6qjUYbYIHLWTYaJOlRqeSTGSvEDqBTVoEi8DimalFOwfVcUlKyrh5DfaBbDH1WLgLhNxM1XrdFkVvdtH9si68yYays5OnputfmJohaxzRNQza2H8SeoEl3maVD/Tx5Yw3ogkRKXsOhmqK8nNa8DgL1jwgVsLMLRmKZgyl/ysRQVL/pqqMOm5ZVOUDTOcGLMXYAOM/F20Kfy+R/We3cPXL+Jaw/eIGd0Lzrwa3ShNFdImzE6LbHBHwL22IcWWmmVR8ocz7jTX9rIg4HY25CH5Zuv+89V+oyUWKN0x28cS/zjRjlAlvNf0qvJPHcHVZawu5wBanWTWv6CBsPRKQ8QYa/hdllOV8MOD4moNk9QUFJhQndANeMvHKymr8umsRkQgD9gKiN0nxMixHv2CSXrPeBcLmxCiDJerSOHDYw4gGEDMQabfnCmBiRPLZg+sPmZycd49DR1tw/6/HaURnXmPGmyUQ91Sw30VTA+9bQRAYOrrYt0HhPJ6KedBE4OM8DevtrZVzDlNL5SYxbaIElktbdU0r8PxZygDiFYw/lnrW+qTEDB2v+MTHyi1ZK1Fxd+CyDmLIWOqfVbda8vE82kSSbVUJ8tXjWMTp2bSUUFqTZ3xkKyC9HC9BEOODmU/asbdccq5TuGsvhQFTHbfEdl1MI9hQ7vTt1/kOTo5WnGmW7EuLqyIF2yjnjaMnJ1vuLSTN9FsrCHi4+6kgecwgeSgAwIBF6KB3ASB2UEZTU8g7XMA+3tQprxJN7N1Uy80i7fKDpqbnsMUpFj8iQ2go03qzdh/XZQVZKN5bqfSeOVqc3dSHfkyZ+6s+tkDt0hl0KNxGn7AUulUA9LKeGt/ZCQIomooqIbenuq5ioYxpnUJL40pW8HGx6U+NGwHNF+zq5xXenSePW5xXZjhXcOPoJJSbl4e93dD8WWKu7E3gWpoGfOZvIjtTMIXI4e1SpaImE2auRvqqFEBvzx2+7TrSiJL7TurvOM9H6d+y52wFvcz2g9WL827H1O4K0apqtddyNofK70=  > > User-Agent: curl/7.47.0  > > Accept: */*  > > Proxy-Connection: Keep-Alive  > >  > < HTTP/1.1 200 OK  > < Date: Thu, 08 Mar 2018 22:47:54 GMT  > < Server: Apache  > < Content-Length: 272  > < Content-Type: text/html; charset=UTF-8  > < X-Cache: MISS from CLRPERFTST003  > < X-Cache-Lookup: MISS from CLRPERFTST003:3128  > < Via: 1.1 CLRPERFTST003 (squid/3.5.12)  > < Connection: keep-alive  >     When I try simple HTTP client app (#27870) , I get following error. I also try it without explicit credentials and handler.UseDefaultCredentials = true and that simply return 407. It is not clear to me what exactly we expect  but With UseDefaultCredential I would expect we pick up Default principal.      > System.ComponentModel.Win32Exception (0x80090020): GSSAPI operation failed with error - An invalid status code was supplied (Principal in credential cache does not match desired name).  >    at System.Net.Security.NegotiateStreamPal.AcquireCredentialsHandle(String package, Boolean isServer, NetworkCredential credential) in /home/clruser/git/corefx/src/Common/src/System/Net/Security/NegotiateStreamPal.Unix.cs:line 313  >    at System.Net.NTAuthentication.Initialize(Boolean isServer, String package, NetworkCredential credential, String spn, ContextFlagsPal requestedContextFlags, ChannelBinding channelBinding) in /home/clruser/git/corefx/src/Common/src/System/Net/NTAuthentication.Common.cs:line 127  >    at System.Net.NTAuthentication..ctor(Boolean isServer, String package, NetworkCredential credential, String spn, ContextFlagsPal requestedContextFlags, ChannelBinding channelBinding) in /home/clruser/git/corefx/src/Common/src/System/Net/NTAuthentication.Common.cs:line 98  >    at System.Net.Http.AuthenticationHelper.SendWithNtAuthAsync(HttpRequestMessage request, Uri authUri, ICredentials credentials, Boolean isProxyAuth, HttpConnection connection, CancellationToken cancellationToken) in /home/clruser/git/corefx/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/AuthenticationHelper.NtAuth.cs:line 57  >    at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in /home/clruser/git/corefx/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 255  >    at System.Net.Http.AuthenticationHelper.SendWithAuthAsync(HttpRequestMessage request, Uri authUri, ICredentials credentials, Boolean preAuthenticate, Boolean isProxyAuth, Boolean doRequestAuth, HttpConnectionPool pool, CancellationToken cancellationToken) in /home/clruser/git/corefx/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/AuthenticationHelper.cs:line 192  >    at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in /home/clruser/git/corefx/src/System.Net.Http/src/System/Net/Http/HttpClient.cs:line 469  >    at proxy_test.Program.fetch2(String uri) in /home/clruser/Downloads/proxy-test/proxy-
27872	area-System.Net	SocketHttpHandler is failing NTLM authentication to proxy	I essentially use example from #27870 When running on Windows using WinHTTPHandler it works just fine. On Linux I did verify my proxy setup using curl directly.     Note, that server expects NTLM directly instead of Negotiate/NTLM    > HTTP/1.1 407 Proxy Authentication Required  > Server: squid/3.5.12  > Mime-Version: 1.0  > Date: Thu, 08 Mar 2018 21:26:30 GMT  > Content-Type: text/html;charset=utf-8  > Content-Length: 3566  > X-Squid-Error: ERR_CACHE_ACCESS_DENIED 0  > Vary: Accept-Language  > Content-Language: en  > Proxy-Authenticate: NTLM  > X-Cache: MISS from CLRPERFTST003  > X-Cache-Lookup: NONE from CLRPERFTST003:3128  > Via: 1.1 CLRPERFTST003 (squid/3.5.12)  > Connection: keep-alive  >       On Linux I tried to force NTLM in TryGetValidAuthenticationChallengeForScheme() and CheckIfProxySupportsConnectionAuth() and I got following trace.    > System.ComponentModel.Win32Exception (0x80090020): GSSAPI operation failed with error - An invalid status code was supplied (Unknown error).  >    at System.Net.Security.NegotiateStreamPal.AcquireCredentialsHandle(String package, Boolean isServer, NetworkCredential credential) in /home/clruser/git/corefx/src/Common/src/System/Net/Security/NegotiateStreamPal.Unix.cs:line 313  >    at System.Net.NTAuthentication.Initialize(Boolean isServer, String package, NetworkCredential credential, String spn, ContextFlagsPal requestedContextFlags, ChannelBinding channelBinding) in /home/clruser/git/corefx/src/Common/src/System/Net/NTAuthentication.Common.cs:line 127  >    at System.Net.NTAuthentication..ctor(Boolean isServer, String package, NetworkCredential credential, String spn, ContextFlagsPal requestedContextFlags, ChannelBinding channelBinding) in /home/clruser/git/corefx/src/Common/src/System/Net/NTAuthentication.Common.cs:line 98  >    at System.Net.Http.AuthenticationHelper.SendWithNtAuthAsync(HttpRequestMessage request, Uri authUri, ICredentials credentials, Boolean isProxyAuth, HttpConnection connection, CancellationToken cancellationToken) in /home/clruser/git/corefx/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/AuthenticationHelper.NtAuth.cs:line 57  >    at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in /home/clruser/git/corefx/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 255    That was somewhat surprising as I did not have Kerberos configured and curl works fine.   On Windows I did not dig deeper but I don't see any response to initial 407.     
27871	area-System.Net	SocketHttpHandler is failing to parse properly proxy environment variables with special characters.	Consider situation like:    export all_proxy='corefx\foo:SecretPass#1@clrperftst003:3128'    when using curl or curl handler from c# auth to proxy works as expected.     However when I switch to SocketHttpHandler, it fails to parse the string because we use Uri parsing function and that does not like the special characters. With that we fail to instantiate HttpEnvironmentProxy and handler attempts direct connections ignoring proxy setting.   Also note, that we only split user and password. That may possibly create troubles with certain authentication schemes.     Also note, that curl works properly if the string is URL encoded. SocketHTTPHandler also fails in such case.    export all_proxy='corefx%5Cfoo:SecretPass%231@clrperftst003:3128'    
27870	area-System.Net	curl HttpHandler can only do basic auth to proxy	"I have proxy setup with supporting only NTLM authentication and I have simple app fetching given URL through the proxy     ```c#          static async Task fetch2(String uri)          {              HttpClientHandler handler = new HttpClientHandler();              handler.PreAuthenticate = false;              handler.Proxy = new WebProxy(""clrperftst003:3128"");              handler.Proxy.Credentials = new NetworkCredential(""foo"", ""bar"", ""corefx"");              var client = new HttpClient(handler);              var result1 = await client.GetAsync(uri);              Console.WriteLine(result1);      }  ```    This work when running on Windows but always fails on Ubuntu16.     It seems like the code always sends Basic auth when credentials are available.  When that fails it never tries again with schema supported by the server.   Also note, that the PreAuthenticate has no impact so the client will always leak plaintext password.   I tested this with server supporting Digest or NTLM and behavior is identical.     Failed request/response from c#    > GET http://mytest.com/ HTTP/1.1  > Host: mytest.com  > Proxy-Authorization: Basic Y29yZWZ4XGZvbzpiYXI=  > Accept: */*  > Proxy-Connection: Keep-Alive  >   > HTTP/1.1 407 Proxy Authentication Required  > Server: squid/3.5.12  > Mime-Version: 1.0  > Date: Thu, 08 Mar 2018 21:26:30 GMT  > Content-Type: text/html;charset=utf-8  > Content-Length: 3566  > X-Squid-Error: ERR_CACHE_ACCESS_DENIED 0  > Vary: Accept-Language  > Content-Language: en  > Proxy-Authenticate: NTLM  > X-Cache: MISS from CLRPERFTST003  > X-Cache-Lookup: NONE from CLRPERFTST003:3128  > Via: 1.1 CLRPERFTST003 (squid/3.5.12)  > Connection: keep-alive  >     On same system, using same setup, curl can work just fine. (the credentials are different but I did not want to leak my test creds via basic auth)     > clruser@CLRPERFTST003:~/Downloads/proxy-test/proxy-test$ curl -v --proxy-ntlm http://mytest.com  > * Rebuilt URL to: http://mytest.com/  > *   Trying 10.194.114.94...  > * Connected to clrperftst003 (10.194.114.94) port 3128 (#0)  > * Proxy auth using NTLM with user 'corefx\clradmin'  > > GET http://mytest.com/ HTTP/1.1  > > Host: mytest.com  > > Proxy-Authorization: NTLM TlRMTVNTUAABAAAABoIIAAAAAAAAAAAAAAAAAAAAAAA=  > > User-Agent: curl/7.47.0  > > Accept: */*  > > Proxy-Connection: Keep-Alive  > >  > < HTTP/1.1 407 Proxy Authentication Required  > < Server: squid/3.5.12  > < Mime-Version: 1.0  > < Date: Thu, 08 Mar 2018 21:30:40 GMT  > < Content-Type: text/html;charset=utf-8  > < Content-Length: 3624  > < X-Squid-Error: ERR_CACHE_ACCESS_DENIED 0  > < Vary: Accept-Language  > < Content-Language: en  > < Proxy-Authenticate: NTLM TlRMTVNTUAACAAAABgAGADgAAAAGgokC34SGakN19rQAAAAAAAAAAIoAigA+AAAABgEAAAAAAA9DT1JFRlgCAAwAQwBPAFIARQBGAFgAAQAaAEMATABSAFAARQBSAEYAVABTAFQAMAAwADMABAAUAGMAbwByAGUAZgB4AC4AbgBlAHQAAwAwAGMAbAByAHAAZQByAGYAdABzAHQAMAAwADMALgBjAG8AcgBlAGYAeAAuAG4AZQB0AAcACAC4FcK0JLfTAQAAAAA=  > < X-Cache: MISS from CLRPERFTST003  > < X-Cache-Lookup: NONE from CLRPERFTST003:3128  > < Via: 1.1 CLRPERFTST003 (squid/3.5.12)  > < Connection: keep-alive  > <  > * Ignoring the response-body  > * Connection #0 to host clrperftst003 left intact  > * Issue another request to this URL: 'http://mytest.com/'  > * Found bundle for host mytest.com: 0x5593227ec670 [can pipeline]  > * Re-using existing connection! (#0) with proxy clrperftst003  > * Connected to clrperftst003 (10.194.114.94) port 3128 (#0)  > * Proxy auth using NTLM with user 'corefx\clradmin'  > > GET http://mytest.com/ HTTP/1.1  > > Host: mytest.com  > > Proxy-Authorization: NTLM TlRMTVNTUAADAAAAGAAYAEAAAAC6ALoAWAAAAAYABgASAQAACAAIABgBAAANAA0AIAEAAAAAAAAAAAAABoKJAjaw4BUrm5vWknDqlbYDMg3LFocJDoCzj8WVcO2Oe84IffaBmcn049UBAQAAAAAAAABAkbQkt9MByxaHCQ6As48AAAAAAgAMAEMATwBSAEUARgBYAAEAGgBDAEwAUgBQAEUAUgBGAFQAUwBUADAAMAAzAAQAFABjAG8AcgBlAGYAeAAuAG4AZQB0AAMAMABjAGwAcgBwAGUAcgBmAHQAcwB0ADAAMAAzAC4AYwBvAHIAZQBmAHgALgBuAGUAdAAHAAgAuBXCtCS30wEAAAAAAAAAAGNvcmVmeGNscmFkbWluQ0xSUEVSRlRTVDAwMw==  > > User-Agent: curl/7.47.0  > > Accept: */*  > > Proxy-Connection: Keep-Alive  > >  > < HTTP/1.1 200 OK  > < Date: Thu, 08 Mar 2018 21:30:40 GMT  > < Server: Apache  > < Content-Length: 271  > < Content-Type: text/html; charset=UTF-8  > < X-Cache: MISS from CLRPERFTST003  > < X-Cache-Lookup: MISS from CLRPERFTST003:3128  > < Via: 1.1 CLRPERFTST003 (squid/3.5.12)  > < Connection: keep-alive  > <  > <html>  > <head>  > <meta name=""robots"" content=""noarchive"" />  > <meta name=""googlebot"" content=""nosnippet"" />  > </head>  > <body>  > <div align=center>  > <h3>Error. Page cannot be displayed. Please contact your service provider for more details.  (5)</h3>  > </div>  > </body>  > * Connection #0 to host clrperftst003 left intact    "
27866	area-System.Net	Fix race condition on Unix pooling canceled Socket operations	Fixes https://github.com/dotnet/corefx/issues/26452 (or it at least fixes one cause of the symptom; hopefully that's it)    cc: @geoffkizer, @wfurt 
27865	area-System.Net	fix SocketsHttpHandler to ignore invalid Set-Cookie	Partial fix for #27861    @Tratcher @stephentoub @davidsh 
27861	area-System.Net	SocketsHttpHandler/CookieContainer does not accept cookies from Twitter, fails request	"I tested ASP.NET's Twitter OAuth handler with the new SocketsHttpHandler (dotnet --version: 2.1.300-preview2-008251) and found that the CookieContainer does not accept cookies from Twitter and it fails the request rather than ignoring them.    ```  System.Net.CookieException: An error occurred when parsing the Cookie header for Uri 'https://api.twitter.com/oauth/request_token'. ---> System.Net.CookieException: Cookie format error.     at System.Net.CookieContainer.CookieCutter(Uri uri, String headerName, String setCookieHeader, Boolean isThrow)     --- End of inner exception stack trace ---     at System.Net.CookieContainer.CookieCutter(Uri uri, String headerName, String setCookieHeader, Boolean isThrow)     at System.Net.CookieContainer.SetCookies(Uri uri, String cookieHeader)     at System.Net.Http.CookieHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)     at System.Net.Http.AuthenticateAndRedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)     at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)     at Microsoft.AspNetCore.Authentication.Twitter.TwitterHandler.ObtainRequestTokenAsync(String callBackUri, AuthenticationProperties properties) in d:\github\AspNet\Security\src\Microsoft.AspNetCore.Authentication.Twitter\TwitterHandler.cs:line 197     at Microsoft.AspNetCore.Authentication.Twitter.TwitterHandler.HandleChallengeAsync(AuthenticationProperties properties) in d:\github\AspNet\Security\src\Microsoft.AspNetCore.Authentication.Twitter\TwitterHandler.cs:line 140     at Microsoft.AspNetCore.Authentication.AuthenticationHandler`1.ChallengeAsync(AuthenticationProperties properties) in d:\github\AspNet\Security\src\Microsoft.AspNetCore.Authentication\AuthenticationHandler.cs:line 227     at Microsoft.AspNetCore.Authentication.AuthenticationService.ChallengeAsync(HttpContext context, String scheme, AuthenticationProperties properties)  ```  Reference app: https://github.com/aspnet/Security/blob/4e3e8bb109f3d1b3d95f7af4775a386d291c2b96/samples/SocialSample/Startup.cs#L111    The cookies in question are:  ```  set-cookie: guest_id=v1%3A151966890829154034; Expires=Sat, 07 Mar 2020 00:28:24 UTC; Path=/; Domain=.twitter.com  set-cookie: personalization_id=""v1_Xfcbmc7S2QFG3YSiebMfA==""; Expires=Sat, 07 Mar 2020 00:28:24 UTC; Path=/; Domain=.twitter.com  ```  And it appears to be the UTC time zone that causes it to fail.  ```  var cookieContainer = new CookieContainer();  cookieContainer.SetCookies(new Uri(""http://example.com""), ""key=value; Expires=Sat, 07 Mar 2020 00:28:24 UTC"");  ```  Where GMT works:  ```   cookieContainer.SetCookies(new Uri(""http://example.com""), ""key=value; Expires=Sat, 07 Mar 2020 00:28:24 GMT"");  ```    If SocketsHttpHandler becomes the default then this behavior will regress new and existing server apps using Twitter logins.    Fix: Unreadable cookie values must at a minimum be ignored. They should not fail the request. I recall this is the behavior of .NET HttpClient/HttpWebRequest, and CookieCutter already has an option for this.    Workaround, ignore cookies, they're optional for this flow:  ```  .AddTwitter(o =>  {     ...     o.BackchannelHttpHandler = new HttpClientHandler() { UseCookies = false };  })  ```"
27860	area-System.Data	Skip TvpTest.TestMain due to issue 27858	Skip TvpTest.TestMain due to issue #27858
27859	area-System.Memory	Optimize MemoryExtensions SequenceEqual for more T's	https://github.com/dotnet/corefx/issues/27487
27858	area-System.Data	System.Data.SqlClient.ManualTesting.Tests.TvpTest.TestMain fails on Ubuntu due to different regional date format	System.Data.SqlClient.ManualTesting.Tests.**TvpTest.TestMain** fails on Ubuntu due to different regional date format.    Most of the failures are due to mismatch in the Year format between the expected and the actual value as seen below, opening this issue to keep track.  ```bash   ** DIFF at line 341     A : Failed Row[0]Col[5] = 1/1/53 12:00:00 AM: Invalid value for this metadata.     E : Failed Row[0]Col[5] = 1/1/1753 12:00:00 AM: Invalid value for this metadata.     ** DIFF at line 342     A : Failed Row[1]Col[5] = 1/1/53 12:00:00 AM: Invalid value for this metadata.     E : Failed Row[1]Col[5] = 1/1/1753 12:00:00 AM: Invalid value for this metadata.     ** DIFF at line 343     A : Failed Row[4]Col[5] = 1/1/53 12:00:00 AM: Invalid value for this metadata.     E : Failed Row[4]Col[5] = 1/1/1753 12:00:00 AM: Invalid value for this metadata.     ** DIFF at line 344   ```    However, there are a couple of more failures apart from mismatch year format which need to be investigated.    ```bash   ** DIFF at line 640     A : Value       => Expected : Actual == 0 : 631139040000000000     E : Value       => Expected : Actual == 0 : 0     ** DIFF at line 641     A : Test SqlDataReader TVP [Data Type][EXPECTED ERROR]: VALUE MISMATCH - [Actual = 1/1/01 12:00:00 AM] [Expected = 1/1/01 12:00:00 AM]     E :      ** DIFF at line 642     A :      E : ------------------------------ TestSqlDataReader_TVP_Variant [type: date value:1/1/0001 00:00:00] ------------------------------     ** DIFF at line 643     A : ------------------------------ TestSqlDataReader_TVP_Variant [type: date value:1/1/01 00:00:00] ------------------------------     E : Type        => Expected : Actual == System.DateTime : System.DateTime     ** DIFF at line 644     A : Type        => Expected : Actual == System.DateTime : System.DateTime     E : Base Type   => Expected : Actual == date : date     ** DIFF at line 645     A : Base Type   => Expected : Actual == date : date     E : Value       => Expected : Actual == 0 : 0     ** DIFF at line 646     A : Value       => Expected : Actual == 0 : 631139040000000000     E :      ** DIFF at line 647     A : Test SqlDataReader TVP [Variant Type][EXPECTED ERROR]: VALUE MISMATCH - [Actual = 1/1/01 12:00:00 AM] [Expected = 1/1/01 12:00:00 AM]     E : ------------------------------ TestSimpleDataReader_Type [type: date value:1/1/0001 00:00:00] ------------------------------     ** DIFF at line 648     A :      E : Type        => Expected : Actual == System.DateTime : System.DateTime     ** DIFF at line 649     A : ------------------------------ TestSimpleDataReader_Type [type: date value:1/1/01 00:00:00] ------------------------------     E : Base Type   => Expected : Actual ==  :      ** DIFF at line 650     A : Type        => Expected : Actual == System.DateTime : System.DateTime     E : Value       => Expected : Actual == 0 : 0     ** DIFF at line 651     A : Base Type   => Expected : Actual ==  :      E :      ** DIFF at line 652     A : Value       => Expected : Actual == 0 : 631139040000000000     E : ------------------------------ TestSimpleDataReader_Variant [type: date value:1/1/0001 00:00:00] ------------------------------     ** DIFF at line 653     A : Test Simple Data Reader [Data Type][EXPECTED ERROR]: VALUE MISMATCH - [Actual = 1/1/01 12:00:00 AM] [Expected = 1/1/01 12:00:00 AM]     E : Type        => Expected : Actual == System.DateTime : System.DateTime     ** DIFF at line 654     A :      E : Base Type   => Expected : Actual == date : date     ** DIFF at line 655     A : ------------------------------ TestSimpleDataReader_Variant [type: date value:1/1/01 00:00:00] ------------------------------     E : Value       => Expected : Actual == 0 : 0     ** DIFF at line 656     A : Type        => Expected : Actual == System.DateTime : System.DateTime     E :      ** DIFF at line 657     A : Base Type   => Expected : Actual == date : date     E : ------------------------------ SqlBulkCopySqlDataReader_Type [type: date value:1/1/0001 00:00:00] ------------------------------     ** DIFF at line 658     A : Value       => Expected : Actual == 0 : 631139040000000000     E : Type        => Expected : Actual == System.DateTime : System.DateTime     ** DIFF at line 659     A : Test Simple Data Reader [Variant Type][EXPECTED ERROR]: VALUE MISMATCH - [Actual = 1/1/01 12:00:00 AM] [Expected = 1/1/01 12:00:00 AM]     E : Base Type   => Expected : Actual ==  :      ** DIFF at line 660     A :      E : Value       => Expected : Actual == 0 : 0     ** DIFF at line 661     A : ------------------------------ SqlBulkCopySqlDataReader_Type [type: date value:1/1/01 00:00:00] ------------------------------     E :      ** DIFF at line 662     A : Type        => Expected : Actual == System.DateTime : System.DateTime     E : ------------------------------ SqlBulkCopySqlDataReader_Variant [type: date value:1/1/0001 00:00:00] ------------------------------   ```  **Complete Log:**  [TvpTest.TestMain.log](https://github.com/dotnet/corefx/files/1794092/TvpTest.TestMain.log)    **Expected Result:**  [Expected_SqlParameterTest_ReleaseMode.log](https://github.com/dotnet/corefx/files/1794059/Expected_SqlParameterTest_ReleaseMode.log)  **Actual Result:**  [Actual_SqlParameterTest_Ubuntu.log](https://github.com/dotnet/corefx/files/1794060/Actual_SqlParameterTest_Ubuntu.log)  
27857	area-System.Data	Conditionally execute IntegratedAuthenticationTest	Manual tests runs on Linux are failing as the Integrated Security is not setup.  This PR modifies IntegratedAuthenticationTest to conditionally execute based on the value of **TEST_INTEGRATEDSECURITY_SETUP** environment variable.
27855	area-Infrastructure	source.dot.net broken	It seems .NET Core data got removed. Can't find any .NET Core types. Not sure whom to tag here...    cc @danmosemsft @weshaggard 
27854	area-System.Runtime	If an IAsyncResourceFilter provides a result value by setting the Result property of ResourceExecutingContext to a non-null value, then it cannot call the next filter by invoking ResourceExecutionDelegate.	"@ranouf commented on [Tue Mar 06 2018](https://github.com/dotnet/core/issues/1324)  Hi,      I have this TypeFilterAttribute:    ```      [AttributeUsage(AttributeTargets.All, AllowMultiple = false)]      public class ApiKeysRequirementAttribute : TypeFilterAttribute      {          public ApiKeysRequirementAttribute(          ) : base(typeof(ApiKeysRequirementAttributeImplentation))          {            }            [AttributeUsage(AttributeTargets.All, AllowMultiple = false)]          private class ApiKeysRequirementAttributeImplentation : Attribute, IAsyncResourceFilter          {              private readonly bool _showDebugInfo;                public ApiKeysRequirementAttributeImplentation(IOptions<ShowDebugInfoAppSettings> settings)              {                  _showDebugInfo = settings.Value.ShowDebugInfo ?? false;              }                public async Task OnResourceExecutionAsync(ResourceExecutingContext context, ResourceExecutionDelegate next)              {                  IHeaderDictionary headers = context.HttpContext.Request.Headers;                    // Version 1.0 API                  if (headers[Constants.ApiVersionKey] != Constants.ApiV1VersionValue                      || headers[Constants.ApiTokenKey] != Constants.ApiV1TokenValue)                  {                      context.Result = new ContentResult                      {                            Content = _showDebugInfo                           ? ""Details""                           : ""No details"",                          StatusCode = (int)HttpStatusCode.Unauthorized                      };                      return;                      //await context.Result.ExecuteResultAsync(context);                    }                  await next();                }          }      }  ```    When I look in Application Insight I have this Exception Message:  **System.InvalidOperationException**  **If an IAsyncResourceFilter provides a result value by setting the Result property of ResourceExecutingContext to a non-null value, then it cannot call the next filter by invoking ResourceExecutionDelegate.**    I looked for this message on Google, I found this:  http://www.bvbcode.com/code/8350qcyv-2741116    I expected to see ""Details"" or ""No Details"" as Exception Message.    I have Exception Filter too, is there a conflict with the TypeFilterAttribute? I dont know.   ```     [System.AttributeUsage(System.AttributeTargets.All, AllowMultiple = false)]      public class ApiExceptionFilter : ExceptionFilterAttribute      {          private readonly ILogger<ApiExceptionFilter> _logger;            public ApiExceptionFilter(              ILogger<ApiExceptionFilter> logger)          {              _logger = logger;          }            public override void OnException(ExceptionContext context)          {              var ai = new TelemetryClient();                ai.TrackException(context.Exception);              ai.Flush();                var apiError = new ApiError();                var message = context.Exception.GetBaseException().Message;              _logger.LogError(new EventId(0), context.Exception, message);                // Unhandled errors  #if !DEBUG                  apiError.Message = ""An unhandled error occurred."";                  apiError.Detail = null;  #else              apiError.Message = message;              apiError.Detail = context.Exception.StackTrace;  #endif              context.HttpContext.Response.StatusCode = 500;                // always return a JSON result              context.Result = new JsonResult(apiError);                base.OnException(context);          }      }  ```    What do you think?  "
27849	area-System.Data	DBConnectionStringBuilder doesn't correctly serialize empty strings	"`DBConnectionStringBuilder` serializes empty strings as `""key=""` instead of `""key=''""` (or `""key=\""\""""`). This is incorrect as this is the syntax to _remove_ a key from a connection string (e.g. `""key=foo;key=""` will parse as an empty connection string).    Demo code:    ```csharp  var builder = new DbConnectionStringBuilder();  builder.ConnectionString = ""empty=''"";    Console.WriteLine(builder.ContainsKey(""empty""));  // true    Console.WriteLine(builder.ConnectionString);  // prints ""empty=""    // re-parse the conn string  builder.ConnectionString = builder.ConnectionString;    Console.WriteLine(builder.ContainsKey(""empty""));  // false    Console.WriteLine(builder.ConnectionString);  // prints """" (empty string)  ```    Expected outputs when this is fixed would be that the last 2 outputs are the same as the first 2 outputs."
27847	area-System.IO	Test failure: System.IO.Tests.PathTests/GetTempFileName	Opened on behalf of @Sunny-pu  The test `System.IO.Tests.PathTests/GetTempFileName` has failed.  System.IO.FileNotFoundException : Unable to find the specified file.          Stack Trace:             at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter) in /Users/buildagent/agent/_work/20/s/src/mscorlib/shared/Interop/Unix/Interop.IOErrors.cs:line 23        at Interop.CheckIo(Int64 result, String path, Boolean isDirectory, Func`2 errorRewriter) in /Users/buildagent/agent/_work/20/s/src/mscorlib/shared/Interop/Unix/Interop.IOErrors.cs:line 50        at System.IO.Path.GetTempFileName() in /Users/buildagent/agent/_work/20/s/src/mscorlib/shared/System/IO/Path.Unix.cs:line 99        at System.IO.Tests.PathTests.GetTempFileName() in /Users/buildagent/agent/_work/391/s/corefx/src/System.Runtime.Extensions/tests/System/IO/PathTests.cs:line 174 Build : Master - 20180308.02 (Core Tests) Failing configurations: - OSX.1013.Amd64-x64   - Release Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180308.02/workItem/System.Runtime.Extensions.Tests/analysis/xunit/System.IO.Tests.PathTests~2FGetTempFileName
27846	area-System.Net	[Win7] Test failure: System.Net.WebSockets.Client.Tests.ClientWebSocketOptionsTests / ClientCertificates_ValidCertificate_ServerReceivesCertificateAndConnectAsyncSucceeds	## Type of failure    ```  Assert.NotNull() Failure  at System.Net.WebSockets.Client.Tests.ClientWebSocketOptionsTests.<>c__DisplayClass8_0.<<ClientCertificates_ValidCertificate_ServerReceivesCertificateAndConnectAsyncSucceeds>b__3>d.MoveNext() in E:\A\_work\63\s\corefx\src\System.Net.WebSockets.Client\tests\ClientWebSocketOptionsTests.cs:line 104  --- End of stack trace from previous location where exception was thrown ---  at System.Net.Test.Common.LoopbackServer.AcceptConnectionAsync(Func`2 funcAsync) in E:\A\_work\63\s\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 117  at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext() in E:\A\_work\63\s\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 84  --- End of stack trace from previous location where exception was thrown ---  at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in E:\A\_work\63\s\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 67  at System.Net.WebSockets.Client.Tests.ClientWebSocketOptionsTests.ClientCertificates_ValidCertificate_ServerReceivesCertificateAndConnectAsyncSucceeds() in E:\A\_work\63\s\corefx\src\System.Net.WebSockets.Client\tests\ClientWebSocketOptionsTests.cs:line 89  --- End of stack trace from previous location where exception was thrown ---  ```    ## History of failure    Day | Build | Details  -- | -- | --  3/7 | 20180307.03 | 2x  3/7 | 20180307.04 | 2x  3/7 | 20180307.06 | 2x  3/8 | 20180308.01 | 2x  3/8 | 20180308.02 | 2x  3/8 | 20180308.06 | 2x  3/8 | 20180308.09 | 2x  3/10 | 20180310.01 | 2x  3/10 | 20180310.02 | 2x  3/11 | 20180311.01 | 2x  3/11 | 20180311.02 | 2x  3/12 | 20180312.01 | 2x  3/12 | 20180312.02 | 2x  3/13 | 20180313.01 | 2x  3/13 | 20180313.03 | 2x  3/14 | 20180314.01 | 2x  
27845	area-System.IO	"System.IO.Pipes.Tests.NamedPipeTest_UnixDomainSockets failed with ""System.ArgumentOutOfRangeException"""	The tests: System.IO.Pipes.Tests.NamedPipeTest_UnixDomainSockets.NamedPipeClient_Connects_With_UnixDomainSocketEndPointServer  System.IO.Pipes.Tests.NamedPipeTest_UnixDomainSockets.NamedPipeServer_Connects_With_UnixDomainSocketEndPointClient failed.    Details: https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_debug/53/testReport/  Failed configuration: OSX 10.12_debug    ~~~  MESSAGE:  System.ArgumentOutOfRangeException : The path '/Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/tempHome/pipe-tests-corefx-tvskgzdu.r1u' is of an invalid length for use with domain sockets on this platform. The length must be between 1 and 104 characters, inclusive.\nParameter name: path\nActual value was /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/tempHome/pipe-tests-corefx-tvskgzdu.r1u.  STACK TRACE:  at System.Net.Sockets.UnixDomainSocketEndPoint..ctor(String path) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/src/System.Net.Sockets/src/System/Net/Sockets/UnixDomainSocketEndPoint.cs:line 56 at System.IO.Pipes.Tests.NamedPipeTest_UnixDomainSockets.NamedPipeClient_Connects_With_UnixDomainSocketEndPointServer() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/src/System.IO.Pipes/tests/NamedPipeTests/NamedPipeTest.UnixDomainSockets.cs:line 37 --- End of stack trace from previous location where exception was thrown ---  ~~~
27844	area-System.IO	Tests for remove relative segments	Coreclr PR :- https://github.com/dotnet/coreclr/pull/16829  Remove Relative Segments have been moved to PathIntenal in the coreclr PR. So this pr contaitns the tests for it
27843	area-System.Security	Use ArrayPool for temporary buffers in S.S.C.Primitives	"CryptoStream ReadAsync, WriteAsync  HashAlgorithm.ComputeHash(Stream)    All other usages of ""new byte["" appear to be for returned values.    Fixes #16622"
27842	area-Infrastructure	Mirror changes from dotnet/coreclr	This PR contains mirrored changes from dotnet/coreclr   **Please REBASE this PR when merging**
27841	area-Meta	Lots of duplicate *.cs files in corefx	I wrote a small script to detect duplicates and it turns out there lots of such files in the repository   When I try to re-use some of the following files in mono I am confused which one to pick  Also the script detects files with a very small diff (see second group)  Is it intentional?  ```  ExternDll.cs:     src\System.DirectoryServices\src\System\DirectoryServices\ExternDll.cs     src\System.DirectoryServices.AccountManagement\src\System\DirectoryServices\AccountManagement\ExternDll.cs    Interop.IOErrors.cs:     src\Common\src\CoreLib\Interop\Unix\Interop.IOErrors.cs     src\Common\src\Interop\Unix\Interop.IOErrors.cs    Interop.Close.cs:     src\Common\src\CoreLib\Interop\Unix\System.Native\Interop.Close.cs     src\Common\src\Interop\Unix\System.Native\Interop.Close.cs    Interop.FLock.cs:     src\Common\src\CoreLib\Interop\Unix\System.Native\Interop.FLock.cs     src\Common\src\Interop\Unix\System.Native\Interop.FLock.cs    Interop.FSync.cs:     src\Common\src\CoreLib\Interop\Unix\System.Native\Interop.FSync.cs     src\Common\src\Interop\Unix\System.Native\Interop.FSync.cs    Interop.FTruncate.cs:     src\Common\src\CoreLib\Interop\Unix\System.Native\Interop.FTruncate.cs     src\Common\src\Interop\Unix\System.Native\Interop.FTruncate.cs    Interop.GetCwd.cs:     src\Common\src\CoreLib\Interop\Unix\System.Native\Interop.GetCwd.cs     src\Common\src\Interop\Unix\System.Native\Interop.GetCwd.cs    Interop.LSeek.cs:     src\Common\src\CoreLib\Interop\Unix\System.Native\Interop.LSeek.cs     src\Common\src\Interop\Unix\System.Native\Interop.LSeek.cs    Interop.MksTemps.cs:     src\Common\src\CoreLib\Interop\Unix\System.Native\Interop.MksTemps.cs     src\Common\src\Interop\Unix\System.Native\Interop.MksTemps.cs    Interop.Open.cs:     src\Common\src\CoreLib\Interop\Unix\System.Native\Interop.Open.cs     src\Common\src\Interop\Unix\System.Native\Interop.Open.cs    Interop.OpenFlags.cs:     src\Common\src\CoreLib\Interop\Unix\System.Native\Interop.OpenFlags.cs     src\Common\src\Interop\Unix\System.Native\Interop.OpenFlags.cs    Interop.PathConf.cs:     src\Common\src\CoreLib\Interop\Unix\System.Native\Interop.PathConf.cs     src\Common\src\Interop\Unix\System.Native\Interop.PathConf.cs    Interop.Permissions.cs:     src\Common\src\CoreLib\Interop\Unix\System.Native\Interop.Permissions.cs     src\Common\src\Interop\Unix\System.Native\Interop.Permissions.cs    Interop.PosixFAdvise.cs:     src\Common\src\CoreLib\Interop\Unix\System.Native\Interop.PosixFAdvise.cs     src\Common\src\Interop\Unix\System.Native\Interop.PosixFAdvise.cs    Interop.ReadLink.cs:     src\Common\src\CoreLib\Interop\Unix\System.Native\Interop.ReadLink.cs     src\Common\src\Interop\Unix\System.Native\Interop.ReadLink.cs    Interop.Stat.cs:     src\Common\src\CoreLib\Interop\Unix\System.Native\Interop.Stat.cs     src\Common\src\Interop\Unix\System.Native\Interop.Stat.cs    Interop.SysLog.cs:     src\Common\src\CoreLib\Interop\Unix\System.Native\Interop.SysLog.cs     src\Common\src\Interop\Unix\System.Native\Interop.SysLog.cs    Interop.Unlink.cs:     src\Common\src\CoreLib\Interop\Unix\System.Native\Interop.Unlink.cs     src\Common\src\Interop\Unix\System.Native\Interop.Unlink.cs    Interop.BOOL.cs:     src\Common\src\CoreLib\Interop\Windows\Interop.BOOL.cs     src\Common\src\Interop\Windows\Interop.BOOL.cs    Interop.CancelIoEx.cs:     src\Common\src\CoreLib\Interop\Windows\Kernel32\Interop.CancelIoEx.cs     src\Common\src\Interop\Windows\kernel32\Interop.CancelIoEx.cs    Interop.CloseHandle.cs:     src\Common\src\CoreLib\Interop\Windows\Kernel32\Interop.CloseHandle.cs     src\Common\src\Interop\Windows\kernel32\Interop.CloseHandle.cs    Interop.FileAttributes.cs:     src\Common\src\CoreLib\Interop\Windows\Kernel32\Interop.FileAttributes.cs     src\Common\src\Interop\Windows\kernel32\Interop.FileAttributes.cs    Interop.FindClose.cs:     src\Common\src\CoreLib\Interop\Windows\Kernel32\Interop.FindClose.cs     src\Common\src\Interop\Windows\kernel32\Interop.FindClose.cs    Interop.FlushFileBuffers.cs:     src\Common\src\CoreLib\Interop\Windows\Kernel32\Interop.FlushFileBuffers.cs     src\Common\src\Interop\Windows\kernel32\Interop.FlushFileBuffers.cs    Interop.ReadFile_SafeHandle_IntPtr.cs:     src\Common\src\CoreLib\Interop\Windows\Kernel32\Interop.ReadFile_SafeHandle_IntPtr.cs     src\Common\src\Interop\Windows\kernel32\Interop.ReadFile_SafeHandle_IntPtr.cs    Interop.ReadFile_SafeHandle_NativeOverlapped.cs:     src\Common\src\CoreLib\Interop\Windows\Kernel32\Interop.ReadFile_SafeHandle_NativeOverlapped.cs     src\Common\src\Interop\Windows\kernel32\Interop.ReadFile_SafeHandle_NativeOverlapped.cs    Interop.SecurityOptions.cs:     src\Common\src\CoreLib\Interop\Windows\Kernel32\Interop.SecurityOptions.cs     src\Common\src\Interop\Windows\kernel32\Interop.SecurityOptions.cs    Interop.SetEndOfFile.cs:     src\Common\src\CoreLib\Interop\Windows\Kernel32\Interop.SetEndOfFile.cs     src\Common\src\Interop\Windows\kernel32\Interop.SetEndOfFile.cs    Interop.SetFilePointerEx.cs:     src\Common\src\CoreLib\Interop\Windows\Kernel32\Interop.SetFilePointerEx.cs     src\Common\src\Interop\Windows\kernel32\Interop.SetFilePointerEx.cs    Interop.WriteFile_SafeHandle_IntPtr.cs:     src\Common\src\CoreLib\Interop\Windows\Kernel32\Interop.WriteFile_SafeHandle_IntPtr.cs     src\Common\src\Interop\Windows\kernel32\Interop.WriteFile_SafeHandle_IntPtr.cs    Interop.WriteFile_SafeHandle_NativeOverlapped.cs:     src\Common\src\CoreLib\Interop\Windows\Kernel32\Interop.WriteFile_SafeHandle_NativeOverlapped.cs     src\Common\src\Interop\Windows\kernel32\Interop.WriteFile_SafeHandle_NativeOverlapped.cs    SafeDirectoryHandle.Unix.cs:     src\Common\src\CoreLib\Microsoft\Win32\SafeHandles\SafeDirectoryHandle.Unix.cs     src\Common\src\Microsoft\Win32\SafeHandles\SafeDirectoryHandle.Unix.cs    ICollectionDebugView.cs:     src\Common\src\CoreLib\System\Collections\Generic\ICollectionDebugView.cs     src\System.Collections\src\System\Collections\Generic\ICollectionDebugView.cs    IDictionaryDebugView.cs:     src\Common\src\CoreLib\System\Collections\Generic\IDictionaryDebugView.cs     src\System.Collections\src\System\Collections\Generic\IDictionaryDebugView.cs    DisableMediaInsertionPrompt.cs:     src\Common\src\CoreLib\System\IO\DisableMediaInsertionPrompt.cs     src\System.IO.FileSystem\src\System\IO\DisableMediaInsertionPrompt.cs    StreamHelpers.CopyValidation.cs:     src\Common\src\CoreLib\System\IO\StreamHelpers.CopyValidation.cs     src\Common\src\System\IO\StreamHelpers.CopyValidation.cs    DeferredDisposableLifetime.cs:     src\Common\src\CoreLib\System\Threading\DeferredDisposableLifetime.cs     src\System.Threading.Overlapped\src\System\Threading\DeferredDisposableLifetime.cs    TaskToApm.cs:     src\Common\src\CoreLib\System\Threading\Tasks\TaskToApm.cs     src\Common\src\System\Threading\Tasks\TaskToApm.cs    NetEventSource.Security.Windows.cs:     src\Common\src\System\Net\Security\NetEventSource.Security.Windows.cs     src\System.Net.Security\src\System\Net\Security\NetEventSource.Security.Windows.cs    DisableParallelization.cs:     src\Common\tests\System\Xml\DisableParallelization.cs     src\System.Private.Xml\tests\Writers\XmlWriterApi\DisableParallelization.cs    AppContext.Switch.cs:     src\System.AppContext\tests\AppContext.Switch.cs     src\System.Runtime\tests\System\AppContext\AppContext.Switch.cs    AppContext.Switch.Validation.cs:     src\System.AppContext\tests\AppContext.Switch.Validation.cs     src\System.Runtime\tests\System\AppContext\AppContext.Switch.Validation.cs    KeyValuePairs.cs:     src\System.Collections.NonGeneric\src\System\Collections\KeyValuePairs.cs     src\System.Runtime.Extensions\src\System\Collections\KeyValuePairs.cs    TimeoutTimer.cs:     src\System.Data.Odbc\src\Common\System\Data\ProviderBase\TimeoutTimer.cs     src\System.Data.SqlClient\src\System\Data\ProviderBase\TimeoutTimer.cs    FakeContextAwareResult.cs:     src\System.Net.NameResolution\tests\PalTests\Fakes\FakeContextAwareResult.cs     src\System.Net.NameResolution\tests\UnitTests\Fakes\FakeContextAwareResult.cs    CollectionDataContractAttribute.cs:     src\System.Private.DataContractSerialization\src\System\Runtime\Serialization\CollectionDataContractAttribute.cs     src\System.Runtime.Serialization.Primitives\src\System\Runtime\Serialization\CollectionDataContractAttribute.cs    ContractNamespaceAttribute.cs:     src\System.Private.DataContractSerialization\src\System\Runtime\Serialization\ContractNamespaceAttribute.cs     src\System.Runtime.Serialization.Primitives\src\System\Runtime\Serialization\ContractNamespaceAttribute.cs    DataContractAttribute.cs:     src\System.Private.DataContractSerialization\src\System\Runtime\Serialization\DataContractAttribute.cs     src\System.Runtime.Serialization.Primitives\src\System\Runtime\Serialization\DataContractAttribute.cs    EnumMemberAttribute.cs:     src\System.Private.DataContractSerialization\src\System\Runtime\Serialization\EnumMemberAttribute.cs     src\System.Runtime.Serialization.Primitives\src\System\Runtime\Serialization\EnumMemberAttribute.cs    AssemblyAttributes.cs:     src\Common\tests\System\Diagnostics\RemoteExecutorConsoleApp\AssemblyAttributes.cs     src\System.Runtime\tests\TestAssembly\AssemblyAttributes.cs     src\System.Runtime.Extensions\tests\AssemblyResolveTests\AssemblyAttributes.cs     src\System.Runtime.Extensions\tests\TestApp\AssemblyAttributes.cs     src\System.Runtime.Extensions\tests\TestAppOutsideOfTPA\AssemblyAttributes.cs     src\System.Runtime.Extensions\tests\VoidMainWithExitCodeApp\AssemblyAttributes.cs    GlobalSuppressions.cs:     src\System.Collections.Immutable\src\GlobalSuppressions.cs     src\System.Text.Encodings.Web\src\Properties\GlobalSuppressions.cs    XunitTestAssemblyAtrributes.cs:     src\System.Net.Http.WinHttpHandler\tests\FunctionalTests\XunitTestAssemblyAtrributes.cs     src\System.Net.Http.WinHttpHandler\tests\UnitTests\XunitTestAssemblyAtrributes.cs    Serialization.cs:     src\System.Net.Primitives\tests\PalTests\Fakes\Serialization.cs     src\System.Net.Primitives\tests\UnitTests\Fakes\Serialization.cs  ```  ## The following files have a very small diff:  ```  Interop.Errors.cs:     src\Common\src\CoreLib\Interop\Unix\Interop.Errors.cs     src\Common\src\Interop\Unix\Interop.Errors.cs    IPv4AddressHelper.cs:     src\System.Net.Primitives\src\System\Net\IPv4AddressHelper.cs     src\System.Private.Uri\src\System\IPv4AddressHelper.cs    Interop.FormatMessage.cs:     src\Common\src\CoreLib\Interop\Windows\Kernel32\Interop.FormatMessage.cs     src\Common\src\Interop\Windows\kernel32\Interop.FormatMessage.cs    TupleExtensions.cs:     src\Common\src\CoreLib\System\TupleExtensions.cs     src\System.ValueTuple\src\System\ValueTuple\TupleExtensions.cs    DriveNotFoundException.cs:     src\Common\src\CoreLib\System\IO\DriveNotFoundException.cs     src\System.IO.FileSystem.DriveInfo\src\System\IO\DriveNotFoundException.cs    XmlRawWriter.cs:     src\Common\src\System\Xml\XmlRawWriter.cs     src\System.Private.Xml\src\System\Xml\Core\XmlRawWriter.cs    IProducerConsumerCollection.cs:     src\System.Collections.Concurrent\src\System\Collections\Concurrent\IProducerConsumerCollection.cs     src\System.Threading.Tasks.Dataflow\src\Internal\IProducerConsumerCollection.cs    InvalidEnumArgumentException.cs:     src\System.ComponentModel.Primitives\src\System\ComponentModel\InvalidEnumArgumentException.cs     src\System.Drawing.Common\src\misc\InvalidEnumArgumentException.cs    DbConnectionClosed.cs:     src\System.Data.Odbc\src\Common\System\Data\ProviderBase\DbConnectionClosed.cs     src\System.Data.SqlClient\src\System\Data\ProviderBase\DbConnectionClosed.cs    DbConnectionFactory.cs:     src\System.Data.Odbc\src\Common\System\Data\ProviderBase\DbConnectionFactory.cs     src\System.Data.SqlClient\src\System\Data\ProviderBase\DbConnectionFactory.cs    DbConnectionPoolGroup.cs:     src\System.Data.Odbc\src\Common\System\Data\ProviderBase\DbConnectionPoolGroup.cs     src\System.Data.SqlClient\src\System\Data\ProviderBase\DbConnectionPoolGroup.cs    DbMetaDataFactory.cs:     src\System.Data.Odbc\src\Common\System\Data\ProviderBase\DbMetaDataFactory.cs     src\System.Data.SqlClient\src\System\Data\ProviderBase\DbMetaDataFactory.cs    DbReferenceCollection.cs:     src\System.Data.Odbc\src\Common\System\Data\ProviderBase\DbReferenceCollection.cs     src\System.Data.SqlClient\src\System\Data\ProviderBase\DbReferenceCollection.cs    DataMemberAttribute.cs:     src\System.Private.DataContractSerialization\src\System\Runtime\Serialization\DataMemberAttribute.cs     src\System.Runtime.Serialization.Primitives\src\System\Runtime\Serialization\DataMemberAttribute.cs  ```    EDIT by @krwq:  Similar issue but needs investigation on exact file list:  - [ ] https://github.com/dotnet/corefx/issues/28069  
27840	area-System.Text	Add a RegexExpression class and method-based regular expression	"I made this proposal to C# repo.  https://github.com/dotnet/csharplang/issues/1364  It concerns a LinQ syntax for Regular expressions. Apparently it depends on a RegexExpression Class and some extension methods.   RgxExpression calass should have some construcors to allow create an instance based on a regex string, or another RgxExpression instance or expression. This will help define repeated expression, and maje use ofregex language. RgxExpression.ToString() will return the regex string.  The RgxExpression can be like this:  ```  class RgxExpression   {     public string Expression {get; set;}          }  ```    The extenstion methods should be like this:    ```  RgxExpression Foo (this RgxExpression exp)  {    RgxExpression exp1 = ........;      return Merge(exp.Expression, exp1);  }    ```  This is how I represent email regex for example:  ```  var smalls = Range(""a"", ""z"");  var caps = Range(""A"",""Z"")  var L = Any(smalls, cap, Digit, ""."", ""_"", ""-"")  var W1 = L.Repeat(1);  var W2 = L.Repeat(2, 4);  var email = Boundary.W1.Constant(""@"").W1.Constant(""."").W2.Boundary;  string rgx = email.ToString();    In the discussion it appears that there are some similar work like:  https://github.com/sprache/Sprache  https://github.com/VerbalExpressions/CSharpVerbalExpressions.  The problem is there are 100,000 NuGets and impossible to explore them all!  My question is: why don't you embrace this idea and add a method-based regular expression, to make it easy for programmers to understand and use?  Being a part of the language will make it popular than being an infamous NuGet.   By the way: Fast growing NuGets should have an online magazine or something to let us know about. This is a huge fortune but not easy to dig out its treasures.   "
27839	area-System.Net	Add FileStream and int64 overloads to SendPacketsElement	See https://github.com/dotnet/corefx/issues/25354
27838	area-System.Net	Avoid timing issue in IOControl_SIOCATMARK tests	This test is sending out of band data, and then checking that it has been received immediately. Depending on timing the check may actually be hit before the data is received, so we need to give it some time.    When I updated these tests in PR #27583 I didn't consider that sent data wouldn't be received instantaneously. That was taken into consideration in the original tests and mitigated with `SpinWait.SpinUntil`, but after my update that check was in the wrong spot. This fix moves them to the right place.    Fixes: #27835, #27717
27837	area-Infrastructure	Update BuildTools alone	While the other jobs are sorted out, bring the new stack dumping goodness.
27835	area-System.Net	Failure in System.Net.Sockets tests 	Platform Windows.10.Nano.Amd64.Open-Debug-x64    https://mc.dot.net/#/user/saurabh500/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/04164334d136264666f75ffc51b54c1961bc1f16/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.OSSupportTest~2FIOControl_SIOCATMARK_Windows_Success       at System.Net.Sockets.Tests.OSSupportTest.IOControl_SIOCATMARK_Windows_Success() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Sockets\tests\FunctionalTests\OSSupport.cs:line 167      Assert.Equal() Failure  Expected: 0  Actual: 1    
27834	area-System.Net	Failure in System.Net.Http.Functional.Tests	https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_false_prtest/9469/consoleFull    ```  System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test.GetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections: 2, numRequests: 2, secure: False) [FAIL]  12:06:05         System.Threading.Tasks.TaskCanceledException : A task was canceled.  12:06:05         Stack Trace:  12:06:05              at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)  12:06:05              at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  12:06:05              at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()  12:06:05           --- End of stack trace from previous location where exception was thrown ---  12:06:05              at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()  12:06:05              at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)  12:06:05              at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  12:06:05              at System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test.<GetAsync_MaxLimited_ConcurrentCallsStillSucceed>d__3.MoveNext()  12:06:05           --- End of stack trace from previous location where exception was thrown ---  12:06:05              at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()  12:06:05              at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)  12:06:05              at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  12:06:05           --- End of stack trace from previous location where exception was thrown ---  12:06:05              at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()  12:06:05              at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)  12:06:05              at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  12:06:05           --- End of stack trace from previous location where exception was thrown ---  12:06:05              at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()  12:06:05              at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)  12:06:05              at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  12:06:05     Finished:    System.Net.Http.Functional.Tests    ```
27833	area-Infrastructure	Update Buildtools & undo unnecessary changes to publish	CC @dagood, @weshaggard     I'm also undoing my changes from https://github.com/dotnet/corefx/pull/27667 and https://github.com/dotnet/corefx/pull/27749, which will be unnecessary once we update buildtools
27831	area-Infrastructure	Update SLNs and projects to be in sync with configurations	I've noticed quite a bit of noise when running this lately so I figured I'd get us back up-to-date.    /cc @weshaggard @joperezr 
27828	area-System.Net	Renable some TLS callback tests with SocketsHttpHandler	The UseCallback_BadCertificate_ExpectedPolicyErrors tests had been  disabled when running against SocketsHttpHandler. The reason in the  comments was that the tests were not returning the proper  SslPolicyErrors.    These particular tests use external third party servers (*.badssl.com).  Running these tests now against the latest code shows no errors.  It's  possible this was a problem related to those external servers. Renabling  the tests for now.    Fixes #23137
27827	area-System.IO	Dial back `\\?\ ` insertion	Only premptively adding for FileSystemInfo if we end in period or space.  Long path is taken care of later.    Clean up code a little and add test for DirectoryInfo.Move.    cc: @danmosemsft, @pjanotti, @Anipik 
27826	area-System.IO	Named pipe in Unix respects absolute path	"This was added for two reasons:    1. Allow users to workaround the hard limit on Unix domain sockets that can be very limiting if the $TMPDIR has a long path;    2. Make easy to make that works both on Unix and Windows without having to check platform, e.g.: ""/tmp/myAppPipe"" works on both platforms."
27824	area-System.Memory	Consider SafeHandle semantics for OwnedMemory	*ReadOnlyMemory&lt;T&gt;:*    https://github.com/dotnet/corefx/blob/5c7f5447f49ff6a7aa935765a993c42c70a1b699/src/Common/src/CoreLib/System/ReadOnlyMemory.cs#L234    *OwnedMemory&lt;T&gt;:*    https://github.com/dotnet/corefx/blob/41a2120b233cc02c175f812e4e19e3f058396cb0/src/Common/src/CoreLib/System/Buffers/OwnedMemory.cs#L46    https://github.com/dotnet/corefx/blob/41a2120b233cc02c175f812e4e19e3f058396cb0/src/Common/src/CoreLib/System/Buffers/OwnedMemory.cs#L87    Is it intended that these two types have different usage patterns?    It's also not not very clear if a call to `OwnedMemory<T>.Pin()` implies a call to `OwnedMemory<T>.Retain()` or not.    <details>  <summary>Proposed changes (click to expand)</summary>    ```diff   namespace System.Buffers   {       public abstract class OwnedMemory<T> : IDisposable, IRetainable       {           public abstract int Length { get; }           public abstract Span<T> Span { get; }           public Memory<T> Memory { get; }  -        public abstract MemoryHandle Pin(int byteOffset = 0);           public void Dispose()           protected abstract void Dispose(bool disposing);           protected abstract bool IsRetained { get; }           public abstract bool IsDisposed { get; }  -        public abstract void Retain();  +        public abstract MemoryHandle Retain(bool pin = false, int byteOffset = 0);  -        public abstract bool Release();       }   }  ```    or, less preferably,    ```diff   namespace System   {       public readonly struct ReadOnlyMemory<T>       {           public ReadOnlyMemory(T[] array)           public ReadOnlyMemory(T[] array, int start, int length)           public static implicit operator ReadOnlyMemory<T>(T[] array)           public static implicit operator ReadOnlyMemory<T>(ArraySegment<T> arraySegment)           public static ReadOnlyMemory<T> Empty { get; }           public int Length { get; }           public bool IsEmpty { get; }           public override string ToString()           public ReadOnlyMemory<T> Slice(int start)           public ReadOnlyMemory<T> Slice(int start, int length)           public ReadOnlySpan<T> Span { get; }           public void CopyTo(Memory<T> destination)           public bool TryCopyTo(Memory<T> destination)  -        public MemoryHandle Retain(bool pin = false)  +        public MemoryHandle Pin()  +        public void Retain()  +        public void Release()           public T[] ToArray()           public override bool Equals(object obj)           public bool Equals(ReadOnlyMemory<T> other)           public override int GetHashCode()       }   }  ```    </details>
27823	area-System.Diagnostics	TestChildProcessCleanupAfterDispose(true) failed in CI on Linux	https://mc.dot.net/#/user/stephentoub/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/ed9ac7bd3de570b921d74473ded3a06ba9f2baee/workItem/System.Diagnostics.Process.Tests/analysis/xunit/System.Diagnostics.Tests.ProcessTests~2FTestChildProcessCleanupAfterDispose(shortProcess:%20False,%20enableEvents:%20True)  ```  Debian.87.Amd64.Open-Release-x64  Get Repro environment  Unhandled Exception of Type Xunit.Sdk.TrueException  Message :  Assert.True() Failure  Expected: True  Actual:   False  ```  cc: @tmds
27821	area-System.Net	Make SocketsHttpHandler default Handler	This PR makes SocketsHttpHandler the default Handler, and will address task 1 & 3 in #27783.
27820	area-System.ComponentModel	 Translate all messages from DataAnnotation	"Hello, I am trying to translate the standard messages for the RequiredAttribute, MaxLenghtAttribute and other standard Attributes.  Below is the code I have:    ```  services.AddMvc().AddRazorOptions(options =>              {                  options.AddNavigationBootstrap3Views();              })              .AddDataAnnotationsLocalization(options =>              {                  options.DataAnnotationLocalizerProvider = (type, factory) =>  factory.Create(typeof(Tecnologia.Infrastructure.Presentation.Resources.ModelBindingDefault));              }).AddViewLocalization();                services.Configure<RequestLocalizationOptions>(options =>              {                  var supportedCultures = new[] { new CultureInfo(""pt-BR"") };                  options.DefaultRequestCulture = new RequestCulture(""pt-BR"", ""pt-BR"");                  options.SupportedCultures = supportedCultures;                  options.SupportedUICultures = supportedCultures;              });  ```    With this code it is necessary that I pass the key in my attributes  [Required(ErrorMessage = ""RequiredAttribute_ValidationError"")]      I would like to know if it is possible to use only [Required], I have already verified several issues on the subject, but none has provided a plausible solution for this case. Maybe you have some way to replace Strings.resx with your own resources.    I look forward to returning, thank you.    image from my .resx file  [ModelBindingDefault.resx](http://prntscr.com/io64g6)  "
27818	area-Infrastructure	Unable to find corerun when trying to crack dump on Helix machine	"Below is an example where a test created a dump file and it says ""unable to find executable corerun""  This comes from tools\runnertemplate.unix.txt. It wants to pass corerun to gdb along with the dump file.    @Anipik can you please find out why it can't find corerun? You will want to start with a Linux repro machine, and force a dump to be created during the test run. Is corerun even on the box?  ```  2018-03-07 14:43:09,565: INFO: proc(54): run_and_log_output: Output: /home/helixbot/dotnetbuild/work/b2384be1-704d-4bec-b031-ca5c2d74827c/Work/3827fb45-1b10-44e2-ad56-2cb0253d008f/Unzip/RunTests.sh: line 88: 35000 Aborted                 (core dumped) $RUNTIME_PATH/dotnet xunit.console.netcore.exe System.Xml.XmlSchema.XmlSchemaValidatorApi.Tests.dll -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=OuterLoop -notrait category=failing  2018-03-07 14:43:09,633: INFO: proc(54): run_and_log_output: Output: Dumpling has not been installed yet. Please run ""DumplingHelper.py install_dumpling"" before collect_dumps.  2018-03-07 14:43:09,637: INFO: proc(54): run_and_log_output: Output: ~/dotnetbuild/work/b2384be1-704d-4bec-b031-ca5c2d74827c/Work/3827fb45-1b10-44e2-ad56-2cb0253d008f/Unzip  2018-03-07 14:43:09,639: INFO: proc(54): run_and_log_output: Output: ----- end 14:43:09 ----- exit code 134 ----------------------------------------------------------  2018-03-07 14:43:09,642: INFO: proc(54): run_and_log_output: Output: Unable to find executable corerun  2018-03-07 14:43:09,645: INFO: proc(54): run_and_log_output: Output: Copying core file core.35000 to /tmp/coredumps  2018-03-07 14:43:09,768: INFO: proc(58): run_and_log_output: Exit Code: 134  2018-03-07 14:43:09,777: ERROR: scriptrunner(91): _main: Error: No exception thrown, but XUnit results not created  2018-03-07 14:43:09,777: ERROR: helix_test_execution(83): report_error: Error running xunit None  ```"
27817	area-System.Collections	LinkedList_Generic_Tests_int.RemoveLast_Tests failed on Windows in CI	https://mc.dot.net/#/user/stephentoub/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/35efdbdc1e25f83f216064482479e555425ce3a0/workItem/System.Collections.Tests/analysis/xunit/System.Collections.Tests.LinkedList_Generic_Tests_int~2FRemoveLast_Tests  ```  Windows.81.Amd64.Open-Debug-x64  Unhandled Exception of Type Xunit.Sdk.EqualException  Message :  Assert.Equal() Failure  Expected: LinkedListNode`1 { List = [718949278, 815265269, 911581260, 1007897251, 1104213242, ...], Next = LinkedListNode`1 { List = [...], Next = null, Previous = LinkedListNode`1 { ... }, Value = 1296845224 }, Previous = LinkedListNode`1 { List = [...], Next = LinkedListNode`1 { ... }, Previous = LinkedListNode`1 { ... }, Value = 1104213242 }, Value = 1200529233 }  Actual:   LinkedListNode`1 { List = [718949278, 815265269, 911581260, 1007897251, 1104213242, ...], Next = LinkedListNode`1 { List = [...], Next = null, Previous = LinkedListNode`1 { ... }, Value = 1296845224 }, Previous = LinkedListNode`1 { List = [...], Next = LinkedListNode`1 { ... }, Previous = LinkedListNode`1 { ... }, Value = 1104213242 }, Value = 1200529233 }  Stack Trace :     at System.Collections.Tests.LinkedList_Generic_Tests`1.VerifyLinkedListNode(LinkedListNode`1 node, T expectedValue, LinkedList`1 expectedList, LinkedListNode`1 expectedPrevious, LinkedListNode`1 expectedNext) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Collections\tests\Generic\LinkedList\LinkedList.Generic.Tests.cs:line 141     at System.Collections.Tests.LinkedList_Generic_Tests`1.VerifyState(LinkedList`1 linkedList, T[] expectedItems) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Collections\tests\Generic\LinkedList\LinkedList.Generic.Tests.cs:line 83     at System.Collections.Tests.LinkedList_Generic_Tests`1.InitialItems_Tests(LinkedList`1 collection, T[] expectedItems) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Collections\tests\Generic\LinkedList\LinkedList.Generic.Tests.cs:line 38     at System.Collections.Tests.LinkedList_Generic_Tests`1.RemoveLast_Tests() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Collections\tests\Generic\LinkedList\LinkedList.Generic.Tests.RemoveLast.cs:line 89  ```
27816	area-System.IO	System.IO.File.Open should open the file with shared write access	Hi,     following two lines to fail, because OpenRead does not share the write access, even if it does not need/use and configure it beforehand.    var stream1 = new FileStream(filename, FileMode.Create, FileAccess.ReadWrite, FileShare.Read);  var stream2 = File.OpenRead(filename);    Kind regards    p.s. I write here, because I do not know a better place. 
27814	area-System.Net	System.Net.Sockets.Socket: No buffer space available when setting SendBufferSize	"I am trying to create a socket with an 8MB buffer (8388608 bytes) with the following code.    ```  var socket = new Socket(SocketType.Stream, ProtocolType.Tcp);  socket.SendBufferSize = Setting.NetworkBufferSize;  socket.ReceiveBufferSize = Setting.NetworkBufferSize;  socket.NoDelay = true;  ```    The code fails on the second line with ""No buffer space available"".    ```  System.Net.Sockets.SocketException: ""No buffer space available""    at System.Net.Sockets.Socket.UpdateStatusAfterSocketErrorAndThrowException(SocketError error, String callerName)    at System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, Int32 optionValue, Boolean silent)    at System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, Int32 optionValue)    at System.Net.Sockets.Socket.set_SendBufferSize(Int32 value)  ```    This code works fine when executing in a Windows environment.    Is this behavior expected?  "
27813	area-System.Data	Connection to SQL Server impossible in UWP app	"**EDIT**: Nevermind. I found the solution here in a .Net Standard [issue](https://github.com/dotnet/standard/issues/578). Should be stated more clearly that ""Internet (Client & Server) is a required capability in UWP in order to connect... I only had Private Networks (which my network actually is) on. Moreover the exception should be more of a ""PermissionException"" instead of ""Server not found""...    We're using SQL server to store sensor data which I need to read and use in an UWP app to visualize the outcome. The writing program is written in WPF and uses the EF6 which is unavailabel in UWP.    Whereas I use **System.Data.SqlClient** in the UWP app now. I tried every variation I could find on ConnectionStrings.com and the MSDN. Nothing works. I always get the same exception in the following two cases:    **Case 1:** I do not specify an explict port  Connection String:  `Data Source=tcp:***.***.***.***\\SQLEXPRESS;Initial Catalog=MyDB;Integrated Security=False;User ID=UserName;Password=Password`  > System.Data.SqlClient.SqlException: 'A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: SQL Network Interfaces, error: 26 - Error Locating Server/Instance Specified)'    The same goes for an explicit computer name or leaving the _tcp:_-prefix.    **Case 2:** I specify an explicit port  Equal for computer name, IP and tcp-prefix with or without instance name.    > System.Data.SqlClient.SqlException: 'A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: TCP Provider, error: 0 - An attempt was made to access a socket in a way forbidden by its access permissions.)'  with the internal Win32-exception:    > Win32Exception: An attempt was made to access a socket in a way forbidden by its access permissions    I tried every variation with and without the `ConnectionStringBuilder`-class. Nothing works. I inititally also got some code 25 errors (I think because I forgot to explicitly set Integrated Security to false).    I created a [thread on Stackoverflow ](https://stackoverflow.com/questions/49147124/invalid-connection-string-when-connecting-to-sql-server-express?noredirect=1) where you can find more information. I tried everything possible. The last result is that this must be an issue of the SqlClient library itself.    I hope someone can help me out or fix this issue if it's really an issue of CoreFX itself. We got a deadline in less than two weeks and there's no other option to fetch data from the SQL server in .Net ...    **EDIT**  My configuration is: Universal Windows 10.0.16299.0, Target for latest Windows 10. Build without native tool-chain, for x64.    Also used the latest preview of SqlClient. No improvement."
27812	area-System.Security	X509Certificate2.GetECDsaPrivateKey does not work with an ECC certificate with private key in TPM	I am currently encountering the same problem as reported here: https://github.com/dotnet/corefx/issues/9070. I have an ECC certificate in the certificate store with a private key in 'Trusted Platform Module' (TPM). The certificate with a private key has been generated using a Windows domain. When I try to get the ECDsa instance using the GetECDsaPrivateKey method, I get ArgumentException: 'Keys used with the ECDsaCng algorithm must have an algorithm group of ECDsa'.    When I instead use a certificate which has been imported to the certificate store from a PFX file (signing certificate created by OpenSSL), the error does not occur.    Operating system: Windows 10 64-bit  .NET Framework: 4.7 (the exception also occurs in .NET 4.7.1)
27811	area-System.IO	Consider adding Scatter/Gather IO on Stream	"The Socket class has this already, in the form of Send/Receive operations that take an `IList<ArraySegment<byte>>`.  This isn't exposed up through Stream classes, however.      One specific scenario where this would be useful is writing chunked-encoded request bodies in SocketsHttpHandler.  When the user calls the request Stream's Write[Async] method, we need to first write a chunk header with the chunk length followed by \r\n, then write the chunk contents from the user's buffer to the underlying stream (which is either SslStream or NetworkStream).  This requires us to either do two writes (which means two kernel calls and means the chunk header will likely be sent in a separate packet), or to copy into a local buffer so we can do a single write.  It would be more performant (and simpler) to do a gather write where we pass two buffers, the first containing the chunk header, the second containing the chunk data, passed directly through.    There are various examples in HTTP2 where scatter/gather IO would be useful as well.  (Mostly gather, since gather helps deal with the ""framing"" scenario above.  Scatter reads are less useful since you don't control the framing yourself.)    Proposed API:    ```csharp          public virtual int Read(IReadOnlyList<Memory<byte>> buffers);          public virtual void Write(IReadOnlyList<ReadOnlyMemory<byte>> buffers);          public virtual ValueTask<int> ReadAsync(IReadOnlyList<Memory<byte>> buffers, CancellationToken cancellationToken = default);          public virtual ValueTask WriteAsync(IReadOnlyList<ReadOnlyMemory<byte>> buffers, CancellationToken cancellationToken = default);  ```    The base Stream class would provide default implementations on top of existing Read/Write APIs."
27809	area-System.IO	Support trimmed paths in FileInfo	Some paths are not creatable in Windows without special syntax. Notably paths with trailing spaces and periods. As GetFullPath() (and GetFullPathName()) trim these we would lose the correct file name as we passed the path around. With the enumeration changes we now populate FileInfo correctly- this change allows the other methods to work when wrapped around such a path.    Also remove some CAS related comments.    cc: @jkotas, @Anipik, @danmosemsft, @pjanotti 
27805	area-Infrastructure	Update UAP System.Private.CoreLib to unblock UAP builds	System.Private.CoreLib is currently in a torn state in CoreCLR vs CoreRT where the signature for `Stream.WriteAsync` has changed. This PR consumes a hand-built targeting pack containing System.Private.CoreLib's pending changes we want to merge into TFS. This should allow us to unblock the uap build and get packages we can consume in TFS. Once that happens, we can merge CoreRT into TFS, and then update with a fixed targeting pack.
27803	area-Serialization	Use ReflectionBasedSerializer for all serializers if any of mappings are soap mappings	When creating serializers for multiple mappings, if any of mappings are soap mapping, it will use ReflectionBasedSerializer and won't generate the serializer. However during serialization, for non soap mapping, it will try to use the serializer for serialization, which doesn't exist. The fix is to force all serializers using ReflectionBasedSerializer if there's any soap mapping.    #25298   @zhenlan @mconnew @yujayee @Lxiamail 
27802	area-System.Reflection	Add MethodDefinition.GetSemantics	```C#  namespace System.Reflection.Metadata  {      public struct MethodDefinition      {          ...          public MethodSemanticsAttributes GetSemantics();          ...      }  }  ```    Use case: ILSpy needs to determine whether a given method is an accessor of a property or event.
27801	area-System.Runtime	Fix inconsistent AVX/AVX2 intrinsic names	Match mscorlib change https://github.com/dotnet/coreclr/pull/16772    @eerhardt @tannergooding 
27800	area-System.Globalization	What happens when a new era is added in Japanese Calendar?	(moved from https://github.com/dotnet/cli/issues/8733 )  I wonder this might not a suitable repo for this issue. Please let me know the right repo and then I'll move.    A new era will be added in Japanese Calendar, which is planned to start at May 1st 2019. I'd like to clarify how Japanese Calendar will be updated.    Here are my understanding about a new era. I would appreciate .NET Core team confirm it. I also want a dedicated document explaining a new era and help creating it.    - At present Japanese Calendar is the only Calendar which a new era could be added. https://github.com/dotnet/coreclr/blob/v2.0.5/src/mscorlib/shared/System/Globalization/CalendarData.Unix.cs#L269  - For Windows, Japanese era info is obtained from registry. Once registry is updated to the new era, .NET Core on WIndows can get a new era info. https://msdn.microsoft.com/ja-jp/library/windows/desktop/dd317805%28v=vs.85%29.aspx?f=255&MSPPError=-2147217396  - For Unix (Linux and Mac), Japanese era info is obtained from lib-icu. Once a new version of icu is installed to the machine, .NET Core on Unix can get a new era info.  https://github.com/dotnet/coreclr/blob/v2.0.5/src/mscorlib/shared/Interop/Unix/System.Globalization.Native/Interop.Calendar.cs  - In the case .NET Core can't get a era info from registry on Windows and lib-icu on Unix, .NET Core uses [a hard-coded era info](https://github.com/dotnet/coreclr/blob/v2.0.5/src/mscorlib/shared/System/Globalization/JapaneseCalendar.cs#L97-L120). I'm not sure when this hard-coded era info is used actually. However in this case, upgrading .NET Core CLR is required to update a new era info. Also, if the application is built as a Self Contained Application, I wonder we can't update the a new era info in this application.    Are these issues related?  https://github.com/dotnet/corefx/issues/27506  https://github.com/dotnet/corefx/pull/27617            
27797	area-Microsoft.CSharp	[WIP] ignore static target type in restrictions	
27796	area-System.Net	Remove faulty assert from SocketAsyncEventArgs	AllocateNativeOverlapped asserts that !_currentSocket.SafeHandle.IsValid.  This should be a fine assert, except that SafeCloseSocket for some reason overrides IsInvalid to actually be IsClosed || IsInvalid.  And so that assert is actually checking whether the SafeHandle is both not invalid and not closed, but disposal could be racing with the operation and the socket could have been closed by the time we get here.    Fixes https://github.com/dotnet/corefx/issues/27784  cc: @geoffkizer, @davidsh
27795	area-System.Data	SqlBulkCopy: Add hooks to enable retry strategies on batches	If SqlBulkCopy encounters any kind of exception as it inserts rows into a table, it fails the entire job.     In some scenarios, certain errors might be appropriate to retry - for instance, a deadlock or timeout. While this might be unlikely when doing bulk inserts to a staging table, it is much more likely if the table is also shared by a web application, for instance.    For this reason, until now we've instead used Table Valued Parameters.    It would be helpful though if SqlBulkCopy gave us a mechanism to apply a retry strategy as appropriate.     _If this isn't the appropriate place to post suggestions like this, let me know. If there was interest in the above, I would happily investigate the feasibility of this further._
27794	area-System.ComponentModel	Fix test failure by returning early from AssertMessage	Fixes #27659
27793	area-System.Diagnostics	Fixing disabled ProcessExit_Called test masked by #27426	Fixes #27460
27792	area-System.Net	Consider some search/spider-based testing for SocketsHttpHandler	We could, for example, write a simple client that did some Bing searches and then made requests to the top 1000 results with multiple handlers and validate various things, at a minimum that requests succeed and fail similarly, maybe something about the content if possible, etc. We could also, for example, write a little spider that walked over some sites and did similar validation.
27791	area-System.Text	Use generic WeakReference and avoid casting in Regex	Based on https://github.com/dotnet/corefx/pull/27726, had to create a new PR.    @danmosemsft I don't think this change needs perf justification.
27789	area-System.Runtime	Add tests to exercise sbyte string constructors with invalid UTF8	Regression test for variant of https://github.com/dotnet/coreclr/issues/16786    Depends on https://github.com/dotnet/coreclr/pull/16749/ that is fixing this bug as side-effect.
27787	area-Infrastructure	Updating the package index for UAP and updating buildtools	This will update the packageIndex to show the correct data of the packages that we shipped on UAP RS3 and it will also take care of the buildtools update that will get the new NuGet mappings.    cc: @weshaggard @ericstj     Given that the uap builds are now working on master, this PR will basically replicate the previous PR I created against release/2.1 but on master. I haven't yet merged the other one, and so if this goes in I will just close the release/2.1 one.
27786	area-Serialization	[Perf] XmlSerializer.Deserialize() regression between 2.0 and 2.1 for Linux (around 100%)	"I have verified that the initial regression of 30% for Windows (#27636) was fixed by https://github.com/dotnet/coreclr/pull/16654 and https://github.com/dotnet/coreclr/pull/16659    Unfortunately, this is not true for Linux (at least Ubuntu 16.04). `XmlSerializer.Deserialize()` is 100% slower for Linux, when comparing 2.0 and 2.1    You can use following code to reproduce the problem:    ```cs  using System;  using System.Collections.Generic;  using System.Diagnostics;  using System.IO;  using System.Linq;  using System.Runtime.CompilerServices;  using System.Xml.Serialization;    namespace XmlDeserializationRegression  {      class Program      {          static void Main(string[] args)          {              var serializer = new XmlSerializer(typeof(LoginViewModel));              List<double> results = new List<double>();                using (var memoryStream = new MemoryStream(capacity: short.MaxValue))              {                  serializer.Serialize(memoryStream, CreateLoginViewModel());                    Benchmark(memoryStream, serializer, 1, ""Warmup"");                    for (int i = 0; i < 10; i++)                  {                      results.Add(RealRun(memoryStream, serializer, 1000, ""Actual run""));                  }              }                var coreclrAssemblyInfo = FileVersionInfo.GetVersionInfo(typeof(object).Assembly.Location);              var corefxAssemblyInfo = FileVersionInfo.GetVersionInfo(typeof(System.Text.RegularExpressions.Regex).Assembly.Location);                Console.WriteLine($""CoreCLR {coreclrAssemblyInfo.FileVersion}, CoreFX {corefxAssemblyInfo.FileVersion}"");              Console.WriteLine($""Avg: {results.Average()}, Min: {results.Min()}, Max: {results.Max()}"");          }            [MethodImpl(MethodImplOptions.NoInlining)]          private static double RealRun(Stream stream, XmlSerializer xmlSerializer, int invocationCount, string displayText) => Benchmark(stream, xmlSerializer, invocationCount, displayText);            private static double Benchmark(Stream stream, XmlSerializer xmlSerializer, int invocationCount, string displayText)          {              object deserialized = null;                GC.Collect();              GC.WaitForPendingFinalizers();              GC.Collect();                var timer = Stopwatch.StartNew();                for (int i = 0; i < invocationCount; i++)              {                  stream.Position = 0;                  deserialized = xmlSerializer.Deserialize(stream);              }                TimeSpan avg = timer.Elapsed / invocationCount;              Console.WriteLine($""{displayText}: Average elapsed milliseconds: {avg.TotalMilliseconds}"");                GC.KeepAlive(deserialized);                return avg.TotalMilliseconds;          }            private static LoginViewModel CreateLoginViewModel()              => new LoginViewModel              {                  Email = ""name.familyname@not.com"",                  Password = ""abcdefgh123456!@"",                  RememberMe = true              };      }        public class LoginViewModel      {          public string Email { get; set; }          public string Password { get; set; }          public bool RememberMe { get; set; }      }  }  ```"
27784	area-System.Net	_currentSocket.SafeHandle is invalid assert in System.Net.Http tests	```  2018-03-06 18:53:48,816: INFO: proc(54): run_and_log_output: Output: Assertion Failed  2018-03-06 18:53:48,816: INFO: proc(54): run_and_log_output: Output: _currentSocket.SafeHandle is invalid  2018-03-06 18:53:48,816: INFO: proc(54): run_and_log_output: Output:   2018-03-06 18:53:48,816: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.SocketAsyncEventArgs.AllocateNativeOverlapped() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Sockets\src\System\Net\Sockets\SocketAsyncEventArgs.Windows.cs:line 64  2018-03-06 18:53:48,816: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.SocketAsyncEventArgs.DoOperationReceiveSingleBuffer(SafeCloseSocket handle) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Sockets\src\System\Net\Sockets\SocketAsyncEventArgs.Windows.cs:line 280  2018-03-06 18:53:48,816: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.SocketAsyncEventArgs.DoOperationReceive(SafeCloseSocket handle) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Sockets\src\System\Net\Sockets\SocketAsyncEventArgs.Windows.cs:line 268  2018-03-06 18:53:48,816: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.Socket.ReceiveAsync(SocketAsyncEventArgs e) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs:line 4037  2018-03-06 18:53:48,816: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ReceiveAsync(Socket socket) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Sockets\src\System\Net\Sockets\Socket.Tasks.cs:line 881  2018-03-06 18:53:48,816: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.Socket.ReceiveAsync(Memory`1 buffer, SocketFlags socketFlags, Boolean fromNetworkStream, CancellationToken cancellationToken) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Sockets\src\System\Net\Sockets\Socket.Tasks.cs:line 204  2018-03-06 18:53:48,816: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.NetworkStream.ReadAsync(Memory`1 destination, CancellationToken cancellationToken) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Sockets\src\System\Net\Sockets\NetworkStream.cs:line 762  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Net.Http.HttpConnection.FillAsync() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1209  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in E:\A\_work\1250\s\src\mscorlib\src\System\Runtime\CompilerServices\AsyncMethodBuilder.cs:line 938  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Net.Http.HttpConnection.FillAsync()  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Net.Http.HttpConnection.ReadNextResponseHeaderLineAsync(Boolean foldedHeadersAllowed) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1161  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in E:\A\_work\1250\s\src\mscorlib\src\System\Runtime\CompilerServices\AsyncMethodBuilder.cs:line 938  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Net.Http.HttpConnection.ReadNextResponseHeaderLineAsync(Boolean foldedHeadersAllowed)  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Net.Http.HttpConnection.SendAsyncCore(HttpRequestMessage request, CancellationToken cancellationToken) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 471  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in E:\A\_work\1250\s\src\mscorlib\shared\System\Threading\ExecutionContext.cs:line 166  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() in E:\A\_work\1250\s\src\mscorlib\src\System\Runtime\CompilerServices\AsyncMethodBuilder.cs:line 559  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in E:\A\_work\1250\s\src\mscorlib\src\System\Threading\Tasks\Task.cs:line 3283  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in E:\A\_work\1250\s\src\mscorlib\src\System\Threading\Tasks\future.cs:line 421  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in E:\A\_work\1250\s\src\mscorlib\src\System\Runtime\CompilerServices\AsyncMethodBuilder.cs:line 650  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetResult(TResult result) in E:\A\_work\1250\s\src\mscorlib\shared\System\Runtime\CompilerServices\AsyncValueTaskMethodBuilder.cs:line 169  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Net.Http.HttpConnection.ReadNextResponseHeaderLineAsync(Boolean foldedHeadersAllowed) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1163  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in E:\A\_work\1250\s\src\mscorlib\shared\System\Threading\ExecutionContext.cs:line 166  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() in E:\A\_work\1250\s\src\mscorlib\src\System\Runtime\CompilerServices\AsyncMethodBuilder.cs:line 559  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in E:\A\_work\1250\s\src\mscorlib\src\System\Threading\Tasks\Task.cs:line 3283  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in E:\A\_work\1250\s\src\mscorlib\src\System\Threading\Tasks\future.cs:line 421  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in E:\A\_work\1250\s\src\mscorlib\src\System\Runtime\CompilerServices\AsyncMethodBuilder.cs:line 650  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult() in E:\A\_work\1250\s\src\mscorlib\src\System\Runtime\CompilerServices\AsyncMethodBuilder.cs:line 254  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Net.Http.HttpConnection.FillAsync() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1218  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in E:\A\_work\1250\s\src\mscorlib\shared\System\Threading\ExecutionContext.cs:line 166  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() in E:\A\_work\1250\s\src\mscorlib\src\System\Runtime\CompilerServices\AsyncMethodBuilder.cs:line 559  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.InvokeContinuation(Action`1 continuation, Object state, Boolean forceAsync) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Sockets\src\System\Net\Sockets\Socket.Tasks.cs:line 1027  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.<>c.<.cctor>b__27_2(Object s, SocketAsyncEventArgs e) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Sockets\src\System\Net\Sockets\Socket.Tasks.cs:line 829  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(SocketAsyncEventArgs e) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Sockets\src\System\Net\Sockets\SocketAsyncEventArgs.cs:line 207  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.SocketAsyncEventArgs.ExecutionCallback(Object state) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Sockets\src\System\Net\Sockets\SocketAsyncEventArgs.cs:line 427  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in E:\A\_work\1250\s\src\mscorlib\shared\System\Threading\ExecutionContext.cs:line 166  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.SocketAsyncEventArgs.FinishOperationAsyncSuccess(Int32 bytesTransferred, SocketFlags flags) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Sockets\src\System\Net\Sockets\SocketAsyncEventArgs.cs:line 769  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.SocketAsyncEventArgs.<>c.<.cctor>b__173_0(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* nativeOverlapped) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Sockets\src\System\Net\Sockets\SocketAsyncEventArgs.Windows.cs:line 1169  2018-03-06 18:53:48,832: INFO: proc(54): run_and_log_output: Output:    at System.Threading._IOCompletionCallback.PerformIOCompletionCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* pOVERLAP) in E:\A\_work\1250\s\src\mscorlib\src\System\Threading\Overlapped.cs:line 101  ```
27783	area-System.Net	[Preview2] Make SocketsHttpHandler default Handler	We want to switch default HttpClientHandler to SocketsHttpHandler for 2.1 (starting with Preview2).    We need to keep the escape route to fall back to WinHttp & LibCurl handlers (when explicitly set).  Most relevant code is here:  https://github.com/dotnet/corefx/blob/master/src/System.Net.Http/src/System/Net/Http/HttpClientHandler.cs#L17-L37    Part of the task is also to:  1. Verify all CoreFX tests pass (esp. Data which depends on Http stack) - incl. outer loop CI legs  2. Verify that WCF tests pass (please work with Paulo & WCF team to run all their test suites, ideally prior to checkin)  3. Keep testing WinHttp & LibCurl handlers (e.g. change ManagedHandler Http test suite to PlatformHandler Http test suite)    cc @geoffkizer 
27781	area-System.Data	Fix the unhandled exception and test validation in manual tests	There are two changes in this PR.    1. Handle all the exception thrown by the thread in the thread itself, so that it doesn't crash the tests.  2. Add the check for additional error message that can be thrown if the Command is Canceled.     This was causing intermittent test crashes in Manual Test runs. 
27779	area-System.IO	Wildcard pattern is matching files incorrectly.	"Some MSBuild tests started failing against the latest .NET CLI preview because file pattern matching is returning unexpected results on Linux and Mac.      # Repro:    1. Create two files in the program output directory, `Foo.cs` and `Foo2.cs`  2. `dotnet run` the following:  ```C#  using System;  using System.IO;    namespace wildcards  {      class Program      {          static void Main(string[] args)          {              foreach (string path in Directory.EnumerateFiles(""."", ""????.cs""))              {                  Console.WriteLine(path);              }          }      }  }  ```    # Expected Result  Program should print out the path to `Foo2.cs` since its file name has four characters that match the four questions marks.  ```  /Users/UserA/Foo/bin/Debug/netcoreapp2.0/Foo2.cs  ```      # Actual Result  Program prints out the path to `Foo.cs` and `Foo2.cs` since `Foo2.cs` is the only file that matches `????.cs`    ```  /Users/UserA/Foo/bin/Debug/netcoreapp2.0/Foo.cs  /Users/UserA/Foo/bin/Debug/netcoreapp2.0/Foo2.cs  ```    # dotnet --info  ```  .NET Command Line Tools (2.1.300-preview2-008293)    Product Information:   Version:            2.1.300-preview2-008293   Commit SHA-1 hash:  68922e2a51    Runtime Environment:   OS Name:     ubuntu   OS Version:  16.04   OS Platform: Linux   RID:         ubuntu.16.04-x64   Base Path:   /home/jeff/msbuild/artifacts/.dotnet/2.1.300-preview2-008293/sdk/2.1.300-preview2-008293/    Host (useful for support):    Version: 2.1.0-preview2-26227-01    Commit:  86d1f92013    .NET Core SDKs installed:    2.1.300-preview2-008293 [/home/jeff/msbuild/artifacts/.dotnet/2.1.300-preview2-008293/sdk]    The.NET Core runtimes installed:    Microsoft.NETCore.App 2.1.0-preview2-26227-01 [/home/jeff/msbuild/artifacts/.dotnet/2.1.300-preview2-008293/shared]    Microsoft.AspNetCore.App 2.1.0-preview2-30171 [/home/jeff/msbuild/artifacts/.dotnet/2.1.300-preview2-008293/shared]    Microsoft.AspNetCore.All 2.1.0-preview2-30171 [/home/jeff/msbuild/artifacts/.dotnet/2.1.300-preview2-008293/shared]  ```"
27778	area-System.Net	Proposal: Implement useful properties in WebClient	"The following proposal is intended to make WebClient easier to use.    ```  WebClient wc = new WebClient();  wc.Timeout = 500; // Does not exist - Requires overloads  wc.UserAgent = ""Awesome WebClient User Agent""; // Hidden behind .Headers[""User-Agent""]  wc.ContentType = ""application/x-www-form-urlencoded""; // Hidden behind .Headers[""Content-Type""] / .Headers[HttpRequestHeader.ContentType]  wc.Cookie = ""val=someSessionValue""; // Hidden behind .Headers[""Cookie""]  ```"
27777	area-System.Net	Fix NullReferenceException when using client certs with ClientWebSocket	Fixes https://github.com/dotnet/corefx/issues/27768  Contributes to https://github.com/dotnet/corefx/issues/12038 (necessary to test the fix well)  cc: @geoffkizer, @davidsh, @rmkerr, @caesar1995     
27776	area-System.Security	RSA incompatibility between full framework and .net core?	"I have a problem when working with RSA in .NET Full framework (4.6.2) and .net core 2. There is an existing full framework application that encrypts and decrypts files using certificates. The goal is to create a compatible .net core application that can exchange encrypted files with the existing application.     In short, an symmetrical AES key is used to encrypt the actual file data. The AES key is then encrypted with the receivers public RSA key.    I got it working 3/4 of the way. That is:   * The full framework application can (of course) encrypt files and decrypt them.   * The .net core application can encrypt files and decrypt them.  *  The .net core application can encrypt files, which can be decrypted with the full framework application.  *  The .net core application **cannot** decrypt files, which have been encrypted with the full framework application.    In the last case I get an `WindowsCryptographicException` with the message `The parameter is incorrect` (internally its Error code 87).    The full 4.6.2 framework application uses the certificate of the receiver as such:    ```  var rsa = receiverCertificate.PublicKey.Key as RSACryptoServiceProvider;  // *snip* create AES key  var encryptedAesKey = rsa.Encrypt(aesManaged.Key, false);  ```    When decrypting, it does the following:  ```  var rsa = receiverCertificate.PrivateKey as RSACryptoServiceProvider;  // *snip* extract encrypted aes key from encrypted file  var decryptedKey = rsa.Decrypt(encryptedKey, false);  ```    Now, in .net core it is not possible to cast the key directly to `RSACryptoServiceProvider`.  To re-use most of the existing code and port that over to .NET core I wrote these two extension methods to get an `RSACryptoServiceProvider` out of the keys, like this:    ```  public static RSACryptoServiceProvider GetPublicKeyRsaCryptoServiceProvider(this X509Certificate2 certificate)  {     // Get params from public key     var rsa = certificate.GetRSAPublicKey();     var rsaParameters = rsa.ExportParameters(false);       var csp = new RSACryptoServiceProvider(rsa.KeySize, new CspParameters()     {        ProviderType = 24,        ProviderName = ""Microsoft Enhanced RSA and AES Cryptographic Provider"",     });     csp.ImportParameters(rsaParameters);       return rsacsp;  }    public static RSACryptoServiceProvider GetPrivateKeyRsaCryptoServiceProvider(this X509Certificate2 certificate)  {     // Get params from private key     var rsa = certificate.GetRSAPrivateKey();     var rsaParameters = rsa.ExportParameters(true);       var csp = new RSACryptoServiceProvider(rsa.KeySize, new CspParameters()     {        ProviderType = 24,        ProviderName = ""Microsoft Enhanced RSA and AES Cryptographic Provider"",     });     csp.ImportParameters(rsaParameters);         return rsacsp;  }  ```    The only lines I changed while porting the existing code over to .net core were the lines that casted the public/private key to `RSACryptoServiceProvider `and replaced the casts with calls to my extension methods.  Before changing more and to completely move over to the RSA class from `RSACryptoServiceProvider`, so that the .net core application can eventually run on other OSes, I want this to work first in a full roundtrip.  For additional info: I get hold of the `X509Certificate2` instance like this:    ```  using (var myStore = new X509Store(StoreName.My, StoreLocation.CurrentUser))  {     myStore.Open(OpenFlags.ReadOnly);     var certs = myStore.Certificates.Find(X509FindType.FindByKeyUsage,    X509KeyUsageFlags.DataEncipherment.ToString(), true);     return certs.FirstOrDefault(c => c.Subject.Contains(""receiver""));  }  ```    The error is thrown in the actual call to `RSACryptoServiceProvider.Decrypt()`, when it goes through the `CapiHelper.Decrypt()` into `CapiHelper.Interop.CryptDecrypt()` which returns with the error code.  "
27775	area-System.Net	Activity for HttpClient calls not stopped if inner handler does not use async/await (PR 2)	"Note: This is a new version of #27472. I restored my branch but the PR didn't pick up the new commits. Sorry for that.    Original description from #27472:    I've been writing some `DiagnosticSource`/`Activity` based instrumentation for HttpClient. [In my unit tests](https://github.com/cwe1ss/opentracing-contrib-dotnet/blob/ba20de4ba57e43cb685083e3c0b2b19022ce067e/test/OpenTracing.Contrib.AspNetCore.Tests/HttpOut/HttpOutInterceptorTest.cs) I've created a HttpMessageHandler and wrapped it with the existing `DiagnosticsHandler` (by using reflection, so in an unsupported way) to test the different scenarios.    However, I noticed that if my handler doesn't use `async/await`, the `DiagnosticsHandler` does NOT raise the Diagnostics-events for `System.Net.Http.Exception` and `System.Net.Http.HttpRequestOut.Stop` because the invocation is outside of the try...catch block.    E.g. if DiagnosticsHandler is using an inner handler that looks like this, it does NOT raise the events:  ```csharp  public class FailingHttpMessageHandler : HttpMessageHandler  {      protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)      {          throw new InvalidOperationException(""foo"");      }  }  ```    It only works, if I change the code as follows:  ```csharp  public class FailingHttpMessageHandler : HttpMessageHandler  {      protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)      {          await Task.CompletedTask;          throw new InvalidOperationException(""foo"");      }  }  ```    My direct usage of DiagnosticsHandler is obviously a hack as it is internal and AFAIU in a regular application `DiagnosticsHandler` is an internal feature of `HttpClientHandler` so there shouldn't be any user code after it but nevertheless, I think that it would make sense to move the call from this PR into the try..catch block.    /cc @lmolkova @vancem"
27774	area-System.Memory	Cleanup use of nuint in portable System.Memory implementation	From https://github.com/dotnet/corefx/pull/27757#discussion_r172514619    SpanHelpers.cs is included in portable System.Memory. It does not work - files that use nuint can be used for fast Span only. They cannot be used for portable System.Memory. Portable System.Memory is not compiled bitness specific.
27773	area-System.Runtime	Type 'System.TimeZoneInfo' cannot be serialized by DCS	Originally reported as a [VS Feedback issue](https://developercommunity.visualstudio.com/content/problem/200357/unable-to-create-web-service-reference-on-net-core.html).    Try the following code:  ```  TimeZoneInfo tzi = TimeZoneInfo.Local;  DataContractSerializer ser = new DataContractSerializer(typeof(TimeZoneInfo));  MemoryStream stream = new MemoryStream();  ser.WriteObject(stream, tzi);  ```    The following exception is thrown:    > System.Runtime.Serialization.SerializationException  >   HResult=0x8013150C  >   Message=Type 'System.TimeZoneInfo+AdjustmentRule[]' with data contract name 'ArrayOfTimeZoneInfo.AdjustmentRule:http://schemas.datacontract.org/2004/07/System' is not expected. Add any types not known statically to the list of known types - for example, by using the KnownTypeAttribute attribute or by adding them to the list of known types passed to DataContractSerializer.
27770	area-System.Runtime	BinaryFormatter has no benchmarks defined	During my recent serializers comparison, I have discovered huge perf boost for BinaryFormatter.Serialize.    The problem is that BinaryFormatter has no benchmarks defined in CoreFX so any perf change is not tracked by `BenchView`. Our other serializers have some benchmarks [link](https://github.com/dotnet/corefx/search?utf8=%E2%9C%93&q=RunSerializationPerformanceTest&type=) I think that `BinaryFormatter` should also have some.    This is a follow up of https://github.com/dotnet/coreclr/issues/16628
27769	area-System.Data	SQL Reader Async 10 times slower than sync	"Hi,    we got a problem with the async sql reader. We can reproduce that in ef core and with the sql data reader. Its so slow, that it's not usable. I also tried 4.5.0-preview2-26225-02, but the speed tests give the same result.  Example:   **Async Sql Client**  ```csharp      using (var conn = new System.Data.SqlClient.SqlConnection(getConnectionstring(_config)))                      {                          using (var cmd = new System.Data.SqlClient.SqlCommand(""SELECT TOP 350 * FROM users.Users;"", conn))                          {                              cmd.CommandType = System.Data.CommandType.Text;                                conn.Open();                              var reader = await cmd.ExecuteReaderAsync();                                while (await reader.ReadAsync())                              {                                  Guid id = reader.GetGuid(0);                                  stringBuilder2.AppendLine(id.ToString());                              }                          }                      }  ```     **Result: 218ms**    **Sync Sql Client**  ```csharp      using (var conn = new System.Data.SqlClient.SqlConnection(getConnectionstring(_config)))                      {                          using (var cmd = new System.Data.SqlClient.SqlCommand(""SELECT TOP 350 * FROM users.Users;"", conn))                          {                              cmd.CommandType = System.Data.CommandType.Text;                              conn.Open();                              var reader = cmd.ExecuteReader();                                while (reader.Read())                              {                                  Guid id = reader.GetGuid(0);                                  stringBuilder.AppendLine(id.ToString());                              }                          }                      }  ```  **Result: 28 ms**    I always tried 10 or more times to exclude warmup.    The same happens using ef:    **Sync ef example**  ```csharp                      using (var db = new TestContext(_config))                      {                                                   db.ConfigureLogging(s => stringLogger.AppendLine(stopwatch.ElapsedMilliseconds.ToString() + "" "" + s));                          var blogs = db.Users.Take(350)                              .ToList();                                              }                        break;`  ```  **Result:**  ef-client took 22ms  0 Opening connection to database 'users-service' on server 'xx.database.cloudapi.de'.  0 Opened connection to database 'users-service' on server 'xx.database.cloudapi.de'.  0 Executing DbCommand [Parameters=[@__p_0='?'], CommandType='Text', CommandTimeout='30']  SELECT TOP(@__p_0) [u].[Id], [u].[FirstName], [u].[LastName]  FROM [users].[Users] AS [u]  21 Executed DbCommand (21ms) [Parameters=[@__p_0='?'], CommandType='Text', CommandTimeout='30']  SELECT TOP(@__p_0) [u].[Id], [u].[FirstName], [u].[LastName]  FROM [users].[Users] AS [u]  22 A data reader was disposed.  22 Closing connection to database 'users-service' on server 'xx.database.cloudapi.de'.  22 Closed connection to database 'users-service' on server 'xx.database.cloudapi.de'.    **Async ef example:**  ```csharp  using (var db = new TestContext(_config))                      {                        db.ConfigureLogging(s => stringLogger.AppendLine(stopwatch.ElapsedMilliseconds.ToString() + "" "" + s));                          var blogs = await db.Users.Take(350)                              .ToListAsync();                                          }  ```    **Result:**  ef-client-async took 197ms  0 Opening connection to database 'users-service' on server 'xx.cloudapi.de'.  0 Opened connection to database 'users-service' on server 'xx.database.cloudapi.de'.  0 Executing DbCommand [Parameters=[@__p_0='?'], CommandType='Text', CommandTimeout='30']  SELECT TOP(@__p_0) [u].[Id], [u].[FirstName], [u].[LastName]  FROM [users].[Users] AS [u]  125 Executed DbCommand (125ms) [Parameters=[@__p_0='?'], CommandType='Text', CommandTimeout='30']  SELECT TOP(@__p_0) [u].[Id], [u].[FirstName], [u].[LastName]  FROM [users].[Users] AS [u]  197 A data reader was disposed.  197 Closing connection to database 'users-service' on server 'xx.database.cloudapi.de'.  197 Closed connection to database 'users-service' on server 'xx.database.cloudapi.de'.    I would expect the async code to be slower but not 5 to 10 times.    I tried all available versions (preview 1, 2 and normal version).    My tests are generated with vs code on mac and in our docker images, e.g dotnet-nightly:2.1.0-preview1-runtime-stretch    Any ideas?    "
27768	area-System.Net	NRE from ClientWebSocket.ConnectAsync when using ClientCertificates option	"Version: 2.1.300-preview2-008302 (also checked using latest master branch)    Sample code:  ```  var cws = new ClientWebSocket();       cws.Options.ClientCertificates.Add(new X509Certificate2(@""path-to-certificate.pfx""));  await cws.ConnectAsync(new Uri(""wss://....""), CancellationToken.None);  ```    throws:  ```  System.NullReferenceException: Object reference not set to an instance of an object.  at System.Net.WebSockets.WebSocketHandle.ConnectAsyncCore(Uri uri, CancellationToken cancellationToken, ClientWebSocketOptions options)     at System.Net.WebSockets.ClientWebSocket.ConnectAsyncCore(Uri uri, CancellationToken cancellationToken)  ```    According to my investigation NRE is thrown in the following line:  https://github.com/dotnet/corefx/blob/9ce903333efeb3eb5fef069f9caf868cb2309170/src/System.Net.WebSockets.Client/src/System/Net/WebSockets/WebSocketHandle.Managed.cs#L97    `handler.SslOptions.ClientCertificates` is `null`    Initializing the certificates collection there:    `handler.SslOptions.ClientCertificates = new X509Certificate2Collection();`    seems to fix the problem (`await cws.ConnectAsync()` succeeds)  "
27767	area-System.Net	fix WebSocket socket descriptor leak in case of error on connection	Connect to a server which constantly returns errors with Websocket.  You will see that on Linux amount of file descriptors will drastically grow with each connection attempt.    The reason is that here when sslStream.AuthenticateAsClientAsync or any other function throws error on connect stream will not be disposed.    closes #27765 
27765	area-System.Net	WebSocket file descriptor leak when server returns error	**Description:**  WebSocket file descriptor leak when server returns error    **Environment:**  NETCore 2.0.5,   Linux x64    **How to reproduce:**  Connect to a server which constantly returns errors with Websocket.  You will see that on Linux amount of file descriptors will drastically grow with each connection attempt.    The reason is that [here](https://github.com/dotnet/corefx/blob/release/2.0.0/src/System.Net.WebSockets.Client/src/System/Net/WebSockets/WebSocketHandle.Managed.cs) when `sslStream.AuthenticateAsClientAsync` or any other function throws error on connect `stream` will not be disposed.  
27764	area-Meta	Where is System.Web.Http?	Hi,  I'm trying to convert an ASP.NET project from .NET Framework 4.7.1 to .NET Core 2.1 (preview).  My methodology was to rename the folder from `MyAspProj` to `MyAspProj.Old`, then in the solution I created a new .NET Core ASP.NET project called `MyAspProj`, then copied over all the files from `MyAspProj.Old`. I added a reference to `Microsoft.AspNetCore.All`, which I hoped would bring through all the necessary types. but alas, everywhere that I have references to objects from the `System.Web.Http` namespace, my code is broken, with no obvious contenders to redirect the references.  For example, `HttpConfiguration`, which is used for Owin configuration.  And, while we're there, the Owin package itself is targeting .NET Framework. Is there a successor that targets .NET Core?
27763	area-System.Diagnostics	Handle recycled child PIDs	"When the user keeping references to old processes, a new child would re-use some state of an old process with the same PID.  This causes the following code to throw when PID is recycled (https://github.com/dotnet/corefx/issues/27249#issuecomment-367288949).  ```C#              List<Process> processes = new List<Process>();              for (int i = 0; i < 1_000_000; i++)              {                  if (i % 100 == 0)                  {                      System.Console.Write(""."");                  }                  try                  {                      var process = new Process();                      processes.Add(process);                      process.StartInfo.FileName = ""/usr/bin/sleep"";                      process.StartInfo.Arguments = ""0"";                      process.EnableRaisingEvents = true;                      process.Start();                        process.WaitForExit();                  }                  catch                  {                      System.Console.WriteLine($""Exception when creating process {i}"");                      throw;                  }              }  ```    We detect when the PID is recycled and use a new ProcessWaitState for the new child.  Also, we ensure the ProcessWaitHandle is using the same ProcessWaitState as the Process it was created for.    The above test code no longer throws now when the PID is recycled. I have not added a test because it takes a long time to run.    CC @stephentoub @danmosemsft "
27761	area-System.Net	Windows Auth Issue from UWP Applications	Hi @rmkerr   As discussed I have created a sample project, you may download it from the repository path below.  The code as three projects, a WebAPI with windows Authentication and two consumers that have more or less the same code. The console application is able to make the call while the UWP gets a 500 error.     Another thing that I noted is if I remove the Authorize attribute from the API it works fine for both.    https://github.com/luvhsail/Samples.git  
27759	area-System.Reflection	Keep memory a MetadataReader created from provider/PEReader accesses alive until the provider/PEReader is released	Fix https://github.com/dotnet/corefx/issues/25946.
27758	area-System.Data	SNIPacket memory allocation perf improvement (revised)	Previous version of `SNIPacket` change (https://github.com/dotnet/corefx/pull/27187) contains couple of issues, and caused several test failures (https://github.com/dotnet/corefx/issues/27587, https://github.com/dotnet/corefx/issues/27574).  One of the failures caused by missing locks, and other ones were caused by unreleased byte array on `SNIPacket.Release()`. This revised fix excludes dealing with locks, and also properly deallocates byte array when `SNIPacket.Release()` is called.
27755	area-System.Net	HttpListener - Prefix WWW-Authenticate header with scheme	Fixes https://github.com/dotnet/corefx/issues/26606
27754	area-System.Threading	Assertion in channels using pooled object	```  Assertion Failed  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output: The continuation was the completion sentinel. State=CompletionSet.  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:   2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Channels.ResettableValueTaskSource`1.InvokeContinuation() in D:\j\workspace\windows-TGrou---db113413\src\System.Threading.Channels\src\System\Threading\Channels\AsyncOperation.cs:line 261  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Channels.ResettableValueTaskSource`1.SignalCompletion() in D:\j\workspace\windows-TGrou---db113413\src\System.Threading.Channels\src\System\Threading\Channels\AsyncOperation.cs:line 254  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Channels.ResettableValueTaskSource`1.TrySetResult(T result) in D:\j\workspace\windows-TGrou---db113413\src\System.Threading.Channels\src\System\Threading\Channels\AsyncOperation.cs:line 211  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Channels.AsyncOperation`1.Success(TResult item) in D:\j\workspace\windows-TGrou---db113413\src\System.Threading.Channels\src\System\Threading\Channels\AsyncOperation.cs:line 336  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Channels.SingleConsumerUnboundedChannel`1.UnboundedChannelWriter.TryWrite(T item) in D:\j\workspace\windows-TGrou---db113413\src\System.Threading.Channels\src\System\Threading\Channels\SingleConsumerUnboundedChannel.cs:line 327  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Channels.SingleConsumerUnboundedChannel`1.UnboundedChannelWriter.WriteAsync(T item, CancellationToken cancellationToken) in D:\j\workspace\windows-TGrou---db113413\src\System.Threading.Channels\src\System\Threading\Channels\SingleConsumerUnboundedChannel.cs:line 347  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Channels.Tests.PerfTests.<>c__DisplayClass4_1.<<PingPong>b__1>d.MoveNext() in D:\j\workspace\windows-TGrou---db113413\src\System.Threading.Channels\tests\Performance\Perf.Channel.cs:line 122  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in E:\A\_work\1250\s\src\mscorlib\shared\System\Threading\ExecutionContext.cs:line 166  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() in E:\A\_work\1250\s\src\mscorlib\src\System\Runtime\CompilerServices\AsyncMethodBuilder.cs:line 559  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Channels.ResettableValueTaskSource`1.<>c.<InvokeContinuation>b__30_0(Object s) in D:\j\workspace\windows-TGrou---db113413\src\System.Threading.Channels\src\System\Threading\Channels\AsyncOperation.cs:line 270  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in E:\A\_work\1250\s\src\mscorlib\shared\System\Threading\ExecutionContext.cs:line 166  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in E:\A\_work\1250\s\src\mscorlib\src\System\Threading\Tasks\Task.cs:line 2440  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ThreadPoolWorkQueue.Dispatch() in E:\A\_work\1250\s\src\mscorlib\src\System\Threading\ThreadPool.cs:line 588  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output: Expected IsCompleted, got Owned  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:   2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Channels.ResettableValueTaskSource`1.OnCompleted(Action`1 continuation, Object state, Int16 token, ValueTaskSourceOnCompletedFlags flags) in D:\j\workspace\windows-TGrou---db113413\src\System.Threading.Channels\src\System\Threading\Channels\AsyncOperation.cs:line 190  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.ValueTaskAwaiter`1.System.Runtime.CompilerServices.IValueTaskAwaiter.AwaitUnsafeOnCompleted(IAsyncStateMachineBox box) in E:\A\_work\1250\s\src\mscorlib\shared\System\Runtime\CompilerServices\ValueTaskAwaiter.cs:line 183  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted[TAwaiter,TStateMachine](TAwaiter& awaiter, TStateMachine& stateMachine) in E:\A\_work\1250\s\src\mscorlib\src\System\Runtime\CompilerServices\AsyncMethodBuilder.cs:line 377  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Channels.Tests.PerfTests.<>c__DisplayClass4_1.<<PingPong>b__0>d.MoveNext() in D:\j\workspace\windows-TGrou---db113413\src\System.Threading.Channels\tests\Performance\Perf.Channel.cs:line 112  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in E:\A\_work\1250\s\src\mscorlib\shared\System\Threading\ExecutionContext.cs:line 166  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() in E:\A\_work\1250\s\src\mscorlib\src\System\Runtime\CompilerServices\AsyncMethodBuilder.cs:line 559  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Channels.ResettableValueTaskSource`1.<>c.<InvokeContinuation>b__30_0(Object s) in D:\j\workspace\windows-TGrou---db113413\src\System.Threading.Channels\src\System\Threading\Channels\AsyncOperation.cs:line 270  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in E:\A\_work\1250\s\src\mscorlib\shared\System\Threading\ExecutionContext.cs:line 166  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in E:\A\_work\1250\s\src\mscorlib\src\System\Threading\Tasks\Task.cs:line 2440  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ThreadPoolWorkQueue.Dispatch() in E:\A\_work\1250\s\src\mscorlib\src\System\Threading\ThreadPool.cs:line 588  2018-03-05 22:00:23,076: INFO: proc(54): run_and_log_output: Output: ----- end 22:00:23.07 ----- exit code -2146232797 ----------------------------------------------------------  2018-03-05 22:00:23,092: INFO: proc(58): run_and_log_output: Exit Code: -2146232797  2018-03-05 22:00:23,092: ERROR: scriptrunner(91): _main: Error: No exception thrown, but XUnit results not created  2018-03-05 22:00:23,092: ERROR: helix_test_execution(83): report_error: Error running xunit None    2018-03-05 22:00:23,092: INFO: azure_storage(205): _upload: Uploading single blob: 'error.log'  2018-03-05 22:00:23,124: INFO: saferequests(90): request_with_retry: Response complete with status code '201'  2018-03-05 22:00:23,124: INFO: helix_test_execution(93): report_error: Sending ToF test failure event  2018-03-05 22:00:23,124: INFO: event(43): send: Sending event type XUnitTestFailure  2018-03-05 22:00:23,358: INFO: saferequests(90): request_with_retry: Response complete with status code '201'  2018-03-05 22:00:23,374: INFO: azure_storage(205): _upload: Uploading single blob: '7b71c5bca82b4295bcadc5567fd2aa32.log'  2018-03-05 22:00:23,436: INFO: saferequests(90): request_with_retry: Response complete with status code '201'  2018-03-05 22:00:23,436: INFO: event(43): send: Sending event type Logs  2018-03-05 22:00:23,576: INFO: saferequests(90): request_with_retry: Response complete with status code '201'  scriptrunner.py   ```
27753	area-System.Net	Fix SocketsHttpHandler TLS client cert handling	"SocketHttpHandler was not filtering down the client certificates when sending in  ""Manual"" mode. This caused a client certificate to be sent to a server when it  didn't have the proper EKU OID for ""Client Authentication"".    Changed this so that both ""Manual"" and ""Automatic"" modes will use the CertificateHelper  GetEligibleCertificate() API.    Fixes #23128"
27750	area-System.Runtime	[Arm64] Revise Crypto HW Intrinsic argument names	Per https://github.com/dotnet/corefx/pull/27616#discussion_r172359746 we need to revise the argument names for the Crypto HW intrinsics    Please assign to @debayang  @eerhardt FYI
27748	area-System.Net	fix some conditional test logic related to SocketsHttpHandler	There were a few test cases where we were using platform tests like IsWindows to disable or modify tests.  Clean these up so they run properly on SocketsHttpHandler.    @stephentoub @davidsh 
27747	area-System.Net	HTTP client - API error c# (A task was canceled.)	"_From @rajurh on March 4, 2018 6:53_  We are calling multiple API's in foreach loop and all API are of Async call. Now in the foreach loop due to some reason 1 API call has returned internal error and we are skipping that record and progressing with other requests in for loop. When the next loop continues the first API call we are getting error with ""System.Threading.Tasks.TaskCanceledException: A task was canceled"" and ""Aggregation exception"".    Code Snippet:  We are making Httpclient initialization per loop and object used multiple times in the loop.  using (var httpClientHelper = new HttpClientHelper(tokenService))    API call snippet:  var response = await httpClientHelper.GetAsync(""http://xyz"");    Help or thoughts on this will be much appreciated.  _Copied from original issue: aspnet/Home#2918_"
27746	area-System.Net	Proxy_UseSecureProxyTunnel_Success test hangs on WinHttpHandler/NetFxHandler/CurlHandler	It was already disabled but the ActiveIssue was wrong, so I'm filing this to track.
27745	area-System.Net	Add support for SocketsHttpHandler to use provided SPN	WCF has the requirement to use non-default SPN's when using Kerberos authentication over HTTP. The `AuthenticationHandler` class specifies the SPN in [this line of code](https://github.com/dotnet/corefx/blob/master/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/AuthenticationHelper.NtAuth.cs#L52). WCF needs a way to optionally specify which value is used on this line.     Ideally this would be exposed via an api mechanism available on `HttpClientHandler`/`HttpClient`/`HttpRequestMessage` so that WCF wouldn't need to dictate that a client always uses `SocketsHttpHandler` once available. We need to be able to specify either a mapping between hostname and SPN or to be able to specify on a per-request basis. This is especially important as there are likely to be some compatibility edge cases with `SocketsHttpHandler` once released and we would need to allow developers to specify which implementation that WCF will use.    An issue to expose the ability to specify the SPN in a general way to support mutual authentication was previously opened in 2015 in issue #4502. This issue is a more specific ask for this support to be available in `SocketsHttpHandler` and hopefully for it to be exposed in a more generic manner.
27744	area-System.Memory	Remove apis that duplicate implicit operators.	"https://github.com/dotnet/corefx/issues/26894    Last set of approved api changes from this issue.    Since we have to get this in by 3/7, we're doing  the minbar here of removing the methods from the  reference assemblies only and (in some cases) adding the  ""api"" internally in some test assemblies rather  than clean up dozens of individual callsites.  (I wouldn't be surprised if we end up adding  these back in the next version anyway...)"
27741	area-System.Net	Should HttpHeaders remove newlines from values when they're parsed?	See discussion at https://github.com/dotnet/corefx/pull/27727#discussion_r172263740.  HttpHeaders isn't removing newlines adding in header values with TryAddWithoutValidation when that value is parsed.
27740	area-System.Xml	System.Xml.XmlSchemaSet.Tests crashed on Linux in CI	"Ubuntu.1804.Amd64.Open:Release-x64  https://mc.dot.net/#/user/stephentoub/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/1d125d16b24421e74b724ab374a6083462b90fe6/workItem/System.Xml.XmlSchemaSet.Tests/wilogs  ```  2018-03-04 16:03:33,449: INFO: proc(54): run_and_log_output: Output: Discovering: System.Xml.XmlSchemaSet.Tests  2018-03-04 16:03:33,686: INFO: proc(54): run_and_log_output: Output: Discovered:  System.Xml.XmlSchemaSet.Tests  2018-03-04 16:03:33,844: INFO: proc(54): run_and_log_output: Output: Starting:    System.Xml.XmlSchemaSet.Tests  2018-03-04 16:03:36,421: INFO: proc(54): run_and_log_output: Output: /home/helixbot/dotnetbuild/work/8373cbba-9bd6-476d-b0c8-c0dfd260a434/Work/82d55039-9303-4bb6-a0b9-1513ddf0ce22/Unzip/RunTests.sh: line 88: 12798 Aborted                 (core dumped) $RUNTIME_PATH/dotnet xunit.console.netcore.exe System.Xml.XmlSchemaSet.Tests.dll -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=OuterLoop -notrait category=failing  2018-03-04 16:03:36,470: INFO: proc(54): run_and_log_output: Output: Dumpling has not been installed yet. Please run ""DumplingHelper.py install_dumpling"" before collect_dumps.  2018-03-04 16:03:36,474: INFO: proc(54): run_and_log_output: Output: ~/dotnetbuild/work/8373cbba-9bd6-476d-b0c8-c0dfd260a434/Work/82d55039-9303-4bb6-a0b9-1513ddf0ce22/Unzip  2018-03-04 16:03:36,476: INFO: proc(54): run_and_log_output: Output: ----- end 16:03:36 ----- exit code 134 ----------------------------------------------------------  2018-03-04 16:03:36,478: INFO: proc(54): run_and_log_output: Output: Unable to find executable corerun  2018-03-04 16:03:36,481: INFO: proc(54): run_and_log_output: Output: Copying core file core to /tmp/coredumps  2018-03-04 16:03:36,679: INFO: proc(58): run_and_log_output: Exit Code: 134  2018-03-04 16:03:36,685: ERROR: scriptrunner(91): _main: Error: No exception thrown, but XUnit results not created  2018-03-04 16:03:36,686: ERROR: helix_test_execution(83): report_error: Error running xunit None  ```"
27739	area-System.Net	SocketsHttpHandler: Change caching of Host header value to include port when necessary	We already cache the hostname part of the header value.  Change this so the cached value includes the port as well when using a non-default port.    @stephentoub @davidsh 
27734	area-Serialization	Support PositiveInfinity and NegativeInfinity as default value in sgen 	Fix #27396     @huanwu   @zhenlan   @mconnew 
27732	area-System.IO	Consider removing support for 0-byte flushes from pipelines	Currently, we allow 0-byte flushes to wake up the reader.  There is not a lot of functional use for it except to try and build a side channel and different action based on empty flushes.    /cc @davidfowl @KrzysztofCwalina @Tratcher 
27731	area-System.Memory	System.Memory package needs Xamarin support	Dev 15-7 is shipping with inbox Memory/Span support on Xamarin. We need System.Memory package update to behave as inbox on all Xamarin profiles
27730	area-System.Net	libcurl HttpClient incompatibility with HTTP2 protocol	Recently I started running into issues like this one:    ```csharp  OnUnobservedTaskException() System.AggregateException: A Task's exception(s) were not observed either by Waiting on the Task or accessing its Exception property. As a result, the unobserved exception was rethrown by the finalizer thread. (An error occurred while sending the request.) ---> System.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.Net.Http.CurlException: Error in the HTTP2 framing layer     at System.Net.Http.CurlHandler.ThrowIfCURLEError(CURLcode error)     at System.Net.Http.CurlHandler.MultiAgent.FinishRequest(StrongToWeakReference`1 easyWrapper, CURLcode messageResult)     --- End of inner exception stack trace ---     at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)     at Discord.Net.Rest.DefaultRestClient.SendInternalAsync(HttpRequestMessage request, CancellationToken cancelToken, Boolean headerOnly)     at Discord.Net.Rest.DefaultRestClient.SendAsync(String method, String endpoint, CancellationToken cancelToken, Boolean headerOnly, String reason)     at Discord.Net.Queue.RestRequest.SendAsync()     at Discord.Net.Queue.RequestBucket.SendAsync(RestRequest request)     at Discord.Net.Queue.RequestQueue.SendAsync(RestRequest request)     at Discord.API.DiscordRestApiClient.SendInternalAsync(String method, String endpoint, RestRequest request)     at Discord.API.DiscordRestApiClient.SendAsync[TResponse](String method, String endpoint, String bucketId, ClientBucketType clientBucket, RequestOptions options)     at Discord.API.DiscordSocketApiClient.GetGatewayAsync(RequestOptions options)     at Discord.API.DiscordSocketApiClient.ConnectInternalAsync()     at Discord.API.DiscordSocketApiClient.ConnectInternalAsync()     at Discord.API.DiscordSocketApiClient.ConnectAsync()     at Discord.WebSocket.DiscordSocketClient.OnConnectingAsync()     at Discord.WebSocket.DiscordSocketClient.OnConnectingAsync()     at Discord.ConnectionManager.ConnectAsync(CancellationTokenSource reconnectCancelToken)     at Discord.ConnectionManager.<>c__DisplayClass28_0.<<StartAsync>b__0>d.MoveNext()     --- End of inner exception stack trace ---  ---> (Inner Exception #0) System.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.Net.Http.CurlException: Error in the HTTP2 framing layer     at System.Net.Http.CurlHandler.ThrowIfCURLEError(CURLcode error)     at System.Net.Http.CurlHandler.MultiAgent.FinishRequest(StrongToWeakReference`1 easyWrapper, CURLcode messageResult)     --- End of inner exception stack trace ---     at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)     at Discord.Net.Rest.DefaultRestClient.SendInternalAsync(HttpRequestMessage request, CancellationToken cancelToken, Boolean headerOnly)     at Discord.Net.Rest.DefaultRestClient.SendAsync(String method, String endpoint, CancellationToken cancelToken, Boolean headerOnly, String reason)     at Discord.Net.Queue.RestRequest.SendAsync()     at Discord.Net.Queue.RequestBucket.SendAsync(RestRequest request)     at Discord.Net.Queue.RequestQueue.SendAsync(RestRequest request)     at Discord.API.DiscordRestApiClient.SendInternalAsync(String method, String endpoint, RestRequest request)     at Discord.API.DiscordRestApiClient.SendAsync[TResponse](String method, String endpoint, String bucketId, ClientBucketType clientBucket, RequestOptions options)     at Discord.API.DiscordSocketApiClient.GetGatewayAsync(RequestOptions options)     at Discord.API.DiscordSocketApiClient.ConnectInternalAsync()     at Discord.API.DiscordSocketApiClient.ConnectInternalAsync()     at Discord.API.DiscordSocketApiClient.ConnectAsync()     at Discord.WebSocket.DiscordSocketClient.OnConnectingAsync()     at Discord.WebSocket.DiscordSocketClient.OnConnectingAsync()     at Discord.ConnectionManager.ConnectAsync(CancellationTokenSource reconnectCancelToken)     at Discord.ConnectionManager.<>c__DisplayClass28_0.<<StartAsync>b__0>d.MoveNext()<---  ```    I'm almost 100% sure that this issue is the result of some incompatibility with recent libcurl version. I reproduced it with libcurl3 in version 7.58.0 available in Debian testing repo. Temporarily I downgraded myself back to 7.52.1 available in Debian stable and I can't reproduce the issue anymore, at least for now.    The exception itself isn't exactly in my code but in third-party library I'm using, although there is nothing unusual there.    ```csharp          private async Task<RestResponse> SendInternalAsync(HttpRequestMessage request, CancellationToken cancelToken, bool headerOnly)          {              cancelToken = CancellationTokenSource.CreateLinkedTokenSource(_cancelToken, cancelToken).Token;              HttpResponseMessage response = await _client.SendAsync(request, cancelToken).ConfigureAwait(false);                            var headers = response.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault(), StringComparer.OrdinalIgnoreCase);              var stream = !headerOnly ? await response.Content.ReadAsStreamAsync().ConfigureAwait(false) : null;                return new RestResponse(response.StatusCode, headers, stream);          }  ```    I'm using one of the recent master builds and I didn't see anything related fixed lately.    ```  .NET Command Line Tools (2.1.300-preview2-008293)    Product Information:   Version:            2.1.300-preview2-008293   Commit SHA-1 hash:  68922e2a51    Runtime Environment:   OS Name:     debian   OS Version:   OS Platform: Linux   RID:         debian-x64   Base Path:   /opt/dotnet/sdk/2.1.300-preview2-008293/    Host (useful for support):    Version: 2.1.0-preview2-26227-01    Commit:  86d1f92013    .NET Core SDKs installed:    2.1.300-preview2-008293 [/opt/dotnet/sdk]    The.NET Core runtimes installed:    Microsoft.AspNetCore.App 2.1.0-preview2-30171 [/opt/dotnet/shared]    Microsoft.NETCore.App 2.1.0-preview2-26227-01 [/opt/dotnet/shared]    Microsoft.AspNetCore.All 2.1.0-preview2-30171 [/opt/dotnet/shared]  ```    I'm now making sure that old libcurl version fixes the issue, since I could've identified the root cause wrong, but for now I can't run into this issue anymore with older libcurl version. I'll make sure to let you know in case it's something else, but if my guess was right then this should be fixed in corefx repo, and stacktrace suggests that even if my guess is wrong then there is some incompatibility in net core internals that should be verified.    Also I have no clue under exactly what condition the exception is happening. It's definitely related to HTTP2 connection, but it seems that not all requests going through HTTP2 throw this exception (?)    Thank you in advance for looking into this.
27729	area-System.Memory	Fix Utf8ParserFormatter test culture settings dependency	Fixes https://github.com/dotnet/corefx/issues/27664    Make sure we're always using the invariant culture  when generating test data using the classic .NET api.
27728	area-System.Net	Fix order of native overlapped freeing in SocketAsyncEventArgs on Windows	SocketAsyncEventArgs tracks its disposal, and if it's disposed while an async operation is in flight, it delays the actual disposal until the operation completes.  That disposal includes disposing of the PreAllocatedOverlapped used for async operations.  When an operation is initiated, if the operation completes synchronously, then the NativeOverlapped associated with that PreAllocatedOverlapped is freed in a finally block once the operation completes synchronously.  But if during the operation the SAEA is disposed of, then the PreAllocatedOverlapped can get disposed of before the finally block.    The fix is to ensure we clean up the NativeOverlapped before completing the operation.  This was already handled correctly when an operation completed asynchronously, it just needed to be fixed for when it completes synchronously.  As a happy side-effect, fixing this also cleans up the call sites a bit.    (This was highlighted by an assert once we switched Socket.WriteAsync to return a ValueTask instead of a Task, because the way it was done means that when the Socket is disposed, the associated SocketAsyncEventArgs will be disposed, and SocketsHttpHandler is aggressive about disposing of the Socket as a way to enable cancellation, so the assert was triggering not-infrequently when running the System.Net.Http tests, especially in CI.)    Fixes https://github.com/dotnet/corefx/issues/27721  cc: @geoffkizer, @davidsh
27727	area-System.Net	Add folded response header support to SocketsHttpHandler	The feature is deprecated by RFC 7230, but some servers still utilize it, and if they do, SocketsHttpHandler currently fails (WinHttpHandler and the netfx handler both allow it, CurlHandler currently fails as well).  This commit updates the header parsing logic to allow for them.    cc: @geoffkizer, @davidsh
27726	area-System.Text	Use generic WeakReference and avoid casting in Regex	Using WeakReference<T> with a simple lock instead of Interlocked.Exchange for SharedReference.    @stephentoub you commented in another PR that I could use a simple lock for the ExclusiveReference. As concurrent calls shouldn't wait until the lock is released but return immediately, I don't think that's possible here with just lock?
27725	area-System.Security	Normalize the too-big-to-decrypt message across RSA implementations	Also add some more tests to make sure other boundary cases are covered.    Fixes #27590.
27724	area-System.IO	File.ReadAllTextAsync not behaving asynchronously when called on inaccessible network files	"When accessing a file on a network share that for some reason cannot be accessed (e.g. server not existent), `File.ReadAllTextAsync` appears to block, rather than running asynchronously, until the file request fails. This can be reproduced with the following console app:    ```csharp  using System;  using System.Collections.Generic;  using System.IO;  using System.Linq;  using System.Threading.Tasks;    namespace ReadAllTextAsync  {      class Program      {          public static void Main(string[] args)          {              Console.WriteLine(""Beginning"");                int count = 20;              var files = Enumerable.Range(0, count).Select(i => $@""\\server_{Guid.NewGuid():N}\file.txt"").ToList();              var tasks = new List<Task>();                foreach (string file in files)              {                  tasks.Add(_ReadFile(file));              }                Console.WriteLine(""Waiting..."");                Task.WhenAll(tasks).Wait();                Console.WriteLine(""Ending"");          }            private static async Task _ReadFile(string file)          {              try              {                  // await Task.Delay(1); // Uncomment this line allows calls to execute in parallel                  string text = await File.ReadAllTextAsync(file);              }              catch              {                  Console.WriteLine($""Error reading file: {file}"");              }          }      }  }  ```  The result of running the above code is a regular stream of (the expected) ""Error reading file"" messages but they come in slowly one after the other.    When uncommenting the `await Task.Delay(1)` line, the messages all come in nearly simulataneously. I would have expected this behaviour without this line.    I believe this is to do with the behaviour of the `new FileStream` object in https://github.com/dotnet/corefx/blob/release/2.0.0/src/System.IO.FileSystem/src/System/IO/File.cs    ```csharp          private static StreamReader AsyncStreamReader(string path, Encoding encoding)          {              FileStream stream = new FileStream(                  path, FileMode.Open, FileAccess.Read, FileShare.Read, DefaultBufferSize,                  FileOptions.Asynchronous | FileOptions.SequentialScan);                return new StreamReader(stream, encoding, detectEncodingFromByteOrderMarks: true);          }  ```  which is called before any code is awaited."
27723	area-System.Collections	Move, Reverse, etc. on LinkedList	Similar to #14338 we need the ability to manipulate a `LinkedList<T>`, most notably moving nodes within the collection. Another use case is to `Merge` one `LinkedList` into another one at a certain position (before / after a node). Technically the architecture of a double linked list and its nodes makes those feature quite easy to implement while offering good performance independent from list size.      ## Useful additions    **Swap** nodes in the collection ([SO Thread](https://stackoverflow.com/questions/3473787/swapping-nodes-on-a-single-linked-list))    ````cs  public void Swap(object foo, object blah)  {      // Currently we exploit the fact that the value of nodes can be set     var fooNode = _list.Find(foo);     var blahNode = _list.Find(blah);     fooNode.Value = blah;     blahNode.Value = foo;       // Proposed    _list.Swap(foo, blah);  }  ````  Overloads for `Swap` should accept nodes and objects.    **Move** nodes within the collection    ````cs  public void MoveNode(object foo, object blah)  {      // Currently     var fooNode = _list.Find(foo);     _list.Remove(blah);     _list.AddAfter(fooNode, blah);       // Proposed    _list.MoveAfter(foo, blah);  }  ````  There should be a method `MoveBefore` and `MoveAfter` with overloads for passing two nodes, one node and one object and two objects. An `InternalMove` method could even be used to replace the code for `AddBefore` and `AddAfter`.    **Insert** one linked list into another  ````cs  public void InsertInto(object foo, LinkedList<object> other)  {     var position = _list.Find(foo);      // Currently     foreach(var foo in other)     {        position = _list.AddAfter(position, foo);     }       // Proposed    _list.InsertAfter(position, other);  }  ````    Here the workaround is especially painful. I can not simply `AddAfter` because this would reverse the direction. I also can not `AddBefore(position.Next, foo)` because I would have to check for end of collection. I can either reverse `other` or steadily update the `position` variable. Because [`System.Linq.Reverse()`](https://github.com/dotnet/corefx/blob/master/src/System.Linq/src/System/Linq/Reverse.cs#L59) does not specifically check for `LinkedList` it will copy the other list to a buffer and reverse iterate that, which is a waste of time and memory in itself.    In each case inserting item-by-item also causes constant updates of the pointers that are complety unnessary when looking at the end result. Only the pointers for the first and last node of `other` as well as `position` and possibly `position.Next`.     **ReverseIterate** a linked list    ````cs  public IEnumerable<object> Reverse()  {      // Currently     return _list.Reverse(); // Linq extension copying to buffer       // Proposed new implementation of Reverse     var current = _list.Last;     while(current != null)     {         yield return current;        current = current.Previous;     }  }  ````    I am not sure whether to implement this in `LinkedList` and call it from `Linq.Reverse` or just implementing it in Linq.    ## Conclusion    I know `ArrayList` is the preferred type in .NET for numerous reasons and when just storing data I agree. But right now we have a use-case of a list that is frequently altered, elements are moved or smaller sorted chunks are inserted and removed. The collection as a whole is less important than the information which elements are next to each other. For all this `LinkedList` is the perfect solution by design. Unfortunately the current implementation of [`LinkedList<T>`](https://github.com/dotnet/corefx/blob/master/src/System.Collections/src/System/Collections/Generic/LinkedList.cs) and its [`LinkedListNode<T>`](https://github.com/dotnet/corefx/blob/master/src/System.Collections/src/System/Collections/Generic/LinkedList.cs) is locked down like Fort-Knox, making it impossible to add the features in a derived type, even if I wanted to.  So I need to decide whether to implement the entire list myself or to work around the features. Most of the workarounds (e.g. Remove + AddBefore instead of MoveBefore) require creating new objects instead of changing references because most operations and members are internal or perform node validation when trying to insert nodes from a different collection.
27721	area-System.Net	_preAllocatedOverlapped is null assert in Http tests	This has been failing sporadically since my ValueTask changes. The issue is that we end up disposing a SocketAsyncEventArgs while it's in use and then hit this assert in cleanup code.  ```  _preAllocatedOverlapped is null  2018-03-05 13:12:16,275: INFO: proc(54): run_and_log_output: Output:   2018-03-05 13:12:16,275: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.SocketAsyncEventArgs.FreeNativeOverlapped(NativeOverlapped* overlapped) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Sockets\src\System\Net\Sockets\SocketAsyncEventArgs.Windows.cs:line 76  2018-03-05 13:12:16,275: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.SocketAsyncEventArgs.FreeNativeOverlappedIfNotPending(NativeOverlapped* overlapped, SocketError error) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Sockets\src\System\Net\Sockets\SocketAsyncEventArgs.Windows.cs:line 85  2018-03-05 13:12:16,275: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.SocketAsyncEventArgs.DoOperationSendSingleBuffer(SafeCloseSocket handle) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Sockets\src\System\Net\Sockets\SocketAsyncEventArgs.Windows.cs:line 556  2018-03-05 13:12:16,275: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.SocketAsyncEventArgs.DoOperationSend(SafeCloseSocket handle) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Sockets\src\System\Net\Sockets\SocketAsyncEventArgs.Windows.cs:line 551  2018-03-05 13:12:16,275: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.Socket.SendAsync(SocketAsyncEventArgs e) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Sockets\src\System\Net\Sockets\Socket.cs:line 4178  2018-03-05 13:12:16,275: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.SendAsyncForNetworkStream(Socket socket) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Sockets\src\System\Net\Sockets\Socket.Tasks.cs:line 921  2018-03-05 13:12:16,290: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.Socket.SendAsyncForNetworkStream(ReadOnlyMemory`1 buffer, SocketFlags socketFlags, CancellationToken cancellationToken) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Sockets\src\System\Net\Sockets\Socket.Tasks.cs:line 377  2018-03-05 13:12:16,290: INFO: proc(54): run_and_log_output: Output:    at System.Net.Sockets.NetworkStream.WriteAsync(ReadOnlyMemory`1 source, CancellationToken cancellationToken) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Sockets\src\System\Net\Sockets\NetworkStream.cs:line 846  2018-03-05 13:12:16,290: INFO: proc(54): run_and_log_output: Output:    at System.Net.Http.HttpConnection.WriteToStreamAsync(ReadOnlyMemory`1 source) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1042  2018-03-05 13:12:16,290: INFO: proc(54): run_and_log_output: Output:    at System.Net.Http.HttpConnection.FlushAsync() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1032  2018-03-05 13:12:16,290: INFO: proc(54): run_and_log_output: Output:    at System.Net.Http.HttpConnection.SendAsyncCore(HttpRequestMessage request, CancellationToken cancellationToken) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 350  2018-03-05 13:12:16,290: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in E:\A\_work\1986\s\src\mscorlib\src\System\Runtime\CompilerServices\AsyncMethodBuilder.cs:line 938  2018-03-05 13:12:16,290: INFO: proc(54): run_and_log_output: Output:    at System.Net.Http.HttpConnection.SendAsyncCore(HttpRequestMessage request, CancellationToken cancellationToken)  2018-03-05 13:12:16,290: INFO: proc(54): run_and_log_output: Output:    at System.Net.Http.HttpConnection.SendWithNtProxyAuthAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 589  2018-03-05 13:12:16,290: INFO: proc(54): run_and_log_output: Output:    at System.Net.Http.HttpConnection.SendAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 599  2018-03-05 13:12:16,290: INFO: proc(54): run_and_log_output: Output:    at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 249  2018-03-05 13:12:16,290: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in E:\A\_work\1986\s\src\mscorlib\shared\System\Threading\ExecutionContext.cs:line 166  2018-03-05 13:12:16,290: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() in E:\A\_work\1986\s\src\mscorlib\src\System\Runtime\CompilerServices\AsyncMethodBuilder.cs:line 559  2018-03-05 13:12:16,290: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in E:\A\_work\1986\s\src\mscorlib\src\System\Threading\Tasks\Task.cs:line 3283  2018-03-05 13:12:16,290: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in E:\A\_work\1986\s\src\mscorlib\src\System\Threading\Tasks\future.cs:line 421  2018-03-05 13:12:16,290: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in E:\A\_work\1986\s\src\mscorlib\src\System\Runtime\CompilerServices\AsyncMethodBuilder.cs:line 650  2018-03-05 13:12:16,290: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(TResult result) in E:\A\_work\1986\s\src\mscorlib\src\System\Runtime\CompilerServices\AsyncMethodBuilder.cs:line 640  2018-03-05 13:12:16,290: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetResult(TResult result) in E:\A\_work\1986\s\src\mscorlib\shared\System\Runtime\CompilerServices\AsyncValueTaskMethodBuilder.cs:line 169  2018-03-05 13:12:16,290: INFO: proc(54): run_and_log_output: Output:    at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 456  2018-03-05 13:12:16,290: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in E:\A\_work\1986\s\src\mscorlib\shared\System\Threading\ExecutionContext.cs:line 166  2018-03-05 13:12:16,290: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() in E:\A\_work\1986\s\src\mscorlib\src\System\Runtime\CompilerServices\AsyncMethodBuilder.cs:line 559  2018-03-05 13:12:16,290: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ThreadPoolWorkQueue.Dispatch() in E:\A\_work\1986\s\src\mscorlib\src\System\Threading\ThreadPool.cs:line 588  2018-03-05 13:12:18,809: INFO: proc(54): run_and_log_output: Output: ----- end 13:12:18.80 ----- exit code -2146232797 ----------------------------------------------------------  2018-03-05 13:12:18,809: INFO: proc(58): run_and_log_output: Exit Code: -2146232797  2018-03-05 13:12:18,809: ERROR: scriptrunner(91): _main: Error: No exception thrown, but XUnit results not created  2018-03-05 13:12:18,809: ERROR: helix_test_execution(83): report_error: Error running xunit None  ```
27719	area-System.Data	Table Alias name not able to get from GetSchemaTable()	"Hi All,  I have one task to get the table alias name from the sql Query. Im tried with GetSchemaTable().    string query = ""select A.id as ParentId,B.id as ChildId from Parent A,ChildB"";    sqlCnn.Open();    sqlCmd = new SqlCommand(query, sqlCnn);    sqlReader = sqlCmd.ExecuteReader(CommandBehavior.KeyInfo);    DataTable schemaTable = sqlReader.GetSchemaTable();    It's not returning the table alias but it return the Column alias.   Can you please help me how to get the table alias name from executing query .  Please give me a solution it.     Thanks,  Ezra  "
27718	area-System.Threading	"Test: System.Threading.Channels.Tests.SpscUnboundedChannelPerfTests.PingPong failed with ""System.OperationCanceledException"""	The test: System.Threading.Channels.Tests.SpscUnboundedChannelPerfTests.PingPong (from (empty))  failed.  MESSAGE:  System.OperationCanceledException : The operation was canceled.  ~~~  STACK TRACE:  at System.Threading.Channels.ResettableValueTaskSource`1.GetResult(Int16 token) in /mnt/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_ubuntu16.04_debug/src/System.Threading.Channels/src/System/Threading/Channels/AsyncOperation.cs:line 100 at   System.Threading.Channels.Tests.PerfTests.<>c__DisplayClass4_1.<<PingPong>b__0>d.MoveNext() in /mnt/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_ubuntu16.04_debug/src/System.Threading.Channels/tests/Performance/Perf.Channel.cs:line 112 --- End of stack trace from previous location where exception was thrown --- at   System.Threading.Channels.Tests.PerfTests.PingPong() in /mnt/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_ubuntu16.04_debug/src/System.Threading.Channels/tests/Performance/Perf.Channel.cs:line 104 at Microsoft.Xunit.Performance.BenchmarkTestInvoker.<>c__DisplayClass1_0.<<CallTestMethod>b__0>d.MoveNext() --- End of stack trace from previous location where exception was thrown --- at   Microsoft.Xunit.Performance.Internal.BenchmarkIterator.RunAsync(Func`1 testMethod) --- End of stack trace from previous location where exception was thrown ---  ~~~    Details:  https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_ubuntu16.04_debug/329/testReport/System.Threading.Channels.Tests/SpscUnboundedChannelPerfTests/PingPong/  
27717	area-System.Net	System.Net.Sockets.Tests - IOControl_SIOCATMARK_Windows_Success failing on Windows.7.Amd64.Open-Release-x86	From https://github.com/dotnet/corefx/pull/27713  Windows.7.Amd64.Open-Release-x86  System.Net.Sockets.Tests.OSSupportTest/IOControl_SIOCATMARK_Windows_Success  https://mc.dot.net/#/user/dotnet-maestro-bot/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/79e54627d75ab93d5654d9803b57c9ea305cfb9f/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.OSSupportTest~2FIOControl_SIOCATMARK_Windows_Success  ```text  Message :  Assert.Equal() Failure  Expected: 0  Actual:   1  Stack Trace :     at System.Net.Sockets.Tests.OSSupportTest.IOControl_SIOCATMARK_Windows_Success() in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Net.Sockets\tests\FunctionalTests\OSSupport.cs:line 166  ```
27714	area-System.Threading	IValueTaskSource doesn't work on netcoreapp2.0	Strangely, if you reference System.Threading.Tasks.Extensions on a .NET Core 2.0 project IValueTaskSource doesn't exist. The netcoreapp2.0 folder in the nuget package has a `_._` and ValueTask gets resolved from the shared framework instead of the package (System.Threading.Tasks.Extensions is in Microsoft.NETCore.App 2.0 but an older version)    This leads to the following error when trying to use ValueTask with IValueTaskSource on .NET Core 2.0 projects:    ```  Unhandled Exception: System.AggregateException: One or more errors occurred. (Could not load type 'System.Threading.Tasks.Sources.IValueTaskSource`1' from assembly 'System.Threading.Tasks.Extensions, Version=4.1.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.) ---> System.TypeLoadException: Could not load type 'System.Threading.Tasks.Sources.IValueTaskSource`1' from assembly 'System.Threading.Tasks.Extensions, Version=4.1.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.     at System.IO.Pipelines.Pipe..ctor(PipeOptions options)     at ConsoleApp41.Program.<DefaultPipe>d__1.MoveNext() in C:\Users\dfowler\documents\visual studio 2017\Projects\ConsoleApp41\ConsoleApp41\Program.cs:line 20     --- End of inner exception stack trace ---     at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)     at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)     at ConsoleApp41.Program.Main(String[] args) in C:\Users\dfowler\documents\visual studio 2017\Projects\ConsoleApp41\ConsoleApp41\Program.cs:line 16  ```    Seems like this package should lift on netcoreapp2.0 instead of skip. I know we had other instances of this in the netcoreapp2.0 timeframe (things that shipped in box that were then taken out of band). This looks like another category of this issue.    /cc @stephentoub @weshaggard @ericstj @terrajobst @KrzysztofCwalina 
27712	area-Meta	Cross Platform GUI for desktop applications?	As one of the co-founders of a local startup, my partners and I were looking for a framework that could do it all and do it well. .NET Core very closely hit the mark but fell short in just one specific area: a cross-platform library for a Graphical User Interface.    I wasn't sure where to post this but I thought it was worth mentioning as an important feedback, my partners and I are big fans of what .NET Core is able to achieve (and the tools available for it) but we had to look elsewhere due to the fact that we need to be as efficient as possible due to our limited resources.    Hopefully our feedback and request makes a difference.    Phidler
27708	area-System.Net	Add response drain max time to SocketsHttpHandler	Adds support for a max time limit on how long we'll try to drain a connection before returning it to the pool, and adds a (currently non-public) knob for controlling that limit.    This also fixes a race condition with regards to cancellation and chunked responses.  If cancellation was requested after returning the connection to the pool but before we disposed of the cancellation registration, someone else could get the pooled connection and then cancellation of one request could end up canceling the other request.    Contributes to https://github.com/dotnet/corefx/issues/27685  cc: @geoffkizer, @davidsh
27707	area-System.Numerics	Span<T> And Vectors	Is there a plan to use Span< T > with Vectors?  It can be faster than copying array elements to the Vector.  Also, the static Vector calss can use it to do operations on two arrays in slices. Ecah method in the Vector class can have another overload with two T[] params instead of Vector< T > param and returns T[] or Memory< T >. If Vector< T > can make use of Span<T> slices (by adding a new constuctor that accepts Span< T >), it will be easy and fast to repeat the same operations on the array slices.  
27705	area-System.IO	Rename PipeReader.OnWriterCompleted and PipeWriter.OnReaderCompleted	In an early API review we agreed that OnWriterCompleted and OnReaderCompleted should be renamed to RegisterWriterCompleted and RegisterReaderCompleted since they were registering callbacks.    /cc @terrajobst @pakrym @KrzysztofCwalina @halter73 
27702	area-System.Net	HTTP client - API error c# (A task was canceled.)	"We are calling multiple API's in foreach loop and all API are of Async call. Now in the foreach loop due to some reason 1 API call has returned internal error and we are skipping that record and progressing with other requests in for loop. When the next loop continues the first API call we are getting error with ""System.Threading.Tasks.TaskCanceledException: A task was canceled"" and ""Aggregation exception"".    Code Snippet:  We are making Httpclient initialization per loop and object used multiple times in the loop.  using (var httpClientHelper = new HttpClientHelper(tokenService))     API call snippet:  var response = await httpClientHelper.GetAsync(""http://xyz"");     Help or thoughts on this will be much appreciated."
27699	area-System.IO	Added argument name to the exception	Fixes #27357   
27694	area-System.Memory	Add back Memory.ToString() to referencey assembly and add tests	Depends on https://github.com/dotnet/coreclr/pull/16732 and the subsequent mirror PR (https://github.com/dotnet/corefx/pull/27697).    cc @jkotas, @KrzysztofCwalina, @stephentoub, @pakrym, @khellang 
27692	area-System.Net	Lookup interface index when IN_PKTINFO isn't available	Fix #7855
27691	area-System.Memory	Fix ReadOnlySequence First	Seen in https://github.com/dotnet/corefxlab/pull/2143    Don't have enough bandwidth on the train to download and install a fresh coreclr to get passed apicheck; but the test definitely fails before the change. Hopefully it passes after :)    /cc @ahsonkhan @davidfowl @pakrym
27688	area-System.Memory	Productize OwnedArray<T>	What are the plans for productizing OwnedArray<T>? (https://github.com/dotnet/corefxlab/blob/master/src/System.Buffers.Primitives/System/Buffers/OwnedArray.cs)    Is it expected to be included in System.Buffers in 2.1?    cc @ahsonkhan @KrzysztofCwalina  
27686	area-System.Data	null reference exception while using transactionScope in async method on linux	"I was developing a blog project based on asp.net core mvc and trying to deploy my project on ubuntu 16.04 LTS x86-64.    And I encountered a null reference exception while using transactionScope with dapper on inserting object to sql server.    the sql server version is :12.0.4100.1 running on a windows 2012SP1 system. and the code was running just fine on windows 10 (OS Build 17074.1002). but when i deploy project to ubutun, it throws null refernce exceptions.    the exception details was like:    {System.NullReferenceException: Object reference not set to an instance of an object.  at System.Data.ProviderBase.DbConnectionPool.DeactivateObject(DbConnectionInternal obj) at System.Data.ProviderBase.DbConnectionPool.PutObject(DbConnectionInternal obj, Object owningObject) at System.Data.ProviderBase.DbConnectionInternal.CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory) at System.Data.SqlClient.SqlConnection.CloseInnerConnection() at System.Data.SqlClient.SqlConnection.Close() at Dapper.SqlMapper.d__641.MoveNext() in C:\projects\dapper\Dapper\SqlMapper.Async.cs:line 1191  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)     at System.Runtime.CompilerServices.TaskAwaiter1.GetResult() at Autyan.NiChiJou.Repository.Dapper.BaseDapperRepository1.<InsertAsync>d__22.MoveNext() in /home/alex/Documents/Github/Autyan.NiChiJou/src/Autyan.NiChiJou.Repository.Dapper/BaseDapperRepository.cs:line 167  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)     at System.Runtime.CompilerServices.TaskAwaiter1.GetResult() at Autyan.NiChiJou.Repository.Dapper.LongKeyDapperRepository1.<InsertAsync>d__1.MoveNext() in /home/alex/Documents/Github/Autyan.NiChiJou/src/Autyan.NiChiJou.Repository.Dapper/LongKeyDapperRepository.cs:line 23  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)     at System.Runtime.CompilerServices.TaskAwaiter1.GetResult() at Autyan.NiChiJou.Service.Blog.ArticleService.d__10.MoveNext() in /home/alex/Documents/Github/Autyan.NiChiJou/src/Autyan.NiChiJou.Service.Blog/ArticleService.cs:line 39}    my code that throws exception is like this:                using (var scope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))          {              var create = await ArticleRepo.InsertAsync(article);              if (create <= 0)              {                  return Failed<Article>(""create article failed"");              }              create = await ContentRepo.InsertAsync(new ArticleContent              {                  ArticleId = create,                  Content = content              });              if (create <= 0)              {                  return Failed<Article>(""create articleContent failed"");              }              scope.Complete();          }  I tried to remove the transactionScope and after that , my codes runs just fine with everything    the new code was like:    var create = await ArticleRepo.InsertAsync(article);          if (create <= 0)          {              return Failed<Article>(""create article failed"");          }          create = await ContentRepo.InsertAsync(new ArticleContent          {              ArticleId = create,              Content = content          });          if (create <= 0)          {              return Failed<Article>(""create articleContent failed"");          }  Am i using trancsationScope the wrong way? Or it's just a bug from dotnet core it self?"
27685	area-System.Net	SocketsHttpHandler: Add response drain timeout	We have a byte limit for response drain, but not a time limit.  So a poorly behaved server could tie up the connection indefinitely.  We should add a time limit.    EDIT 3/6/2018 by @stephentoub.  Adding API proposal:  ```C#  public int MaxResponseDrainSize { get; set; } // exists  public TimeSpan MaxResponseDrainTime { get; set; } // new (exists in implementation but as internal)  ```
27684	area-System.Data	Consider making DbDataReader implement IAsyncEnumerable	DbDataReader is used to stream rows from a database. Although it does implement IEnumerable (of DbDataRecord), that API is old and rarely-used (it's non-generic, sync-only and quite inefficient).    Consider making DbDataReader implement IAsyncEnumerable, to provide a modern and efficient API for going through the rows. This would simply be a layer implemented on top of DbDataReader's existing async operations (e.g. `ReadAsync()`), so it wouldn't require any sort of change from providers.
27682	area-System.Data	Add ValueTask overloads to ADO.NET async APIs	With https://github.com/dotnet/corefx/issues/27445 allowing elimination of allocations in asynchronously-executing async methods, we should look into adding ValueTask-returning counterparts to ADO.NET. This would potentially allow zero-allocation database access.    I'm not sure what naming should be like. Some parts of corefx are lucky in that they're introducing ValueTask overloads along with Span (e.g. Stream) but ADO.NET has no upcoming parameter changes/additions.    Here are the relevant methods:    ```c#  ValueTask DbConnection.OpenAsync(...);    ValueTask<DbDataReader> DbCommand.ExecuteReaderAsync(...);  ValueTask<DbDataReader> DbCommand.ExecuteDbDataReaderAsync(...);  ValueTask<object> DbCommand.ExecuteScalarAsync(...);  ValueTask DbCommand.ExecuteNonQueryAsync(...);    ValueTask<bool> DbDataReader.ReadAsync(...);  ValueTask<T> DblDataReader.GetFieldValueAsync<T>(...);  ValueTask<bool> DbDataReader.IsDBNullAsync(...);  ```    Note that there are some missing async methods in ADO.NET in general (e.g. `DbCommand.Prepare()`, `DbConnection.BeginTransactionAsync(...)`, `DbTransaction.CommitAsync(...)`...). These can be added directly with return value ValueTask.
27681	area-System.IO	Enabling tests for GetPathRoot	Fixes #27552 
27679	area-System.Runtime	Improve test coverage of DateTime ParseExact with different DateTimeStyles	See https://github.com/dotnet/corefx/pull/27678 for context.    @joperezr, @AlexGhiondea, @stephentoub, @jkotas 
27678	area-System.Runtime	Add DateTime ParseExact test with 'Allow White' styles	See https://github.com/dotnet/coreclr/pull/16718#discussion_r171988184 for context.    cc @jkotas, @stephentoub     Added some test to cover code paths leading to RemoveLeadingInQuoteSpaces / RemoveTrailingInQuoteSpaces. There are other DateTimeStyles that are still not well covered. Filed issue - https://github.com/dotnet/corefx/issues/27679
27677	area-Infrastructure	System.Transactions.Local.Tests 🔥 Linux x64 Release Build	Linux x64 Release Build  OpenSuse.423.Amd64.Open:Release-x64  System.Transactions.Local.Tests 🔥    ```    Details from Job ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226  ExitCode: -3   Ran on Machine: jofortes-opensuse-test   Executed on jofortes-opensuse-test  lix Script Runner v0.1 starting  pying execution payload files from /home/jofortes/dotnetbuild/work/ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226/Work/6288c9a0-0d0b-41e7-b7c4-d4ef6369079a/Unzip to /home/jofortes/dotnetbuild/work/ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226/Work/6288c9a0-0d0b-41e7-b7c4-d4ef6369079a/Exec/execution  ofortes/dotnetbuild/work/ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226/Work/6288c9a0-0d0b-41e7-b7c4-d4ef6369079a/Unzip/System.Transactions.Local.Tests.dll' to '/home/jofortes/dotnetbuild/work/ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226/Work/6288c9a0-0d0b-41e7-b7c4-d4ef6369079a/Exec/execution/System.Transactions.Local.Tests.dll'  ofortes/dotnetbuild/work/ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226/Work/6288c9a0-0d0b-41e7-b7c4-d4ef6369079a/Unzip/xunit.console.netcore.exe' to '/home/jofortes/dotnetbuild/work/ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226/Work/6288c9a0-0d0b-41e7-b7c4-d4ef6369079a/Exec/execution/xunit.console.netcore.exe'  ofortes/dotnetbuild/work/ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226/Work/6288c9a0-0d0b-41e7-b7c4-d4ef6369079a/Unzip/RunTests.sh' to '/home/jofortes/dotnetbuild/work/ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226/Work/6288c9a0-0d0b-41e7-b7c4-d4ef6369079a/Exec/execution/RunTests.sh'  ofortes/dotnetbuild/work/ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226/Work/6288c9a0-0d0b-41e7-b7c4-d4ef6369079a/Unzip/xunit.console.netcore.runtimeconfig.json' to '/home/jofortes/dotnetbuild/work/ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226/Work/6288c9a0-0d0b-41e7-b7c4-d4ef6369079a/Exec/execution/xunit.console.netcore.runtimeconfig.json'  ofortes/dotnetbuild/work/ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226/Work/6288c9a0-0d0b-41e7-b7c4-d4ef6369079a/Unzip/System.Transactions.Local.Tests.pdb' to '/home/jofortes/dotnetbuild/work/ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226/Work/6288c9a0-0d0b-41e7-b7c4-d4ef6369079a/Exec/execution/System.Transactions.Local.Tests.pdb'  ofortes/dotnetbuild/work/ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226/Work/6288c9a0-0d0b-41e7-b7c4-d4ef6369079a/Unzip/DumplingHelper.py' to '/home/jofortes/dotnetbuild/work/ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226/Work/6288c9a0-0d0b-41e7-b7c4-d4ef6369079a/Exec/execution/DumplingHelper.py'   /home/jofortes/dotnetbuild/work/ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226/Work/6288c9a0-0d0b-41e7-b7c4-d4ef6369079a/Unzip/RunTests.sh /home/jofortes/dotnetbuild/work/ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226/Payload  me/jofortes/dotnetbuild/work/ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226/Work/6288c9a0-0d0b-41e7-b7c4-d4ef6369079a/Unzip  ----- start 02:25:09 =============== To repro directly: =====================================================  pushd /home/jofortes/dotnetbuild/work/ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226/Work/6288c9a0-0d0b-41e7-b7c4-d4ef6369079a/Unzip  python DumplingHelper.py install_dumpling  __TIMESTAMP=`python DumplingHelper.py get_timestamp`  chmod +x /home/jofortes/dotnetbuild/work/ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226/Payload/dotnet  /home/jofortes/dotnetbuild/work/ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226/Payload/dotnet xunit.console.netcore.exe System.Transactions.Local.Tests.dll  -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests  -notrait category=OuterLoop -notrait category=failing  python DumplingHelper.py collect_dump $\ `pwd`  System.Transactions.Local.Tests /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/bin/runtime/netcoreapp-Linux-Release-x64/,/mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/bin/tests/System.Transactions.Local.Tests/netcoreapp-Linux-Release-x64/,/home/jofortes/dotnetbuild/work/ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226/Payload,/lib/x86_64-linux-gnu/libgcc_s.so.1,/lib/x86_64-linux-gnu/libpthread.so.0,/lib/x86_64-linux-gnu/librt.so.1,/usr/lib/x86_64-linux-gnu/libunwind.so.8,/lib/x86_64-linux-gnu/libdl.so.2,/lib/x86_64-linux-gnu/libuuid.so.1,/usr/lib/x86_64-linux-gnu/libunwind-x86_64.so.8,/usr/lib/x86_64-linux-gnu/libstdc++.so.6,/lib/x86_64-linux-gnu/libm.so.6,/lib/x86_64-linux-gnu/libc.so.6,/lib64/ld-linux-x86-64.so.2,/lib/x86_64-linux-gnu/liblzma.so.5  popd  ===========================================================================================================  ~/dotnetbuild/work/ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226/Work/6288c9a0-0d0b-41e7-b7c4-d4ef6369079a/Unzip ~/dotnetbuild/work/ab3d3d99-d911-4dbc-bb9b-bcf3ee74d226/Work/6288c9a0-0d0b-41e7-b7c4-d4ef6369079a/Unzip  Dumpling cannot be installed due to: HTTP Error 403 Site Disabled  xUnit.net console test runner (64-bit .NET Core)  Copyright (C) 2014 Outercurve Foundation.    Discovering: System.Transactions.Local.Tests  Discovered:  System.Transactions.Local.Tests  Starting:    System.Transactions.Local.Tests  ```    Seen in https://github.com/dotnet/corefx/pull/27673
27675	area-System.Threading	IsValidLocationForInlining no longer considered when running await continuations	"when up to 2.1 preview1  run app in cmd dotnet run -c release -f netcoreapp2.1  TaskCompletionSource TrySetResult  be blocked  netcoreapp2.0 is ok      ```C#   public sealed class TaskCompletionSource : TaskCompletionSource<int>      {          public static readonly TaskCompletionSource Void = CreateVoidTcs();            public TaskCompletionSource(object state)              : base(state)          {          }            public TaskCompletionSource()          {          }            public bool TryComplete()          {             return this.TrySetResult(0);          }            public void Complete() => this.SetResult(0);            // todo: support cancellation token where used          public bool SetUncancellable() => true;            public override string ToString() => ""TaskCompletionSource[status: "" + this.Task.Status.ToString() + ""]"";            static TaskCompletionSource CreateVoidTcs()          {              var tcs = new TaskCompletionSource();              tcs.TryComplete();              return tcs;          }      }  ```"
27674	area-Infrastructure	[uap] CoreFx build is failing since 'RemotelyInvokable' does not contain a definition for 'LongWait'	https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1436514  ```text  2018-03-02T21:25:47.5255290Z Build FAILED.  2018-03-02T21:25:47.5268140Z   2018-03-02T21:25:47.5269301Z ProcessTestBase.Uap.cs(68,57): error CS0117: 'RemotelyInvokable' does not contain a definition for 'LongWait' [E:\A\_work\36\s\corefx\src\System.Diagnostics.Process\tests\System.Diagnostics.Process.Tests.csproj]  2018-03-02T21:25:47.5272048Z     0 Warning(s)  2018-03-02T21:25:47.5273015Z     1 Error(s)  ```    cc @jkotas, @stephentoub 
27672	area-System.Net	NTLM authentication sometimes broken by multiple WWW-Authenticate headers	"This issue has been split off from #9234, which turned out to be a problem in the tool being used to observe network traffic. Other users saw similar results, but under different conditions and not caused by the testing tool. That issue will be tracked here to clearly separate the two issues.    The issue tracked here occurs with the following code, targeting .NET Core 2.0:  ```C#  var creds = new CredentialCache();  creds.Add(new Uri(addy),""NTLM"",new NetworkCredential(Username,Password));  var handler = new HttpClientHandler  {   Credentials = creds,  };    HttpClient client = new HttpClient(handler);  client.BaseAddress = new Uri(addy);                var response = await client.GetAsync(""api/myresource"");  ```  In Windows, the server receives the following headers, but does not initiate the NTLM handshake:  ```http  HTTP/1.1 401 Unauthorized  Content-Type: text/html  Server: Microsoft-IIS/8.5  WWW-Authenticate: NTLM  WWW-Authenticate: Negotiate  X-Powered-By: ASP.NET  Date: Thu, 01 Mar 2018 22:17:34 GMT  Content-Length: 1293  ```    @dbrownxc, can you provide more information on the situation in which you were able to reproduce this issue? It would be good to have full logs for the unsuccessful authentication attempt.     cc: @seriouz @karelz @davidsh "
27669	area-System.Text	Revert exposing Capture.Text	Mistake from my side...
27667	area-Infrastructure	Use .Net Core for updating Versions repo	Should unblock updating the Versions repo in the pipebuild. @dagood PTAL
27666	area-Infrastructure	Use .Net Core for UpdatePublishDependencies	To unblock updating Versions repo in 1.1.0 pipebuild    @dagood PTAL (this one is different than the CoreCLR ones due to directly invoking VersionTools.targets)
27665	area-Infrastructure	Use .Net lib for SecurityProtocol	Should resolve updating the Versions repo in the 1.0.0 Pipebuild.    @dagood PTAL
27664	area-System.Memory	System.Memory.Tests fails 516 tests of parsing numbers	System.Memory.Tests fails 516 tests of parsing numbers with next log  ```       System.Buffers.Text.Tests.ParserTests.TestParserInt16(testData: [ParseInt16 '32 747,00',N to 32747)]) [FAIL]          TestException : This parse attempt [ParseInt16 '32 747,00',N to 32747)] succeeded as expected but parsed to the wrong value:      Expected: 32747      Actual:   32              Stack Trace:             C:\Code\corefx\src\System.Memory\tests\ParsersAndFormatters\Parser\ValidateParser.cs(45,0): at System.Buffers.Text.Tests.ParserTests.ValidateParserHelper[T](ParserTestData`1 testData)             C:\Code\corefx\src\System.Memory\tests\ParsersAndFormatters\Parser\ValidateParser.cs(13,0): at System.Buffers.Text.Tests.ParserTests.ValidateParser[T](ParserTestData`1 testData)             C:\Code\corefx\src\System.Memory\tests\ParsersAndFormatters\Parser\ParserTests.cs(37,0): at System.Buffers.Text.Tests.ParserTests.TestParserInt16(ParserTestData`1 testData)  ```  and so on...    To reproduce it. Set the decimal separator different from dot. And set thousand separator different from comma.    So bug is in test data generator that have very intricate code. And I can not find bug location. I spend about 4 hours to find bug location.  
27662	area-System.IO	Test failure: System.IO.Tests.DirectoryInfo_GetSetTimes/TimesIncludeMillisecondPart	Test passes on all Linux distros in CI: https://github.com/dotnet/corefx/pull/27559  Test fails on all Linux distros in official build.    Investigating whether build is exactly the same.      The test `System.IO.Tests.DirectoryInfo_GetSetTimes/TimesIncludeMillisecondPart` has failed.  ```  Assert.All() Failure: 6 out of 6 items in the collection did not pass.      [5]: Xunit.Sdk.NotEqualException: Assert.NotEqual() Failure           Expected: Not 0           Actual:   0              at Xunit.Assert.NotEqual[T](T expected, T actual, IEqualityComparer`1 comparer)              at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass8_0.<TimesIncludeMillisecondPart>b__0(TimeFunction function) in /root/corefx-1435242/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 101              at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)      [4]: Xunit.Sdk.NotEqualException: Assert.NotEqual() Failure           Expected: Not 0           Actual:   0              at Xunit.Assert.NotEqual[T](T expected, T actual, IEqualityComparer`1 comparer)              at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass8_0.<TimesIncludeMillisecondPart>b__0(TimeFunction function) in /root/corefx-1435242/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 101              at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)      [3]: Xunit.Sdk.NotEqualException: Assert.NotEqual() Failure           Expected: Not 0           Actual:   0              at Xunit.Assert.NotEqual[T](T expected, T actual, IEqualityComparer`1 comparer)              at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass8_0.<TimesIncludeMillisecondPart>b__0(TimeFunction function) in /root/corefx-1435242/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 101              at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)      [2]: Xunit.Sdk.NotEqualException: Assert.NotEqual() Failure           Expected: Not 0           Actual:   0              at Xunit.Assert.NotEqual[T](T expected, T actual, IEqualityComparer`1 comparer)              at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass8_0.<TimesIncludeMillisecondPart>b__0(TimeFunction function) in /root/corefx-1435242/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 101              at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)      [1]: Xunit.Sdk.NotEqualException: Assert.NotEqual() Failure           Expected: Not 0           Actual:   0              at Xunit.Assert.NotEqual[T](T expected, T actual, IEqualityComparer`1 comparer)              at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass8_0.<TimesIncludeMillisecondPart>b__0(TimeFunction function) in /root/corefx-1435242/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 101              at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)      [0]: Xunit.Sdk.NotEqualException: Assert.NotEqual() Failure           Expected: Not 0           Actual:   0              at Xunit.Assert.NotEqual[T](T expected, T actual, IEqualityComparer`1 comparer)              at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass8_0.<TimesIncludeMillisecondPart>b__0(TimeFunction function) in /root/corefx-1435242/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 101              at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)            Stack Trace:            null  Build : Master - 20180302.04 (Core Tests)  Failing configurations:  - RedHat.69.Amd64-x64    - Release  - Fedora.27.Amd64-x64    - Release  - Fedora.26.Amd64-x64    - Release  - SLES.12.Amd64-x64    - Release  - OpenSuse.423.Amd64-x64    - Release  - Ubuntu.1804.Amd64-x64    - Release  - Ubuntu.1710.Amd64-x64    - Release  - Ubuntu.1604.Amd64-x64    - Release  - Ubuntu.1404.Amd64-x64    - Release  - Debian.90.Amd64-x64    - Release  - Debian.87.Amd64-x64    - Release  - RedHat.74.Amd64-x64    - Release  - RedHat.73.Amd64-x64    - Release  - Centos.74.Amd64-x64    - Release  - Centos.73.Amd64-x64    - Release  
27660	area-System.Diagnostics	EventSource: Arrays in the Event payload are not supported	"I see a major problem with the Lttng output on Linux when an array is passed to an Event using a custom EventSource.    One of the events in our EventSource includes a byte array in its payload. [a data buffer]  On Windows the event log correctly shows the data in that buffer, but on Linux it simply shows ""System.Byte[]"".  Apparently it is using ToString() which will not work for arrays.    I am simply passing a Byte[] to the WriteEvent() function in my EventSource:    ```          [Event(6, Level = EventLevel.LogAlways)]          private void DataMsg(String action, String msgType, UInt32 sesssion, UInt32 request, Int32 length, Byte[] data)          {              WriteEvent(6, action, msgType, sesssion, request, length, data);          }  ```    I copied the log file [chanel0_0] to Windows and read it using Notepad++.  (I'm sure there is a simple way to read it on Ubuntu but I'm not familiar with Linux.)    An example of the payload received from this DataMsg event follows:  **{""action"":""SEND"", ""msgType"":""Start"", ""sesssion"":9774, ""request"":1, ""length"":61, ""data"":System.Byte[]}**    Everything looks good except for the 'data' value.  On Windows the *.etl file contains the actual contents of the data buffer.  (This value is displayed in PerfView as a hex-string.) "
27659	area-System.ComponentModel	Test failure: System.ComponentModel.Composition.CompositionExceptionTests/Message_ShouldFormatCountOfRootCausesUsingTheCurrentCulture	Opened on behalf of @danmosemsft  The test `System.ComponentModel.Composition.CompositionExceptionTests/Message_ShouldFormatCountOfRootCausesUsingTheCurrentCulture` has failed.  Assert.True() Failure\r     Expected: True\r     Actual:   False          Stack Trace:             at System.ComponentModel.Composition.CompositionExceptionTests.AssertMessage(CompositionException exception, Int32 rootCauseCount, CultureInfo culture) in E:\A\_work\5\s\corefx\src\System.ComponentModel.Composition\tests\System\ComponentModel\Composition\CompositionExceptionTests.cs:line 413        at System.ComponentModel.Composition.CompositionExceptionTests.Message_ShouldFormatCountOfRootCausesUsingTheCurrentCulture() in E:\A\_work\5\s\corefx\src\System.ComponentModel.Composition\tests\System\ComponentModel\Composition\CompositionExceptionTests.cs:line 378 Build : Master - 20180302.04 (UWP F5 Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x86   - Release 
27656	area-Infrastructure	[Arm64/Linux] Enable CI & Official builds	@jashook @janvorli     Needs coreclr linux-arm64 in nuget    PTAL let me know if there is anything else which I might have missed.
27655	area-System.Net	System.Net.Http.Functional.Tests  Win10 UWP CI Failures	"UWP CoreCLR x64 Debug Build  Windows.10.Amd64.ClientRS2.Open:Debug-x64    ```  C:\dotnetbuild\work\2ceaeb93-cc2a-4fd8-bdc6-34ca814f1b98\Work\04be80d4-1146-45e6-a5a3-bb5aa0291119\Unzip>mklink /H xunit.runner.utility.dotnet.dll C:\dotnetbuild\work\2ceaeb93-cc2a-4fd8-bdc6-34ca814f1b98\Payload\UAPLayout\xunit.runner.utility.dotnet.dll   Cannot create a file when that file already exists.    C:\dotnetbuild\work\2ceaeb93-cc2a-4fd8-bdc6-34ca814f1b98\Work\04be80d4-1146-45e6-a5a3-bb5aa0291119\Unzip>mklink /H xunit.runner.utility.dotnet.pdb C:\dotnetbuild\work\2ceaeb93-cc2a-4fd8-bdc6-34ca814f1b98\Payload\UAPLayout\xunit.runner.utility.dotnet.pdb   Hardlink created for xunit.runner.utility.dotnet.pdb <<===>> C:\dotnetbuild\work\2ceaeb93-cc2a-4fd8-bdc6-34ca814f1b98\Payload\UAPLayout\xunit.runner.utility.dotnet.pdb    C:\dotnetbuild\work\2ceaeb93-cc2a-4fd8-bdc6-34ca814f1b98\Work\04be80d4-1146-45e6-a5a3-bb5aa0291119\Unzip>copy /y C:\dotnetbuild\work\2ceaeb93-cc2a-4fd8-bdc6-34ca814f1b98\Payload\UAPLayout\System.Private.CoreLib.dll System.Private.CoreLib.ni.dll           1 file(s) copied.    C:\dotnetbuild\work\2ceaeb93-cc2a-4fd8-bdc6-34ca814f1b98\Work\04be80d4-1146-45e6-a5a3-bb5aa0291119\Unzip>call C:\dotnetbuild\work\2ceaeb93-cc2a-4fd8-bdc6-34ca814f1b98\Payload\Launcher\WindowsStoreAppLauncher.exe -test appxmanifest.xml System.Net.Http.Functional.Tests.dll  -xml testResults.xml -notrait Benchmark=true -notrait category=nonuaptests -notrait category=nonwindowstests  -notrait category=OuterLoop -notrait category=failing   Got manifest file appxmanifest.xml  Removing any previous installation...  Installing the application...  Package ID is 5cd54353-3ed7-4a6e-a72f-db349f28867c_1.0.0.0_x64__v52bfwc2c21ha  Starting the application...  Resolved Folder Path: C:\Users\DotNetTestRunner\AppData\Local\Packages\5cd54353-3ed7-4a6e-a72f-db349f28867c_v52bfwc2c21ha\  Waiting for the application to exit...  Process has just exited with return code -2146232797.  Disabling the debugger...      STDOUT & STDERR from immersive process:  ==================================================================================     System.Net.Http.Functional.Tests.dll -xml testResults.xml -notrait Benchmark=true -notrait category=nonuaptests -notrait category=nonwindowstests -notrait category=OuterLoop -notrait category=failing  Discovering: System.Net.Http.Functional.Tests  Discovered: System.Net.Http.Functional.Tests  Starting:    System.Net.Http.Functional.Tests     System.Net.Http.Functional.Tests.HttpClientEKUTest.HttpClient_ClientEKUServerAuth_Fails [SKIP]        Condition(s) not met: \""CanTestCertificates\""     System.Net.Http.Functional.Tests.HttpClientEKUTest.HttpClient_NoEKUClientAuth_Ok [SKIP]        Condition(s) not met: \""CanTestClientCertificates\""     System.Net.Http.Functional.Tests.HttpClientEKUTest.HttpClient_NoEKUServerAuth_Ok [SKIP]        Condition(s) not met: \""CanTestCertificates\""     System.Net.Http.Functional.Tests.HttpClientEKUTest.HttpClient_ServerEKUClientAuth_Fails [SKIP]        Condition(s) not met: \""CanTestClientCertificates\""    ==================================================================================  Removing the application...    SUCCESS  ExitCode -2146232797    C:\dotnetbuild\work\2ceaeb93-cc2a-4fd8-bdc6-34ca814f1b98\Work\04be80d4-1146-45e6-a5a3-bb5aa0291119\Unzip>move C:\Users\DotNetTestRunner\Documents\TestResults\System.Net.Http.Functional.Tests.dll.xml .\testResults.xml   The system cannot find the file specified.  ----- end 10:54:22.20 ----- exit code 1 ----------------------------------------------------------  INFO: proc(58): run_and_log_output: Exit Code: 1  scriptrunner(91): _main: Error: No exception thrown, but XUnit results not created  helix_test_execution(83): report_error: Error running xunit None    ```  #27644  #27650  #27645"
27654	area-System.Net	Remove temporary ByteArrayHelpers and use Span.Equals	The issue - https://github.com/dotnet/corefx/issues/21395 - has been resolved.    cc @stephentoub, @geoffkizer 
27653	area-System.IO	System.IO.Tests.DirectoryInfo Win10 UWP CI Failures	UWP CoreCLR x64 Debug Build  Windows.10.Amd64.ClientRS2.Open-Debug-x64  ```  System.IO.Tests.DirectoryInfo_Create    RootPath    Unhandled Exception of Type System.IO.DirectoryNotFoundException  Message :  System.IO.DirectoryNotFoundException : Could not find a part of the path 'C:\\'.  Stack Trace :     at System.IO.FileSystem.CreateDirectory(String fullPath)     at System.IO.DirectoryInfo.Create()     at System.IO.Tests.DirectoryInfo_Create.Create(String path) in D:\j\workspace\windows-TGrou---33cbf18b\src\System.IO.FileSystem\tests\DirectoryInfo\Create.cs:line 16     at System.IO.Tests.Directory_CreateDirectory.RootPath() in D:\j\workspace\windows-TGrou---33cbf18b\src\System.IO.FileSystem\tests\Directory\CreateDirectory.cs:line 89  ```  ```  System.IO.Tests.DirectoryInfo_Exists    Root  Assert.True() Failure  Expected: True  Actual:   False  Stack Trace :     at System.IO.Tests.DirectoryInfo_Exists.Root() in D:\j\workspace\windows-TGrou---33cbf18b\src\System.IO.FileSystem\tests\DirectoryInfo\Exists.cs:line 43  ```  ```  System.IO.Tests.DirectoryInfo_ToString    DriveOnlyReturnsPeriod_Windows_Desktop  Assert.Equal() Failure            ↓ (pos 0)  Expected: .  Actual:   C:            ↑ (pos 0)  Stack Trace :     at System.IO.Tests.DirectoryInfo_ToString.DriveOnlyReturnsPeriod_Windows_Desktop() in D:\j\workspace\windows-TGrou---33cbf18b\src\System.IO.FileSystem\tests\DirectoryInfo\ToString.cs:line 47  ```  ```  System.IO.Tests.Directory_CreateDirectory    RootPath  Unhandled Exception of Type System.IO.DirectoryNotFoundException  Message :  System.IO.DirectoryNotFoundException : Could not find a part of the path 'C:\\'.  Stack Trace :     at System.IO.FileSystem.CreateDirectory(String fullPath)     at System.IO.Directory.CreateDirectory(String path)     at System.IO.Tests.Directory_CreateDirectory.Create(String path) in D:\j\workspace\windows-TGrou---33cbf18b\src\System.IO.FileSystem\tests\Directory\CreateDirectory.cs:line 17     at System.IO.Tests.Directory_CreateDirectory.RootPath() in D:\j\workspace\windows-TGrou---33cbf18b\src\System.IO.FileSystem\tests\Directory\CreateDirectory.cs:line 89  ```  #27644  #27650  #27645
27651	area-System.IO	ValueTask adoption in System.IO.Pipelines	- Use the new IValueTaskSource support added to corefx  - Implement IValueTaskSource on the defualt PipeReader and PipeWriter implementations.  - Handle the case where there is a sync context and allow turning this behavior off to favor the specified schedulers      /cc @pakrym @stephentoub     ~PS: I couldn't get it compiling so I assume that something was wrong with my build locally or the ref in corefx (I didn't try hard enough yet). I'm sending this out as a WIP so it can be reviewed. I still need to update tests accordingly~
27650	area-System.Net	System.Net.Security.Tests fails 3 tests in non-English Windows	System.Net.Security.Tests fails 3 tests in non-English Windows
27647	area-System.Drawing	System.Drawing.Common.Tests fails 10 tests in non-English Windows	"System.Drawing.Common.Tests fails 10 tests in non-English Windows with next log:  ```    Starting:    System.Drawing.Common.Tests       System.Drawing.Tests.FontTests.ToLogFont_Invoke_ReturnsExpected(fontStyle: Bold, Italic, Strikeout, gdiCharSet: 1, gdiVerticalFont: True, expectedNamePrefix: \""@\"", expectedWeight: 700) [FAIL]          Assert.Equal() Failure          Expected: 1          Actual:   204          Stack Trace:             C:\Code\corefx\src\System.Drawing.Common\tests\FontTests.cs(719,0): at System.Drawing.Tests.FontTests.ToLogFont_Invoke_ReturnsExpected(FontStyle fontStyle, Byte gdiCharSet, Boolean gdiVerticalFont, String expectedNamePrefix, Int32 expectedWeight)       System.Drawing.Tests.FontTests.ToLogFont_Invoke_ReturnsExpected(fontStyle: Regular, gdiCharSet: 0, gdiVerticalFont: False, expectedNamePrefix: \""\"", expectedWeight: 400) [FAIL]          Assert.Equal() Failure          Expected: 0          Actual:   204          Stack Trace:             C:\Code\corefx\src\System.Drawing.Common\tests\FontTests.cs(719,0): at System.Drawing.Tests.FontTests.ToLogFont_Invoke_ReturnsExpected(FontStyle fontStyle, Byte gdiCharSet, Boolean gdiVerticalFont, String expectedNamePrefix, Int32 expectedWeight)       System.Drawing.Tests.FontTests.ToLogFont_Invoke_ReturnsExpected(fontStyle: Regular, gdiCharSet: 10, gdiVerticalFont: False, expectedNamePrefix: \""\"", expectedWeight: 400) [FAIL]          Assert.Equal() Failure          Expected: 10          Actual:   204          Stack Trace:             C:\Code\corefx\src\System.Drawing.Common\tests\FontTests.cs(719,0): at System.Drawing.Tests.FontTests.ToLogFont_Invoke_ReturnsExpected(FontStyle fontStyle, Byte gdiCharSet, Boolean gdiVerticalFont, String expectedNamePrefix, Int32 expectedWeight)       System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(textRenderingHint: SystemDefault, expectedQuality: 0) [FAIL]          Assert.Equal() Failure          Expected: 1          Actual:   204          Stack Trace:             C:\Code\corefx\src\System.Drawing.Common\tests\FontTests.cs(756,0): at System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(TextRenderingHint textRenderingHint, Int32 expectedQuality)       System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(textRenderingHint: AntiAlias, expectedQuality: 3) [FAIL]          Assert.Equal() Failure          Expected: 1          Actual:   204          Stack Trace:             C:\Code\corefx\src\System.Drawing.Common\tests\FontTests.cs(756,0): at System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(TextRenderingHint textRenderingHint, Int32 expectedQuality)       System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(textRenderingHint: AntiAliasGridFit, expectedQuality: 3) [FAIL]          Assert.Equal() Failure          Expected: 1          Actual:   204          Stack Trace:             C:\Code\corefx\src\System.Drawing.Common\tests\FontTests.cs(756,0): at System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(TextRenderingHint textRenderingHint, Int32 expectedQuality)       System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(textRenderingHint: SingleBitPerPixel, expectedQuality: 3) [FAIL]          Assert.Equal() Failure          Expected: 1          Actual:   204          Stack Trace:             C:\Code\corefx\src\System.Drawing.Common\tests\FontTests.cs(756,0): at System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(TextRenderingHint textRenderingHint, Int32 expectedQuality)       System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(textRenderingHint: SingleBitPerPixelGridFit, expectedQuality: 3) [FAIL]          Assert.Equal() Failure          Expected: 1          Actual:   204          Stack Trace:             C:\Code\corefx\src\System.Drawing.Common\tests\FontTests.cs(756,0): at System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(TextRenderingHint textRenderingHint, Int32 expectedQuality)       System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(textRenderingHint: ClearTypeGridFit, expectedQuality: 5) [FAIL]          Assert.Equal() Failure          Expected: 1          Actual:   204          Stack Trace:             C:\Code\corefx\src\System.Drawing.Common\tests\FontTests.cs(756,0): at System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(TextRenderingHint textRenderingHint, Int32 expectedQuality)       System.Drawing.Imaging.Tests.MetafileTests.Ctor_StringIntPtrEmfType_Success(emfType: EmfPlusDual) [FAIL]          System.Runtime.InteropServices.ExternalException : A generic error occurred in GDI+.          Stack Trace:             C:\Code\corefx\src\System.Drawing.Common\src\System\Drawing\Imaging\Metafile.Windows.cs(264,0): at System.Drawing.Imaging.Metafile..ctor(String fileName, IntPtr referenceHdc, EmfType type, String description)             C:\Code\corefx\src\System.Drawing.Common\src\System\Drawing\Imaging\Metafile.Windows.cs(241,0): at System.Drawing.Imaging.Metafile..ctor(String fileName, IntPtr referenceHdc, EmfType type)             C:\Code\corefx\src\System.Drawing.Common\tests\Imaging\MetafileTests.cs(399,0): at System.Drawing.Imaging.Tests.MetafileTests.Ctor_StringIntPtrEmfType_Success(EmfType emfType)    Finished:    System.Drawing.Common.Tests  ```    On my computer `font.ToLogFont(logFont);` always set `logFont.lfCharSet` to 204.     Is it error in test or in implementation?"
27646	area-System.Diagnostics	System.Diagnostics.EventLog.Tests fails 2 tests in non-English Windows	`System.Diagnostics.EventLog.Tests` fails 2 tests in non-English Windows with next log:  ```       System.Diagnostics.Tests.EventLogTests.CheckLogName_Get [FAIL]          Assert.Equal() Failure                     (pos 0)          Expected: Application          Actual:   Приложение                     (pos 0)          Stack Trace:             C:\Code\corefx\src\System.Diagnostics.EventLog\tests\EventLogTests\EventLogTests.cs(83,0): at System.Diagnostics.Tests.EventLogTests.CheckLogName_Get()         System.Diagnostics.Tests.EventLogTests.GetLogDisplayName_Set [FAIL]          Assert.Equal() Failure                     (pos 0)          Expected: Application          Actual:   Приложение                     (pos 0)          Stack Trace:             C:\Code\corefx\src\System.Diagnostics.EventLog\tests\EventLogTests\EventLogTests.cs(112,0): at System.Diagnostics.Tests.EventLogTests.GetLogDisplayName_Set()  ```    I do not know how to fix these tests, because `EventLog.LogDisplayName` differs in non-English Windows.    May be test `EventLog.Log` property ? Or test that `EventLog.LogDisplayName` is not empty string?
27645	area-System.Data	Add SqlCredential dependent APIs	This PR adds APIs that were dependent on the SqlCredential class ported in #27311. A large chunk of this was ported from reference source, but I had to fill in gaps in assembling the SNI packets for login when using SecureStrings. This happens in TdsParserStateObjectManaged.cs and TdsParserStateObjectNative.cs, and while functional may not be perfect (this is my first time dealing with SecureStrings in this context).     Both unit tests and integration tests have been added. The integration tests for this change connect to the database and create a login on which changes are tested. These are passing on my local SQL instance.     Always happy to make any requested changes.     Related issue: #11542   Edit  Fixes #11542     @saurabh500 
27644	area-System.IO	Fix System.IO.Pipelines reference assembly	cc @pakrym, @davidfowl, @joperezr, @weshaggard     ~The ref csproj doesn't need System.Buffers.~    And if I reference System.Memory as a ProjectReference, I get the following errors, when I run `msbuild` after navigating to `corefx\src\System.IO.Pipelines`:  ```text  ...  System.IO.Pipelines.cs(86,107): error CS1069: The type name 'ReadOnlyMemory<>' could not be found in the namespace 'System'. This type has been forwarded to assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b0  3f5f7f11d50a3a' Consider adding a reference to that assembly. [D:\GitHub\Fork\corefx\src\System.IO.Pipelines\ref\System.IO.Pipelines.csproj]    System.IO.Pipelines.cs(76,48): error CS0012: The type 'Memory<>' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a  '. [D:\GitHub\Fork\corefx\src\System.IO.Pipelines\ref\System.IO.Pipelines.csproj]    System.IO.Pipelines.cs(76,48): error CS0012: The type 'Span<>' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.   [D:\GitHub\Fork\corefx\src\System.IO.Pipelines\ref\System.IO.Pipelines.csproj]    CSC : error CS0012: The type 'CLSCompliantAttribute' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. [D:\GitHu  b\Fork\corefx\src\System.IO.Pipelines\ref\System.IO.Pipelines.csproj]    System.IO.Pipelines.cs(91,65): error CS3001: Argument type 'ReadOnlySequence<byte>' is not CLS-compliant [D:\GitHub\Fork\corefx\src\System.IO.Pipelines\ref\System.IO.Pipelines.csproj]    System.IO.Pipelines.cs(48,60): error CS3001: Argument type 'MemoryPool<byte>' is not CLS-compliant [D:\GitHub\Fork\corefx\src\System.IO.Pipelines\ref\System.IO.Pipelines.csproj]    System.IO.Pipelines.cs(60,64): error CS3001: Argument type 'SequencePosition' is not CLS-compliant [D:\GitHub\Fork\corefx\src\System.IO.Pipelines\ref\System.IO.Pipelines.csproj]    System.IO.Pipelines.cs(61,64): error CS3001: Argument type 'SequencePosition' is not CLS-compliant [D:\GitHub\Fork\corefx\src\System.IO.Pipelines\ref\System.IO.Pipelines.csproj]    System.IO.Pipelines.cs(61,98): error CS3001: Argument type 'SequencePosition' is not CLS-compliant [D:\GitHub\Fork\corefx\src\System.IO.Pipelines\ref\System.IO.Pipelines.csproj]  ...  ```    Also, only include reference to System.Threading.Tasks when necessary in src csproj.  
27643	area-System.Net	Consider Socket.OSSupportsUnixDomainSockets property	`System.Net.Socket` currently has these two properties:  ```C#  public static bool OSSupportsIPv4 { get; }  public static bool OSSupportsIPv6 { get; }  ```  In .NET Core 2.1, we've added a public EndPoint-derived type for Unix domain sockets (UnixDomainSocketEndPoint).  Unix domain sockets work across all Unixes we target, but Windows is also adding support (https://blogs.msdn.microsoft.com/commandline/2017/12/19/af_unix-comes-to-windows/), and we can support that via UnixDomainSocketEndPoint as well.  We should consider adding:  ```C#  public static bool OSSupportsUnixDomainSockets { get; }  ```
27642	area-Infrastructure	ApiCompat giving incorrect error about implementation instead of correctly pointing to the contract	The ApiCompat error from https://github.com/dotnet/corefx/pull/27640#issuecomment-369808688 seems to be reversed.    ```text  D:\GitHub\Fork\corefx\src\shims\ApiCompat.proj(76,5): error : TypeCannotChangeClassification : Type 'System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter' is marked as readonly in the contract so it mu  st also be marked readonly in the implementation.  ```    The fix was to add `readonly` to the ref (contract). The error message indicates that the contract is marked as readonly, but the implementation is not, which is the opposite of what it should have been.    Any ideas why?  cc @ericstj, @weshaggard, @joperezr, @stephentoub   
27639	area-Infrastructure	Improve ref assembly generation process	Currently reference assembly sources are checked into the repository and generated manually. Nothing in the build system validates that the resulting reference assemblies actually match the implementation assemblies.    This is very error prone process. Especially for external contributor who doesn't know that they need to run some custom build target to regenerate the ref assembly sources. As it happened a few times already for System.Reflection.Metadata these ref assemblies get out of sync.     The unit tests do not catch these breaks since they need to reference the implementation assembly in order to access internal methods and types for testing purposes. These breaks go thus unnoticed.
27638	area-System.Net	TcpClient uses Socket class which can fail in odd ways on UWP	I am unsure what the actual cause of this is, but when I call Connect on a TcpClient that is working on an endpoint that is connected to the machine via VPN, then the underlying Socket connect call returns AccessDenied (as stated [here](https://social.msdn.microsoft.com/Forums/en-US/d9171ccf-efbc-498a-bc4d-ebe58055d3a7/uwpcannot-connect-to-private-server-socketerror-accessdenied?forum=wpdevelop)).  The link suggests using StreamSocket to connect, but how can I do that when this is an implementation detail of TcpClient.  Is there no way to accomplish this connection?
27636	area-Serialization	[Perf] XmlSerializer.Deserialize() regression between release/2.0.0 and release/2.1	"This is a follow up of https://github.com/dotnet/coreclr/issues/16627    There is a performance regression of `XmlSerializer.Deserialize(Stream)` for 2.1 compared to 2.0. For Windows it's from 10 to 30%, for Linux it's from 50% to 100%.    I did a small investigation, it looks that few calls to `system.private.xml!System.Marvin.ComputeHash(System.ReadOnlySpan<Byte>, UInt64)` are responsible for that.    2.1 most time-consuming methods by name:    ![image](https://user-images.githubusercontent.com/6011991/36877034-620f1834-1db8-11e8-9ed6-e9806646e864.png)    2.0 most time-consuming methods by name:    ![image](https://user-images.githubusercontent.com/6011991/36877065-8813b6f2-1db8-11e8-8c9c-e436eff19194.png)      Methods which call `Marvin.ComputeHash`    ![image](https://user-images.githubusercontent.com/6011991/36876999-373b8ed0-1db8-11e8-9a06-1fec91f8b64d.png)    Later I am going to provide a separate PR with a new benchmark for our benchmarking suite. For now please use following plain simple code:    ```cs  using System;  using System.Diagnostics;  using System.IO;  using System.Xml.Serialization;    namespace XmlDeserializationRegression  {      class Program      {          static void Main(string[] args)          {              var serializer = new XmlSerializer(typeof(LoginViewModel));                using (var memoryStream = new MemoryStream(capacity: short.MaxValue))              {                  serializer.Serialize(memoryStream, CreateLoginViewModel());                    Benchmark(memoryStream, serializer, 1, ""Warmup"");                  Benchmark(memoryStream, serializer, 10000, ""Actual run"");              }                var coreclrAssemblyInfo = FileVersionInfo.GetVersionInfo(typeof(object).Assembly.Location);              var corefxAssemblyInfo = FileVersionInfo.GetVersionInfo(typeof(System.Text.RegularExpressions.Regex).Assembly.Location);                Console.WriteLine($""CoreCLR {coreclrAssemblyInfo.FileVersion}, CoreFX {corefxAssemblyInfo.FileVersion}"");          }            private static void Benchmark(Stream stream, XmlSerializer xmlSerializer, int invocationCount, string displayText)          {              object deserialized = null;                GC.Collect();              GC.WaitForPendingFinalizers();              GC.Collect();                var timer = Stopwatch.StartNew();                for (int i = 0; i < invocationCount; i++)              {                  stream.Position = 0;                  deserialized = xmlSerializer.Deserialize(stream);              }                TimeSpan avg = timer.Elapsed / invocationCount;              Console.WriteLine($""{displayText}: Average elapsed milliseconds: {avg.TotalMilliseconds}"");                GC.KeepAlive(deserialized);          }            private static LoginViewModel CreateLoginViewModel()              => new LoginViewModel              {                  Email = ""name.familyname@not.com"",                  Password = ""abcdefgh123456!@"",                  RememberMe = true              };      }        public class LoginViewModel      {          public string Email { get; set; }          public string Password { get; set; }          public bool RememberMe { get; set; }      }  }  ```  The csproj:    ```xml  <Project Sdk=""Microsoft.NET.Sdk"">      <PropertyGroup>      <OutputType>Exe</OutputType>      <TargetFrameworks>netcoreapp2.1;netcoreapp2.0</TargetFrameworks>      <RuntimeIdentifier>win-x64</RuntimeIdentifier>    </PropertyGroup>    </Project>  ```    To run the benchmark:    `dotnet run -c Release  -f netcoreapp2.0` and `dotnet run -c Release  -f netcoreapp2.0`    Some Flame Graphs from PerfView which give good overview:    For 2.0:    ![image](https://user-images.githubusercontent.com/6011991/36876274-8071da0e-1db4-11e8-9fdb-0ee7d3b75919.png)    For 2.1:    ![image](https://user-images.githubusercontent.com/6011991/36876284-8e666e90-1db4-11e8-8c13-b02ff3d6d157.png)    The problematic part:    ![image](https://user-images.githubusercontent.com/6011991/36876706-8ac361ec-1db6-11e8-8d14-40613202d4c3.png)    It's my first perf investigation as a new member of the .NET Performance Team, please let me know if something is missing or wrong.        "
27633	area-System.Memory	Add GetPosition overload to ReadOnlySequence	Resolves https://github.com/dotnet/corefx/issues/27403    cc @pakrym, @davidfowl, @halter73, @KrzysztofCwalina 
27631	area-System.Net	Support UnixDomainSocketEndPoint on Windows	Windows is adding support for Unix domain sockets, and it's easy to enable that support via our new UnixDomainSocketEndPoint type.    Fixes https://github.com/dotnet/corefx/issues/27542  cc: @eerhardt, @danmosemsft, @geoffkizer, @sunilmut, @tmds
27629	area-System.IO	System.IO.FileSystem.AccessControl.Tests fails 14 tests on my computer	System.IO.FileSystem.AccessControl.Tests fails 14 tests on my computer with next log:  ```    Starting:    System.IO.FileSystem.AccessControl.Tests       System.IO.FileSystemSecurityTests.RemoveAccessRule_IdenticalRule_Succeeds [FAIL]          Assert.Equal() Failure          Expected: 0          Actual:   1          Stack Trace:             C:\Code\corefx\src\System.IO.FileSystem.AccessControl\tests\FileSystemSecurityTests.cs(161,0): at System.IO.FileSystemSecurityTests.RemoveAccessRule_IdenticalRule_Succeeds()       System.Security.AccessControl.DirectoryObjectSecurityTests.RemoveAuditRuleSpecific_NoMatchableRuleFound [FAIL]          Assert.True() Failure          Expected: True          Actual:   False          Stack Trace:             C:\Code\corefx\src\System.IO.FileSystem.AccessControl\tests\DirectoryObjectSecurityTests.cs(195,0): at System.Security.AccessControl.DirectoryObjectSecurityTests.RemoveAuditRuleSpecific_NoMatchableRuleFound()       System.IO.FileSystemSecurityTests.RemoveAccessRuleSpecific_Succeeds [FAIL]          Assert.Equal() Failure          Expected: 0          Actual:   1          Stack Trace:             C:\Code\corefx\src\System.IO.FileSystem.AccessControl\tests\FileSystemSecurityTests.cs(223,0): at System.IO.FileSystemSecurityTests.RemoveAccessRuleSpecific_Succeeds()       System.Security.AccessControl.DirectoryObjectSecurityTests.SetAccessRule_AccessControlType_Deny_Succeeds [FAIL]          Assert.True() Failure          Expected: True          Actual:   False          Stack Trace:             C:\Code\corefx\src\System.IO.FileSystem.AccessControl\tests\DirectoryObjectSecurityTests.cs(692,0): at System.Security.AccessControl.DirectoryObjectSecurityTests.SetAccessRule_AccessControlType_Deny_Succeeds()       System.Security.AccessControl.DirectoryObjectSecurityTests.RemoveAuditRule_Succeeds [FAIL]          Assert.True() Failure          Expected: True          Actual:   False          Stack Trace:             C:\Code\corefx\src\System.IO.FileSystem.AccessControl\tests\DirectoryObjectSecurityTests.cs(232,0): at System.Security.AccessControl.DirectoryObjectSecurityTests.RemoveAuditRule_Succeeds()       System.Security.AccessControl.DirectoryObjectSecurityTests.SetAuditRule_Succeeds [FAIL]          Assert.True() Failure          Expected: True          Actual:   False          Stack Trace:             C:\Code\corefx\src\System.IO.FileSystem.AccessControl\tests\DirectoryObjectSecurityTests.cs(275,0): at System.Security.AccessControl.DirectoryObjectSecurityTests.SetAuditRule_Succeeds()       System.Security.AccessControl.DirectoryObjectSecurityTests.RemoveAccessRuleSpecific_AccessControlType_Deny_NoMatchableRules_Succeeds [FAIL]          Assert.True() Failure          Expected: True          Actual:   False          Stack Trace:             C:\Code\corefx\src\System.IO.FileSystem.AccessControl\tests\DirectoryObjectSecurityTests.cs(455,0): at System.Security.AccessControl.DirectoryObjectSecurityTests.RemoveAccessRuleSpecific_AccessControlType_Deny_NoMatchableRules_Succeeds()       System.Security.AccessControl.DirectoryObjectSecurityTests.ResetAccessRule_AccessControlType_Deny_Succeeds [FAIL]          Assert.True() Failure          Expected: True          Actual:   False          Stack Trace:             C:\Code\corefx\src\System.IO.FileSystem.AccessControl\tests\DirectoryObjectSecurityTests.cs(624,0): at System.Security.AccessControl.DirectoryObjectSecurityTests.ResetAccessRule_AccessControlType_Deny_Succeeds()       System.Security.AccessControl.DirectoryObjectSecurityTests.AddAccessRule_Succeeds [FAIL]          Assert.True() Failure          Expected: True          Actual:   False          Stack Trace:             C:\Code\corefx\src\System.IO.FileSystem.AccessControl\tests\DirectoryObjectSecurityTests.cs(728,0): at System.Security.AccessControl.DirectoryObjectSecurityTests.AddAccessRule_Succeeds()       System.Security.AccessControl.DirectoryObjectSecurityTests.RemoveAccessRule_AccessControlType_Deny_Succeeds [FAIL]          Assert.True() Failure          Expected: True          Actual:   False          Stack Trace:             C:\Code\corefx\src\System.IO.FileSystem.AccessControl\tests\DirectoryObjectSecurityTests.cs(388,0): at System.Security.AccessControl.DirectoryObjectSecurityTests.RemoveAccessRule_AccessControlType_Deny_Succeeds()       System.Security.AccessControl.DirectoryObjectSecurityTests.AddAuditRule_Succeeds [FAIL]          Assert.True() Failure          Expected: True          Actual:   False          Stack Trace:             C:\Code\corefx\src\System.IO.FileSystem.AccessControl\tests\DirectoryObjectSecurityTests.cs(311,0): at System.Security.AccessControl.DirectoryObjectSecurityTests.AddAuditRule_Succeeds()       System.Security.AccessControl.DirectoryObjectSecurityTests.RemoveRule_AccessControlType_Allow_Succeeds [FAIL]          Assert.True() Failure          Expected: True          Actual:   False          Stack Trace:             C:\Code\corefx\src\System.IO.FileSystem.AccessControl\tests\DirectoryObjectSecurityTests.cs(351,0): at System.Security.AccessControl.DirectoryObjectSecurityTests.RemoveRule_AccessControlType_Allow_Succeeds()       System.Security.AccessControl.DirectoryObjectSecurityTests.SetAccessRule_AccessControlType_Allow_Succeeds [FAIL]          Assert.True() Failure          Expected: True          Actual:   False          Stack Trace:             C:\Code\corefx\src\System.IO.FileSystem.AccessControl\tests\DirectoryObjectSecurityTests.cs(661,0): at System.Security.AccessControl.DirectoryObjectSecurityTests.SetAccessRule_AccessControlType_Allow_Succeeds()       System.Security.AccessControl.DirectoryObjectSecurityTests.ResetAccessRule_AccessControlType_Allow_Succeeds [FAIL]          Assert.True() Failure          Expected: True          Actual:   False          Stack Trace:             C:\Code\corefx\src\System.IO.FileSystem.AccessControl\tests\DirectoryObjectSecurityTests.cs(587,0): at System.Security.AccessControl.DirectoryObjectSecurityTests.ResetAccessRule_AccessControlType_Allow_Succeeds()    Finished:    System.IO.FileSystem.AccessControl.Tests  ```
27628	area-System.IO	System.IO.FileSystem.AccessControl.Tests fails some tests on non english windows	
27626	area-System.Data	System.Data.Common.Tests fails some tests in non english locale	`System.Data.Common.Tests` fails some tests in non english locale with next log  ```    Starting:    System.Data.Common.Tests       System.Data.Tests.SqlTypes.SqlSingleTest.Conversions [FAIL]          Assert.Equal() Failure                      (pos 1)          Expected: 6.4E+17          Actual:   6,4E+17                      (pos 1)          Stack Trace:             C:\Code\corefx\src\System.Data.Common\tests\System\Data\SqlTypes\SqlSingleTest.cs(395,0): at System.Data.Tests.SqlTypes.SqlSingleTest.Conversions()       System.Data.Tests.SqlTypes.SqlDoubleTest.Conversions [FAIL]          Assert.Equal() Failure                      (pos 1)          Expected: 6.4E+65          Actual:   6,4E+65                      (pos 1)          Stack Trace:             C:\Code\corefx\src\System.Data.Common\tests\System\Data\SqlTypes\SqlDoubleTest.cs(408,0): at System.Data.Tests.SqlTypes.SqlDoubleTest.Conversions()       System.Data.Tests.SqlTypes.SqlMoneyTest.Conversions [FAIL]          Assert.Equal() Failure                         (pos 4)          Expected: 6464.6464          Actual:   6464,6464                         (pos 4)          Stack Trace:             C:\Code\corefx\src\System.Data.Common\tests\System\Data\SqlTypes\SqlMoneyTest.cs(357,0): at System.Data.Tests.SqlTypes.SqlMoneyTest.Conversions()       System.Data.Tests.DataColumnTest2.Expression_Simple [FAIL]          Assert.Equal() Failure                        (pos 3)          Expected: 7,6          Actual:   7,60                        (pos 3)          Stack Trace:             C:\Code\corefx\src\System.Data.Common\tests\System\Data\DataColumnTest2.cs(614,0): at System.Data.Tests.DataColumnTest2.Expression_Simple()       System.Data.Tests.SqlTypes.SqlStringTest.SqlDoubleToSqlString [FAIL]          Assert.Equal() Failure                      (pos 1)          Expected: 6.4E+65          Actual:   6,4E+65                      (pos 1)          Stack Trace:             C:\Code\corefx\src\System.Data.Common\tests\System\Data\SqlTypes\SqlStringTest.cs(665,0): at System.Data.Tests.SqlTypes.SqlStringTest.SqlDoubleToSqlString()       System.Data.Tests.SqlTypes.SqlStringTest.SqlMoneyToSqlString [FAIL]          Assert.Equal() Failure                           (pos 6)          Expected: 646464.6464          Actual:   646464,6464                           (pos 6)          Stack Trace:             C:\Code\corefx\src\System.Data.Common\tests\System\Data\SqlTypes\SqlStringTest.cs(731,0): at System.Data.Tests.SqlTypes.SqlStringTest.SqlMoneyToSqlString()       System.Data.Tests.SqlTypes.SqlDecimalTest.AdjustScale [FAIL]          Assert.Equal() Failure                         (pos 4)          Expected: 6464.646400          Actual:   6464,646400                         (pos 4)          Stack Trace:             C:\Code\corefx\src\System.Data.Common\tests\System\Data\SqlTypes\SqlDecimalTest.cs(256,0): at System.Data.Tests.SqlTypes.SqlDecimalTest.AdjustScale()    Finished:    System.Data.Common.Tests  ```  Is it error in tests or in functions?
27625	area-System.Runtime	System.Text.StringBuilder.Insert uses a lot of memory in certain scenarios	"Ported from: https://developercommunity.visualstudio.com/content/problem/63747/systemtextstringbuilderinsert.html    Method System.Text.StringBuilder.Insert in a couple with System.Text.StringBuilder.Clear in some cases leads to very dramatic performance degradation and very high memory consumption. For the following test the StringBuilder class is absolutely unsuilable. But this case is only a simple try to reuse object in order to reduce the loading of GC. But the test shows that the result is absolutely opposite to expected.      Test case:  ```          [TestMethod]          public void TestStringBuilderInsert()          {              const int iterationGranularity = 10000;              var buffer = new StringBuilder();              var s = new string(' ', 10);              Console.WriteLine($""{buffer.Length}->{buffer.Capacity}"");              var sw = Stopwatch.StartNew();              for (int k = 0; k < 10; k++)              {                  for (int i = 1; i <= iterationGranularity; i++)                  {                      buffer.Clear();                      buffer.Append(s);                      buffer.Append(s);                      buffer.Append(s);                      buffer.Insert(0, s);                      buffer.Insert(0, s);                  }                  Console.WriteLine($""{sw.ElapsedMilliseconds,5}: {buffer.Length}->{buffer.Capacity}"");              }              sw.Stop();          }  ```  Test result:  ```  0->16     71: 50->100042    251: 50->200042    548: 50->300042   1456: 50->400042   2807: 50->500042   4311: 50->600042   6091: 50->700042   8007: 50->800042   9999: 50->900042  12203: 50->1000042  ```  So, the question: If I never put into builder more than 50 characters at the iteration why the Capacity is over 1e6?   Moreover if you use memory profiler, you will understand that the memory usage is much worse that it seems at first glance.  Screenshot of profiler I will attach. Do you think that allocation 100 Gb of memory is enought? I operated only with 10 Mb...    Name Inclusive Allocations Exclusive Allocations Inclusive Bytes Exclusive Bytes Inclusive Allocations %  System.Char[] 200 018                     200 018                100 015 401 486 100 015 401 486 66,63 "
27623	area-System.Memory	Move TryGetString to MemoryMarshal, remove TryGetArray and update tests	Resolves https://github.com/dotnet/corefx/issues/27451    Depends on https://github.com/dotnet/coreclr/pull/16692 and subsequent mirror PR.    cc @jkotas, @stephentoub, @KrzysztofCwalina, @benaadams, @pakrym 
27620	area-System.Linq	Removed unnecessary Dispose in DistinctIterator.MoveNext method.	`DistinctIterator.MoveNext` method contains unnecessary call of `Dispose` method if to execute `MoveNext` method many times. Now `DistinctIterator.MoveNext` method call `Dispose` method only one time.
27619	area-Infrastructure	Remove workarounds when uapaot System.Private.CoreLib is updated	
27618	area-System.Text	Investigate porting some/all of Roslyn regex parsing checker tests	Look at https://github.com/dotnet/roslyn/pull/23984 and see whether there is test material there that would make sense to pull into CoreFX (ie., not too duplicative, easy to port, not too long to run...)    cc @CyrusNajmabadi 
27616	area-System.Runtime	[Arm64] Add crypto intrinsics	Add crypto APIs merged today into CoreCLR.    These tests will not pass until new CoreCLR bits propagate to CoreFX    Includes #26580 (Simd), because that is expected to merge first.    @tannergooding @CarolEidt @eerhardt @4creators @debayang @RussKeldorph 
27615	area-System.Memory	Fix semantics of ArrayMemoryPool	https://github.com/dotnet/corefx/issues/27544  https://github.com/dotnet/corefx/issues/27543    1. Make ArrayMemoryPool block ref counting thread-safe.  2. ArrayMemoryPool block returned from the pool has ref count == 1  3. Releasing ArrayMemoryPool block causes it to be disposed and returned to the pool.
27613	area-System.Net	UdpClient does not receive Broadcasts on Linux	"As the title suggest I'm currently trying to write an application that listens for udp broadcasts on the local network.     The following snippet works without problems on Windows but does not produce any results on my Fedora machine (I'm running Fedora 27 - 4.15.4-300.fc27.x86_64):  ```  class Program  {      static async Task Main(string[] args)      {             var receiveClient = new UdpClient(new IPEndPoint(IPAddress.Any, 21027));          receiveClient.EnableBroadcast = true;            while (true)          {              var result = await receiveClient.ReceiveAsync();              Console.WriteLine($""Received packet from {result.RemoteEndPoint}"");          }      }  }  ```  I also checked that the packets are actually received by my machine with WireShark:  ![image](https://user-images.githubusercontent.com/36193673/36859684-76aaa2ec-1d7f-11e8-83cb-3adc83169d14.png)    And `netstat -tulpn | grep 21027` provides the following output:   ```  udp        0      0 0.0.0.0:21027           0.0.0.0:*                           27806/dotnet  ```    I'm running all my tests on the SDK Version 2.1.4"
27612	area-System.Net	UseCallback_HaveCredsAndUseAuthenticatedCustomProxyAndPostToSecureServer_Success is failing on Win7	Error is    ```  System.IO.IOException : Unable to transfer data on the transport connection: An existing connection was forcibly closed by the remote host.  ---- System.Net.Sockets.SocketException : An existing connection was forcibly closed by the remote host  ```    From the loopback proxy server.    https://mc.dot.net/#/user/geoffkizer/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/1810ecb8564830d72a8b8b7404d5cf846e1a6ccb/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_ServerCertificates_Test~2FUseCallback_HaveCredsAndUseAuthenticatedCustomProxyAndPostToSecureServer_Success
27611	area-System.Reflection	Add API that allows the emitter to indicate presence of localloc 	"When encoding method body header the encoder needs to decide whether to emit tiny or fat header. A small method that has no locals but contains localloc instruction and has InitLocals set to true should not be encoded with tiny header since tiny header implies InitLocals is false. The presence of localloc instruction needs to be indicated by the caller of the method body encoder similarly to max stack and other info. Hence we need to add an overload that takes an extra bool parameter.    Addresses https://github.com/dotnet/corefx/issues/26910    **Proposed API**    ```C#  namespace System.Reflection.Metadata.Ecma335  {      public readonly struct MethodBodyStreamEncoder      {         // existing overloads           public MethodBody AddMethodBody(              int codeSize,              int maxStack,              int exceptionRegionCount,              bool hasSmallExceptionRegions,              StandaloneSignatureHandle localVariablesSignature,              MethodBodyAttributes attributes);           public int AddMethodBody(              InstructionEncoder instructionEncoder,              int maxStack,              StandaloneSignatureHandle localVariablesSignature,              MethodBodyAttributes attributes)            // new overloads            /// <summary>          /// Encodes a method body and adds it to the method body stream.          /// </summary>          /// <param name=""codeSize"">Number of bytes to be reserved for instructions.</param>          /// <param name=""maxStack"">Max stack.</param>          /// <param name=""exceptionRegionCount"">Number of exception regions.</param>          /// <param name=""hasSmallExceptionRegions"">True if the exception regions should be encoded in 'small' format.</param>          /// <param name=""localVariablesSignature"">Local variables signature handle.</param>          /// <param name=""attributes"">Attributes.</param>          /// <param name=""hasDynamicStackAllocation"">True if the method allocates from dynamic local memory pool (<c>localloc</c> instruction).</param>          /// <returns>The offset of the encoded body within the method body stream.</returns>          /// <exception cref=""ArgumentOutOfRangeException"">          /// <paramref name=""codeSize""/>, <paramref name=""exceptionRegionCount""/>, or <paramref name=""maxStack""/> is out of allowed range.          /// </exception>          public MethodBody AddMethodBody(              int codeSize,              int maxStack = 8,              int exceptionRegionCount = 0,              bool hasSmallExceptionRegions = true,              StandaloneSignatureHandle localVariablesSignature = default,              MethodBodyAttributes attributes = MethodBodyAttributes.InitLocals,              bool hasDynamicStackAllocation = false);            /// <summary>          /// Encodes a method body and adds it to the method body stream.          /// </summary>          /// <param name=""instructionEncoder"">Instruction encoder.</param>          /// <param name=""maxStack"">Max stack.</param>          /// <param name=""localVariablesSignature"">Local variables signature handle.</param>          /// <param name=""attributes"">Attributes.</param>          /// <param name=""hasDynamicStackAllocation"">True if the method allocates from dynamic local memory pool (the IL contains <c>localloc</c> instruction).          /// </param>          /// <returns>The offset of the encoded body within the method body stream.</returns>          /// <exception cref=""ArgumentNullException""><paramref name=""instructionEncoder""/> has default value.</exception>          /// <exception cref=""ArgumentOutOfRangeException""><paramref name=""maxStack""/> is out of range [0, <see cref=""ushort.MaxValue""/>].</exception>          /// <exception cref=""InvalidOperationException"">          /// A label targeted by a branch in the instruction stream has not been marked,          /// or the distance between a branch instruction and the target label is doesn't fit the size of the instruction operand.          /// </exception>          public int AddMethodBody(              InstructionEncoder instructionEncoder,               int maxStack = 8,              StandaloneSignatureHandle localVariablesSignature = default,              MethodBodyAttributes attributes = MethodBodyAttributes.InitLocals,              bool hasDynamicStackAllocation = false)      }  }  ```"
27610	area-System.Data	Port DataTable.AsDataView extension methods	These were in System.Data.DatasetExtensions but we did not port them because they need internal access to System.Data.Common (was System.Data)    Would probably be best to merge S.D.DSE into S.D.C with type forwards.    Usage seems very low but at least one porting customer needs it. See https://github.com/dotnet/corefx/issues/19771 
27607	area-System.Security	RSACryptoServiceProvider/RSAPKCS1SignatureDeformatter fail for SHA256	I can consistently reproduce a problem when verifying a signature with the SHA256 algorithm.    I initially got an issue when trying to validate JWTs (RS256) with JwtSecurityTokenHandler's ValidateSignature. However, drilling thru the source code, I found that the problem occurs when RSAPKCS1SignatureDeformatter validates the signature with the SHA256 algorithm.    The thing is, the tokens are valid. I can validate them all in JavaScript and on jwt.io (RS256).    Also, the token signature validation always succeeds when I validate tokens from Google and always fail when validating token from ForgeRock (https://www.forgerock.com/). But again, all the tokens from ForgeRock validate properly in JavaScript and on jwt.io, so there's really something happening in .NET.     I join a small console app that validates token signatures from Google and from ForgeRock. Although they are now expired, both of these tokens passed validation in JavaScript and on jwt.io and their signature validation with SHA256 should work in both cases, not just with Google's token.    Thanks in advance for any follow up, this is a critical issue for us.    (We've already been thru Stackoverflow and other forums.)    [JwtValidation.zip](https://github.com/dotnet/corefx/files/1771596/JwtValidation.zip)  
27606	area-System.Reflection	Unhelpful error when Activator.CreateInstance can't find default constructor	When `Activator.CreateInstance` tries to create an object without a default constructor, it fails with the unhelpful error `System.MissingMethodException: No parameterless constructor defined for this object.`    It would be much more helpful if this error message contained the actual type that was failing to be constructed - e.g. `System.MissingMethodException: No parameterless constructor defined for Namespace.NoParamaterlessConstructor`    This is particularly useful when the code is trying to load types from some kind of configuration file, in which a stack trace alone may not allow you to identify what type it was trying to instantiate.    Repo code:  ```csharp      class Program      {          static void Main(string[] args)          {              var x = Activator.CreateInstance(typeof(NoParameterlessConstructor));          }      }        class NoParameterlessConstructor      {          public NoParameterlessConstructor(object foo) { }      }  ```
27605	area-System.Data	[Regression][Perf][Linux] TransactionScope and Connection pool problems on Linux	I have a business application that uses TransactionScope. The application runs on Windows and we are migrating it to dotnet core in order to work Linux.    I have 2 problems on **Linux** environment:  1- TransactionScope is not supported  2- The timeout period elapsed prior to obtaining a connection from the pool.  This may have occurred because all pooled connections were in use and max pool size was reached.    We tried to use dotnet core 2.0 and system.Data.SqlClient Version 4.5.0-preview1-26216-02. The Connection pool problem is solved but the TransactionScope problem is not solved. (MSDTC problems, this platform does not support Distributed Transaction)    We tried to use dotnet core 2.1 and System.Data.SqlClient Version 4.5.0-preview2-26228-08. The TransactionScope is solved but the connection pool problem is not solved.    Thank you for your support.
27604	area-System.Net	HttpClientHandler: Consider exposing ConnectTimeout 	Exposing the ConnectTimeout on HttpClientHandler like suggested on SocketsHttpHandler (#27235) and WinHttpHandler (#27603). It will also make it possible to be consistent with the CurlHandler without making the CurlHandler public.    ```  public sealed class HttpClientHandler {      public TimeSpan ConnectTimeout { get; set; } // defaults to infinite so that it's opt-in / pay for play      ...  }  ```
27603	area-System.Net	WinHttpHandler: Consider exposing ConnectTimeout 	In some environments, in particular in a cloud, it's useful to be able to specify a timeout for just the connection phase of an HTTP request. That way, if the server is unresponsive, we don't need to wait for the full HttpClient timeout to cancel the request, and conversely, setting a small HttpClient timeout to avoid such issues doesn't cancel an active operation taking a long time simply because it's conversing a lot.    We should add:  ```  public sealed class WinHttpHandler {      public TimeSpan ConnectTimeout { get; set; } // defaults to infinite so that it's opt-in / pay for play      ...  }  ```  The underlying Interop.WinHttp.WinHttpSetTimeouts has the connect timeout, which is currently not set.    
27601	area-System.Security	Improve performance of SystemNative_GetNonCryptographicallySecureRandomBytes	Based on the same change in coreclr. Improves the performance 6 times.  Main improvement comes from using just one read per the whole buffer  instead of one per byte. Smaller part of the win comes from using only  the /dev/urandom.
27599	area-System.Runtime	Add tests for TypeForwardedFromAttribute	Fixes #27554
27597	area-System.Net	SocketsHttpHandler: Should only do preauthentication when credentials are a CredentialCache	Currently, when PreAuthenticate is set to true, we always send basic credentials on every request to every server.    To avoid sending credentials to servers that don't care, we should only preauthenticate when the credentials are a CredentialCache and thus known to be specific to a particular server.    I tried making this change in my ntlm PR (https://github.com/dotnet/corefx/pull/27551), but it caused failures on Linux/OSX only -- Windows worked fine.  No idea why the behavior differs by platform (it's all SocketsHttpHandler so should be consistent).  The failures were in PostNonRewindableContentUsingAuth_PreAuthenticate_Success; see here for more details: https://mc.dot.net/#/user/geoffkizer/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/abfadff769bb9dbba1dc870f70944d1fbb26ad87/workItem/System.Net.Http.Functional.Tests    We should understand why the behavior is different by platform.  We should also consider adding pre-auth tests specifically; I don't think we have any tests that explicitly validate preauth behavior (as opposed to just confirming that auth succeeded, whether preauth actually occurred or not).    cc @Tratcher, who pointed out this issue originally.
27595	area-System.Data	"Revert ""Skip CommandCancelTests [MultiThreadedCancel_NonAsync & MultiThreadedCancel_Async] on Unix (#27576)"""	This reverts commit 7020ee17617f0563acf41a9d10ace814f8227de9.    After merging https://github.com/dotnet/corefx/pull/27591 this test is safe to re-enable. Tested on Ubuntu to make sure this doesn't fail    Fixes: https://github.com/dotnet/corefx/issues/27574
27594	area-System.Net	SIGSEGV in System.Security.Cryptography.Native.OpenSsl.so(CryptoNative_EnsureLibSslInitialized	https://mc.dot.net/#/user/saurabh500/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/74636ba8ad8c32bee63361f8523b98b0ebe25839/workItem/System.Net.Http.Functional.Tests/wilogs    Ubuntu.1604.Amd64.Open:Release-x64  ```  2018-03-01 05:04:20,665: INFO: proc(54): run_and_log_output: Output: *** Error in `/home/helixbot/dotnetbuild/work/d3f9c471-fed9-4c43-8dc6-5d5f451c081a/Payload/dotnet': double free or corruption (fasttop): 0x00007f61b4028070 ***  2018-03-01 05:04:20,665: INFO: proc(54): run_and_log_output: Output: ======= Backtrace: =========  2018-03-01 05:04:20,666: INFO: proc(54): run_and_log_output: Output: /lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7f626dfee7e5]  2018-03-01 05:04:20,666: INFO: proc(54): run_and_log_output: Output: /lib/x86_64-linux-gnu/libc.so.6(+0x8037a)[0x7f626dff737a]  2018-03-01 05:04:20,666: INFO: proc(54): run_and_log_output: Output: /lib/x86_64-linux-gnu/libc.so.6(cfree+0x4c)[0x7f626dffb53c]  2018-03-01 05:04:20,667: INFO: proc(54): run_and_log_output: Output: /lib/x86_64-linux-gnu/libcrypto.so.1.0.0(CRYPTO_free+0x1d)[0x7f61f26b70cd]  2018-03-01 05:04:20,667: INFO: proc(54): run_and_log_output: Output: /lib/x86_64-linux-gnu/libcrypto.so.1.0.0(OBJ_NAME_add+0x8c)[0x7f61f26b9c7c]  2018-03-01 05:04:20,667: INFO: proc(54): run_and_log_output: Output: /lib/x86_64-linux-gnu/libcrypto.so.1.0.0(EVP_add_cipher+0x25)[0x7f61f2778bf5]  2018-03-01 05:04:20,668: INFO: proc(54): run_and_log_output: Output: /lib/x86_64-linux-gnu/libssl.so.1.0.0(SSL_library_init+0x45)[0x7f61f2ae3bb5]  2018-03-01 05:04:20,668: INFO: proc(54): run_and_log_output: Output: /home/helixbot/dotnetbuild/work/d3f9c471-fed9-4c43-8dc6-5d5f451c081a/Payload/shared/Microsoft.NETCore.App/9.9.9/System.Security.Cryptography.Native.OpenSsl.so(CryptoNative_EnsureLibSslInitialized+0xf)[0x7f61ca0c129f]  2018-03-01 05:04:20,668: INFO: proc(54): run_and_log_output: Output: [0x7f61f4a57c82]  ```    @bartonjs apparently this isn't consistent.
27593	area-System.Net	Why System.Uri discards RTL/LTR chars?	"According to [the document](https://docs.microsoft.com/en-us/dotnet/framework/network-programming/international-resource-identifier-support-in-system-uri), System.Uri supports [IRIs](https://tools.ietf.org/html/rfc3987). In my test code, System.Uri discards RTL/LTR(right-to-left/left-to-right) chars.    ```csharp  var codePoints = new[]   {      0xE0000, 0xE0FFF, 0xE000, 0xF8FF,                           //some other chars work      0x200F, 0x200E, 0x202E, 0x202D, 0x202C, 0x202B, 0x202A      //RTL LTR chars discarded  };    foreach (var cp in codePoints)  {      var uri = new Uri($""http://localhost/{char.ConvertFromUtf32(cp)}"");      if (uri.AbsolutePath.Equals(""/""))      {          Console.WriteLine($""0x{cp.ToString(""X4"")} is discarded"");      }  }  ```  Am I missing anything?"
27592	area-Infrastructure	Build warnings when targeting System.* nuget packages from projects targeting .NET 4.7.1	"I have a problem with a very simple repro:    1) Using VS 2017 15.5.7 create a new project using the template ""Console App (.NET Framework) targeting .net 4.7.1  2) Add a nuget package reference for the package ""System.Net.Http"" v4.3.3.  Use the 'packages.config' package manager format when prompted.  Several other System.* nuget package dependencies are also added.  3) Compile the project.  No build errors or warnings.  4) Close and re-open the solution  5) Compile the project.  **Several build warnings of ""The referenced component 'System.IO' could not be found"" appear**.  Many of the references in the solution explorer appear with an exclamation mark.  The project seems to build successfully, but the warnings cause concern that something is wrong.    These build warnings don't seem like they should be expected or desirable.  Is there something obvious I'm doing wrong or misunderstanding?    I do not get these build warnings if I follow all the above steps but instead target .NET 4.6.1.    You may ask why I'd want to reference System.* nuget packages when I'm targeting .NET 4.7.1.  Instead I should use the 'in box' System.* references from the .net framework.  My real problem is in trying to reference the nuget package ['IdentityModel' v3.3.1](https://www.nuget.org/packages/IdentityModel/).  This brings in a dependency on the System.Net.Http nuget package (not the built in framework reference) and thus, I get these warnings.  My repro is just the basic scenario of directly referencing the System.Net.Http nuget package, but in my case I want to use IdentityModel and don't have any choice or control over the dependencies.    IdentityModel is part of the popular ""Identity Server"" OSS product, so I would expect my scenario to be very natural/mainstream.    "
27590	area-System.Security	Newly added System.Security.Cryptography.Rsa tests failing locally	These tests consistently fail for me locally on my Windows machine running insiders builds:  ```       System.Security.Cryptography.Rsa.Tests.EncryptDecrypt_Span.RsaDecryptOaepWrongDataLength [FAIL]          Assert.Throws() Failure          Expected: typeof(System.Security.Cryptography.CryptographicException)          Actual:   (No exception was thrown)          Stack Trace:             d:\repos\corefx\src\Common\tests\System\Security\Cryptography\AlgorithmImplementations\RSA\EncryptDecrypt.cs(453,0): at System.Security.Cryptography.Rsa.Tests.EncryptDecrypt.RsaDecryptOaepWrongDataLeng    th()       System.Security.Cryptography.Rsa.Tests.EncryptDecrypt_Array.RsaDecryptOaepWrongDataLength [FAIL]          Assert.Throws() Failure          Expected: typeof(System.Security.Cryptography.CryptographicException)          Actual:   (No exception was thrown)          Stack Trace:             d:\repos\corefx\src\Common\tests\System\Security\Cryptography\AlgorithmImplementations\RSA\EncryptDecrypt.cs(453,0): at System.Security.Cryptography.Rsa.Tests.EncryptDecrypt.RsaDecryptOaepWrongDataLength()  ```  cc: @bartonjs 
27589	area-System.Reflection	Add API that allows the emitter to indicate presence of localloc	When encoding method body header the encoder needs to decide whether to emit tiny or fat header. A small method that has no locals but contains `localloc` instruction and has InitLocals set to true should not be encoded with tiny header since tiny header implies InitLocals is false. The presence of `localloc` instruction needs to be indicated by the caller of the method body encoder similarly to max stack and other info. Hence we need to add an overload that takes an extra bool parameter.    Fixes https://github.com/dotnet/corefx/issues/26910  Implements https://github.com/dotnet/corefx/issues/27611
27588	area-System.IO	Investigate failling test in CLI insertion	https://github.com/dotnet/cli/pull/8689 insertion cause a test `GivenAnInstalledPackageUninstallRollsbackWhenTransactionAborts` fails constantly in REHL 7 Jenkins machine. However, when the test is renamed, the problem is gone. There is no local repo. Also after change test directory, a [similar error](https://ci.dot.net/job/dotnet_cli/job/master/job/release_windows_nt_x64_prtest/2384/testReport/(root)/(empty)/Microsoft_DotNet_ToolPackage_Tests_ToolPackageInstallerTests_GivenAnInstalledPackageUninstallRemovesThePackageWhenTransactionCommits_testMockBehaviorIsInSync__True_/) happened at a different part of the code. This time it is on Windows. But there is still no local repo.    Both tests has Directory Enumerator involved. Consider there is change in that area. I believe we need to find the root cause of the issue.  
27587	area-System.Data	Removal of locks from SNITcpHandle.cs breaks EF tests	Removal of locks in the PR https://github.com/dotnet/corefx/pull/27187 breaks EF tests with the following stack trace. To trace this failure to the lock removal I undid the changes in the PR and then just removed the locks without any allocation optimizations.  I could repro this by running EF tests on Windows with Managed SNI and on Linux as well  This could potentially be a timing issue and could repro on Linux in different scenarios.      ```  [xUnit.net 00:01:45.7938557]     Microsoft.EntityFrameworkCore.Query.QueryBugsTest.Repro5456_multiple_include_group_join_is_per_query_context_async [FAIL]  [xUnit.net 00:01:45.7967113]       System.InvalidOperationException : Invalid attempt to call ReadAsync when reader is closed.  [xUnit.net 00:01:45.7990081]       Stack Trace:  [xUnit.net 00:01:45.8012431]            at System.Data.Common.ADP.ExceptionWithStackTrace(Exception e)  [xUnit.net 00:01:45.8017075]         --- End of stack trace from previous location where exception was thrown ---  [xUnit.net 00:01:45.8068374]            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()  [xUnit.net 00:01:45.8070711]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  [xUnit.net 00:01:45.8073990]            at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()  [xUnit.net 00:01:45.8075715]         D:\aspnet\EntityFrameworkCore\src\EFCore.Relational\Query\Internal\AsyncQueryingEnumerable.cs(138,0): at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.<BufferlessMoveNext>d__12.MoveNext()  [xUnit.net 00:01:45.8078974]         --- End of stack trace from previous location where exception was thrown ---  [xUnit.net 00:01:45.8080208]            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()  [xUnit.net 00:01:45.8082113]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  [xUnit.net 00:01:45.8083356]            at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()  [xUnit.net 00:01:45.8084510]         D:\aspnet\EntityFrameworkCore\src\EFCore.SqlServer\Storage\Internal\SqlServerExecutionStrategy.cs(66,0): at Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.<ExecuteAsync>d__7`2.MoveNext()  [xUnit.net 00:01:45.8086315]         --- End of stack trace from previous location where exception was thrown ---  [xUnit.net 00:01:45.8087293]            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()  [xUnit.net 00:01:45.8088197]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  [xUnit.net 00:01:45.8089066]            at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()  [xUnit.net 00:01:45.8090061]         D:\aspnet\EntityFrameworkCore\src\EFCore.Relational\Query\Internal\AsyncQueryingEnumerable.cs(84,0): at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.<MoveNext>d__11.MoveNext()  [xUnit.net 00:01:45.8091798]         --- End of stack trace from previous location where exception was thrown ---  [xUnit.net 00:01:45.8092741]            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()  [xUnit.net 00:01:45.8136308]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  [xUnit.net 00:01:45.8138275]            at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()  [xUnit.net 00:01:45.8139079]         D:\aspnet\EntityFrameworkCore\src\EFCore\Query\EntityQueryModelVisitor.cs(1252,0): at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.AsyncSelectEnumerable`2.AsyncSelectEnumerator.<MoveNext>d__3.MoveNext()  [xUnit.net 00:01:45.8139669]         --- End of stack trace from previous location where exception was thrown ---  [xUnit.net 00:01:45.8140505]            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()  [xUnit.net 00:01:45.8141557]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  [xUnit.net 00:01:45.8142535]            at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()  [xUnit.net 00:01:45.8143464]            at System.Linq.AsyncEnumerable.SelectEnumerableAsyncIterator`2.<MoveNextCore>d__7.MoveNext()  [xUnit.net 00:01:45.8144448]         --- End of stack trace from previous location where exception was thrown ---  [xUnit.net 00:01:45.8145468]            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()  [xUnit.net 00:01:45.8146503]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  [xUnit.net 00:01:45.8149178]            at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()  [xUnit.net 00:01:45.8150135]            at System.Linq.AsyncEnumerable.AsyncIterator`1.<MoveNext>d__10.MoveNext()  [xUnit.net 00:01:45.8150609]         --- End of stack trace from previous location where exception was thrown ---  [xUnit.net 00:01:45.8151621]            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()  [xUnit.net 00:01:45.8153297]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  [xUnit.net 00:01:45.8154215]            at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()  [xUnit.net 00:01:45.8155213]         D:\aspnet\EntityFrameworkCore\src\EFCore\Query\Internal\AsyncLinqOperatorProvider.cs(157,0): at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.<MoveNext>d__5.MoveNext()  [xUnit.net 00:01:45.8155743]         --- End of stack trace from previous location where exception was thrown ---  [xUnit.net 00:01:45.8156111]            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()  [xUnit.net 00:01:45.8156864]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  [xUnit.net 00:01:45.8157309]            at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()  [xUnit.net 00:01:45.8158184]            at System.Linq.AsyncEnumerable.<Aggregate_>d__6`3.MoveNext()  [xUnit.net 00:01:45.8159034]         --- End of stack trace from previous location where exception was thrown ---  [xUnit.net 00:01:45.8159504]            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()  [xUnit.net 00:01:45.8159906]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  [xUnit.net 00:01:45.8160622]            at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()  [xUnit.net 00:01:45.8161423]         D:\aspnet\EntityFrameworkCore\test\EFCore.SqlServer.FunctionalTests\Query\QueryBugsTest.cs(1559,0): at Microsoft.EntityFrameworkCore.Query.QueryBugsTest.<<Repro5456_multiple_include_group_join_is_per_query_context_async>b__83_0>d.MoveNext()  [xUnit.net 00:01:45.8163444]         --- End of stack trace from previous location where exception was thrown ---  [xUnit.net 00:01:45.8164334]            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()  [xUnit.net 00:01:45.8165463]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  [xUnit.net 00:01:45.8166412]         D:\aspnet\EntityFrameworkCore\test\EFCore.SqlServer.FunctionalTests\Query\QueryBugsTest.cs(1552,0): at Microsoft.EntityFrameworkCore.Query.QueryBugsTest.<Repro5456_multiple_include_group_join_is_per_query_context_async>d__83.MoveNext()  [xUnit.net 00:01:45.8167330]         --- End of stack trace from previous location where exception was thrown ---  [xUnit.net 00:01:45.8168143]            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()  [xUnit.net 00:01:45.8168972]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  [xUnit.net 00:01:45.8169579]         --- End of stack trace from previous location where exception was thrown ---  [xUnit.net 00:01:45.8170187]            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()  [xUnit.net 00:01:45.8170617]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  [xUnit.net 00:01:45.8171179]         --- End of stack trace from previous location where exception was thrown ---  [xUnit.net 00:01:45.8171815]            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()  [xUnit.net 00:01:45.8172482]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  Failed   Microsoft.EntityFrameworkCore.Query.QueryBugsTest.Repro5456_multiple_include_group_join_is_per_query_context_async  Error Message:   System.InvalidOperationException : Invalid attempt to call ReadAsync when reader is closed.  Stack Trace:     at System.Data.Common.ADP.ExceptionWithStackTrace(Exception e)  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()     at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.<BufferlessMoveNext>d__12.MoveNext() in D:\aspnet\EntityFrameworkCore\src\EFCore.Relational\Query\Internal\AsyncQueryingEnumerable.cs:line 138  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()     at Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.<ExecuteAsync>d__7`2.MoveNext() in D:\aspnet\EntityFrameworkCore\src\EFCore.SqlServer\Storage\Internal\SqlServerExecutionStrategy.cs:line 66  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()     at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.<MoveNext>d__11.MoveNext() in D:\aspnet\EntityFrameworkCore\src\EFCore.Relational\Query\Internal\AsyncQueryingEnumerable.cs:line 84  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()     at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.AsyncSelectEnumerable`2.AsyncSelectEnumerator.<MoveNext>d__3.MoveNext() in D:\aspnet\EntityFrameworkCore\src\EFCore\Query\EntityQueryModelVisitor.cs:line 1252  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()     at System.Linq.AsyncEnumerable.SelectEnumerableAsyncIterator`2.<MoveNextCore>d__7.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()     at System.Linq.AsyncEnumerable.AsyncIterator`1.<MoveNext>d__10.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()     at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.<MoveNext>d__5.MoveNext() in D:\aspnet\EntityFrameworkCore\src\EFCore\Query\Internal\AsyncLinqOperatorProvider.cs:line 157  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()     at System.Linq.AsyncEnumerable.<Aggregate_>d__6`3.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()     at Microsoft.EntityFrameworkCore.Query.QueryBugsTest.<<Repro5456_multiple_include_group_join_is_per_query_context_async>b__83_0>d.MoveNext() in D:\aspnet\EntityFrameworkCore\test\EFCore.SqlServer.FunctionalTests\Query\QueryBugsTest.cs:line 1559  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.EntityFrameworkCore.Query.QueryBugsTest.<Repro5456_multiple_include_group_join_is_per_query_context_async>d__83.MoveNext() in D:\aspnet\EntityFrameworkCore\test\EFCore.SqlServer.FunctionalTests\Query\QueryBugsTest.cs:line 1552  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  ```
27585	area-System.IO	Remove span helpers, use mirrored PathInternal helper	Remove other unnecessary helpers (notably with Path.Join available)    cc: @ahsonkhan, @Anipik, @pjanotti, @danmosemsft 
27584	area-System.Memory	Add the array/arraysegment->Span/Memory overloads to MemoryExtensions	Part of https://github.com/dotnet/corefx/issues/26894
27583	area-System.Net	IOControl_SIOCATMARK_Success test improvements	The behavior of SIOCATMARK varies significantly between different socket implementations. This test ensures that the expected behavior occurs on Windows, Linux, and OSX.    Here's a table with the state on different platforms during the modified test:      | SIOCATMARK(Win) | SIOCATMARK(Unix)  -- | -- | --  Before Data   Received: | 1 | 0  After Non-OOB Data   Received | 1 | 0  After OOB Data   Received (Read pointer not at OOB Mark) | 0 | 0  After OOB Data   Received (Read pointer at OOB Mark) | 0 | 1  OOB Data Read   (Read pointer at OOB Mark) | 1 | (1/0)  OOB Data Read   (Read pointer not at OOB Mark) | 1 | 0    Note: When the OOB data has been read but the read pointer is still at the OOB mark, behavior varies on Linux and OSX.    For more details check out issue #25639. 
27581	area-Infrastructure	Ensure unique tasknames in crossbuild.json	CC @MattGal 
27580	area-System.Diagnostics	InstanceDataCollection_* failures in CI	https://mc.dot.net/#/user/danmosemsft/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/01337d9cc1d615c0367d1625028ac2cc95cdb34f/workItem/System.Diagnostics.PerformanceCounter.Tests/analysis/xunit/System.Diagnostics.Tests.InstanceDataTests~2FInstanceDataCollectionCollection_Contains_Valid  Windows.10.Amd64.Open-Release-x86    all failed the same way on this particular machine/config:  InstanceDataCollection_GetItem_ExistingCounter   InstanceDataCollection_GetKeys   InstanceDataCollection_GetValues   InstanceDataCollection_NullTest  InstanceDataCollectionCollection_Contains_inValid   InstanceDataCollectionCollection_Contains_Valid   InstanceDataCollectionCollection_CopyTo   InstanceDataCollectionCollection_GetItem_Invalid   InstanceDataCollectionCollection_GetKeys   InstanceDataCollectionCollection_GetValues     ```  Unhandled Exception of Type Xunit.Sdk.NotEqualException  Message :  Assert.NotEqual() Failure  Expected: Not 0  Actual:   0  Stack Trace :     at System.Diagnostics.Tests.Helpers.RetryOnAllPlatforms[T](Func`1 func) in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\tests\Helpers.cs:line 74     at System.Diagnostics.Tests.InstanceDataTests.GetInstanceDataCollectionCollection() in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\tests\InstanceDataTests.cs:line 130     at System.Diagnostics.Tests.InstanceDataTests.InstanceDataCollectionCollection_Contains_Valid() in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\tests\InstanceDataTests.cs:line 104  ```    @brianrob 
27578	area-System.Diagnostics	Unexpected status character: I in ProcessTests.TestGetProcesses	"https://mc.dot.net/#/user/danmosemsft/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/01337d9cc1d615c0367d1625028ac2cc95cdb34f/workItem/System.Diagnostics.Process.Tests/wilogs    ```  2018-02-28 21:54:38,644: INFO: proc(54): run_and_log_output: Output: None of the following programs were installed on this machine: xdg-open,gnome-open,kfmclient.  2018-02-28 21:54:39,611: INFO: proc(54): run_and_log_output: Output: Assertion Failed  2018-02-28 21:54:39,611: INFO: proc(54): run_and_log_output: Output: Unexpected status character: I  2018-02-28 21:54:39,612: INFO: proc(54): run_and_log_output: Output:   2018-02-28 21:54:39,612: INFO: proc(54): run_and_log_output: Output:    at System.Diagnostics.Tests.ProcessTests.TestGetProcesses() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Diagnostics.Process/tests/ProcessTests.cs:line 899  2018-02-28 21:54:39,613: INFO: proc(54): run_and_log_output: Output:    at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)  ```    ProcFsStateToThreadState needs to be updated to include ""I""    it seems this was added in   https://github.com/torvalds/linux/commit/06eb61844d841d0032a9950ce7f8e783ee49c0d0"
27577	area-System.Text	Add parallel perf tests to Regex	Relates to https://github.com/dotnet/corefx/pull/27314    As we are now using ArrayPool in a couple of places and refining our cache data structure we should add perf tests that run in parallel (each one individually).  
27574	area-System.Data	System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest crashes with Unhandled Exception on Linux	"System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest crashes on Linux while executing the following tests:  **MultiThreadedCancel_NonAsync**  **MultiThreadedCancel_Async**    Both the tests crash in the method **ExecuteCommandCancelExpected**  The same tests pass on windows, I am creating this GitHub issue to track and fix the tests.    **Command to Reproduce:**  ```bash  <CoreFX Location>/Tools/msbuild.sh /t:RebuildAndTest /p:ConfigurationGroup=Release /p:XunitOptions=""-method System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.MultiThreadedCancel_NonAsync""  ```    ```bash  <CoreFX Location>/Tools/msbuild.sh /t:RebuildAndTest /p:ConfigurationGroup=Release /p:XunitOptions=""-method System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.MultiThreadedCancel_Async""  ```    **Logs MultiThreadedCancel_NonAsync:**  ```bash  keerats@ubuntu:/mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests$ ~/dotnetcore/corefx/Tools/msbuild.sh /t:RebuildAndTest /p:ConfigurationGroup=Release /p:XunitOptions=""-method System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.MultiThreadedCancel_NonAsync""  Microsoft (R) Build Engine version 15.5.179.9764 for .NET Core  Copyright (C) Microsoft Corporation. All rights reserved.      Address -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Address/netstandard/Address.dll    Circle -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Circle/netstandard/Circle.dll    Shapes -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Shapes/netstandard/Shapes.dll    Utf8String -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Utf8String/netstandard/Utf8String.dll    System.Data.SqlClient.ManualTesting.Tests -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/System.Data.SqlClient.ManualTesting.Tests/netstandard/System.Data.SqlClient.ManualTesting.Tests.dll    ----- start 10:37:27 =============== To repro directly: =====================================================    pushd /mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64    chmod +x /mnt/d/corefx/bin/testhost/netcoreapp-Linux-Release-x64//dotnet    /mnt/d/corefx/bin/testhost/netcoreapp-Linux-Release-x64//dotnet xunit.console.netcore.exe System.Data.SqlClient.ManualTesting.Tests.dll  -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -method System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.MultiThreadedCancel_NonAsync  -notrait category=OuterLoop -notrait category=failing    popd    ===========================================================================================================    /mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64 /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests    xUnit.net console test runner (64-bit .NET Core)    Copyright (C) 2014 Outercurve Foundation.        Discovering: System.Data.SqlClient.ManualTesting.Tests    Discovered:  System.Data.SqlClient.ManualTesting.Tests    Starting:    System.Data.SqlClient.ManualTesting.Tests        Unhandled Exception: System.Data.SqlClient.SqlException: A severe error occurred on the current command.  The results, if any, should be discarded.       at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction) in /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs:line 1170       at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose) in /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/TdsParser.cs:line 1106       at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)       at System.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows) in /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs:line 2861       at System.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more) in /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs:line 3121       at System.Data.SqlClient.SqlDataReader.Read() in /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs:line 3083       at System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.<>c__DisplayClass16_0.<ExecuteCommandCancelExpected>b__0() in /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/SQL/CommandCancelTest/CommandCancelTest.cs:line 220       at System.Data.SqlClient.ManualTesting.Tests.DataTestUtility.ExpectFailure[TException](Action actionThatFails, String exceptionMessage, Boolean innerExceptionMustBeNull, Func`2 customExceptionVerifier) in /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/DataCommon/DataTestUtility.cs:line 159       at System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.ExecuteCommandCancelExpected(Object state) in /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/SQL/CommandCancelTest/CommandCancelTest.cs:line 226       at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /root/coreclr/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166    --- End of stack trace from previous location where exception was thrown ---       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in /root/coreclr/src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionDispatchInfo.cs:line 132    /mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64/RunTests.sh: line 83:  2669 Aborted                 (core dumped) $RUNTIME_PATH/dotnet xunit.console.netcore.exe System.Data.SqlClient.ManualTesting.Tests.dll -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -method System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.MultiThreadedCancel_NonAsync -notrait category=OuterLoop -notrait category=failing    /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests    ----- end 10:37:29 ----- exit code 134 ----------------------------------------------------------  /mnt/d/corefx/Tools/tests.targets(492,5): warning MSB3073: The command ""/mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64/RunTests.sh /mnt/d/corefx/bin/testhost/netcoreapp-Linux-Release-x64/"" exited with code 134. [/mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/System.Data.SqlClient.ManualTesting.Tests.csproj]  /mnt/d/corefx/Tools/tests.targets(500,5): error : One or more tests failed while running tests from 'System.Data.SqlClient.ManualTesting.Tests' please check /mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64/testResults.xml for details! [/mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/System.Data.SqlClient.ManualTesting.Tests.csproj]    ```  **Logs MultiThreadedCancel_Async:**  ```bash  keerats@ubuntu:/mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests$ ~/dotnetcore/corefx/Tools/msbuild.sh /t:RebuildAndTest /p:ConfigurationGroup=Release /p:XunitOptions=""-method System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.MultiThreadedCancel_Async""  Microsoft (R) Build Engine version 15.5.179.9764 for .NET Core  Copyright (C) Microsoft Corporation. All rights reserved.      Address -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Address/netstandard/Address.dll    Circle -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Circle/netstandard/Circle.dll    Shapes -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Shapes/netstandard/Shapes.dll    Utf8String -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Utf8String/netstandard/Utf8String.dll    System.Data.SqlClient.ManualTesting.Tests -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/System.Data.SqlClient.ManualTesting.Tests/netstandard/System.Data.SqlClient.ManualTesting.Tests.dll    ----- start 10:39:45 =============== To repro directly: =====================================================    pushd /mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64    chmod +x /mnt/d/corefx/bin/testhost/netcoreapp-Linux-Release-x64//dotnet    /mnt/d/corefx/bin/testhost/netcoreapp-Linux-Release-x64//dotnet xunit.console.netcore.exe System.Data.SqlClient.ManualTesting.Tests.dll  -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -method System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.MultiThreadedCancel_Async  -notrait category=OuterLoop -notrait category=failing    popd    ===========================================================================================================    /mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64 /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests    xUnit.net console test runner (64-bit .NET Core)    Copyright (C) 2014 Outercurve Foundation.        Discovering: System.Data.SqlClient.ManualTesting.Tests    Discovered:  System.Data.SqlClient.ManualTesting.Tests    Starting:    System.Data.SqlClient.ManualTesting.Tests        Unhandled Exception: System.Data.SqlClient.SqlException: A severe error occurred on the current command.  The results, if any, should be discarded.       at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction) in /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs:line 1170       at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose) in /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/TdsParser.cs:line 1106       at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)       at System.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows) in /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs:line 2861       at System.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more) in /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs:line 3121       at System.Data.SqlClient.SqlDataReader.Read() in /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs:line 3083       at System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.<>c__DisplayClass16_0.<ExecuteCommandCancelExpected>b__0() in /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/SQL/CommandCancelTest/CommandCancelTest.cs:line 220       at System.Data.SqlClient.ManualTesting.Tests.DataTestUtility.ExpectFailure[TException](Action actionThatFails, String exceptionMessage, Boolean innerExceptionMustBeNull, Func`2 customExceptionVerifier) in /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/DataCommon/DataTestUtility.cs:line 159       at System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.ExecuteCommandCancelExpected(Object state) in /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/SQL/CommandCancelTest/CommandCancelTest.cs:line 226       at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /root/coreclr/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166    --- End of stack trace from previous location where exception was thrown ---       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in /root/coreclr/src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionDispatchInfo.cs:line 132    /mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64/RunTests.sh: line 83:  3044 Aborted                 (core dumped) $RUNTIME_PATH/dotnet xunit.console.netcore.exe System.Data.SqlClient.ManualTesting.Tests.dll -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -method System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.MultiThreadedCancel_Async -notrait category=OuterLoop -notrait category=failing    /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests    ----- end 10:39:48 ----- exit code 134 ----------------------------------------------------------  /mnt/d/corefx/Tools/tests.targets(492,5): warning MSB3073: The command ""/mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64/RunTests.sh /mnt/d/corefx/bin/testhost/netcoreapp-Linux-Release-x64/"" exited with code 134. [/mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/System.Data.SqlClient.ManualTesting.Tests.csproj]  /mnt/d/corefx/Tools/tests.targets(500,5): error : One or more tests failed while running tests from 'System.Data.SqlClient.ManualTesting.Tests' please check /mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64/testResults.xml for details! [/mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/System.Data.SqlClient.ManualTesting.Tests.csproj]  keerats@ubuntu:/mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests$   ```    @saurabh500 @geleems @corivera @AfsanehR "
27573	area-System.IO	PipeOptions.CurrentUserOnly: remove dir on Unix and add negative tests for Windows	The directory is being removed on Unix due to the following reasons:    * Ensure compatibility between servers/clients when only one side is on 2.1 and specifying `PipeOptions.CurrentUserOnly` (migration case).  * Bring the behavior in Unix and Windows closer when only one side is specifying the flag.  * Since it is advisable to use `getpeerid` on server and client sides, and we are now doing that, the directory becomes redundant and bring the two problems described above.  
27572	area-System.IO	Fix GetPathRoot issues	cc: @stephentoub, @Anipik, @danmosemsft, @pjanotti     fixes #27552
27571	area-Infrastructure	Corefx package update in corefxlab results in free before malloc error during restore on OSX	"From https://github.com/dotnet/corefxlab/pull/2140  Update Cli, CoreFx, CoreSetup to preview2-008266, preview2-26228-03, preview2-26227-03, respectively    https://ci.dot.net/job/dotnet_corefxlab/job/master/job/osx10.12_debug_prtest/1613/consoleFull#7440085258bb52e59-de52-4f1c-b131-470db4c594cd    ```text  22:09:53 Restoring all packages  22:09:53 Error:  22:09:53   An assembly specified in the application dependencies manifest (dotnet.deps.json) was not found:  22:09:53     package: 'Microsoft.ApplicationInsights', version: '2.0.0'  22:09:53     path: 'lib/dotnet5.4/Microsoft.ApplicationInsights.dll'  22:09:53 dotnet(51167,0x7fffcf7163c0) malloc: *** error for object 0xffffffffffffffff: pointer being freed was not allocated  22:09:53 *** set a breakpoint in malloc_error_break to debug  22:09:53 ./build.sh: line 84: 51167 Abort trap: 6           ./$dotnetExePath restore $myFile /p:VersionSuffix=""$BuildVersion""  22:09:53   Failed to restore packages.  ```    cc @danmosemsft, @livarcocc, @joshfree "
27569	area-Infrastructure	Update buildtools for TLS 1.2 GitHub update	We need this change to be able to update the versions repo from uwp6.1, but per @weshaggard  there could be more problems here too.
27567	area-System.Runtime	Remove System.Runtime.Intrinsics for .NET Core 2.1	- Remove System.Runtime.Intrinsics from Microsoft.NETCore.App.  - Rename to System.Runtime.Intrinsics.Experimental  - Create a standalone nupkg.    See https://github.com/dotnet/corefx/issues/27486 for more information.
27566	area-System.Net	HttpClient doesn't send Connection: close header on some platforms	WCF allows disabling persistent connections for HTTP requests. When persistent connections are disabled, WCF runs this code:  ```csharp      httpClient.DefaultRequestHeaders.ConnectionClose = true;  ```  This fails to send the `Connection: close` header for requests on Fedora.27, Fedora.26, Debian.90 and OSX.1013. This header is successfully sent on Centos, Debian.87, OSX.1012, RedHat, SLES, Ubuntu, Windows and OpenSuse.
27565	area-System.Globalization	Display issue for Euro currency	"@dpjain commented on [Sun Feb 25 2018](https://github.com/dotnet/core/issues/1283)  In our application, we have used English and French language. We need to use Euro currency for French language and "","" is used as separator for Euro currency. But have no idea how to display the same format. The numeric text box only accepts the decimal values, not accepting the comma. And also the property are set as Currency data type.     ConfigureServices:   services.Configure<RequestLocalizationOptions>(options =>              {                  var supportedCultures = new[]                  {                      new CultureInfo(""en-GB""),                      new CultureInfo(""fr-FR"") { NumberFormat = { CurrencyDecimalSeparator = "","" }, DateTimeFormat = new CultureInfo(""en-GB"").DateTimeFormat }                  };                  options.DefaultRequestCulture = new RequestCulture(culture: new CultureInfo(""en-GB""), uiCulture: new CultureInfo(""en-GB""));                  options.SupportedCultures = supportedCultures;                  options.SupportedUICultures = supportedCultures;              });    Configure:   var locOptions = app.ApplicationServices.GetService<IOptions<RequestLocalizationOptions>>();              app.UseRequestLocalization(locOptions.Value);  "
27564	area-System.Globalization	.NET Core returned  a Adar A in a non-leap year	"@MosheL commented on [Wed Feb 28 2018](https://github.com/dotnet/core/issues/1314)  # Issue Title    Adar (אדר) month name on the .net core is displayed as a Adar A (אדר א')    # General      Example code:        static System.Globalization.HebrewCalendar hc = new System.Globalization.HebrewCalendar();    static System.Globalization.CultureInfo jewishCulture =                   System.Globalization.CultureInfo.CreateSpecificCulture(""he-IL"");      static public string toHebrewString(DateTime dDate)    {     var s= dDate.ToString(""dd בMMMM y"", jewishCulture);     return s;    }  ...               toHebrewString(new DateTime(2018,2,28) // י""ג באדר א' תשע""ח    28/2/2018 is  in Adar( י""ג באדר), not in  Adar A (י""ג באדר א'), as  תשע""ח  is not a leap year.    On Windows  10 machine the correct month (אדר) is displayed.    "
27563	area-System.Net	Tweak Socket.InitializeSockets	Scratching an itch; it's called in a bunch of places to ensure sockets have been initialized, but it's not inlineable.  Make it so.    cc: @geoffkizer 
27561	area-Serialization	Cannot deserialize SOAP arrays	"I`ve got some problems when deserilizing array of objects in one of my web services. The following class was generated by the dotnet-svcutil and during deserialization countField is deserilized properly while the clientsField which is of type clientDetails[] is always null.    ```c#  [System.CodeDom.Compiler.GeneratedCodeAttribute(""dotnet-svcutil"", ""0.5.0.0"")]  [System.Diagnostics.DebuggerStepThroughAttribute()]  [System.Xml.Serialization.SoapTypeAttribute(Namespace=""http://www.example.org/ResellerAPI/"")]  public partial class clientDetailsArray  {            private int countField;            private clientDetails[] clientsField;            /// <remarks/>      public int count      {          get          {              return this.countField;          }          set          {              this.countField = value;          }      }            /// <remarks/>      public clientDetails[] clients      {          get          {              return this.clientsField;          }          set          {              this.clientsField = value;          }      }  }    ```  When I enabled XML debugging and step into the whole process I found the following piece of code that is theoretically responsible for deserilization of the clientsField and it returns null no matter what:    ```c#          object Read610_Array() {              // dummy array method              UnknownNode(null);              return null;          }  ```    By looking for the phrase ""// dummy array method"" I`ve found the following method related to XmlSerializationReader:  https://referencesource.microsoft.com/#System.Xml/System/Xml/Serialization/XmlSerializationReader.cs,2259    Does this means that Collections cannot be deserialized in this case? How to fix that?    [EDIT] Add C# syntax highlighting by @karelz"
27560	area-System.IO	Add PipeWriter.WaitToWriteAsync api to pipelines	With the current pattern of using pipe there is no way to delay starting producer until consumer starts reading without using the side channel.    If we take HTTP MessageBody as an example we have to start consuming raw bytes and populating message body pipe as soon as the user accesses HttpRequest.MessageBody property instead of waiting for the actual read. This some resource and could be avoided.    I propose adding a method `PipeWriter.WaitToWriteAsync()` that would return `ValueTask` that gets completed when `ReadAsync` is called by the reader and there is no backpressure being applied currently.      ```C#  public abstract class PipeWriter  {      public abstract ValueTask WaitToWriteAsync();  }    ```      Open questions:   - Do we need cancellation token argument.  - Do we need `CancelPendingWaitToWrite`?  - How wuld `CancelPendingFlush` affect this call?  - Do we need result struct with `IsCompleted`?    /cc @davidfowl @KrzysztofCwalina 
27558	area-System.Net	fallback to IPv4 if AF is not specified and OS does not support IPv6	fixes #26664    Following code does not throw any more when IPv6 is not available on given system:  TcpListener  l = TcpListener.Create(5666);  var s = new Socket(SocketType.Stream, ProtocolType.Tcp)    I did not craft any test for this as it is unlikely we will ever have such situation in CI.   I'm open to suggestions how to test this. 
27556	area-System.Net	Update WebSocket status when the underlying connection is closed	This fix addresses a behavior difference between the new managed `WebSocket` implementation and the old Windows only version.    When the underlying connection is closed, we need to also update the state of the `WebSocket` to show that it has been aborted. All of the code to do this was already written, it just needed to be called in one additional place. Making this fix also allowed me to remove most of the platform specific code in the relevant test.    Fixes #26219
27554	area-System.Runtime	TypeForwardedFromAttribute accepts null as assemblyFullName	According to https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.typeforwardedfromattribute.-ctor?view=netcore-2.0#Definition  there should be a null-check - https://github.com/dotnet/corefx/blob/103639b6ff5aa6ab6097f70732530e411817f09b/src/Common/src/CoreLib/System/Runtime/CompilerServices/TypeForwardedFromAttribute.cs#L12. We have a test in mono that checks this behavior so `TypeForwardedFromAttribute `from corefx broke it 🙂 
27552	area-System.IO	Several FileSystem and Path tests failing with latest coreclr	"```  2018-02-28 13:24:45,135: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Span(value: \""C:\\\\\\\\\"", expected: \""C:\\\\\"") [FAIL]  2018-02-28 13:24:45,135: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure  2018-02-28 13:24:45,135: INFO: proc(54): run_and_log_output: Output:                    ↓ (pos 3)  2018-02-28 13:24:45,135: INFO: proc(54): run_and_log_output: Output:       Expected: C:\  2018-02-28 13:24:45,135: INFO: proc(54): run_and_log_output: Output:       Actual:   C:\\  2018-02-28 13:24:45,135: INFO: proc(54): run_and_log_output: Output:                    ↑ (pos 3)  2018-02-28 13:24:45,135: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2018-02-28 13:24:45,244: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---74aa877a\src\System.Runtime.Extensions\tests\System\IO\PathTests_Windows.netcoreapp.cs(17,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Span(String value, String expected)  2018-02-28 13:24:45,244: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Span(value: \""C:\\\\\\\\foo2\"", expected: \""C:\\\\\"") [FAIL]  2018-02-28 13:24:45,244: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure  2018-02-28 13:24:45,244: INFO: proc(54): run_and_log_output: Output:                    ↓ (pos 3)  2018-02-28 13:24:45,244: INFO: proc(54): run_and_log_output: Output:       Expected: C:\  2018-02-28 13:24:45,244: INFO: proc(54): run_and_log_output: Output:       Actual:   C:\\  2018-02-28 13:24:45,244: INFO: proc(54): run_and_log_output: Output:                    ↑ (pos 3)  2018-02-28 13:24:45,244: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2018-02-28 13:24:45,244: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---74aa877a\src\System.Runtime.Extensions\tests\System\IO\PathTests_Windows.netcoreapp.cs(17,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Span(String value, String expected)  2018-02-28 13:24:45,244: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Span(value: \""\\\\\\\\test\\\\unc\\\\path\\\\to\\\\something\"", expected: \""\\\\\\\\test\\\\unc\"") [FAIL]  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:                           ↓ (pos 10)  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Expected: \\test\unc  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Actual:   \\test\unc\  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:                           ↑ (pos 10)  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---74aa877a\src\System.Runtime.Extensions\tests\System\IO\PathTests_Windows.netcoreapp.cs(17,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Span(String value, String expected)  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Span(value: \""\\\\\\\\a\\\\b\\\\c\\\\d\\\\e\"", expected: \""\\\\\\\\a\\\\b\"") [FAIL]  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:                      ↓ (pos 5)  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Expected: \\a\b  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Actual:   \\a\b\  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:                      ↑ (pos 5)  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---74aa877a\src\System.Runtime.Extensions\tests\System\IO\PathTests_Windows.netcoreapp.cs(17,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Span(String value, String expected)  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Span(value: \""\\\\\\\\a\\\\b\\\\\"", expected: \""\\\\\\\\a\\\\b\"") [FAIL]  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:                      ↓ (pos 5)  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Expected: \\a\b  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Actual:   \\a\b\  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:                      ↑ (pos 5)  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---74aa877a\src\System.Runtime.Extensions\tests\System\IO\PathTests_Windows.netcoreapp.cs(17,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Span(String value, String expected)  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Span(value: \""\\\\\\\\?\\\\UNC\\\\test\\\\unc\\\\path\\\\to\\\\something\"", expected: \""\\\\\\\\?\\\\UNC\\\\test\\\\unc\"") [FAIL]  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:                                 ↓ (pos 16)  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Expected: \\?\UNC\test\unc  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Actual:   \\?\UNC\test\unc\  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:                                 ↑ (pos 16)  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---74aa877a\src\System.Runtime.Extensions\tests\System\IO\PathTests_Windows.netcoreapp.cs(17,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Span(String value, String expected)  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Span(value: \""\\\\\\\\?\\\\UNC\\\\a\\\\b2\\\\\"", expected: \""\\\\\\\\?\\\\UNC\\\\a\\\\b2\"") [FAIL]  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                             ↓ (pos 12)  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Expected: \\?\UNC\a\b2  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Actual:   \\?\UNC\a\b2\  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                             ↑ (pos 12)  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---74aa877a\src\System.Runtime.Extensions\tests\System\IO\PathTests_Windows.netcoreapp.cs(17,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Span(String value, String expected)  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Windows(value: \""\\\\\\\\test\\\\unc\\\\path\\\\to\\\\something\"", expected: \""\\\\\\\\test\\\\unc\"") [FAIL]  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                           ↓ (pos 10)  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Expected: \\test\unc  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Actual:   \\test\unc\  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                           ↑ (pos 10)  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---74aa877a\src\System.Runtime.Extensions\tests\System\IO\PathTests_Windows.cs(48,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Windows(String value, String expected)  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Windows(value: \""\\\\\\\\a\\\\b\\\\c\\\\d\\\\e\"", expected: \""\\\\\\\\a\\\\b\"") [FAIL]  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                      ↓ (pos 5)  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Expected: \\a\b  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Actual:   \\a\b\  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                      ↑ (pos 5)  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---74aa877a\src\System.Runtime.Extensions\tests\System\IO\PathTests_Windows.cs(48,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Windows(String value, String expected)  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Windows(value: \""\\\\\\\\a\\\\b\\\\\"", expected: \""\\\\\\\\a\\\\b\"") [FAIL]  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                      ↓ (pos 5)  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Expected: \\a\b  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Actual:   \\a\b\  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                      ↑ (pos 5)  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---74aa877a\src\System.Runtime.Extensions\tests\System\IO\PathTests_Windows.cs(48,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Windows(String value, String expected)  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Windows(value: \""\\\\\\\\?\\\\UNC\\\\test\\\\unc\\\\path\\\\to\\\\something\"", expected: \""\\\\\\\\?\\\\UNC\\\\test\\\\unc\"") [FAIL]  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                                 ↓ (pos 16)  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Expected: \\?\UNC\test\unc  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Actual:   \\?\UNC\test\unc\  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                                 ↑ (pos 16)  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---74aa877a\src\System.Runtime.Extensions\tests\System\IO\PathTests_Windows.cs(48,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Windows(String value, String expected)  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Windows(value: \""\\\\\\\\?\\\\UNC\\\\a\\\\b2\\\\\"", expected: \""\\\\\\\\?\\\\UNC\\\\a\\\\b2\"") [FAIL]  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                             ↓ (pos 12)  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Expected: \\?\UNC\a\b2  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Actual:   \\?\UNC\a\b2\  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                             ↑ (pos 12)  2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2018-02-28 13:24:45,292: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---74aa877a\src\System.Runtime.Extensions\tests\System\IO\PathTests_Windows.cs(48,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Windows(String value, String expected)  ```  and  ```  2018-02-28 13:24:34,276: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.FileInfo_Directory.UNCShares [FAIL]  2018-02-28 13:24:34,276: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure  2018-02-28 13:24:34,276: INFO: proc(54): run_and_log_output: Output:                                    ↓ (pos 19)  2018-02-28 13:24:34,276: INFO: proc(54): run_and_log_output: Output:       Expected: \\Machine\Directory  2018-02-28 13:24:34,276: INFO: proc(54): run_and_log_output: Output:       Actual:   \\Machine\Directory\  2018-02-28 13:24:34,276: INFO: proc(54): run_and_log_output: Output:                                    ↑ (pos 19)  2018-02-28 13:24:34,292: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2018-02-28 13:24:34,401: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---74aa877a\src\System.IO.FileSystem\tests\FileInfo\Directory.cs(55,0): at System.IO.Tests.FileInfo_Directory.UNCShares()  2018-02-28 13:24:38,369: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.FileInfo_DirectoryName.UNCShares [FAIL]  2018-02-28 13:24:38,369: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure  2018-02-28 13:24:38,369: INFO: proc(54): run_and_log_output: Output:                                    ↓ (pos 19)  2018-02-28 13:24:38,369: INFO: proc(54): run_and_log_output: Output:       Expected: \\Machine\Directory  2018-02-28 13:24:38,369: INFO: proc(54): run_and_log_output: Output:       Actual:   \\Machine\Directory\  2018-02-28 13:24:38,369: INFO: proc(54): run_and_log_output: Output:                                    ↑ (pos 19)  2018-02-28 13:24:38,369: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2018-02-28 13:24:38,369: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---74aa877a\src\System.IO.FileSystem\tests\FileInfo\Directory.cs(55,0): at System.IO.Tests.FileInfo_Directory.UNCShares()  ```"
27551	area-System.Net	SocketsHttpHandler: add ntlm auth and proxy auth for tunnel, and rework auth handling generally	Several auth-related changes:    (1) Add support for Negotiate and NTLM auth  (2) Add support for proxy auth on SSL proxy tunnel  (3) Consolidate and rework some auth logic  (4) Fix some auth bugs    Note that we don't have automated NTLM tests currently (due to test environment issues), so I tested NTLM auth manually on my local machine against a local IIS server.    Fixes #27477  Fixes #27293  Fixes #26325  Fixes #23154   Fixes #23153     @stephentoub @davidsh @dotnet/ncl 
27550	area-System.Net	SocketsHttpHandler: including NT auth sources causes trace test to fail	After adding the NT auth source files to the project, there seems to be some sort of event source conflict.    The SendAsync_HttpTracingEnabled_Succeeds is failing, specifically on this line:    ```csharp                      Assert.DoesNotContain(events, ev => ev.EventId == 0); // make sure there are no event source error messages  ```    I'm disabling the test for now.
27549	area-System.Net	[Desktop] System.AccessViolationException on HttpClient with Certificates	"Hi,  I think, this bug relates to #17127, respective to  #15839.  When I'm using mutual authentification per SSL and I send something to a server, then I get a `System.AccessViolationException` without any stack trace.    Here is my custom class which extends `HttpClient` and uses a client certificate and has a custom certificate validation:  ```C#  public class QlcHttpsClient : HttpClient  {   private static readonly QlcHttpsClient instance = new QlcHttpsClient();   public QlcHttpsClient() : base(GetHttpMessageHandler())   {   }     public static QlcHttpsClient Instance   {    get { return instance; }   }     private static HttpMessageHandler GetHttpMessageHandler()   {    X509Certificate2 cert = new X509Certificate2();    cert.Import(GetClientCertificate(), ""mypass"", X509KeyStorageFlags.DefaultKeySet);    var clientHandler = new WebRequestHandler();    clientHandler.ClientCertificates.Add(cert);    clientHandler.ServerCertificateValidationCallback = RemoteCertificateValidationCallback;      return clientHandler;   }   private static byte[] GetClientCertificate()   {    var res = new ResourceManager(""QLCClient.resources"", typeof(QlcTestResultsController).Assembly);    byte[] rawCert = (byte[]) res.GetObject(""my_cert"");    return rawCert;   }     private static bool RemoteCertificateValidationCallback(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)   {    string thumbprint = certificate.GetCertHashString();    string expectedThumbprint = ""5D772BB5C085AB490E2773DAA54EC27F3605BDF9"";    if (certificate.Issuer.Contains(""CN=MyCN"") && thumbprint.Equals(expectedThumbprint, StringComparison.OrdinalIgnoreCase))    {     return true;    }    return false;   }  }  ```    When I step with Visual Studio line by line, then I get the named Exception on `SendAsync()`.    ```C#  class QlcHttpTransmitter  {   private static readonly QlcHttpsClient client = QlcHttpsClient.Instance;     public static async Task<HttpResponseMessage> Send(string pathValue, HttpContent content, HttpMethod httpMethod)   {    UriBuilder builder = QlcUriBuilder.GetUriBuilder(pathValue);    HttpRequestMessage httpRequestMessage = new HttpRequestMessage(httpMethod, builder.Uri)    {     Content = content    };    HttpResponseMessage response = await client.SendAsync(httpRequestMessage); // Throws System.AccessViolationException      return response;   }  }  ```    I'm using .Net Framework 4.6.2 and I get this Exception only in my system test. But when I migrate to .Net Framework 4.7.1 then I get this also in production code. So I think the bug is always there and it depends on the runtime behaviour."
27547	area-System.Diagnostics	Test failure: System.Diagnostics.Tests.ProcessTests/ProcessStart_UseShellExecuteTrue_OpenMissingFile_Throws	Opened on behalf of @Sunny-pu  The test `System.Diagnostics.Tests.ProcessTests/ProcessStart_UseShellExecuteTrue_OpenMissingFile_Throws` has failed.  Assert.Throws() Failure     Expected: typeof(System.ComponentModel.Win32Exception)     Actual:   (No exception was thrown)          Stack Trace:             at System.Diagnostics.Tests.ProcessTests.ProcessStart_UseShellExecuteTrue_OpenMissingFile_Throws() in /Users/buildagent/agent/_work/168/s/corefx/src/System.Diagnostics.Process/tests/ProcessTests.cs:line 183 Build : Master - 20180228.03 (Core Tests) Failing configurations: - OSX.1013.Amd64-x64   - Release - OSX.1012.Amd64-x64   - Release - RedHat.69.Amd64-x64   - Release - OpenSuse.423.Amd64-x64   - Release - RedHat.74.Amd64-x64   - Release - RedHat.73.Amd64-x64   - Release - Centos.74.Amd64-x64   - Release - Centos.73.Amd64-x64   - Release  Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180228.03/workItem/System.Diagnostics.Process.Tests/analysis/xunit/System.Diagnostics.Tests.ProcessTests~2FProcessStart_UseShellExecuteTrue_OpenMissingFile_Throws
27546	area-System.Net	Test failed: System.Net.Tests.HttpListenerResponseTests / CopyFrom_AllValues_ReturnsClone	https://mc.dot.net/#/user/maryamariyan/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/103ec78a5875598ab5c876a9a7520615796dcbf4/workItem/System.Net.HttpListener.Tests/wilogs    ```  2018-02-27 06:39:02,321: INFO: proc(54): run_and_log_output: Output:    System.Net.Tests.HttpListenerResponseTests.CopyFrom_AllValues_ReturnsClone [FAIL]  2018-02-27 06:39:02,321: INFO: proc(54): run_and_log_output: Output:       System.BadImageFormatException : Invalid access to memory location. (Exception from HRESULT: 0x800703E6)  2018-02-27 06:39:02,321: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2018-02-27 06:39:02,384: INFO: proc(54): run_and_log_output: Output:             at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo)  2018-02-27 06:39:02,384: INFO: proc(54): run_and_log_output: Output:          E:\A\_work\12\s\src\mscorlib\src\System\Runtime\InteropServices\Marshal.cs(1055,0): at System.Runtime.InteropServices.Marshal.FreeHGlobal(IntPtr hglobal)  2018-02-27 06:39:02,384: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---a11f5128\src\System.Net.HttpListener\src\System\Net\Windows\RequestContextBase.cs(57,0): at System.Net.RequestContextBase.Dispose(Boolean disposing)  2018-02-27 06:39:02,384: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---a11f5128\src\System.Net.HttpListener\src\System\Net\Windows\AsyncRequestContext.cs(97,0): at System.Net.AsyncRequestContext.Dispose(Boolean disposing)  2018-02-27 06:39:02,384: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---a11f5128\src\System.Net.HttpListener\src\System\Net\Windows\RequestContextBase.cs(50,0): at System.Net.RequestContextBase.Dispose()  2018-02-27 06:39:02,384: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---a11f5128\src\System.Net.HttpListener\src\System\Net\Windows\RequestContextBase.cs(44,0): at System.Net.RequestContextBase.Close()  2018-02-27 06:39:02,384: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---a11f5128\src\System.Net.HttpListener\src\System\Net\Windows\HttpListenerRequest.Windows.cs(334,0): at System.Net.HttpListenerRequest.Close()  2018-02-27 06:39:02,384: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---a11f5128\src\System.Net.HttpListener\src\System\Net\Windows\HttpListenerContext.Windows.cs(88,0): at System.Net.HttpListenerContext.Close()  2018-02-27 06:39:02,384: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---a11f5128\src\System.Net.HttpListener\src\System\Net\Windows\HttpListenerResponse.Windows.cs(185,0): at System.Net.HttpListenerResponse.Dispose()  2018-02-27 06:39:02,384: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---a11f5128\src\System.Net.HttpListener\src\System\Net\HttpListenerResponse.cs(297,0): at System.Net.HttpListenerResponse.System.IDisposable.Dispose()  2018-02-27 06:39:02,384: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---a11f5128\src\System.Net.HttpListener\tests\HttpListenerResponseTests.cs(96,0): at System.Net.Tests.HttpListenerResponseTests.CopyFrom_AllValues_ReturnsClone()  2018-02-27 06:39:02,384: INFO: proc(54): run_and_log_output: Output:          --- End of stack trace from previous location where exception was thrown ---  2018-02-27 06:39:03,821: INFO: proc(54): run_and_log_output: Output: ----- end  6:39:03.82 ----- exit code -1073741819 ----------------------------------------------------------    ```
27544	area-System.Memory	ArrayMemoryPool.ArrayMemoryPoolBuffer implementation does not dispose if the ref count reaches 0	Seems like when we ported this from corefxlab we removed a bunch of functionality. Originally the implementation called Dispose on the reference count = 0:    https://github.com/dotnet/corefxlab/blob/c81145ba362ca6649dcf97ae662869f7005061ee/src/System.Buffers.Primitives/System/Buffers/Pooling/ArrayMemoryPool.cs#L91-L97    Now it does nothing.    https://github.com/dotnet/corefx/blob/master/src/System.Memory/src/System/Buffers/ArrayMemoryPool.ArrayMemoryPoolBuffer.cs#L88    This is making pipelines basically leak memory like crazy when using this pool implementation (which is now the default). Can we clarify on the semantics here ASAP?    /cc @stephentoub @KrzysztofCwalina @ahsonkhan @AtsushiKan 
27543	area-System.Memory	ArrayMemoryPool.ArrayMemoryPoolBuffer implementation of ref counting isn't thread safe	We're not using interlocked for some reason here and we should be https://github.com/dotnet/corefx/blob/865f08623bd493fb6d239530e00db29bf6736330/src/System.Memory/src/System/Buffers/ArrayMemoryPool.ArrayMemoryPoolBuffer.cs#L80-L98. This could potentially lead to leaks.    /cc @jkotas @AtsushiKan @ahsonkhan @pakrym @KrzysztofCwalina 
27542	area-System.Net	Socket_CreateUnixDomainSocket_Throws_OnWindows fails locally on Windows	This test fails locally for me:  ```C#  [OuterLoop] // TODO: Issue #11345  [Fact]  [PlatformSpecific(TestPlatforms.Windows)]  // CreateUnixDomainSocket should throw on Windows  public void Socket_CreateUnixDomainSocket_Throws_OnWindows()  {      SocketException e = Assert.Throws<SocketException>(() => new Socket(AddressFamily.Unix, SocketType.Stream, ProtocolType.Unspecified));      Assert.Equal(SocketError.AddressFamilyNotSupported, e.SocketErrorCode);  }  ```  as `new Socket(AddressFamily.Unix, SocketType.Stream, ProtocolType.Unspecified)` doesn't throw, on both core and netfx.  Presumably the AF_UNIX address family is now supported on my Windows OS, maybe due to my having installed Windows Subsystem for Linux.
27541	area-System.Runtime	Expose Thread.GetCurrentProcessorId()	Fixes #16767
27539	area-System.IO	Fix a bug in TranslateWin32Expression	Add test coverage.    cc: @danmosemsft, @Anipik, @pjanotti 
27538	area-System.Net	disable Expect: 100-continue test on WinHttpHandler	Fixes #27519     @stephentoub   
27537	area-System.Drawing	Is the upcoming .net core 2.1 going to include System.Drawing.common?	Does anyone know where i can find the list of libraries that are going to be included in each new release of .Net Core? I am trying to use System.Drawing.Common in particular.     If it is not, does anyone know when it will be included?
27536	area-System.Net	disable drain test variation for CurlHandler	Fixes #27528     @stephentoub @davidsh @dotnet/ncl 
27534	area-System.IO	UnixSearchPatternFileValidChar test failed on Linux in CI	https://mc.dot.net/#/user/stephentoub/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/80ee09145e8bfc94263218893ca47dcf67675ae5/workItem/System.IO.FileSystem.Tests/analysis/xunit/System.IO.Tests.DirectoryInfo_EnumFSI_str_str~2FUnixSearchPatternFileValidChar(valid:%20%5C%22%20%20%20%20%20%20%20%20%20%5C%22)  ```  Unhandled Exception of Type Xunit.Sdk.ContainsException  Message :  Assert.Contains() Failure  Not found: /tmp/DirectoryInfo_EnumFSI_str_str_maxzoa0e.h5p/UnixSearchPatternFileValidChar_999_3530a72b/           In value:  String[] []  Stack Trace :     at System.IO.Tests.Directory_GetFileSystemEntries_str_str.UnixSearchPatternFileValidChar(String valid) in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.IO.FileSystem/tests/Directory/GetFileSystemEntries_str_str.cs:line 1004  ```
27533	area-Microsoft.CSharp	Don't look at base classes for interfaces in Microsoft.CSharp	Since the interface list obtained through reflection already includes those inherited from base classes the first pass contains all the interfaces and the later passes are redundant.    Since only `AggregateType` would have any results in the removed `AllPossibleInterfaces` just include testing for that as part of seeing if there is a matching interface.
27532	area-System.Text	Prefer the generic IEnumerator over non-generic in regex MatchCollection and GroupCollection	This allows the use of `var` in `foreach` loops as well as removing the `.Cast<Match>()` noise in LINQ queries.    A merge commit for this pull request to preserve the commit's GPG signature is appreciated.
27531	area-Infrastructure	Re-enable UAP builds	- Revert the three commits that initially disabled the build  - Add a uapaot flavor for System.Numerics.Vectors. It can no longer use the uap flavor since it depends directly on System.Private.CoreLib (whose strong name key is different for uap and uapaot).  - Fix a series of UAP build breaks that have crept in over the last couple weeks    Fixes https://github.com/dotnet/corefx/issues/26802
27529	area-System.Net	unable to parse IPv6 link-local address with interface name	"https://tools.ietf.org/html/rfc4007#section-11.3    The example shows ff08::9abc%interface10 and Unix systems generally use  address%if_name notation. (https://en.wikipedia.org/wiki/IPv6_address)     > furt@Ubuntu:~/ipv6$ ping6 fe80::108e:ac5e:1999:d42f%enp0s5  > PING fe80::108e:ac5e:1999:d42f%enp0s5(fe80::108e:ac5e:1999:d42f) 56 data bytes  > ....  >     however   ```C#   IPAddress.Parse(""fe80::108e:ac5e:1999:d42f%enp0s5"")  Unhandled Exception: System.FormatException: An invalid IP address was specified. ---> System.Net.Sockets.SocketException: Invalid argument  ```  throws exception. The c# parser assumes that the zoneid can only be integer.   On Linux and macOS this can be either interface index or valid interface name. "
27528	area-System.Net	[New test] Test failure: System.Net.Http.Functional.Tests.HttpClientHandler_ResponseDrain_Test / * - Unexpected EOF trying to read request header	## Failure type    The test was added on 2/23    ```  System.Exception : Unexpected EOF trying to read request header    at System.Net.Test.Common.LoopbackServer.Connection.ReadRequestHeaderAsync() in E:\A\_work\14\s\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 350  at System.Net.Test.Common.LoopbackServer.Connection.ReadRequestHeaderAndSendCustomResponseAsync(String response) in E:\A\_work\14\s\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 363  at System.Net.Http.Functional.Tests.HttpClientHandler_ResponseDrain_Test.<>c__DisplayClass3_1.<<GetAsyncWithMaxConnections_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection>b__2>d.MoveNext() in E:\A\_work\14\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.ResponseDrain.cs:line 166  --- End of stack trace from previous location where exception was thrown ---  at System.Net.Test.Common.LoopbackServer.AcceptConnectionAsync(Func`2 funcAsync) in E:\A\_work\14\s\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 117  at System.Net.Http.Functional.Tests.HttpClientHandler_ResponseDrain_Test.<>c__DisplayClass3_0.<<GetAsyncWithMaxConnections_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection>b__1>d.MoveNext() in E:\A\_work\14\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.ResponseDrain.cs:line 163  --- End of stack trace from previous location where exception was thrown ---  at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext() in E:\A\_work\14\s\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 84  --- End of stack trace from previous location where exception was thrown ---  at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in E:\A\_work\14\s\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 67  at System.Net.Http.Functional.Tests.HttpClientHandler_ResponseDrain_Test.GetAsyncWithMaxConnections_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection(Int32 totalSize, Int32 readSize, ContentMode mode) in E:\A\_work\14\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.ResponseDrain.cs:line 134  --- End of stack trace from previous location where exception was thrown ---  ```    ## Failure history    Day | Build | OS | Details  -- | -- | -- | --   2/24 | 20180224.02 | OSX10.13 | GetAsync_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180224.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_ResponseDrain_Test~2FGetAsync_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection(mode:%20BytePerChunk))  2/27 | 20180227.01 | Win7 | GetAsyncWithMaxConnections_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180227.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_ResponseDrain_Test~2FGetAsyncWithMaxConnections_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection(totalSize:%201000,%20readSize:%20950,%20mode:%20SingleChunk))  2/27 | 20180227.01 | OSX10.13 | GetAsync_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180227.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_ResponseDrain_Test~2FGetAsync_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection(mode:%20BytePerChunk))  
27527	area-System.Net	[Regression][Linux] System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test / GetAsync_AllowedSSLVersion_Succeeds	## Test failure    ### Server returned nothing (no headers, no data)    ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.CurlException : Server returned nothing (no headers, no data)    at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in /root/corefx-1420690/src/System.Net.Http/src/System/Net/Http/HttpClient.cs:line 469  at System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.<>c__DisplayClass4_0.<<GetAsync_AllowedSSLVersion_Succeeds>b__0>d.MoveNext() in /root/corefx-1420690/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.SslProtocols.cs:line 121  --- End of stack trace from previous location where exception was thrown ---  at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in /root/corefx-1420690/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 67  at System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.GetAsync_AllowedSSLVersion_Succeeds(SslProtocols acceptedProtocol, Boolean requestOnlyThisProtocol) in /root/corefx-1420690/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.SslProtocols.cs:line 119  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----  at System.Net.Http.CurlHandler.ThrowIfCURLEError(CURLcode error) in /root/corefx-1420690/src/System.Net.Http/src/System/Net/Http/CurlHandler/CurlHandler.cs:line 661  at System.Net.Http.CurlHandler.MultiAgent.FinishRequest(StrongToWeakReference`1 easyWrapper, CURLcode messageResult) in /root/corefx-1420690/src/System.Net.Http/src/System/Net/Http/CurlHandler/CurlHandler.MultiAgent.cs:line 883  ```    ## Failure history    Day | Build | OS | Details  -- | -- | -- | --   2/21 | 20180221.05 | RedHat69 |   2/23 | 20180223.04 | Ubuntu17.10 |   2/23 | 20180223.06 | Suse12 | [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180223.06/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test~2FGetAsync_AllowedSSLVersion_Succeeds(acceptedProtocol:%20Tls,%20requestOnlyThisProtocol:%20True))  2/23 | 20180223.06 | Ubuntu18.04 | [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180223.06/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test~2FGetAsync_AllowedSSLVersion_Succeeds(acceptedProtocol:%20Tls,%20requestOnlyThisProtocol:%20True))  2/24 | 20180224.02 | Suse12 | [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180224.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test~2FGetAsync_AllowedSSLVersion_Succeeds(acceptedProtocol:%20Tls,%20requestOnlyThisProtocol:%20True))  2/26 | 20180226.02 | Ubuntu14.04 | [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180226.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test~2FGetAsync_AllowedSSLVersion_Succeeds(acceptedProtocol:%20Tls,%20requestOnlyThisProtocol:%20True))  2/27 | 20180227.01 | Ubuntu14.04 | [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180227.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test~2FGetAsync_AllowedSSLVersion_Succeeds(acceptedProtocol:%20Tls,%20requestOnlyThisProtocol:%20True))  2/28 | 20180228.03 | Debian90  2/28 | 20180228.03 | Ubuntu16.04  2/28 | 20180228.03 | OpenSuse42.3  2/28 | 20180228.04 | OpenSuse42.3  2/28 | 20180228.04 | RedHat69  2/28 | 20180228.07 | SLES12  3/1 | 20180301.01 | Ubuntu14.04  3/1 | 20180301.04 | OpenSuse42.3  3/5 | 20180305.03 | Debian90  3/7 | 20180307.04 | RedHat69  3/8  | 20180308.09 | OpenSuse42.3  3/13 | 20180313.01 | SLES12  3/18 | 20180318.01 | Ubuntu17.10  4/2 | 20180402.05 | SLES12  4/3 | 20180403.04 | RedHat69  
27526	area-System.Memory	[API] Add MemoryExtensions.Contains	Proposal:    ```cs  public static class MemoryExtensions {      bool Contains<T>(this Span<T> span, T value);      bool Contains<T>(this ReadOnlySpan<T> span, T value);      bool Contains<T>(this Span<T> span, T value, IEqualityComparer<T> comparer);      bool Contains<T>(this ReadOnlySpan<T> span, T value, IEqualityComparer<T> comparer);  }  ```    This is different from the `IndexOf` method in that we can perform certain optimizations if we know you don't need the exact index of where the value was found. There are a few places in the framework that would benefit from this.    https://github.com/dotnet/corefx/blob/f0a032e4a1c8a848574a5db3e69e8a6fa0aae91e/src/System.Net.Primitives/src/System/Net/IPAddressParser.cs#L19    https://github.com/dotnet/coreclr/blob/8ec9bdfd53220b555f0b19eebd6a2c4ab5dab8bf/src/mscorlib/shared/System/Guid.cs#L430    https://github.com/dotnet/corefxlab/blob/c3624ba2c5f4fc4926ef64e5e35f2f6e895df6eb/src/System.Buffers.Experimental/System/Buffers/BufferExtensions.cs#L101    https://github.com/dotnet/coreclr/blob/22f1bc00d018a49f9550ee3b564f5f7737960b0d/src/mscorlib/shared/System/Version.cs#L342
27525	area-System.IO	Remove ActiveIssue tags now that CLR is updated	Fixes #27269     cc: @Anipik, @pjanotti, @danmosemsft 
27524	area-System.Security	Make Decrypt_512_NoData_FixedValue pass on netfx	Fixes #27442.
27523	area-System.Data	Fix issue 26965 transaction scope crash	"Fixes GitHub issue: #26965    **Problem Description:**  The culprit here is the platform specific if block, it only initializes the __**transactedConnectionPool**_ object for Windows and not for Linux/Mac, hence it later throws a NullReferenceException while closing the connection.    **Affected Tests:**  System.Data.SqlClient.ManualTesting.Tests.TransactionEnlistmentTest    **Review:**  Requesting review @saurabh500 @geleems @corivera     **Before Changes**  ```bash  keerats@ubuntu:/mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests$ ~/dotnetcore/corefx/Tools/msbuild.sh /t:RebuildAndTest /p:ConfigurationGroup=Release /p:XunitOptions=""-class System.Data.SqlClient.ManualTesting.Tests.TransactionEnlistmentTest""  Microsoft (R) Build Engine version 15.5.179.9764 for .NET Core  Copyright (C) Microsoft Corporation. All rights reserved.      Address -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Address/netstandard/Address.dll    Circle -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Circle/netstandard/Circle.dll    Shapes -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Shapes/netstandard/Shapes.dll    Utf8String -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Utf8String/netstandard/Utf8String.dll    System.Data.SqlClient.ManualTesting.Tests -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/System.Data.SqlClient.ManualTesting.Tests/netstandard/System.Data.SqlClient.ManualTesting.Tests.dll    ----- start 13:33:50 =============== To repro directly: =====================================================    pushd /mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64    chmod +x /mnt/d/corefx/bin/testhost/netcoreapp-Linux-Release-x64//dotnet    /mnt/d/corefx/bin/testhost/netcoreapp-Linux-Release-x64//dotnet xunit.console.netcore.exe System.Data.SqlClient.ManualTesting.Tests.dll  -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -class System.Data.SqlClient.ManualTesting.Tests.TransactionEnlistmentTest  -notrait category=OuterLoop -notrait category=failing    popd    ===========================================================================================================    /mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64 /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests    xUnit.net console test runner (64-bit .NET Core)    Copyright (C) 2014 Outercurve Foundation.        Discovering: System.Data.SqlClient.ManualTesting.Tests    Discovered:  System.Data.SqlClient.ManualTesting.Tests    Starting:    System.Data.SqlClient.ManualTesting.Tests       System.Data.SqlClient.ManualTesting.Tests.TransactionEnlistmentTest.TestAutoEnlistment_TxScopeComplete [FAIL]          System.NullReferenceException : Object reference not set to an instance of an object.          Stack Trace:             /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/ProviderBase/DbConnectionPool.cs(834,0): at System.Data.ProviderBase.DbConnectionPool.DeactivateObject(DbConnectionInternal obj)             /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/ProviderBase/DbConnectionPool.cs(1458,0): at System.Data.ProviderBase.DbConnectionPool.PutObject(DbConnectionInternal obj, Object owningObject)             /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/ProviderBase/DbConnectionInternal.cs(451,0): at System.Data.ProviderBase.DbConnectionInternal.CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory)             /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs(505,0): at System.Data.SqlClient.SqlConnection.Close()             /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/SQL/TransactionTest/TransactionEnlistmentTest.cs(59,0): at System.Data.SqlClient.ManualTesting.Tests.TransactionEnlistmentTest.TestCase_AutoEnlistment_TxScopeComplete()             /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/SQL/TransactionTest/TransactionEnlistmentTest.cs(197,0): at System.Data.SqlClient.ManualTesting.Tests.TransactionEnlistmentTest.RunTestFormat(Action testCase)             /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/SQL/TransactionTest/TransactionEnlistmentTest.cs(185,0): at System.Data.SqlClient.ManualTesting.Tests.TransactionEnlistmentTest.RunTestSet(Action TestCase)       System.Data.SqlClient.ManualTesting.Tests.TransactionEnlistmentTest.TestAutoEnlistment_TxScopeNonComplete [FAIL]          System.NullReferenceException : Object reference not set to an instance of an object.          Stack Trace:             /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/ProviderBase/DbConnectionPool.cs(834,0): at System.Data.ProviderBase.DbConnectionPool.DeactivateObject(DbConnectionInternal obj)             /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/ProviderBase/DbConnectionPool.cs(1458,0): at System.Data.ProviderBase.DbConnectionPool.PutObject(DbConnectionInternal obj, Object owningObject)             /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/ProviderBase/DbConnectionInternal.cs(451,0): at System.Data.ProviderBase.DbConnectionInternal.CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory)             /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs(505,0): at System.Data.SqlClient.SqlConnection.Close()             /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/SQL/TransactionTest/TransactionEnlistmentTest.cs(84,0): at System.Data.SqlClient.ManualTesting.Tests.TransactionEnlistmentTest.TestCase_AutoEnlistment_TxScopeNonComplete()             /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/SQL/TransactionTest/TransactionEnlistmentTest.cs(197,0): at System.Data.SqlClient.ManualTesting.Tests.TransactionEnlistmentTest.RunTestFormat(Action testCase)             /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/SQL/TransactionTest/TransactionEnlistmentTest.cs(185,0): at System.Data.SqlClient.ManualTesting.Tests.TransactionEnlistmentTest.RunTestSet(Action TestCase)    Finished:    System.Data.SqlClient.ManualTesting.Tests        === TEST EXECUTION SUMMARY ===  /mnt/d/corefx/Tools/tests.targets(492,5): warning :    System.Data.SqlClient.ManualTesting.Tests  Total: 5, Errors: 0, Failed: 2, Skipped: 0, Time: 1.507s [/mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/System.Data.SqlClient.ManualTesting.Tests.csproj]    /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests    ----- end 13:33:52 ----- exit code 1 ----------------------------------------------------------  /mnt/d/corefx/Tools/tests.targets(492,5): warning MSB3073: The command ""/mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64/RunTests.sh /mnt/d/corefx/bin/testhost/netcoreapp-Linux-Release-x64/"" exited with code 1. [/mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/System.Data.SqlClient.ManualTesting.Tests.csproj]  /mnt/d/corefx/Tools/tests.targets(500,5): error : One or more tests failed while running tests from 'System.Data.SqlClient.ManualTesting.Tests' please check /mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64/testResults.xml for details! [/mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/System.Data.SqlClient.ManualTesting.Tests.csproj]  keerats@ubuntu:/mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests$     ```    **After Changes**  ```bash  keerats@ubuntu:/mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests$ ~/dotnetcore/corefx/Tools/msbuild.sh /t:RebuildAndTest /p:ConfigurationGroup=Release /p:XunitOptions=""-class System.Data.SqlClient.ManualTesting.Tests.TransactionEnlistmentTest""  Microsoft (R) Build Engine version 15.5.179.9764 for .NET Core  Copyright (C) Microsoft Corporation. All rights reserved.      Circle -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Circle/netstandard/Circle.dll    Address -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Address/netstandard/Address.dll    Shapes -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Shapes/netstandard/Shapes.dll    Utf8String -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Utf8String/netstandard/Utf8String.dll    System.Data.SqlClient.ManualTesting.Tests -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/System.Data.SqlClient.ManualTesting.Tests/netstandard/System.Data.SqlClient.ManualTesting.Tests.dll    ----- start 13:40:09 =============== To repro directly: =====================================================    pushd /mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64    chmod +x /mnt/d/corefx/bin/testhost/netcoreapp-Linux-Release-x64//dotnet    /mnt/d/corefx/bin/testhost/netcoreapp-Linux-Release-x64//dotnet xunit.console.netcore.exe System.Data.SqlClient.ManualTesting.Tests.dll  -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -class System.Data.SqlClient.ManualTesting.Tests.TransactionEnlistmentTest  -notrait category=OuterLoop -notrait category=failing    popd    ===========================================================================================================    /mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64 /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests    xUnit.net console test runner (64-bit .NET Core)    Copyright (C) 2014 Outercurve Foundation.        Discovering: System.Data.SqlClient.ManualTesting.Tests    Discovered:  System.Data.SqlClient.ManualTesting.Tests    Starting:    System.Data.SqlClient.ManualTesting.Tests    Finished:    System.Data.SqlClient.ManualTesting.Tests        === TEST EXECUTION SUMMARY ===       System.Data.SqlClient.ManualTesting.Tests  Total: 5, Errors: 0, Failed: 0, Skipped: 0, Time: 1.680s    /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests    ----- end 13:40:11 ----- exit code 0 ----------------------------------------------------------  keerats@ubuntu:/mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests$   ```"
27522	area-System.IO	Expose Path.Join and tests	Goes with https://github.com/dotnet/coreclr/pull/16561. Will need an updated CoreCLR with those bits. Will fail until that point.    cc: @pjanotti, @danmosemsft, @Anipik 
27520	area-System.Net	HttpClient does not handle cookies with a non-matching path	"_From @dgweldon on February 15, 2018 22:28_  I have an interesting problem related to OpenID Connect Authentication in ASP .NET Core.  We have an Identity Server 3 OIDC implementation that uses a client certificate authentication provider.  When migrating to ASP .NET Core, we had no problem integrating with our existing OIDC server.  At least when launched from a browser (Edge, Chrome).    However, we have a small ClickOnce application (using the full .NET framework) that also authenticates and makes calls through the ASP.  It does this by using a HttpClient with a certificate selected by the user.  This ClickOnce application fails during authentication.  The code is pretty simple.    ```  using (WebRequestHandler certHandler = new WebRequestHandler  {     CookieContainer = new CookieContainer(),     ClientCertificateOptions = ClientCertificateOption.Manual,     UseDefaultCredentials = true,     AllowAutoRedirect = true  })  {     // Init     certHandler.ClientCertificates.Add(certificate);       using (HttpClient client = new HttpClient(certHandler) { BaseAddress = baseUri })     {        HttpResponseMessage response = a_client.GetAsync(ssoLoginUri).GetAwaiter().GetResult();        response.EnsureSuccessStatusCode();          // Process self submitting form responses as long as needed        do        {           response = ProcessFormAutoSubmit(a_client, response);        }        while (response != null);     }  }  ```    After moving to ASP .NET Core, this code no longer works.  The issue is that when MVC redirects to Identity Server, it includes 2 cookies (.ASPNetCore.Correlation.OpenIdConnect and .AspNetCore.OpenIdConnect.Nonce).  Those cookies never make it into my CookieContainer (other cookies from Identity Server are handled fine).  When the signin-oidc callback is made, MVC fails with the error: ""Correlation failed: .AspNetCore.Correlation.OpenIdConnect.9N18bzJ1hcpG5YjRMw_QgUJ_PnapfVx2lBmdvb8Q_zA' cookie not found."".  Makes sense.  But why is the cookie not added?    After playing around, I was able to get around this by handling each redirect and manually adding any cookies that had a path (both of which the 2 missing cookies had).  The code now looks like this:    ```  ...  HttpResponseMessage response = a_client.GetAsync(ssoLoginUri).GetAwaiter().GetResult();  Regex cookiePathRegex = new Regex(@""path=([^;]*);?"");    do  {     // Ideally we would just use automatic redirects in the HttpClient, but we need to intercept cookies for special processing     if (response.StatusCode == HttpStatusCode.Redirect)     {        Uri requestUri = response.Headers.Location;        if (!requestUri.IsAbsoluteUri)        {           requestUri = UriUtil.Combine(response.RequestMessage.RequestUri.GetLeftPart(UriPartial.Authority), response.Headers.Location.OriginalString);        }          response = a_client.GetAsync(requestUri).GetAwaiter().GetResult();          IEnumerable<string> responseCookies = null;        if (response.Headers.TryGetValues(""set-cookie"", out responseCookies))        {           // Cookies that have a path aren't currently supported with HttpClient           // Such cookies are used with the new ASP .NET Core OpenId Connect implementation           // Just manually add these cookies           foreach (string sCookie in responseCookies)           {              Match pathMatch = cookiePathRegex.Match(sCookie);              if (pathMatch.Success)              {                 a_webRequestHandler.CookieContainer.SetCookies(                    UriUtil.Combine(requestUri.GetLeftPart(UriPartial.Authority), pathMatch.Groups[1].Value),                    cookiePathRegex.Replace(sCookie, String.Empty));              }           }        }     }     else     {        response.EnsureSuccessStatusCode();        response = ProcessFormAutoSubmit(a_client, response);     }  }  while (response != null);  ```      This works, but seems like a hack.  Any idea why these cookies aren't handled by HttpClient?    I realize this may not be directly be an ASP .NET Core issue, but wanted to start here since it seems to be related to cookies from ASP .NET Core.    Thanks,    --David  _Copied from original issue: aspnet/Home#2880_"
27519	area-System.Net	[Fail] PostAsyncExpect100Continue_FailsAfterContentSendStarted_Throws	Windows.10.Amd64.Open-Release-x86    ```   System.Net.Http.Functional.Tests.HttpRetryProtocolTests/  PostAsyncExpect100Continue_FailsAfterContentSendStarted_Throws  ```  ```  System.Exception : Unexpected EOF trying to read request header     at System.Net.Test.Common.LoopbackServer.Connection.ReadRequestHeaderAsync() in D:\j\workspace\windows-TGrou---f8ac6754\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 350     at System.Net.Http.Functional.Tests.HttpRetryProtocolTests.<>c__DisplayClass4_3.<<PostAsyncExpect100Continue_FailsAfterContentSendStarted_Throws>b__3>d.MoveNext() in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Net.Http\tests\FunctionalTests\HttpRetryProtocolTests.cs:line 101  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.AcceptConnectionAsync(Func`2 funcAsync) in D:\j\workspace\windows-TGrou---f8ac6754\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 117     at System.Net.Http.Functional.Tests.HttpRetryProtocolTests.<>c__DisplayClass4_0.<<PostAsyncExpect100Continue_FailsAfterContentSendStarted_Throws>b__1>d.MoveNext() in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Net.Http\tests\FunctionalTests\HttpRetryProtocolTests.cs:line 92  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext() in D:\j\workspace\windows-TGrou---f8ac6754\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 84  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in D:\j\workspace\windows-TGrou---f8ac6754\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 67     at System.Net.Http.Functional.Tests.HttpRetryProtocolTests.PostAsyncExpect100Continue_FailsAfterContentSendStarted_Throws() in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Net.Http\tests\FunctionalTests\HttpRetryProtocolTests.cs:line 70  --- End of stack trace from previous location where exception was thrown ---  ```  Seen in https://github.com/dotnet/corefx/pull/27499
27518	area-System.Globalization	[Perf] Investigate System/Globalization benchmarks improvements in 2.1	[Perf] Investigate System/Globalization benchmarks improvements in 2.1    Several DateTimeCultureInfo and NumberCultureInfo tests show improvements in 2.1
27516	area-Serialization	[Perf][Windows_NT] Investigate System/Runtime/Serialization/Xml/Tests/Performance/DcsPerformanceTest Improvement/Regression between release/2.0.0 and release/2.1	There are multiple improvement/regressions across this noisy suite +/-4%.
27513	area-Serialization	[Perf][Windows_NT] Investigate System/Runtime/Serialization/Json/Tests/Performance/JsonNetPerformanceTest Improvement/Regression between release/2.0.0 and release/2.1	There are multiple improvement/regressions across this noisy suite +/-4%.
27512	area-Serialization	[Perf][Windows_NT] Investigate System/Runtime/Serialization/Json/Tests/Performance/DcjsPerformanceTest Improvement/Regression between release/2.0.0 and release/2.1	There are multiple improvement/regressions across this noisy suite +/-4%.
27511	area-System.Security	Use user-scope chains when doing Find with validOnly=true	".NET Framework's version passes new IntPtr(CAPI.HCCE_CURRENT_USER), so  we need to also pass that same value (eventually) which we control by setting  useMachineContext to false (which is the default for `new X509Chain()`).    Fixes #27405.    No test is added with this because adding trust to CU\Root gives a blocking modal dialog (""are you sure?"").  Turns out, removing something from CU\Root also gives one.    This was verified, however, by splicing a test into the CertificateRequest chains tests:    * Verify that Find(validOnly=false) matched 1 thing  * Verify that FInd(validOnly=true) matched 0 things  * Add the new root to CU\Root (and accept the consent popup)  * Add the new intermediate to CU\CA  * Verify that FInd(validOnly=true) matched 1 thing  * Remove the new intermediate from CU\CA  * Remove the new root from CU\Root (and accept the consent popup)    Given that that test runs 3 times per run (RSA, ECDSA, Hybrid) and I didn't think about the intermediate on the first attempt, many consent dialogs were seen in the making of this fix."
27510	area-Infrastructure	Linux builds have increased in time beyond 1 hour average; needs investigation	Opened on behalf of @jcagme  Warnings: 2 Status Message: failed  Build : Master - 20180227.02 (Product Build) Failing configurations: - RedHat6   - x64 - Linux   - x64 [Mission Control Build Info](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/build~2Fproduct~2F/build/20180227.02/workItem/Orchestration/analysis/external/Link)  In the last 4 days at least 3 build have failed since Linux and/or RH6 legs have timed out
27509	area-Infrastructure	[release/2.1] Update BuildTools to 2.1.0-preview1-02523-01	This version includes a fix to unblock dependency auto-update flow after GitHub stopped allowing weak cryptographic standards: dotnet/core-eng#2734.    This problem hasn't affected builds because 2.1 is built in ProdCon, where CoreFX's toolset isn't used to publish to dotnet/versions.
27508	area-Infrastructure	Microsoft.NETCore.App version required in netcoreapp2.1 preview	A .NET Core Web API project targeting `netcoreapp2.1` requires right now  `Microsoft.NETCore.App >= 2.1.0-preview2-26131-06`, which doesn't seem to exist in NuGet (yet).
27506	area-System.Globalization	Japanese calendar test failures locally	I deterministically get these test failures when I run the tests in the repo locally:  ```       System.Globalization.Tests.MiscCalendarsTests.JapaneseTest [FAIL]          Assert.Equal() Failure          Expected: 2019-01-08T00:00:00.0000000          Actual:   1989-01-08T00:00:00.0000000          Stack Trace:             d:\repos\corefx\src\System.Globalization.Calendars\tests\Misc\MiscCalendars.cs(44,0): at System.Globalization.Tests.MiscCalendarsTests.JapaneseTest()       System.Globalization.Tests.JapaneseCalendarEras.Eras [FAIL]          Assert.Equal() Failure          Expected: Int32[] [4, 3, 2, 1]          Actual:   Int32[] [5, 4, 3, 2, 1]          Stack Trace:             d:\repos\corefx\src\System.Globalization.Calendars\tests\JapaneseCalendar\JapaneseCalendarEras.cs(14,0): at System.Globalization.Tests.JapaneseCalendarEras.Eras()         System.Globalization.Tests.CalendarHelpers.ToDateTime_Invalid(calendar: JapaneseLunisolarCalendar { AlgorithmType = LunisolarCalendar, Eras = [5, 4, 3], IsReadOnly = False, MaxSupportedDateTime = 2050-01-22T23:59:59.9999999, MinSupportedDateTime =    1960-01-28T00:00:00.0000000, ... }) [FAIL]          Assert.Throws() Failure          Expected: typeof(System.ArgumentOutOfRangeException)          Actual:   (No exception was thrown)          Stack Trace:             d:\repos\corefx\src\System.Globalization.Calendars\tests\CalendarHelpers.cs(347,0): at System.Globalization.Tests.CalendarHelpers.ToDateTime_Invalid(Calendar calendar)  ```
27505	area-System.Security	WindowsPrincipalIsInRoleNeg test fails locally	I deterministically get this failure when I run the tests for the repo:  ```    Discovering: System.Security.Principal.Windows.Tests    Discovered:  System.Security.Principal.Windows.Tests    Starting:    System.Security.Principal.Windows.Tests       WindowsPrincipalTests.WindowsPrincipalIsInRoleNeg [FAIL]          System.ComponentModel.Win32Exception : The trust relationship between this workstation and the primary domain failed          Stack Trace:             d:\repos\corefx\src\System.Security.Principal.Windows\src\System\Security\Principal\NTAccount.cs(327,0): at System.Security.Principal.NTAccount.TranslateToSids(IdentityReferenceCollection sourceAccounts, Boolean& someFailed)             d:\repos\corefx\src\System.Security.Principal.Windows\src\System\Security\Principal\NTAccount.cs(189,0): at System.Security.Principal.NTAccount.Translate(IdentityReferenceCollection sourceAccounts, Type targetType, Boolean& someFailed)             d:\repos\corefx\src\System.Security.Principal.Windows\src\System\Security\Principal\NTAccount.cs(160,0): at System.Security.Principal.NTAccount.Translate(IdentityReferenceCollection sourceAccounts, Type targetType, Boolean forceSuccess)             d:\repos\corefx\src\System.Security.Principal.Windows\src\System\Security\Principal\WindowsPrincipal.cs(68,0): at System.Security.Principal.WindowsPrincipal.IsInRole(String role)             d:\repos\corefx\src\System.Security.Principal.Windows\tests\WindowsPrincipalTests.cs(15,0): at WindowsPrincipalTests.WindowsPrincipalIsInRoleNeg()    ```
27504	area-System.IO	should not have embedded nulls assertion in XML schema test	On Ubuntu:  https://mc.dot.net/#/user/stephentoub/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/1ffa18fb64d1bac969cb3b659178d65bcd4aea2e/workItem/System.Xml.XmlSchemaSet.Tests/wilogs  ```  2018-02-27 12:24:44,675: INFO: proc(54): run_and_log_output: Output: Discovering: System.Xml.XmlSchemaSet.Tests  2018-02-27 12:24:44,895: INFO: proc(54): run_and_log_output: Output: Discovered:  System.Xml.XmlSchemaSet.Tests  2018-02-27 12:24:45,053: INFO: proc(54): run_and_log_output: Output: Starting:    System.Xml.XmlSchemaSet.Tests  2018-02-27 12:24:45,905: INFO: proc(54): run_and_log_output: Output: Assertion Failed  2018-02-27 12:24:45,905: INFO: proc(54): run_and_log_output: Output: should not have embedded nulls if we parsed the end of string  2018-02-27 12:24:45,906: INFO: proc(54): run_and_log_output: Output:   2018-02-27 12:24:45,906: INFO: proc(54): run_and_log_output: Output:    at Interop.Sys.DirectoryEntry.GetName(Span`1 buffer)  2018-02-27 12:24:45,906: INFO: proc(54): run_and_log_output: Output:    at System.IO.Enumeration.FileSystemEntry.get_FileName()  2018-02-27 12:24:45,906: INFO: proc(54): run_and_log_output: Output:    at System.IO.Enumeration.FileSystemEnumerableFactory.<>c__DisplayClass5_0.<UserEntries>b__1(FileSystemEntry& entry)  2018-02-27 12:24:45,907: INFO: proc(54): run_and_log_output: Output:    at System.IO.Enumeration.FileSystemEnumerable`1.DelegateEnumerator.ShouldIncludeEntry(FileSystemEntry& entry)  2018-02-27 12:24:45,907: INFO: proc(54): run_and_log_output: Output:    at System.IO.Enumeration.FileSystemEnumerator`1.MoveNext()  2018-02-27 12:24:45,907: INFO: proc(54): run_and_log_output: Output:    at System.IO.FileSystem.RemoveDirectoryInternal(DirectoryInfo directory, Boolean recursive, Boolean throwOnTopLevelDirectoryNotFound)  2018-02-27 12:24:45,907: INFO: proc(54): run_and_log_output: Output:    at System.IO.FileSystem.RemoveDirectory(String fullPath, Boolean recursive)  2018-02-27 12:24:45,908: INFO: proc(54): run_and_log_output: Output:    at System.IO.Directory.Delete(String path, Boolean recursive)  2018-02-27 12:24:45,908: INFO: proc(54): run_and_log_output: Output:    at System.IO.TempDirectory.DeleteDirectory() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_true_prtest/src/Common/tests/System/IO/TempDirectory.cs:line 42  2018-02-27 12:24:45,909: INFO: proc(54): run_and_log_output: Output:    at System.IO.TempDirectory.Dispose() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_true_prtest/src/Common/tests/System/IO/TempDirectory.cs:line 35  2018-02-27 12:24:45,909: INFO: proc(54): run_and_log_output: Output:    at System.Xml.Tests.TC_SchemaSet_Compile.TFS_470021() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_true_prtest/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Compile.cs:line 91  2018-02-27 12:24:45,910: INFO: proc(54): run_and_log_output: Output:    at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)  2018-02-27 12:24:45,910: INFO: proc(54): run_and_log_output: Output:    at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, BindingFlags invokeAttr, Object[] parameters, Object[] arguments) in /root/coreclr/src/mscorlib/src/System/Reflection/RuntimeMethodInfo.cs:line 489  2018-02-27 12:24:45,910: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass46_1.<<InvokeTestMethodAsync>b__1>d.MoveNext()  2018-02-27 12:24:45,911: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-27 12:24:45,911: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass46_1.<InvokeTestMethodAsync>b__1()  2018-02-27 12:24:45,911: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func`1 asyncAction)  2018-02-27 12:24:45,912: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-27 12:24:45,912: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func`1 asyncAction)  2018-02-27 12:24:45,912: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.RunAsync(Func`1 code)  2018-02-27 12:24:45,913: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-27 12:24:45,913: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.RunAsync(Func`1 code)  2018-02-27 12:24:45,913: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestInvoker`1.InvokeTestMethodAsync(Object testClassInstance)  2018-02-27 12:24:45,913: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-27 12:24:45,913: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestInvoker`1.InvokeTestMethodAsync(Object testClassInstance)  2018-02-27 12:24:45,913: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestInvoker`1.<RunAsync>b__45_0()  2018-02-27 12:24:45,914: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-27 12:24:45,914: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestInvoker`1.<RunAsync>b__45_0()  2018-02-27 12:24:45,914: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)  2018-02-27 12:24:45,914: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-27 12:24:45,914: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)  2018-02-27 12:24:45,915: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(ExceptionAggregator aggregator)  2018-02-27 12:24:45,915: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-27 12:24:45,915: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(ExceptionAggregator aggregator)  2018-02-27 12:24:45,915: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)  2018-02-27 12:24:45,916: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-27 12:24:45,916: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)  2018-02-27 12:24:45,916: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestRunner`1.RunAsync()  2018-02-27 12:24:45,917: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-27 12:24:45,917: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestRunner`1.RunAsync()  2018-02-27 12:24:45,917: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCaseRunner`1.RunAsync()  2018-02-27 12:24:45,917: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-27 12:24:45,918: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCaseRunner`1.RunAsync()  2018-02-27 12:24:45,918: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestMethodRunner`1.RunTestCasesAsync()  2018-02-27 12:24:45,918: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-27 12:24:45,918: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestMethodRunner`1.RunTestCasesAsync()  2018-02-27 12:24:45,919: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestMethodRunner`1.RunAsync()  2018-02-27 12:24:45,919: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-27 12:24:45,919: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestMethodRunner`1.RunAsync()  2018-02-27 12:24:45,919: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestClassRunner`1.RunTestMethodsAsync()  2018-02-27 12:24:45,919: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-27 12:24:45,920: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestClassRunner`1.RunTestMethodsAsync()  2018-02-27 12:24:45,920: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestClassRunner`1.RunAsync()  2018-02-27 12:24:45,920: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-27 12:24:45,920: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestClassRunner`1.RunAsync()  2018-02-27 12:24:45,920: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCollectionRunner`1.RunTestClassesAsync()  2018-02-27 12:24:45,921: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-27 12:24:45,921: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCollectionRunner`1.RunTestClassesAsync()  2018-02-27 12:24:45,921: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCollectionRunner`1.RunAsync()  2018-02-27 12:24:45,921: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-27 12:24:45,921: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCollectionRunner`1.RunAsync()  2018-02-27 12:24:45,921: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task`1.InnerInvoke() in /root/coreclr/src/mscorlib/src/System/Threading/Tasks/future.cs:line 610  2018-02-27 12:24:45,922: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /root/coreclr/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166  2018-02-27 12:24:45,922: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in /root/coreclr/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 2440  2018-02-27 12:24:45,922: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.ExecuteEntry() in /root/coreclr/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 2361  2018-02-27 12:24:45,923: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.SynchronizationContextTaskScheduler.<>c.<.cctor>b__8_0(Object s) in /root/coreclr/src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs:line 694  2018-02-27 12:24:45,923: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.MaxConcurrencySyncContext.RunOnSyncContext(SendOrPostCallback callback, Object state)  2018-02-27 12:24:45,923: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /root/coreclr/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166  2018-02-27 12:24:45,923: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc()  2018-02-27 12:24:45,923: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.XunitWorkerThread.<>c.<QueueUserWorkItem>b__5_0(Object _)  2018-02-27 12:24:45,924: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /root/coreclr/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166  2018-02-27 12:24:45,924: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in /root/coreclr/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 2440  2018-02-27 12:24:45,924: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /root/coreclr/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166  2018-02-27 12:24:47,225: INFO: proc(54): run_and_log_output: Output: /home/helixbot/dotnetbuild/work/0ec45d2b-1ec5-4f7f-8e8b-9183b55fcf0a/Work/67d69836-ddc0-4203-9413-cd7b112969c9/Unzip/RunTests.sh: line 94: 21004 Aborted       ```    cc: @JeremyKuhne, @Anipik, @danmosemsft   Related to https://github.com/dotnet/corefx/issues/27038
27503	area-System.Net	Test failure: System.Net.Http.Functional.Tests.HttpClientHandler_ResponseDrain_Test/GetAsync_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection(mode: BytePerChunk)	Opened on behalf of @v-haren  The test `System.Net.Http.Functional.Tests.HttpClientHandler_ResponseDrain_Test/GetAsync_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection(mode: BytePerChunk)` has failed.  System.Exception : Unexpected EOF trying to read request header          Stack Trace:             at System.Net.Test.Common.LoopbackServer.Connection.ReadRequestHeaderAsync() in /Users/buildagent/agent/_work/391/s/corefx/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 343        at System.Net.Test.Common.LoopbackServer.Connection.ReadRequestHeaderAndSendCustomResponseAsync(String response) in /Users/buildagent/agent/_work/391/s/corefx/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 363        at System.Net.Http.Functional.Tests.HttpClientHandler_ResponseDrain_Test.<>c__DisplayClass2_0.<<GetAsync_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection>b__2>d.MoveNext() in /Users/buildagent/agent/_work/391/s/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.ResponseDrain.cs:line 86     --- End of stack trace from previous location where exception was thrown ---        at System.Net.Test.Common.LoopbackServer.AcceptConnectionAsync(Func`2 funcAsync) in /Users/buildagent/agent/_work/391/s/corefx/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 117        at System.Net.Http.Functional.Tests.HttpClientHandler_ResponseDrain_Test.<>c__DisplayClass2_0.<<GetAsync_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection>b__1>d.MoveNext() in /Users/buildagent/agent/_work/391/s/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.ResponseDrain.cs:line 82     --- End of stack trace from previous location where exception was thrown ---        at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext() in /Users/buildagent/agent/_work/391/s/corefx/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 84     --- End of stack trace from previous location where exception was thrown ---        at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in /Users/buildagent/agent/_work/391/s/corefx/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 67        at System.Net.Http.Functional.Tests.HttpClientHandler_ResponseDrain_Test.GetAsync_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection(ContentMode mode) in /Users/buildagent/agent/_work/391/s/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.ResponseDrain.cs:line 55     --- End of stack trace from previous location where exception was thrown --- Build : Master - 20180224.02 (Core Tests) Failing configurations: - OSX.1013.Amd64-x64   - Release 
27500	area-System.IO	[API Change] Drop `IMemoryList` and replace with abstract `ReadOnlySequenceSegment`	"Alternative to ""Remove RunningIndex add a way for IMemoryList to provide seek implementation"" https://github.com/dotnet/corefx/issues/27435    The is a performance issue with `ReadOnlySequence` as accessing the properties of its segments have to go via interface dispatch which makes them slower an non-inlineable.    Proposed api:  ```csharp  public abstract class ReadOnlySequenceSegment<T>  {      public ReadOnlyMemory<T> Memory { get; protected set; }      public ReadOnlySequenceSegment<T> Next { get; protected set; }      public long RunningIndex { get; protected set; }  }  ```  Changing to an `abstract` class with `protected` setters and non-virtual properties makes them inlinable and fast. The `ReadOnlySequence` doesn't care what the segments are, only that thy have these properties and then it can perform all of its functions:    Removing  ```csharp  public interface IMemoryList<T>  {      public Memory<T> Memory { get; set; }      public IMemoryList<T> Next { get; set; }      public long RunningIndex { get; set; }  }  ```    More functionality can't be delegated via the interface as in https://github.com/dotnet/corefx/issues/27435 as that will cause greater performance issues for mixed segment type `ReadOnlySequence`s as every call will have to go via the interface for the next block as its real type is unknown.    With the above approach it doesn't need to know what the next block is; it can use the fast base properties.    The total change in Pipelines to work with this faster approach is: (and PR for the change https://github.com/dotnet/corefx/pull/27499/commits/63ddad596763675165015c496e9647ee449adec1 )  ```diff  - internal partial sealed class BufferSegment : IMemoryList<byte>  + internal partial sealed class BufferSegment : ReadOnlySequenceSegment<byte>    {  +     private BufferSegment _next;      -     public BufferSegment NextSegment { get; set; }  +     public BufferSegment NextSegment  +     {  +         get => _next;  +         set  +         {  +             _next = value;  +             Next = value;  +         }  +     }  -     public long RunningIndex { get; private set; }  -     public Memory<byte> Memory { get; private set; }  -     public IMemoryList<byte> Next => NextSegment;    }  ```    /cc @davidfowl @KrzysztofCwalina @pakrym @ahsonkhan @stephentoub "
27499	area-System.IO	ReadOnlySequence Performance Improvements	Change `IMemoryList` to POCO object; then inherit for Pipeline`s `BufferSegment`; this means all its properties inline in use rather than being interface dispatch.    Improve some of the code paths        Bottom numbers after the effect for 1, 100 and 1000 segments; top is current    ```                                     Method |    Categories |        Mean |         Op/s | Scaled |  --------------------------------- |-------------- |------------:|-------------:|-------:|     ReadOnlySequence<T> (previous) |     1 segment |   104.86 ns |  9,536,378.9 |   1.00 |      ReadOnlySequence<T> (current) |     1 segment |    85.64 ns | 11,677,040.0 |   0.82 |      ReadOnlySequence<T> (this PR) |     1 segment |    70.79 ns | 14,125,877.7 |   0.68 |                                    |               |             |              |        |     ReadOnlySequence<T> (previous) |     2 segment |   188.92 ns |  5,293,250.6 |   1.00 |      ReadOnlySequence<T> (current) |     2 segment |   181.64 ns |  5,505,269.8 |   0.96 |      ReadOnlySequence<T> (this PR) |     2 segment |   111.34 ns |  8,981,178.5 |   0.59 |                                    |               |             |              |        |     ReadOnlySequence<T> (previous) |  100 segments | 1,297.69 ns |    770,599.7 |   1.00 |      ReadOnlySequence<T> (current) |  100 segments |   966.50 ns |  1,034,659.7 |   0.74 |      ReadOnlySequence<T> (this PR) |  100 segments |   233.30 ns |  4,286,286.4 |   0.18 |                                    |               |             |              |        |     ReadOnlySequence<T> (previous) | 1000 segments | 1,390.97 ns |    718,923.3 |   1.00 |      ReadOnlySequence<T> (current) | 1000 segments | 1,095.54 ns |    912,790.8 |   0.79 |      ReadOnlySequence<T> (this PR) | 1000 segments |   275.27 ns |  3,632,776.9 |   0.20 |                                    |               |             |              |        |                            Span<T> |       MM item |   147.34 ns |  6,787,204.7 |   0.54 |                     BufferSlice<T> |       MM item |   152.70 ns |  6,548,884.8 |   0.56 |     ReadOnlySequence<T> (previous) |       MM item |   272.44 ns |  3,670,500.0 |   1.00 |      ReadOnlySequence<T> (current) |       MM item |   251.15 ns |  3,981,724.7 |   0.92 |      ReadOnlySequence<T> (this PR) |       MM item |   200.79 ns |  4,980,437.7 |   0.74 |  ```    Resolves https://github.com/dotnet/corefx/issues/27500
27498	area-System.ComponentModel	Microsoft.Windows.Compatibility depends on nonexistent System.ComponentModel.Composition package	Guessing this may have already been noted elsewhere, but took me by surprise - the MEF1 work for the Windows Compatibility Pack hasn't been done yet (mentioned on #24909), but _Microsoft.Windows.Compatibility_ still declares it as a package dependency.    The NuGet client falls back to installing this unlisted non-Microsoft package uploaded in 2010:    https://www.nuget.org/packages/System.ComponentModel.Composition    ```  error NU1603: Microsoft.Windows.Compatibility 2.0.0-preview1-26216-02 depends on   System.ComponentModel.Composition (>= 4.5.0-preview1-26216-02) but   System.ComponentModel.Composition 4.5.0-preview1-26216-02 was not found. An approximate best   match of System.ComponentModel.Composition 2010.2.11 was resolved.  ```
27496	area-System.IO	[Perf][Windows_NT] Investigate the improvement/regressions on System/IO/Tests/PerfStreamWriter	From release/2.0.0 to release/2.1 there has been the following changes in the tests:  ```    WriteCharArray(writeLength: 100)         // Improved ~8%    WriteCharArray(writeLength: 2)           // Improved ~7%    WritePartialCharArray(writeLength: 100)  // Improved ~16%    WritePartialCharArray(writeLength: 2)    // Regressed ~25%    WriteString(writeLength: 2)              // Regressed ~4%  ```
27495	area-System.IO	[Perf][Windows_NT] Investigate the regression on some System/IO/Tests benchmarks due to OS upgrade	It looks like changing the OS on the perf machines, from Windows Server 2012 to Windows Server 2016 (https://github.com/dotnet/corefx/pull/23714) caused a regression of:  - System/IO/Tests/[Perf_File & Perf_FileStream]    - ~400% on Perf_File.Delete    - ~24% on Perf_File.Exist    - ~15% on Perf_FileStream  - System/IO/Tests/Perf_Path/GetTempPath ~32% regression
27494	area-System.IO	Tests For GetPathRoot and Enabling NormalizeDirectorySeparatorTests	Fixes https://github.com/dotnet/corefx/issues/27401
27492	area-Serialization	Incorrect error message from MS.XS.Gen when running with older runtime	When using Microsoft.XmlSerializer.Generator 2.0.0-preview1-26216-02 on a machine with 2.0.x runtime, I got error `'System.Xml.Serialization.XmlSerializer' does not have a method named 'GenerateSerializerNotFound'. SGen does not support the framework of the version you are using.`    The error message is from [here](https://github.com/dotnet/corefx/blob/b032565f4c8186dcb82a0d6be8a94e660184405a/src/System.Private.Xml/src/Resources/Strings.resx#L3452). There is no such a method called `GenerateSerializerNotFound`. Can we update the error message to:    `Method 'System.Xml.Serialization.XmlSerializer.GenerateSerializer' was not found. This is likely because you are using an older version of the framework. Please update to .NET Core v2.1 or later.`
27490	area-System.Security	Add more EnvelopedCms tests	This change brings the EnvelopedCms tests which were added in the dev/cms_unix branch to master.    Thankfully, they all just pass.    Thanks for contributing these long ago, @hoyosjs.
27489	area-System.Memory	Removing files since MemoryExtensions is in CoreLib now.	Part of https://github.com/dotnet/corefx/issues/25182    Depends on https://github.com/dotnet/coreclr/pull/16521 (and the subsequent mirror PR).    - Removed duplicated files  - Moved the internal Clear helper methods from SpanHelpers.Clear.cs to SpanHelpers.cs since it is a small enough file    cc @jkotas, @KrzysztofCwalina, @stephentoub  
27488	area-Serialization	Warning of serializer generation failure when there are just no types serializable	When there are no types found to pre-gen serializers, I got warning below, which is a bit confusing. Ideally, I can be told the real reason.    c:\users\xxxxx\\.nuget\packages\microsoft.xmlserializer.generator\2.0.0-preview1-26216-02\build\Microsoft.XmlSerializer.Generator.targets(16,5): warning : SGEN : warning SGEN1: Fail to generate the serializer for test-sgen.dll. Please follow the instructions at https://go.microsoft.com/fwlink/?linkid=858594 and try again. [C:\Temp\test-sgen\test-sgen.csproj]
27487	area-System.Memory	Optimize MemoryExtensions SequenceEqual for T = char	One option could be to convert to `Span<byte>` using AsBytes for any T = blittable type and call the existing vectorized method:  https://github.com/dotnet/corefx/blob/master/src/System.Memory/src/System/SpanHelpers.byte.cs#L889    Alternatively, create a char specific implementation and add a type check.    cc @KrzysztofCwalina, @GrabYourPitchforks, @stephentoub, @jkotas, @benaadams 
27486	area-System.Runtime	System.Runtime.Intrinsics in .NET Core 2.1	# System.Runtime.Intrinsics in .NET Core 2.1    .NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.    We have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.    Given our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like `Span<T>` and `Memory<T>` that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.    ## Details  In the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.    At the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.    As its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.    In the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported.    ## Call to action    Please review this plan and provide any feedback in the comments of this issue.
27484	area-Serialization	[Perf] Investigate Xml/XmlSerializer benchmark regressions in 2.1 (part 2)	[Perf] Investigate Xml/XmlSerializer benchmark regressions in 2.1 (part 2)    Second regression across multiple tests in Xml/XmlSerializer of >15% from this range of commits:    https://github.com/dotnet/corefx/compare/6f5d255a76a192906f692fd3d2b9104ab6aeb2f2...dotnet:504781cbfb166c71204b9077c0528623c85cf68c
27483	area-Serialization	[Perf] Investigate Xml/XmlSerializer benchmarks regressions in 2.1 (part I)	[Perf] Investigate Xml/XmlSerializer benchmark regressions in 2.1 (part I)    Regression across multiple tests in Xml/XmlSerializer of ~10% from this range of commits:    https://github.com/dotnet/corefx/compare/6ded3992a29c48ec3c9e641589b9805a1dbc50a3...dotnet:697e2b910e6cccbc1f3d58be111e309db4823ab7  
27482	area-Infrastructure	Mark Microsoft.XmlSerializer.Generator as NonShipping=true (product construction)	"In orchestrated builds, `Microsoft.XmlSerializer.Generator` should be marked `NonShipping=""true""` because it's not meant to be published to the NuGet Gallery.    Example manifest without NonShipping:    https://github.com/dotnet/versions/blob/beb08dc78641604883b17ee3010e602378b1c361/build-info/dotnet/product/cli/release/2.1/build.xml#L371    We will start to rely on this attribute with automated pushes: https://github.com/dotnet/core-eng/issues/2334.    /cc @weshaggard "
27481	area-System.Memory	Update System.Memory package description to be complete	Right now it only includes Span within the description.  https://github.com/dotnet/corefx/blob/3c708ab64564304fed352355b52e2ea047860e4d/pkg/descriptions.json#L1004    cc @KrzysztofCwalina, @dotnet/corefxlab-contrib, @pakrym, @davidfowl 
27477	area-System.Net	SocketsHttpHandler: auth scheme lookup should be case-insensitive	"If we receive an auth challenge with a scheme like ""basic"" or ""DIGEST"", we don't handle this properly.  Scheme name should be case-insensitive. "
27476	area-System.Net	Add MaxResponseDrainSize, and fix a few draining bugs	I've added MaxResponseDrainSize to make the setting configurable rather than a const; I left it internal until the API is approved.    In adding tests for it, I found a few existing bugs in draining that I fixed:  - HttpConnectionResponseContent nulls out its Stream when the Stream is consumed.  Then when the response content is disposed, the Stream is null, so it's not disposed, so it's not drained.  - HttpContentReadStream's Dispose wasn't checking whether it was already called, and would kick off a new draining operation if the connection was still associated.  So if the stream was disposed multiple times, which happens if the response content and stream are both disposed (since the content disposes of the stream), we end up corrupting the response due to multiple threads concurrently accessing and draining it.    cc: @geoffkizer, @davidsh, @wfurt  Contributes to https://github.com/dotnet/corefx/issues/27329
27473	area-System.Text	Regex refactoring	From the previous PR with the changes now grouped into multiple commits. No squash please!    @stephentoub I will incorporate your feedback here later today.
27472	area-System.Net	Activity for HttpClient calls not stopped if inner handler does not use async/await	"I've been writing some `DiagnosticSource`/`Activity` based instrumentation for HttpClient. [In my unit tests](https://github.com/cwe1ss/opentracing-contrib-dotnet/blob/ba20de4ba57e43cb685083e3c0b2b19022ce067e/test/OpenTracing.Contrib.AspNetCore.Tests/HttpOut/HttpOutInterceptorTest.cs) I've created a HttpMessageHandler and wrapped it with the existing `DiagnosticsHandler` (by using reflection, so in an unsupported way) to test the different scenarios.    However, I noticed that if my handler doesn't use `async/await`, the `DiagnosticsHandler` does NOT raise the Diagnostics-events for `System.Net.Http.Exception` and `System.Net.Http.HttpRequestOut.Stop` because the invocation is outside of the try...catch block.    E.g. if DiagnosticsHandler is using an inner handler that looks like this, it does NOT raise the events:  ```csharp  public class FailingHttpMessageHandler : HttpMessageHandler  {      protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)      {          throw new InvalidOperationException(""foo"");      }  }  ```    It only works, if I change the code as follows:  ```csharp  public class FailingHttpMessageHandler : HttpMessageHandler  {      protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)      {          await Task.CompletedTask;          throw new InvalidOperationException(""foo"");      }  }  ```    My direct usage of DiagnosticsHandler is obviously a hack as it is internal and AFAIU in a regular application `DiagnosticsHandler` is an internal feature of `HttpClientHandler` so there shouldn't be any user code after it but nevertheless, I think that it would make sense to move the call from this PR into the try..catch block.    /cc @lmolkova @vancem"
27471	area-System.Runtime	AsyncTaskMethodBuilder<decimal> incorrectly caches decimal tasks with zero value	"`AsyncTaskMethodBuilder<decimal>` uses cached tasks for common zero values. There's a check for `(decimal)result == 0m`. The decimal type can store trailing zeroes, though. But `==` is blind to this: `0m == 0.0m`. (I also found no other way to get this comparison to return false. This is in my view an API omission.)    This makes caching observable and creates a wrong result:            static void Main()          {              Console.WriteLine(Return(0m) + "" / "" + Return(0.0m)); // 0 / 0.0              Console.WriteLine(ReturnAsync(0m).Result + "" / "" + ReturnAsync(0.0m).Result); // 0 / 0          }            static decimal Return(decimal value) => value;          static async Task<decimal> ReturnAsync(decimal value) => value;    Both lines should return the same string. The async line is wrong.    I tested this on .NET 4.7.1 but it should apply to all .NET versions where this particular optimization landed."
27469	area-System.Reflection	Requesting a net35 target for the S.R.Metadata package	Projects like https://github.com/nunit/nunit-console (including the engine shared by the console and adapter) and https://github.com/OpenCover/opencover allow users to execute their assemblies on desktop CLR v2 and therefore cannot target net40 or greater.    Without a net35 target, or maintaining such a port, we can't move away from Mono.Cecil. Mono.Cecil has a major drawback for projects that use rely on it, crashing when reading portable PDB information. It hasn't been updated in a while. S.R.Metadata is also better-designed for efficient low-level reading.    This would make it desirable to publish a net35 build of S.C.Immutable. @sharwell has one at https://github.com/tunnelvisionlabs/dotnet-collections, though adding a net35 target to the S.C.Immutable package would also be welcome for even more projects than stated above.    It looks like this would make the difference for me between days and months of work, so I'm happy to contribute here!
27468	area-System.Net	Memory leak in SendAsync in HttpClient	In corefx/src/System.Net.Http/src/System/Net/Http/HttpClient.cs:SendAsync there seems to be a memory leak that is triggered when CancellationToken.None is used.    We have created HttpClient once and reuse it:        var httpClientHandler = new HttpClientHandler();      httpClientHandler.ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => true;      httpClient = new HttpClient(httpClientHandler);      httpClient.Timeout = Timeout.InfiniteTimeSpan;    And are calling like this:        using (var content = PrepareHttpContentJson(input))      using (HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, new Uri(fullUrl, UriKind.RelativeOrAbsolute)))      {        request.Content = content;        using (HttpResponseMessage result = await httpClient.SendAsync(request, CancellationToken.None))        {          // work on result        }      }    PrepareHttpContentJson returns a ByteArrayContent (json content) with ContentType set.    If this code is called repeatably, it leaks every `ByteArrayContent` created.    Looking to the memory using Diagnostic Tools in Visual Studio, this is what seems to lock the memory:        ByteArrayContent         > Action<Stream>          > HttpWebRequest            > ConnectStream            > ContextAwareResult            > HttpClientHandler+RequestState            > CancellationCallbackInfo    If I replace `CancellationToken.None` with `cts.Token` in `SendAsync` and create `var cts = new CancellationTokenSource();` just before the first `using`, the memory leak stops.    I made this attempt as I checked the source code for HttpClient.cs and noticed some handling of cancellation tokens going on and figured this might be the cause.    Note: This MAY be an interaction issue with Autofac, but I don't think so. The `using` code block is resolve by Autofac, but there is only ever 1 instance (registered as single instance) of it (so it wont be disposed between usages).  
27467	area-System.IO	Pipelines: ReadAsync completion error is inverted	If you call `ReadAsync`  on a completed pipe, you incorrectly get the `SR.WritingAfterCompleted` message that says that write is not allowed, via `CreateInvalidOperationException_NoReadingAllowed`; this should probably be `SR.ReadingAfterCompleted`. Likewise - the `ThrowInvalidOperationException_NoReadingAllowed` uses `SR.WritingAfterCompleted`.    /src/System.IO.Pipelines/src/System/IO/Pipelines/ThrowHelper.cs
27466	area-System.Security	Cannot decode X500DistinguishedName correctly with T61String.	"In an ASP.NET CORE 2.0 project under MAC OS, we have a byte array which is the raw data of the x500 distinguished name, to decode it with the X500DistinguishedName class, the value can be decoded if it is a printable string, but the value CANNOT be decoded if it is a T61String.    It's OK in:  1) Windows platform (all projects)  2) MAC, .NET Framework project  It's NOT OK in:  1) MAC, ASP.NET CORE 2.0 project    Steps:  1) Run the following codes in a ASP.NET CORE 2.0 project.   // CN=GrapeCity inc., OU=Tools Development, O=GrapeCity inc., L=Sendai Izumi-ku, S=Miyagi, C=JP  // the CN, OU, O value is T61String  // the L, S, C value is printable string  var base64 = ""MIGGMQswCQYDVQQGEwJKUDEPMA0GA1UECBMGTWl5YWdpMRgwFgYDVQQHEw9TZW5kYWkgSXp1bWkta3UxFzAVBgNVBAoUDkdyYXBlQ2l0eSBpbmMuMRowGAYDVQQLFBFUb29scyBEZXZlbG9wbWVudDEXMBUGA1UEAxQOR3JhcGVDaXR5IGluYy4="";              var bytes = System.Convert.FromBase64String(base64);              var x500name = new System.Security.Cryptography.X509Certificates.X500DistinguishedName(bytes);              var name = x500name.Name;  2) get's the value of name.  <observed>CN="""", OU="""", O="""", L=Sendai Izumi-ku, S=Miyagi, C=JP  <expected>CN=GrapeCity inc., OU=Tools Development, O=GrapeCity inc., L=Sendai Izumi-ku, S=Miyagi, C=JP  "
27465	area-System.IO	PipeReader.Complete shouldn't throw if AdvanceTo wasn't called	Today we throw an exception that forces you to `AdvanceTo` before calling Complete. It's forcing into a very specific programming pattern to make sure you don't leak memory in certain cases. The downside is that you end up with lots of try finally to make sure that things get called in the right order.  We'd still recommend only calling Complete after all reading is complete but I'm not sure what we have is worth the pain.    /cc @pakrym @halter73 @benaadams 
27464	area-System.Threading	Change new QueueUserWorkItem method to use `TState`	In .NET Core 2.1 we've added this new overload:  ```C#  public static bool QueueUserWorkItem(WaitCallback callBack, object state, bool preferLocal)  ```  We should change it to instead be:  ```C#  public static bool QueueUserWorkItem<TState>(Action<TState> callBack, TState state, bool preferLocal)  ```  This has several benefits:  1. `Action<object>` with `object state` can be used, without a mismatch of delegate signatures.  `Action<object>` is now commonly used in these situations.  2. We can now avoid boxing value type arguments passed in.  3. And because of (2) and value tuples, we can easily pass any number of arguments in without allocating a separate object to store them all.    We should fix this before we ship 2.1.    cc: @benaadams, @davidfowl, @kouvel 
27463	area-System.IO	NamedPipe: CurrentUserOnly, quick fixes for Unix	* The path for the directory when using current user only was wrong and not using the intended folder.  * Added getpeerid validation on the server side (see https://github.com/dotnet/corefx/pull/26395#discussion_r166484692)  
27462	area-System.Reflection	Add test coverage for reflection on PseudoCustomAttributes	Follow up on https://github.com/dotnet/corefx/issues/27426
27460	area-System.Runtime	HandleProcessCorruptedStateExceptionsTests.ProcessExit_Called test failing on Windows	```  MESSAGE:  Exit code was -1073741819 but it should have been 42  Expected: True  Actual: False  +++++++++++++++++++  STACK TRACE:  at System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Dispose(Boolean disposing) in D:\j\workspace\x64_checked_w---d7295605\_\fx\src\CoreFx.Private.TestUtilities\src\System\Diagnostics\RemoteExecutorTestBase.cs:line 231  at System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Dispose() in D:\j\workspace\x64_checked_w---d7295605\_\fx\src\CoreFx.Private.TestUtilities\src\System\Diagnostics\RemoteExecutorTestBase.cs:line 207  at System.Runtime.ExceptionServices.Tests.HandleProcessCorruptedStateExceptionsTests.ProcessExit_Called() in D:\j\workspace\x64_checked_w---d7295605\_\fx\src\System.Runtime\tests\System\Runtime\ExceptionServices\HandleProcessCorruptedStateExceptions.cs:line 51  ```    This failure was masked by #27426
27459	area-System.Diagnostics	System.Diagnostics.Tests.ProcessTests failures on Unix	System.Diagnostics.Tests.ProcessTests.HandleCountChanges fails with:    ```  MESSAGE:  Assert.All() Failure: 1 out of 1 items in the collection did not pass.  [0]: Xunit.Sdk.TrueException: Field marshaling is not supported by RemoteInvoke: s_allowedProgramsToRun  Expected: True  Actual: False   at Xunit.Assert.True(Nullable`1 condition, String userMessage)   at System.Diagnostics.RemoteExecutorTestBase.<>c.<GetMethodInfo>b__14_0(FieldInfo fi) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_baseline_prtest/_/fx/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 180   at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)  +++++++++++++++++++  STACK TRACE:  at System.Diagnostics.RemoteExecutorTestBase.GetMethodInfo(Delegate d) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_baseline_prtest/_/fx/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 178 at System.Diagnostics.RemoteExecutorTestBase.RemoteInvoke(Func`1 method, RemoteInvokeOptions options) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_baseline_prtest/_/fx/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 46 at System.Diagnostics.Tests.ProcessTests.HandleCountChanges() in /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_baseline_prtest/_/fx/src/System.Diagnostics.Process/tests/ProcessTests.cs:line 1289  ```    System.Diagnostics.Tests.ProcessTests.GetProcesses_InvalidMachineName_ThrowsInvalidOperationException  fails with:    ```  MESSAGE:  Assert.All() Failure: 1 out of 1 items in the collection did not pass.  [0]: Xunit.Sdk.TrueException: Field marshaling is not supported by RemoteInvoke: s_allowedProgramsToRun   Expected: True   Actual: False   at Xunit.Assert.True(Nullable`1 condition, String userMessage)   at System.Diagnostics.RemoteExecutorTestBase.<>c.<GetMethodInfo>b__14_0(FieldInfo fi) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_baseline_prtest/_/fx/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 180   at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)  +++++++++++++++++++  STACK TRACE:  at System.Diagnostics.RemoteExecutorTestBase.GetMethodInfo(Delegate d) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_baseline_prtest/_/fx/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 178 at System.Diagnostics.RemoteExecutorTestBase.RemoteInvoke(Func`1 method, RemoteInvokeOptions options) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_baseline_prtest/_/fx/src/CoreFx.Private.TestUtilities/src  ```    This failure was masked by https://github.com/dotnet/corefx/issues/27426
27458	area-System.Net	Ambigous error message for SSL validation error.	"When I use HttpClient, I've encounter the SSL validation error. However, the error message just said that ""Security Error"" (in Japanese) it is not user friendly message.  I might better if it is ""SSL validation error"" or something.     The actual error message is     ```  System.Net.Http.HttpRequestException    HResult=0x80072F8F    Message=An error occurred while sending the request.    Source=System.Private.CoreLib    StackTrace:     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()     at System.Net.Http.DiagnosticsHandler.<SendAsync>d__2.MoveNext()     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()     at KubernetesRestSpike.Program.<RunAsync>d__7.MoveNext() in C:\Users\tsushi\Source\Repos\CustomBindingsSample\KubernetesRestSpike\Program.cs:line 42     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at KubernetesRestSpike.Program.Main(String[] args) in C:\Users\tsushi\Source\Repos\CustomBindingsSample\KubernetesRestSpike\Program.cs:line 31    Inner Exception 1:  WinHttpException: セキュリティ エラーが発生しました  ```    This error is thrown from here.     https://github.com/dotnet/corefx/blob/7e6396b2bcb4d372b199cfb7b3b13e290c441124/src/System.Net.Http.WinHttpHandler/src/System/Net/Http/WinHttpRequestCallback.cs#L312-L313      "
27457	area-System.IO	Initial implementation of a regex match option	Implementation of a `MatchType.Regex` per https://github.com/dotnet/corefx/issues/27456.    Marking as no merge until approval.    cc: @danmosemsft, @ViktorHofer, @terrajobst 
27456	area-System.IO	API Proposal: Add Regex option to enumeration APIs	## Proposal    Now that we have the ability to specify the match type, we should expose `Regex` as an option:    ``` C#  namespace System.IO  {      public enum MatchType      {          Simple,          Win32,            /// <summary>          /// Expression is treated as a regular expression.          /// </summary>          /// <remarks>          /// Single line, culture invariant, explicit capture matching is used.          /// </remarks>          Regex      }  }    namespace System.IO.Enumeration  {      public static class FileSystemName      {          public static string TranslateWin32Expression(string expression);          public static bool MatchesWin32Expression(ReadOnlySpan<char> expression, ReadOnlySpan<char> name, bool ignoreCase = true);          public static bool MatchesSimpleExpression(ReadOnlySpan<char> expression, ReadOnlySpan<char> name, bool ignoreCase = true);            /// <summary>          /// Return true if the given regular expression matches the given name.          /// </summary>          /// <remarks>          /// Uses single line, invariant, explicit capture mode.          /// </remarks>          public static bool MatchesRegularExpression(ReadOnlySpan<char> expression, ReadOnlySpan<char> name, bool ignoreCase = true);      }  }  ```  ## Motivation    Partners are interested in having this exposed (MSBuild, PowerShell). Even though we don't have a span version of `Regex.IsMatch()`, exposing the API now will allow easier lighting up of higher performance, lower allocation implementations in the future. (As opposed to customers using `IsMatch` directly and needing to update their clients if we provide a span version in the future.)    ## Details    - We'll pick sensible RegexOptions as a default (as described in the signature comments)  - Users can override either by using Regex directly or using `?(imnsx)` options in their expressions
27453	area-System.Runtime	API Proposal: Add a Generic version of GetValues to Enum (probably GetName/GetNames)	I suggest to implement Generic version of GetValues method in the Enum class.    In present, if we going to get an typed array of some enum values we have to write following code:  `SomeEnum[] values = (SomeEnum[])Enum.GetValues(typeof(SomeEnum));`    It seems as unconvenient way.  In my opinion, the following Generics-based syntax should seems shorter, more convenient and safely (by reason of type casting necessity):  `SomeEnum[] values = Enum.GetValues<SomeEnum>();`    The possible way to implement this syntax is:  ```  public static TEnum[] GetValues<TEnum>() where TEnum : struct  {      Type enumType = typeof(TEnum);      return (TEnum[])enumType.GetEnumValues();  }  ```  This proposal is inspired by the great Generic-based version of Enum.TryParse method laying besides with legacy non-Generic version:  ```  public static bool TryParse(Type enumType, String value, out Object result)  public static bool TryParse<TEnum>(String value, out TEnum result) where TEnum : struct  ```  If proposal to implement Generic version of GetValues will be accepted I guess following Generics-based implementations of GetName GetNames should be implemented for symmetry reason:  ```  public static String GetName<TEnum>(Object value) where TEnum : struct  {      Type enumType = typeof(TEnum);      return enumType.GetEnumName(value);  }    public static String[] GetNames<TEnum>() where TEnum : struct  {      Type enumType = typeof(TEnum);      return enumType.GetEnumNames();  }  ```  I introduce possible implementation of this proposal in [dotnet/coreclr/pull#16557](https://github.com/dotnet/coreclr/pull/16557)    This is a small point improvement suggestion.  It can be implemented separately of as a part of total Enum improvements discussing in [dotnet/corefx/#15453](https://github.com/dotnet/corefx/issues/15453)
27451	area-System.Memory	[API change] Move Memory.TryGetXxx Extensions to MemoryMarshal.TryGetXxx	Proposed api  ```csharp  public static class MemoryMarshal  {      public static bool TryGetString(ReadOnlyMemory<char> readOnlyMemory, out string text, out int start, out int length);      public static bool TryGetArray(Memory<T> readOnlyMemory, out ArraySegment<T> arraySegment)  }  ```  Currently these methods are on `MemoryExtensions` or `Memory` for `TryGetArray` acting directly as methods on `Memory`  ```csharp  public static partial class MemoryExtensions  {      public static bool TryGetString(this ReadOnlyMemory<char> readOnlyMemory, out string text, out int start, out int length);  }  ```  ```csharp  public static partial struct Memory<T>  {      public bool TryGetArray(out ArraySegment<T> arraySegment)  }  ```  However, for consistency, and because they violate the window of visibility of the `Memory` they should probably move to `MemoryMarshal` to join their other friends `TryGetArray` and `TryGetOwnedMemory`.    /cc @KrzysztofCwalina @stephentoub @ahsonkhan @terrajobst @joshfree @jkotas 
27450	area-System.Net	AuthenticateAsServerAsync fails on Ubuntu with SSL routines:ssl3_get_client_hello:no shared cipher	The following code works fine when running under .Net Core 2.0 on Windows 10 with both Windows and Linux clients.     ```  var tlsCert = new X509Certificate2(tlsPfxFile);    var server = new Socket(SocketType.Stream, ProtocolType.Tcp);  server.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReuseAddress, true);  server.Bind(port.IPEndpoint);  server.Listen(512);    var socket = await server.AcceptAsync();  socket.NoDelay = true;    var stream = (Stream) new NetworkStream(socket, true);  var sslStream = new SslStream(stream, false);  await sslStream.AuthenticateAsServerAsync(tlsCert, false, SslProtocols.Tls | SslProtocols.Tls11 | SslProtocols.Tls12, false);  ```    Running the same code on Ubuntu (either real Ubuntu or Windows Subsystem for Linux) fails with:    > TLS init failed: A call to SSPI failed, see inner exception.: Interop+OpenSsl+SslException: SSL Handshake failed with OpenSSL error - SSL_ERROR_SSL. ---> Interop+Crypto+OpenSslCryptographicException: error:1408A0C1:SSL routines:ssl3_get_client_hello:no shared cipher  >    --- End of inner exception stack trace ---  >    at Interop.OpenSsl.DoSslHandshake(SafeSslHandle context, Byte[] recvBuf, Int32 recvOffset, Int32 recvCount, Byte[]& sendBuf, Int32& sendCount)  >    at System.Net.Security.SslStreamPal.HandshakeInternal(SafeFreeCredentials credential, SafeDeleteContext& context, SecurityBuffer inputBuffer, SecurityBuffer outputBuffer, Boolean isServer, Boolean remoteCertRequired)  > 
27449	area-System.IO	Path tests overhaul	Path tests weren't running due to a test infra or runtime bug (too many test methods in one class apparently). Cleaned up path tests, fixing issues and adding coverage.    cc: @danmosemsft, @Anipik, @maryamariyan, @pjanotti     See https://github.com/dotnet/coreclr/pull/16554, #27426
27448	area-System.Data	Provider-independent mechanism for automatic database command preparation	"ADO.NET has an explicit Prepare() API which can be very important for performance - the effect is dramatic on PostgreSQL and there's a potential for big gains also on Sqlite and on SqlServer (where the operation is currently a no-op, but could obviate sending the query SQL and resultset shape description on each query).    Unfortunately, when using data layers above ADO.NET (dapper, EF Core), it's usually impossible to benefit from preparation as the `DbCommand` API is hidden away. Npgsql deals with this problem via an internal, opt-in ""autoprepare"" feature - it counts the number of times a given SQL has been executed, and once a certain threshold is passed, automatically prepares the command. To avoid preparing too many commands (which could put a strain on the database), an LRU cache ejects old commands.    We should consider promoting this mechanism (or building something similar) to ADO.NET, so that all providers can benefit from it. This mechanism would implement all of the necessary tracking, and would  call `Prepare()` when the proper threshold is passed.    Note: when the threshold is reached, Npgsql currently executes both the preparation and the execution in a single round-trip, this can be important for thrashing scenarios.  Note: we should provide a way for specific providers to opt out of this when preparation really is a no-op (like current SqlClient), to avoid the overhead and added complexity."
27447	area-System.Data	Clarify persistency of prepared commands across pooled connection lifespan	ADO.NET has an explicit `Prepare()` API which can be very important for performance - the effect is dramatic on PostgreSQL and there's a potential for big gains also on Sqlite and on SqlServer (where the operation is currently a no-op, but could obviate sending the query SQL and resultset shape description on each query).    Unfortunately, this feature currently isn't very compatible with short-lived connection scenarios such as web applications: since `Prepare()` is invoked on `DbCommand`, the reasonable expectation from the API is that once the instance is disposed or the DbConnection is closed/disposed, the benefits of preparation disappear. So the benefits of prepare are currently restricted to applications which call `Prepare()` on a `DbCommand` instance, and then re-execute that instance many times on the same `DbConnection` - the opposite of how web applications work.    Since preparation is so important with PostgreSQL, Npgsql works around this problem by internally persisting command - when a prepared `NpgsqlCommand` is disposed, the prepared resources are kept internally on the physical connection, keyed on the SQL, even when the connection is returned to the pool. A subsequent call to `Prepare()` on the same physical connection will just look up those resources and reuse them.    It's worth thinking about this problem in a more general way in ADO.NET, to make sure that other providers benefit from prepared command persistency. This could mean the introduction of a new preparation API or something else.
27446	area-System.IO	Add SafeFindHandle	## Motivation  Handles returned by FindFirstFile on Windows should be closed with FindClose, not CloseHandle. Therefore a SafeFileHandle or similar is not appropriate for it. We have a SafeFindHandle internally, if we expose it publicly it is not necessary to reinvent it.    ## API    ```c#  namespace Microsoft.Win32.SafeHandles  {      public sealed partial class SafeFindHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid      {          protected override bool ReleaseHandle() { throw null; }      }  }  ```    ## Implementation     ```c#      internal sealed class SafeFindHandle : SafeHandle      {          protected override bool ReleaseHandle()          {              return Interop.Kernel32.FindClose(handle);          }      }  ```    cc @JeremyKuhne 
27445	area-System.Threading	Allocation-free awaitable async operations with ValueTask<T> and ValueTask	## Background  `ValueTask<T>` is currently a discriminated union of a `T` and a `Task<T>`.  This lets APIs that are likely to complete synchronously and return a value do so without allocating a `Task<T>` object to carry the result value.  However, operations that complete asynchronously still need to allocate a `Task<T>`.  There is no non-generic `ValueTask` counterpart today because if you have an operation that completes synchronously and successfully, you can just return `Task.CompletedTask`, no allocation.    That addresses the 80% case where synchronously completing operations no longer allocate.  But for cases where you want to strive to address the 20% case of operations completing asynchronously and still not allocating, you’re forced to play tricks with custom awaitables, which are one-offs, don’t compose well, and generally aren’t appropriate for public surface area.  `Task` and `Task<T>`, by design, never go from a completed to incomplete state, meaning you can’t reuse the same object; this has many usability benefits, but for APIs that really care about that last pound of performance, in particular around allocations, it can get in the way.    We have a bunch of new APIs in .NET Core 2.1 that return `ValueTask<T>`s, e.g. `Stream.ReadAsync`, `ChannelReader.ReadAsync`, `PipeReader.ReadAsync`, etc.  In many of these cases, we’ve simply accepted that they might allocate; in others, custom APIs have been introduced specific to that method.  Neither of these is a good place to be.    ## Proposal  I have implemented a new feature in `ValueTask<T>` and a counterpart non-generic `ValueTask` that lets these not only wrap a `T` result or a `Task<T>`, but also another arbitrary object that implements the `IValueTaskSource<T>` interface (or `IValueTaskSource` for the non-generic `ValueTask`).  An implementation of that interface can be reused, pooled, etc., allowing for an implementation that returns a `ValueTask<T>` or `ValueTask` to have amortized non-allocating operations, both synchronously completing and asynchronously completing.    ### The enabling APIs  First, we need to add these interfaces:  ```C#  namespace System.Threading.Tasks  {      public interface IValueTaskSource      {          bool IsCompleted { get; }          bool IsCompletedSuccessfully { get; }          void OnCompleted(Action<object> continuation, object state, ValueTaskSourceOnCompletedFlags flags);          void GetResult();      }        public interface IValueTaskSource<out TResult>      {          bool IsCompleted { get; }          bool IsCompletedSuccessfully { get; }          void OnCompleted(Action<object> continuation, object state, ValueTaskSourceOnCompletedFlags flags);          TResult GetResult();      }        [Flags]      public enum ValueTaskSourceOnCompletedFlags      {          None = 0x0,          UseSchedulingContext = 0x1,          FlowExecutionContext = 0x2,      }  }  ```  An object implements `IValueTaskSource` to be wrappable by `ValueTask`, and `IValueTaskSource<TResult>` to be wrappable by `ValueTask<TResult>`.    Then we add this ctor to `ValueTask<TResult>`:  ```C#  namespace System.Threading.Tasks  {      public struct ValueTask<TResult>      {          public ValueTask(IValueTaskSource<TResult> source);          ...      }  }  ```    Then we add a non-generic `ValueTask` counterpart to `ValueTask<TResult>`.  This mirrors the `ValueTask<TResult>` surface area, except that it doesn’t have a `Result` property, doesn’t have a ctor that takes a `TResult`, uses `Task` in places where `Task<TResult>` was used, etc.  ```C#  namespace System.Threading.Tasks  {      [AsyncMethodBuilder(typeof(AsyncValueTaskMethodBuilder))]      public readonly partial struct ValueTask : IEquatable<ValueTask>      {          public ValueTask(Task task);          public ValueTask(IValueTaskSource source);          public bool IsCanceled { get; }          public bool IsCompleted { get; }          public bool IsCompletedSuccessfully { get; }          public bool IsFaulted { get; }          public Task AsTask();          public ConfiguredValueTaskAwaitable ConfigureAwait(bool continueOnCapturedContext);          public override bool Equals(object obj);          public bool Equals(ValueTask other);          public ValueTaskAwaiter GetAwaiter();          public override int GetHashCode();          public static bool operator ==(ValueTask left, ValueTask right);          public static bool operator !=(ValueTask left, ValueTask right);      }  }  ```    And finally we add the System.Runtime.CompilerServices goo that allows `ValueTask` to be awaited and used as the return type of an async method:  ```C#  namespace System.Runtime.CompilerServices  {      public struct AsyncValueTaskMethodBuilder      {          public static AsyncValueTaskMethodBuilder Create();            public void Start<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine;          public void SetStateMachine(IAsyncStateMachine stateMachine);          public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine;          public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine;            public void SetResult();          public void SetException(Exception exception);          public ValueTask Task;      }        public readonly struct ValueTaskAwaiter : ICriticalNotifyCompletion      {          public bool IsCompleted { get; }          public void GetResult() { }          public void OnCompleted(Action continuation);          public void UnsafeOnCompleted(Action continuation);     }        public readonly struct ConfiguredValueTaskAwaitable      {          public ConfiguredValueTaskAwaiter GetAwaiter();          public readonly struct ConfiguredValueTaskAwaiter : ICriticalNotifyCompletion          {              public bool IsCompleted { get; }              public void GetResult();              public void OnCompleted(Action continuation);              public void UnsafeOnCompleted(Action continuation);          }      }  }  ```    ### Changes to Previously Accepted APIs  At the very least, we would use the `ValueTask` and `ValueTask<T>` types in the following previously accepted/implemented APIs that are shipping in 2.1:  - **Pipelines**. Instead of pipelines having a custom `PipeAwaiter<T>` type, it will return `ValueTask<T>` from the `ReadAsync` and `FlushAsync` methods that currently return `PipeAwaiter`.  `PipeAwaiter<T>` will be deleted. `Pipe` uses this to reuse the same pipe object over and over so that reads and flushes are allocation-free.  - **Channels**. The `WaitToReadAsync` and `WaitToWriteAsync` methods will return `ValueTask<bool>` instead of `Task<bool>`. The `WriteAsync` method will return `ValueTask` instead of `Task`. At least some of the channel implementations, if not all, will pool and reuse objects backing these value tasks.  - **Streams**. The new `WriteAsync(ReadOnlyMemory<byte>, CancellationToken)` overload will return `ValueTask` instead of `Task`. `Socket`’s new `ReceiveAsync`/`SendAsync` methods that are already defined to return `ValueTask<int>` will take advantage of this support, making sending and receiving on a socket allocation free.  `NetworkStream` will then expose that functionality via `ReadAsync`/`WriteAsync`. `FileStream` will potentially also pool so as to make synchronous and asynchronous reads/writes allocation-free.  - **WebSockets**. The new `SendAsync(ReadOnlyMemory<byte>, …)` overload will return `ValueTask` instead of `Task`. Many `SendAsync` calls just pass back the result from the underlying `NetworkStream`, so this will incur the benefits mentioned above.    There are likely to be other opportunities in the future as well.  And we could re-review some of the other newly added APIs in .NET Core 2.1, e.g. `TextWriter.WriteLineAsync(ReadOnlyMemory<char>, ...)`, to determine if we want to change those from returning `Task` to `ValueTask`. The tradeoff is one of `Task`'s usability vs the future potential for additional optimization.    ### Limitations  `Task` is powerful, in large part due to its “once completed, never go back” design.  As a result, a `ValueTask<T>` that wraps either a `T` or a `Task<T>` has similar power.  A `ValueTask<T>` that wraps an `IValueTaskSource<T>` can be used only in much more limited ways:  - The 99.9% use case: either directly await the operation (e.g. `await SomethingAsync();`), await it with configuration (e.g. `await SomethingAsync().ConfigureAwait(false);`), or get a Task out (e.g. `Task t = SomethingAsync().AsTask();`).  Using `AsTask()` incurs allocation if the `ValueTask`/`ValueTask<T>` wraps something other than a `Task`/`Task<T>`.  - Once you’ve either awaited the `ValueTask`/`ValueTask<T>` or called `AsTask`, you must never touch it again.  - With a `ValueTask<T>` that wraps a `Task<T>`, today you can call `GetAwaiter().GetResult()`, and if it hasn’t completed yet, it will block.  That is unsupported for a `ValueTask<T>` wrapping an `IValueTaskSource<T>`, and thus should be generally discouraged unless you're sure of what it's wrapping. `GetResult` must only be used once the operation has completed, as is guaranteed by the await pattern.  - With a `ValueTask<T>` that wraps a `Task<T>`, you can await it an unlimited number of times, both serially and in parallel.  That is unsupported for a `ValueTask<T>` wrapping an `IValueTaskSource<T>`; it can be `await`ed/`AsTask`'d once and only once.  - With a `ValueTask<T>` that wraps a `Task<T>`, you can call any other operations in the interim and then await the `ValueTask<T>`.  That is unsupported for a `ValueTask<T>` wrapping an `IValueTaskSource<T>`; it should be `await`ed/`AsTask`’d immediately, as the underlying implementation may be used for other operation, subject to whatever the library author chose to do.  - You can choose to explicitly call `IsCompletedSuccessfully` and then use `Result` or `GetAwaiter().GetResult()`, but that is the only coding pattern outside of `await`/`AsTask` that’s supported.  We will need to document that `ValueTask`/`ValueTask<T>` should only be used in these limited patterns unless you know for sure what it wraps and that the wrapped object supports what's being done.  And APIs that return a `ValueTask`/`ValueTask<T>` will need to be clear on the limitations, in hopes of preserving our ability to change the backing store behind `ValueTask<T>` in the future, e.g. an API that we ship in 2.1 that returns `ValueTask<T>` around a `Task<T>` then in the future instead wrapping an `IValueTaskSource<T>`.    Finally, note that as with any solution that involves object reuse and pooling, usability/diagnostics/debuggability are impacted.  If an object is used after it's already been effectively freed, strange/bad behaviors can result.    ### Why now?  If we don’t ship this in 2.1, we will be unable to do so as effectively in the future:  - Some methods (e.g. the new `Stream.WriteAsync` overload) are currently defined to return `Task` but should be changed to return `ValueTask`.  - Some methods return `ValueTask<T>`, but if we’re not explicit about the limitations of how it should be used, it’ll be a breaking change to modify what it backs in the future.  - Various types (e.g. `PipeAwaiter<T>`) will be instant legacy.  - Prior to .NET Core 2.1, `ValueTask<T>` was just OOB.  It’s now also in System.Private.CoreLib, with core types like `Stream` depending on it.    ### Implementation Status  With the exception of pipelines, I have these changes implemented across coreclr and corefx.  I can respond to any changes from API review, clean things up, and get it submitted as PRs across coreclr and corefx.  Due to the breaking changes in existing APIs, it will require some coordination across the repos.    (EDIT stephentoub 2/25: Renamed IValueTaskObject to IValueTaskSource.)  (EDIT stephentoub 2/25: Changed OnCompleted to accept object state.)
27442	area-System.Security	Test failure: System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTests/Decrypt_512_NoData_FixedValue	Opened on behalf of @danmosemsft  Note this is on .NET Framework.   The test `System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTests/Decrypt_512_NoData_FixedValue` has failed. ``` Assert.Equal() Failure\r     Expected: Byte[] []\r     Actual:   Byte[] [0, 0, 0, 0, 0, ...]          Stack Trace:             at System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTests.VerifySimpleDecrypt(Byte[] encodedMessage, CertLoader certLoader, ContentInfo expectedContent) ``` Build : Master - 20180224.02 (Full Framework Tests) Failing configurations: - Windows.10.Amd64-x86   - Release - Windows.10.Amd64-x64   - Release  @bartonjs
27441	area-System.Net	revert change to existing redirect test and split into new test	Fixes #27363     I've reverted the additions I made to the AllowAutoRedirect_True_ValidateNewMethodUsedOnRedirection test and instead split them into a separate test, which is disabled for WinHttpHandler (issue #27440 to track).    @stephentoub @davidsh @ahsonkhan @dotnet/ncl   
27440	area-System.Net	Test issue: AllowAutoRedirect_True_PostToGetDoesNotSendTE fails occasionally on WinHttpHandler	Something about how the loopback server is sending the response before the request is fully received, and/or the way the server is shutting down the connection, causes occasional failures with WinHttpHandler.    The specific error is:    System.Net.Http.HttpRequestException : Error while copying content to a stream.  ---- System.IO.IOException : The write operation failed, see inner exception.  -------- System.Net.Http.WinHttpException : The connection with the server was terminated abnormally    We should change the test so that the server behaves in a way that makes WinHttpHandler happy.
27439	area-System.Data	Dont allow exceptions to emerge on the threadpool	PoolCreateRequest handles creation of new connections on the thread pool. However when an exception occurs, it is bubbled up to the thread pool. This is a regression from .Net Framework and causes applications using Min Pool Size to crash.     The solution is to catch all exceptions during connection open and to swallow them. This will not change the exception that app sees from Connection Pool, as the error is bubbled up from another code path where the errorWaitHandle is set during connection Open.     The test added, makes sure that we can open 3 bad connections using MinPoolSize. Before the fix, the test would crash after the first exception.     Fixes https://github.com/dotnet/corefx/issues/14615
27436	area-System.IO	[WIP] Prototype removing RunningLength and delegating seek to IMemoryList	API Review issue: https://github.com/dotnet/corefx/issues/27435      /cc @davidfowl @KrzysztofCwalina @ahsonkhan 
27435	area-System.IO	Remove RunningIndex add a way for IMemoryList to provide seek implementation	"Addresses https://github.com/dotnet/corefx/issues/26603    Right now `ReadOnlySequence` walks linked list of segments to implement `GetPosition` operation. We could envision other implementation that could provide better performance in some cases. This API suggestion  focuses on delegating more functionality to `IMemoryList`.    I propose the following change:    ``` diff  public interface IMemoryList<T>  {  -    public long RunningIndex { get; }  +    /// Returns <see cref=""IMemoryList{T}""/> that contains <typeparamref name=""T""/> item offset from beginning of current <see cref=""IMemoryList{T}""/> by <paramref name=""offset""/>.  +    /// <paramref name=""localIndex""/> would contain index inside returned <see cref=""IMemoryList{T}""/>  +    public IMemoryList<T> GetNext(long offset, out int localIndex);    +     /// Returns count of items between start of this <see cref=""IMemoryList{T}""/> to <paramref name=""memoryList""/>.  +    public long GetLength(IMemoryList<T> memoryList);  }  ```    Has additional benefit of doing less interface calls per operation (GetLength 2->1, GetPosition N->1).    /cc @terrajobst @KrzysztofCwalina @davidfowl   "
27434	area-System.Memory	Complete debugger story for ReadOnlySequence	We need to add implementation for `ReadOnlySequence<char>` same as in `Span<char>` and `Memory<char>`.    We also need a better way to display positions - with masks removed,  possibly segments visualized.    /cc @ahsonkhan @davidfowl @KrzysztofCwalina 
27433	area-System.ComponentModel	NETCore System.ComponentModel.Composition (MEF1) fails	"Hi. Could you help me to make a simple example with mef1? Thank you in advance.  My system is Archlinux x64. I'm using component from myget.org (dotnet add package System.ComponentModel.Composition --version 4.5.0-preview2-26223-06 --source https://dotnet.myget.org/F/dotnet-core/api/v3/index.json).  My code is here:    ```  dotnet --version  2.1.4  ```  ```  pwd  /at/c#  ```  Contract (in /at/c#/example_console_mef_contract):  ```csharp  cat /at/c#/example_console_mef_contract/Class1.cs  using System;  namespace example_console_mef_contract  {      public interface IHelloWorld      {          string HelloWorld();      }  }  ```  Library aka plugin (in /at/c#/example_console_mef_lib). Csproj file includes a reference to contract project.  ```csharp  cat /at/c#/example_console_mef_lib/Class1.cs  using System;  using System.ComponentModel.Composition;  using System.ComponentModel.Composition.Hosting;  using System.Reflection;  using example_console_mef_contract;  namespace example_console_mef_lib  {      [Export(typeof(example_console_mef_contract.IHelloWorld))]      public class MefHelloWorld : IHelloWorld      {          public string HelloWorld()          {              return ""Hello world"";          }      }  }  ```  ```  cat /at/c#/example_console_mef_lib/example_console_mef_lib.csproj  <Project Sdk=""Microsoft.NET.Sdk"">    <PropertyGroup>      <TargetFramework>netstandard2.0</TargetFramework>    </PropertyGroup>    <ItemGroup>      <PackageReference Include=""System.ComponentModel.Composition"" Version=""4.5.0-preview2-26223-06"" />    </ItemGroup>    <ItemGroup>    **<ProjectReference Include=""/at/c#/example_console_mef_contract/example_console_mef_contract.csproj"" />**    </ItemGroup>  </Project>  ```  Main application (in /at/c#/example_console_mef). Csproj file includes a reference to contract project.  ```csharp  cat /at/c#/example_console_mef/Program.cs  using System;  using System.ComponentModel.Composition;  using System.ComponentModel.Composition.Hosting;  using System.Reflection;  using example_console_mef_contract;  namespace example_console_mef  {      class Program      {          private CompositionContainer _container;          [Import(typeof(example_console_mef_contract.IHelloWorld))]          private example_console_mef_contract.IHelloWorld helloWorld;          private Program()          {              var catalog = new AggregateCatalog();              catalog.Catalogs.Add(new AssemblyCatalog(typeof(Program).Assembly));              catalog.Catalogs.Add(new DirectoryCatalog(@""/at/c#/example_console_mef_lib/bin/Debug/netstandard2.0""));              _container = new CompositionContainer(catalog);              try              {                  this._container.ComposeParts(this);              }              catch (CompositionException compositionException)              {                  Console.WriteLine(compositionException.ToString());              }          }          static void Main(string[] args)          {              Program p = new Program();  //            Console.WriteLine(p.helloWorld.HelloWorld());  //            Console.ReadKey();          }      }  }  ```  ```  cat /at/c#/example_console_mef/example_console_mef.csproj  <Project Sdk=""Microsoft.NET.Sdk"">    <PropertyGroup>      <OutputType>Exe</OutputType>      <TargetFramework>netcoreapp2.0</TargetFramework>    </PropertyGroup>    <ItemGroup>      <PackageReference Include=""System.ComponentModel.Composition"" Version=""4.5.0-preview2-26223-06"" />    </ItemGroup>    <ItemGroup>    **<ProjectReference Include=""/at/c#/example_console_mef_contract/example_console_mef_contract.csproj"" />**    </ItemGroup>  </Project>  ```  Contract and library projects compiled without errors.   Now I try run main application but it fails:  ```  cd  /at/c#/example_console_mef  dotnet run  System.ComponentModel.Composition.ChangeRejectedException: The composition remains unchanged. The changes were rejected because of the following error(s): The composition produced a single composition error. The root cause is provided below. Review the CompositionException.Errors property for more detailed information.    1) No exports were found that match the constraint:          ContractName    example_console_mef_contract.IHelloWorld          RequiredTypeIdentity    example_console_mef_contract.IHelloWorld    Resulting in: Cannot set import 'example_console_mef.Program.helloWorld (ContractName=""example_console_mef_contract.IHelloWorld"")' on part 'example_console_mef.Program'.  Element: example_console_mef.Program.helloWorld (ContractName=""example_console_mef_contract.IHelloWorld"") -->  example_console_mef.Program       at System.ComponentModel.Composition.CompositionResult.ThrowOnErrors(AtomicComposition atomicComposition)     at System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Compose(CompositionBatch batch)     at example_console_mef.Program..ctor() in /at/c#/example_console_mef/Program.cs:line 26  ```"
27431	area-Microsoft.CSharp	Are exceptions from failed dynamic binding clear enough?	"When you use `dynamic` incorrectly, the resulting `RuntimeBinderException` can be fairly confusing. Can the situation be improved?    For example, consider this code (based on code from a confused user from https://github.com/dotnet/docs/issues/4487):    ```c#  dynamic fileContent = 42;  new System.Net.Http.StringContent(fileContent, Encoding.UTF8, ""application/base64"");  ```    This throws:    ```  Microsoft.CSharp.RuntimeBinder.RuntimeBinderException: The best overloaded method match for  'System.Net.Http.StringContent.StringContent(string, System.Text.Encoding, string)' has some  invalid arguments     at CallSite.Target(Closure , CallSite , Type , Object , Encoding , String )     at System.Dynamic.UpdateDelegates.UpdateAndExecute4[T0,T1,T2,T3,TRet](CallSite site, T0  arg0, T1 arg1, T2 arg2, T3 arg3)     at UserQuery.RunUserAuthoredQuery()  ```    To somebody who does not know how `dynamic` is implemented, this exception is going to be very confusing, because:    * There is almost no indication that this exception is related to `dynamic` (except for the `System.Dynamic` namespace in the stack trace).  * There is no indication regarding which arguments are invalid.  * Nitpick: The error message talks about overloaded method, when it's actually a constructor.    Since the exception type can't really be changed because of backwards compatibility, that leaves the exception message. Maybe it could be changed to something like the following?    > Error in dynamic binding: The best overloaded constructor match for 'System.Net.Http.StringContent.StringContent(string, System.Text.Encoding, string)' has some invalid arguments:  > Argument 1: cannot convert from 'int' to 'string'    Do you agree that this is something that should be improved? Is changing the error message to something like the above the way to go?"
27430	area-System.Memory	Add tests for empty array in Memory/MemoryMarshal	Depends on https://github.com/dotnet/coreclr/pull/16529
27428	area-System.Net	add basic and digest authentication for tunnel/https proxy in SocketHttpHandler	this allows https request to go through proxy requiring basic or digest authentication.   Note, that this builds on top of some pending changes and it will not work on its own.  There is now unit test yet as that also depending PR. I'm going to add more tests as follow-op PR.    If preferable I think I can refactor this more and get more sharing with AuthenticationHandler code and existing proxy. But this change works and I wanted to get more feedback.     Also note, that we will throw if authentication to proxy fails. That is different from existing handlers.   At least curl will return failed response to the caller. 
27425	area-Serialization	Add references parameter for sgen.	#27367   @zhenlan @mconnew @yujayee 
27424	area-System.Data	Improve SqlDataRecord test coverage	Improved code coverage (+83 lines), added some tests for edge case, see #27416     Fixes #27416  cc @saurabh500 
27423	area-System.Data	SqlConnection.GetSchema() Throws Exception in Release Build	"In a UWP app, SqlConnection.GetSchema(string, string[] args) will throw an ""ArgumentNull"" exception in a release build, with or without code optimization. Same exact GetSchema() call works fine in debug builds. I can also otherwise successfully connect and query the server (a remote machine). Tried SQL Server versions 2012 & 2017.    Specific Exception is a System.AggregateException, with an Inner Exception of ArgumentNull: ""value cannot be null. Parameter name: xmlStream.""    Sample app is [here](https://github.com/tuggernuts/GetSchema)    Using Visual Studio 15.5.7, targeting build 16299."
27422	area-System.IO	Add default threshold size to pipe	To prevent people from getting OOM. I think 64k is large enough.  /cc @davidfowl @KrzysztofCwalina 
27419	area-Infrastructure	Update BuildTools to 2.1.0-preview2-02522-03	This version includes a fix to start unblocking dependency auto-update flow after GitHub stopped allowing weak cryptographic standards yesterday. dotnet/core-eng#2734
27418	area-System.IO	API Proposal: Path Span APIs that write into a specified buffer	We've added `System.IO.Path` overloads that take spans and output strings. To facilitate additional scenarios we should create overloads that allow you to specify the buffer to write to, rather than creating a string. `Path.GetFullPath` and `Path.Combine` are the key APIs here.    We've added the following for 2.1:    ``` C#  namespace System.IO  {      public static class Path      {          public static bool TryJoin(ReadOnlySpan<char> path1, ReadOnlySpan<char> path2, Span<char> destination, out int charsWritten);          public static bool TryJoin(ReadOnlySpan<char> path1, ReadOnlySpan<char> path2, ReadOnlySpan<char> path3, Span<char> destination, out int charsWritten)      }  }  ```    What we'd like to consider adding:    ``` C#  namespace System.IO  {      public static class Path      {          public static bool TryGetTempPath(Span<char> destination, out int charsWritten);          public static bool TryGetRandomFileName(Span<char> destination, out int charsWritten);          public static bool TryGetRelativePath(ReadOnlySpan<char> relativeTo, ReadOnlySpan<char> path, Span<char> destination, out int charsWritten);          public static bool TryGetFullPath(ReadOnlySpan<char> path, Span<char> destination, out int charsWritten);          public static bool TryGetFullPath(ReadOnlySpan<char> path, ReadOnlySpan<char> basePath, Span<char> destination, out int charsWritten);      }  }  ```    ### Notes    - Often we know what the needed buffer size will likely be, how do / should we express that from the API?     - We don't know positively as the current working directory can be changed, so the char count _can_ change    
27417	area-System.Runtime	[System.Runtime.InteropServices] Introduce broader platform definitions. 	"Unity, Xamarin and Mono users suffers from a historic problem with platform detection. This patch introduces definitions for all the existing platforms that .NET supports beyond .NET Core via Unity and  Xamarin.    To cope with the historical setting that OSX has been used in existing code to probe for an Apple OS (iOS, tvOS, watchOS), we introduce new values for all four apple platforms (macOS, iOS, tvOS, watchOS) and also return true when probed for the legacy OSX setting.    The same principle is applied to Linux, we will continue to return true, but the more specific versions of Tizen and Android are supported.    The list has been expanded to all the platforms currently supported by Mono and Unity.    # Proposed Changes    The System.Runtime.InteropServices.OSPlatform is updated to surface the following public definitions:    ```csharp          public static OSPlatform Android { get; } = new OSPlatform(""ANDROID"");            public static OSPlatform iOS { get; } = new OSPlatform(""IOS"");     // Returns true for Linux, Tizen and Android systems          public static OSPlatform Linux { get; } = new OSPlatform(""LINUX"");            public static OSPlatform macOS { get; } = new OSPlatform(""MACOS"");            public static OSPlatform N3DS { get; } = new OSPlatform(""3DS"");      // This one has historically been used as ""Apple platforms"", so it returns true   // on iOS, tvOS, macOS, watchOS.          public static OSPlatform OSX { get; } = new OSPlatform(""OSX"");            public static OSPlatform PlayStation4 { get; } = new OSPlatform(""PS4"");            public static OSPlatform PlayStationPortable2 { get; } = new OSPlatform(""PSP2"");            public static OSPlatform PlayStationVita { get; } = new OSPlatform(""PSVITA"");            public static OSPlatform Switch { get; } = new OSPlatform(""SWITCH"");             public static OSPlatform Tizen { get; } = new OSPlatform(""TIZEN"");            public static OSPlatform tvOS { get; } = new OSPlatform(""TVOS"");            public static OSPlatform watchOS { get; } = new OSPlatform(""WATCHOS"");            public static OSPlatform WebAssembly { get; } = new OSPlatform(""WEBASSEMBLY"");            public static OSPlatform WiiU { get; } = new OSPlatform(""WIIU"");            public static OSPlatform Windows { get; } = new OSPlatform(""WINDOWS"");            public static OSPlatform XboxOne { get; } = new OSPlatform(""XBOXONE"");  ```    Additionally, `RuntimeInformation`'s `IsOSPlatform` method is modified to cope with the aliasing described before, and Android and Tizen systems are Linux systems, and macOS, tvOS, iOS and watchOS are reported as OSX systems.    Twist: we could make OSX deprecated as well, and introduce an additional AppleOS definition or a Darwin definition to cover Apple-based OSes.    # PR    A pull request with the first batch is available here:    https://github.com/dotnet/corefx/pull/27378    "
27416	area-System.Data	Improve SqlDataRecord test coverage	Improve SqlDataRecord test coverage.   cc @remibou
27413	area-System.Net	Don't reset content stream position on CurlHandler.	fixes #23782    @dotnet/ncl 
27412	area-System.Memory	TryGetArray(ReadOnlyMemory<T>.Empty) returns false	This is an API quirk I ran into when using `ReadOnlyMemory<byte>` to do some parsing the other in SignalR.    ```C#  var isArray = MemoryMarshal.TryGetArray(ReadOnlyMemory<byte>.Empty, out var array);  Console.WriteLine(isArray);  ```    This prints false and I think it should print true. We should back the Empty read only memory with an empty array as it makes it easier to interop with systems that expect arrays.    /cc @KrzysztofCwalina @ahsonkhan @stephentoub @jkotas 
27411	area-System.Net	Re-enable initlocals clearing in System.Net.Sockets on Unix	We disabled it because some ReceiveMessageFrom tests were failing.  The issue turned out to be that we weren't explicitly clearing an IPPacketInformation struct before handing it to native code, and the native code wasn't clearing it.  This fixes that (https://github.com/dotnet/corefx/pull/27411/files#diff-74b2e83ee829756a9dc8177b5154b7f7R50).  Along with it, I initialized a few other variables, just for good measure.    Fixes https://github.com/dotnet/corefx/issues/27392  cc: @erozenfeld, @geoffkizer 
27410	area-System.Memory	Use TrailingZeroCount rather than LocateLastFoundByte	`Bmi1.TrailingZeroCount` isn't currently supported; so can't test, so this is mostly for feedback  ```csharp  return i * 8 + (int)Bmi1.TrailingZeroCount(candidate) >> 3;  ```  Using `LeadingZeroCount` ended up more instructions than the current flow  ```csharp  return i * 8 + (int)(((match ^ (match - 1)) * XorPowerOfTwoToHighByte) >> 57)  ```  Changing multiply to Lzcnt and subtraction  ```csharp  return i * 8 + (63 - (int)Lzcnt.LeadingZeroCount((candidate ^ (candidate - 1)))) >> 3;  ```    /cc @fiigii @tannergooding
27407	area-System.Net	Fix ManagedWebSocket cancellation race condition	When a cancelable cancellation token is passed to Receive/SendAsync, the code registers with the token to abort the web socket.  The resulting exception is then translated into an OperationCanceledException if _abort is true.  But this logic doesn't count on the possibility that the underlying Read/WriteAsync on the transport stream could actually throw a cancellation exception.  If it does, there's a race condition as to whether the web socket's abort flag will be set in time; if it is, we wrap the cancellation exception in another cancellation exception, and if it's not, we treat it as a non-cancellation exception.  This commit fixes that, by explicitly allowing OperationCanceledExceptions to proceed uninterrupted.  This should fix the ReceiveAsync_AfterCancellationDoReceiveAsync_ThrowsWebSocketException test, which recently started failing sporadically, I believe because we improved the cancellation support in SocketsHttpHandler, on top of which ClientWebSocket now sits.    Fixes https://github.com/dotnet/corefx/issues/27406  cc: @geoffkizer, @davidsh, @wfurt, @anurse 
27406	area-System.Net	ReceiveAsync_AfterCancellationDoReceiveAsync_ThrowsWebSocketException sporadically failing in CI	e.g. https://mc.dot.net/#/user/geoffkizer/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/edf649a71bbe7c160274113d0f1c5349f1b266d1/workItem/System.Net.WebSockets.Client.Tests/analysis/xunit/System.Net.WebSockets.Client.Tests.CancelTest~2FReceiveAsync_AfterCancellationDoReceiveAsync_ThrowsWebSocketException(server:%20ws:~2F~2Fcorefx-net.cloudapp.net~2FWebSocket~2FEchoWebSocket.ashx)  ```  Unhandled Exception of Type Xunit.Sdk.ThrowsException  Message :  Assert.Throws() Failure  Expected: typeof(System.OperationCanceledException)  Actual:   typeof(System.Net.WebSockets.WebSocketException): The remote party closed the WebSocket connection without completing the close handshake.  Stack Trace :     at System.Net.WebSockets.ManagedWebSocket.ReceiveAsyncPrivate[TWebSocketReceiveResultGetter,TWebSocketReceiveResult](Memory`1 payloadBuffer, CancellationToken cancellationToken, TWebSocketReceiveResultGetter resultGetter) in /mnt/j/workspa  ```
27405	area-System.Security	X509Certificate2Collection.Find() does not return the same certificates as full framework	Hi,    I have a strange issue with handling of certificates from the windows certificate store. On full .NET framework, this code returns the expected certificates, on dotnet core, the very same code does not return any certificates from the store.    The code is the following:    ```  var certificates = new List<X509Certificate2>();    using (var myStore = new X509Store(StoreName.My, StoreLocation.CurrentUser))  {   myStore.Open(OpenFlags.ReadOnly);   var certsWithCorrectUsage = myStore.Certificates.Find(X509FindType.FindByKeyUsage, X509KeyUsageFlags.DataEncipherment.ToString(), true);     foreach (var cert in certsWithCorrectUsage)   {    if (cert.HasPrivateKey)    {     certificates.Add(cert);    }   }  }    return certificates;  ```    When debugging into the `.Find()` method I get down into `FindPal.VerifyCertificateIgnoringErrors()`, and there on the `chainPal.ChainStatus` I see the following error messages:  ```  The signature of the certificate cannot be verified.  A certificate chain processed, but terminated in a root certificate which is not trusted by the tust provider.  ```    I used the following powershell script to generate a root certificate, install it in the Trusted Root Certification Authorities, and create two other test certificates which are signed by this root cert:    [createcerts.ps1.txt](https://github.com/dotnet/corefx/files/1751455/createcerts.ps1.txt)    Why doesn't the code on dotnet core find the root certificate, while it obviously seems to be trusted by my machine and also the full framework finds these certificates as valid for the requested purpose.
27403	area-System.Memory	Add GetPosition overload to ReadOnlySequence that only takes an int/long	Today GetPosition requires a relative offset but there are scenarios where you just want to get the position from the start. Today that looks like:    ```C#  // Get position 100  var position = sequence.GetPosition(sequence.Start, 100);  ```    ## Proposal    Add GetPosition that takes an int/long that assumes sequence.Start is the origin:    ```C#  var position = sequence.GetPosition(100);  ```    /cc @pakrym @KrzysztofCwalina @ahsonkhan @terrajobst @halter73   
27402	area-System.Diagnostics	System.Diagnostics.Tests.ProcessTests.TestStartWithNormalUser failed in CI	failed test: System.Diagnostics.Tests.ProcessTests.TestStartWithNormalUser    detail: https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_debug/4450/testReport/System.Diagnostics.Tests/ProcessTests/TestStartWithNormalUser/    MESSAGE:  Assert.NotNull() Failure    STACK TRACE:  ~~~  at System.Diagnostics.Tests.ProcessTests.GetCurrentRealUserName() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/src/System.Diagnostics.Process/tests/ProcessTests.Unix.cs:line 373   at System.Diagnostics.Tests.ProcessTests.TestStartWithNormalUser() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/src/System.Diagnostics.Process/tests/ProcessTests.Unix.cs:line 322  ~~~
27401	area-System.IO	Path changes resulting in failing Common NormalizeDirectorySeparatorTests	From https://mc.dot.net/#/user/dotnet-bot/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/4fb11f22f98f2106002799957aa0993cbf188b4e/workItem/Common.Tests/analysis/xunit/Tests.System.IO.PathInternalTests_Windows~2FNormalizeDirectorySeparatorTests(path:%20%5C%22%20%20%20%20~2F~2F%5C%22,%20expected:%20%5C%22%5C%5C%5C%5C%5C%5C%5C%5C%5C%22)    ```  Unhandled Exception of Type Xunit.Sdk.EqualException  Message :  Assert.Equal() Failure            ↓ (pos 0)  Expected: \\\\  Actual:       \\            ↑ (pos 0)  Stack Trace :     at Tests.System.IO.PathInternalTests_Windows.NormalizeDirectorySeparatorTests(String path, String expected) in D:\j\workspace\windows-TGrou---74aa877a\src\Common\tests\Tests\System\IO\PathInternal.Windows.Tests.cs:line 126  ```    Test disabled in #27398
27400	area-System.Net	System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Authentication_Test.HttpClientHandler_MultipleAuthenticateHeaders_Succeeds failed in CI	failed test: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Authentication_Test.HttpClientHandler_MultipleAuthenticateHeaders_Succeeds    detail: https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_debian8.4_release/318/testReport/System.Net.Http.Functional.Tests/SocketsHttpHandler_HttpClientHandler_Authentication_Test/HttpClientHandler_MultipleAuthenticateHeaders_Succeeds_authenticateHeader____WWW_Authenticate__Basic_realm_____hello______r__nWWW_Aut______/    MESSAGE:  ~~~  Assert.Equal() Failure\nExpected: OK\nActual: Unauthorized  ~~~  STACK TRACE:  ~~~  at System.Net.Http.Functional.Tests.HttpClientHandler_Authentication_Test.<>c.<<-ctor>b__10_0>d.MoveNext() in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_debian8.4_release/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs:line 29 --- End of stack trace from previous location where exception was thrown ---   at System.Net.Http.Functional.Tests.HttpClientHandler_Authentication_Test.<>c__DisplayClass7_0.<<HttpClientHandler_MultipleAuthenticateHeaders_Succeeds>b__0>d.MoveNext() in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_debian8.4_release/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs:line 89 --- End of stack trace from previous location where exception was thrown ---   at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_debian8.4_release/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 66   at System.Net.Http.Functional.Tests.HttpClientHandler_Authentication_Test.HttpClientHandler_MultipleAuthenticateHeaders_Succeeds(String authenticateHeader) in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_debian8.4_release/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs:line 85 --- End of stack trace from previous location where exception was thrown ---  ~~~
27396	area-Serialization	Support NegativeInfinity and PositiveInfinity as default value in sgen	Make the similar fix as #19724 for NegativeInfinity  and PositiveInfinity 
27395	area-System.Security	Add CU\My to the search path for resolving cert chains on Linux	No test is being committed because it requires editing the user's CU\My store, which doesn't make me happy.  This was tested by taking the CertificateRequest chain tests, saving the created intermediate to CU\My, removing the intermediate from ExtraStore, and then removing them at the end of the test.    After the test succeeded on Windows (and failed on Linux), the fix was made on the Linux chain builder driver.    Fixes #26020.
27394	area-System.Security	Enable RSA-OAEP(SHA-2) and RSA-PSS on Unix systems	This change provides an implementation of the OAEP padding algorithm and  the PSS encoding and verification routines in managed code. On the platforms  where we currently lack support for SHA-2-based OAEP and/or PSS the  managed implementation will be used in conjunction with the native layer in  a pre-padded operational context.    The suite of tests which were added uncovered other bugs which are being  addressed in this change, as well.  Mainly that RSACng and  RSASecurityTransforms both failed at encrypting zero-length data.  To solve  that problem the RSA padding class can build PKCS#1 encryption padding,  but since the native layers are capable of correctly decrypting the payloads  no unpadding code is needed at this time.    Fixes #2522  Fixes #2523  Fixes #27120
27393	area-Serialization	Area-Serialization Sprint 132	The issue is for tracking issues to be done in sprint 132 (due by 3/16/2018)
27392	area-System.Net	Re-enable clearing of initlocals in System.Net.Sockets on Unix	Temporarily disabled in https://github.com/dotnet/corefx/pull/27345 due to failures in ReceiveMessageFrom tests.  Needs investigation.
27391	area-System.Security	"System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTests.Decrypt_512_CekDoesNotDecrypt_FixedValue failed with ""System.NullReferenceException"""	failed test: System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTests.Decrypt_512_CekDoesNotDecrypt_FixedValue     detail: https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_centos7.1_debug/324/testReport/System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests/DecryptTests/Decrypt_512_CekDoesNotDecrypt_FixedValue/    MESSAGE:  ~~~  Assert.Throws() Failure\n  Expected: typeof(System.Security.Cryptography.CryptographicException)\n  Actual: typeof(System.NullReferenceException): Object reference not set to an instance of an object.  ~~~  STACK TRACE:  ~~~  at Internal.Cryptography.Pal.AnyOS.ManagedPkcsPal.ManagedDecryptorPal.TryDecrypt(RecipientInfo recipientInfo, X509Certificate2 cert, X509Certificate2Collection originatorCerts, X509Certificate2Collection extraStore, Exception& exception) in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_centos7.1_debug/src/System.Security.Cryptography.Pkcs/src/Internal/Cryptography/Pal/AnyOS/ManagedPal.Decrypt.cs:line 85   at System.Security.Cryptography.Pkcs.EnvelopedCms.DecryptContent(RecipientInfoCollection recipientInfos, X509Certificate2Collection extraStore) in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_centos7.1_debug/src/System.Security.Cryptography.Pkcs/src/System/Security/Cryptography/Pkcs/EnvelopedCms.cs:line 230   at System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt(X509Certificate2Collection extraStore) in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_centos7.1_debug/src/System.Security.Cryptography.Pkcs/src/System/Security/Cryptography/Pkcs/EnvelopedCms.cs:line 188   at System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTests.VerifySimpleDecrypt(Byte[] encodedMessage, CertLoader certLoader, ContentInfo expectedContent) in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_centos7.1_debug/src/System.Security.Cryptography.Pkcs/tests/EnvelopedCms/DecryptTests.cs:line 279   at System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTests.<>c__DisplayClass11_0.<Decrypt_512_CekDoesNotDecrypt_FixedValue>b__0() in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_centos7.1_debug/src/System.Security.Cryptography.Pkcs/tests/EnvelopedCms/DecryptTests.cs:line 144  ~~~
27390	area-System.Net	System.Net.Http.Functional.Tests.HttpCookieProtocolTests.GetAsyncWithRedirect_SetCookieContainer_CorrectCookiesSent [FAIL]	NETFX https://github.com/dotnet/corefx/pull/27288#issuecomment-367821183  ```  System.Net.Http.Functional.Tests.HttpCookieProtocolTests.GetAsyncWithRedirect_SetCookieContainer_CorrectCookiesSent [FAIL]    System.Net.Http.HttpRequestException : An error occurred while sending the request.    ---- System.Net.WebException : The request was aborted: The request was canceled.    Stack Trace:         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)         at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()      --- End of stack trace from previous location where exception was thrown ---         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)         at System.Net.Http.Functional.Tests.HttpCookieProtocolTests.<<GetAsyncWithRedirect_SetCookieContainer_CorrectCookiesSent>b__15_0>d.MoveNext()      --- End of stack trace from previous location where exception was thrown ---         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)         at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext()      --- End of stack trace from previous location where exception was thrown ---         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)         at System.Net.Test.Common.LoopbackServer.<CreateServerAsync>d__9.MoveNext()      --- End of stack trace from previous location where exception was thrown ---         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)         at System.Net.Http.Functional.Tests.HttpCookieProtocolTests.<GetAsyncWithRedirect_SetCookieContainer_CorrectCookiesSent>d__15.MoveNext()      --- End of stack trace from previous location where exception was thrown ---         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)      --- End of stack trace from previous location where exception was thrown ---         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)      --- End of stack trace from previous location where exception was thrown ---         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)      ----- Inner Stack Trace -----         at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)         at System.Net.Http.HttpClientHandler.GetResponseCallback(IAsyncResult ar)  ```
27389	area-Serialization	Catch the FileNotFoundException when to get the obsolete attribute for type.	#27370   @mconnew @zhenlan 
27387	area-System.IO	Stop FileSystem WriteAsync test from writing too much data to disk	For https://github.com/dotnet/corefx/issues/24505    @danmosemsft PTAL
27386	area-System.Runtime	Is RuntimeInformation.OSArchitecture fixed on .NET 4.7.2?	.NET 4.7.1 contains the embedded RuntimeInformation class which returns a wrong OSArchitecture.   See https://github.com/Microsoft/perfview/issues/478#issuecomment-367845285  Is this fixed with the upcoming .NET 4.7.2?     
27385	area-Infrastructure	Adding to PackageIndex all of the information about our release from 6.0 and fixing packages that needed placeholders	Fixes #27100    After shipping UAP 6.0 we didn't update the package index with this data so package validation has not been testing for breaks on packages that we will soon release. These changes include updating said index and reacting to the validation errors.    cc: @weshaggard @ericstj @joshfree 
27383	area-System.Net	Split up cookie headers that are added via HttpListenerResponse.WebHeaders.Add	"This fixes an inconsistency between the Windows and Managed implementation of  HttpListenerResponse.    Basically, there are two ways to add cookies to an HttpListenerResponse. The 'usual' way is to add them to the cookie collection:  ```  response.Cookies = cookies;  ```  On Unix and on Windows that yields the following Set-Cookie header:  ```  Set-Cookie: name1=value1, name2=value2  ```  In this case though the user is setting the headers by adding them directly:  ```  foreach (var c in cookies)  {      HttpListenerResponse.Headers.Add(""Set-Cookie"",c);  }  ```  According to the relevant documentation for WebHeaderCollection.Add headers added more than once will be added in a comma separated list. So, even adding the headers directly, we expect the same result. That is true on Unix, and we get the following header:  ```  Set-Cookie: name1=value1,name2=value2  ```  However, on Windows we see an unexpected result:  ```  Set-Cookie: name1=value1  Set-Cookie: name2=value2  ```  While both behaviors are acceptable, I think that the Windows behavior was intentionally added. That is based off of this comment in the relevant code:  https://github.com/dotnet/corefx/blob/3db29b721a45fb4f300e27c5df5750f57b38ec45/src/System.Net.HttpListener/src/System/Net/Windows/HttpListenerResponse.Windows.cs#L460-L482  This PR ensures that the managed implementation follows the same behavior as the Windows version. I think that should also update the documentation to reflect this behavior, since it seems to be by design.    Fixes: #22910 "
27382	area-System.Net	Use SCH_USE_STRONG_CRYPTO with SystemDefaults	"The current SslStream implementation was applying SCH_USE_STRONG_CRYPTO only when TLS1.2, TLS1.1 and/or TLS1.0 flags were set.   In .NET Core 2.0, we introduced a new TLS option (#13075), called 'SystemDefault', which means to use the best (strongest) TLS security   protocol available in the operating system. But since SystemDefault (equal to all flag bits set to zero) doesn't match any of the TLS bit   masks, we weren't passing in the SCH_USE_STRONG_CRYPTO flag.    This fix adds a check for SystemDefault and makes sure that the SCH_USE_STRONG_CRYPTO flag is passed to SCHANNEL.  According to the SCHANNEL experts, the current ""SystemDefault' will actually use strong crypto settings on current Windows OS's.   But they advised us that we should always pass in the SCH_USE_STRONG_CRYPTO flag when using 'SystemDefault'.    This is related to internal bug 458042."
27380	area-Infrastructure	[release/2.1] Fix build on clang 5 (#27178)	This is a port of https://github.com/dotnet/corefx/pull/27178 to the `release/2.1` branch. It lets us build corefx with clang 5.    clang 5 is the default on some platforms supported by .NET Core 2.1, such as Fedora 27.
27379	area-System.Memory	Optimize string-like portable Span APIs for Ordinal and OrdinalIgnoreCase	This is specific to portable span (and not fast span).    We do not need to allocate and call the string APIs when StringComparison is Ordinal or OrdinalIgnoreCase.    Similar to APIs like EndsWith/etc., add a non-allocating code path for CompareTo for Ordinal:  https://github.com/dotnet/corefx/blob/42d5370f8c6cec8d1961f54a0974e52b0562b0a7/src/System.Memory/src/System/MemoryExtensions.Portable.cs#L23    Also optimize for OrdinalIgnoreCase for all the string-like APIs.    See: https://github.com/dotnet/corefx/pull/27319#discussion_r170048253    cc @tarekgh
27377	area-System.Net	add shutdown call to try to make redirect test more reliable	Fixes #27363   (hopefully)    @stephentoub @davidsh @dotnet/ncl 
27375	area-System.Reflection	Random hang/timeout in System.Reflection.Metadata.Tests in CI	https://mc.dot.net/#/user/stephentoub/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/39ad031acb4bda1d91f5654e70e31fef299e50bd/workItem/System.Reflection.Metadata.Tests/wilogs  ```  2018-02-22 10:12:36,642: INFO: proc(54): run_and_log_output: Output: Discovering: System.Reflection.Metadata.Tests  2018-02-22 10:12:36,884: INFO: proc(54): run_and_log_output: Output: Discovered:  System.Reflection.Metadata.Tests  2018-02-22 10:12:37,059: INFO: proc(54): run_and_log_output: Output: Starting:    System.Reflection.Metadata.Tests  ```  ...  ```  2018-02-22 10:32:35,798: ERROR: job(44): kill: Job running for too long. Killing...  2018-02-22 10:32:35,803: ERROR: executor(398): _execute_command: Executor timed out after 1200 seconds and was killed.  2018-02-22 10:32:35,803: INFO: event(43): send: Sending event type WorkItemTimeout  2018-02-22 10:32:35,876: INFO: saferequests(90): request_with_retry: Response complete with status code '201'  2018-02-22 10:32:35,877: INFO: executor(417): _execute_command: Finished _execute_command, exit code: -3  ```
27374	area-System.Net	Test failure: System.Net.Http.Functional.Tests.HttpCookieProtocolTests / GetAsyncWithRedirect_ReceiveSetCookie_CookieSent	"## Failure type    ""The server returned an invalid or unrecognized response""  https://mc.dot.net/#/user/stephentoub/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/201009d077e71fcadbc44ddad6995a9b7fc37d7a/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpCookieProtocolTests~2FGetAsyncWithRedirect_ReceiveSetCookie_CookieSent  ```  Unhandled Exception of Type System.Net.Http.HttpRequestException  Message :  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The server returned an invalid or unrecognized response  Stack Trace :     at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 469     at System.Net.Http.Functional.Tests.HttpCookieProtocolTests.<GetAsyncWithRedirect_ReceiveSetCookie_CookieSent>b__20_0(Uri url) in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Net.Http\tests\FunctionalTests\HttpCookieProtocolTests.cs:line 464     at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext() in D:\j\workspace\windows-TGrou---f8ac6754\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 84  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in D:\j\workspace\windows-TGrou---f8ac6754\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 67     at System.Net.Http.Functional.Tests.HttpCookieProtocolTests.GetAsyncWithRedirect_ReceiveSetCookie_CookieSent() in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Net.Http\tests\FunctionalTests\HttpCookieProtocolTests.cs:line 456  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in D:\j\workspace\windows-TGrou---f8ac6754\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62     at System.Net.Http.WinHttpHandler.StartRequest(WinHttpRequestState state) in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 863  ```    ## Failure history    Day | Build | OS | Details  -- | -- | -- | --   2/15 | 20180215.01 | Win10 | The server returned an invalid or unrecognized response - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180215.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpCookieProtocolTests~2FGetAsyncWithRedirect_ReceiveSetCookie_CookieSent)  2/21 | 20180221.01 | Win10 | The server returned an invalid or unrecognized response - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180221.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpCookieProtocolTests~2FGetAsyncWithRedirect_ReceiveSetCookie_CookieSent)  2/26 | 20180226.04 | Win10 | The server returned an invalid or unrecognized response - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180226.04/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpCookieProtocolTests~2FGetAsyncWithRedirect_ReceiveSetCookie_CookieSent)  "
27372	area-System.Security	NRE in ManagedDecryptorPal.TryDecrypt	This test is failing on all OSes [mc link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180222.04/workItem/System.Security.Cryptography.Pkcs.Tests/analysis/xunit/System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTests~2FDecrypt_512_CekDoesNotDecrypt_FixedValue)    EnvelopedCmsTests.Tests.DecryptTests/Decrypt_512_CekDoesNotDecrypt_FixedValue  ```  Unhandled Exception of Type Xunit.Sdk.ThrowsException  Message :  Assert.Throws() Failure  Expected: typeof(System.Security.Cryptography.CryptographicException)  Actual:   typeof(System.NullReferenceException): Object reference not set to an instance of an object.  Stack Trace :     at Internal.Cryptography.Pal.AnyOS.ManagedPkcsPal.ManagedDecryptorPal.TryDecrypt(RecipientInfo recipientInfo, X509Certificate2 cert, X509Certificate2Collection originatorCerts, X509Certificate2Collection extraStore, Exception& exception) in /Users/buildagent/agent/_work/381/s/corefx/src/System.Security.Cryptography.Pkcs/src/Internal/Cryptography/Pal/AnyOS/ManagedPal.Decrypt.cs:line 85     at System.Security.Cryptography.Pkcs.EnvelopedCms.DecryptContent(RecipientInfoCollection recipientInfos, X509Certificate2Collection extraStore) in /Users/buildagent/agent/_work/381/s/corefx/src/System.Security.Cryptography.Pkcs/src/System/Security/Cryptography/Pkcs/EnvelopedCms.cs:line 230     at System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTests.VerifySimpleDecrypt(Byte[] encodedMessage, CertLoader certLoader, ContentInfo expectedContent) in /Users/buildagent/agent/_work/381/s/corefx/src/System.Security.Cryptography.Pkcs/tests/EnvelopedCms/DecryptTests.cs:line 279  ```
27371	area-System.IO	Make File.Move copy when the file system doesn't support link	Fixes https://github.com/dotnet/corefx/issues/26105.  cc: @danmosemsft, @markekraus
27370	area-Serialization	bypass the exceptions in sgen during the loop for each type	Catch the exception [here](https://github.com/dotnet/corefx/blob/master/src/Microsoft.XmlSerializer.Generator/src/Sgen.cs#L231)
27369	area-System.Threading	Dataflow tests segfault on Fedora.27.Amd64-x64:Release	"Dumpling is down, so we need a local repro. @kouvel do you have cycles to take a look? You can set up a repro box using the new system. LMK if you need a pointer.    https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180222.04/workItem/System.Threading.Tasks.Dataflow.Tests/wilogs    Fedora.27.Amd64-x64:Release  ```  2018-02-22 06:07:21,137: INFO: proc(54): run_and_log_output: Output: Discovering: System.Threading.Tasks.Dataflow.Tests  2018-02-22 06:07:21,366: INFO: proc(54): run_and_log_output: Output: Discovered:  System.Threading.Tasks.Dataflow.Tests  2018-02-22 06:07:21,539: INFO: proc(54): run_and_log_output: Output: Starting:    System.Threading.Tasks.Dataflow.Tests  2018-02-22 06:07:24,653: INFO: proc(54): run_and_log_output: Output: /home/helixbot/dotnetbuild/work/5bf3c2e2-9870-45cc-9dbf-4bc81eaddb1e/Work/aef23661-8b18-4137-b246-24dbb12648ba/Unzip/RunTests.sh: line 94: 24381 Aborted                 (core dumped) $RUNTIME_PATH/dotnet xunit.console.netcore.exe System.Threading.Tasks.Dataflow.Tests.dll -xml testResults.xml -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=failing  2018-02-22 06:07:24,707: INFO: proc(54): run_and_log_output: Output: Dumpling has not been installed yet. Please run ""DumplingHelper.py install_dumpling"" before collect_dumps.  2018-02-22 06:07:24,711: INFO: proc(54): run_and_log_output: Output: ~/dotnetbuild/work/5bf3c2e2-9870-45cc-9dbf-4bc81eaddb1e/Work/aef23661-8b18-4137-b246-24dbb12648ba/Unzip  2018-02-22 06:07:24,713: INFO: proc(54): run_and_log_output: Output: ----- end 06:07:24 ----- exit code 134 ----------------------------------------------------------  ```"
27367	area-Serialization	Need support reference in sgen	#27281 
27366	area-System.Runtime	EnvironmentTests+<>c.<FailFast_ExpectFailureExitCode>b__21_0 forgot to Dispose() the result of RemoteInvoke()	"https://mc.dot.net/#/user/bartonjs/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/481f6f62c7f54058bd8e5d25ab175d3b77f711ea/workItem/System.Runtime.Extensions.Tests/wilogs  ```  2018-02-22 16:30:18,821: INFO: proc(54): run_and_log_output: Output: Unhandled Exception: Xunit.Sdk.TrueException: A test System.Runtime.Extensions.Tests, Version=4.2.1.0, Culture=neutral, PublicKeyToken=9d77cc7ad39b68eb!System.Tests.EnvironmentTests+<>c.<FailFast_ExpectFailureExitCode>b__21_0 forgot to Dispose() the result of RemoteInvoke()  2018-02-22 16:30:18,821: INFO: proc(54): run_and_log_output: Output: Expected: True  2018-02-22 16:30:18,821: INFO: proc(54): run_and_log_output: Output: Actual:   False  2018-02-22 16:30:18,822: INFO: proc(54): run_and_log_output: Output:    at Xunit.Assert.True(Nullable`1 condition, String userMessage)  2018-02-22 16:30:18,823: INFO: proc(54): run_and_log_output: Output:    at System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Dispose(Boolean disposing) in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_true_prtest/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 212  2018-02-22 16:30:18,823: INFO: proc(54): run_and_log_output: Output:    at System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Finalize() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_true_prtest/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 258  2018-02-22 16:30:19,580: INFO: proc(54): run_and_log_output: Output: /home/helixbot/dotnetbuild/work/e8585d9d-2db1-4361-9bb9-0fdcc3167640/Work/3d6117c8-79c6-4d5b-bd1b-2fa612c7ac00/Unzip/RunTests.sh: line 94: 18070 Aborted                 (core dumped) $RUNTIME_PATH/dotnet xunit.console.netcore.exe System.Runtime.Extensions.Tests.dll -xml testResults.xml -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=failing  2018-02-22 16:30:19,728: INFO: proc(54): run_and_log_output: Output: Dumpling has not been installed yet. Please run ""DumplingHelper.py install_dumpling"" before collect_dumps.  2018-02-22 16:30:19,733: INFO: proc(54): run_and_log_output: Output: ~/dotnetbuild/work/e8585d9d-2db1-4361-9bb9-0fdcc3167640/Work/3d6117c8-79c6-4d5b-bd1b-2fa612c7ac00/Unzip  ```  Many of the legs hit the same issue.  cc: @danmosemsft, @maryamariyan "
27365	area-System.Diagnostics	TestStartWithUserName forgot to Dispose() the result of RemoteInvoke()	```  2018-02-22 11:54:49,269: INFO: proc(54): run_and_log_output: Output: Unhandled Exception: Xunit.Sdk.TrueException: A test System.Diagnostics.Process.Tests, Version=4.2.1.0, Culture=neutral, PublicKeyToken=9d77cc7ad39b68eb!System.Diagnostics.Tests.ProcessTests.TestStartWithUserName forgot to Dispose() the result of RemoteInvoke()  2018-02-22 11:54:49,269: INFO: proc(54): run_and_log_output: Output: Expected: True  2018-02-22 11:54:49,269: INFO: proc(54): run_and_log_output: Output: Actual:   False  2018-02-22 11:54:49,269: INFO: proc(54): run_and_log_output: Output:    at Xunit.Assert.True(Nullable`1 condition, String userMessage)  2018-02-22 11:54:49,270: INFO: proc(54): run_and_log_output: Output:    at System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Dispose(Boolean disposing) in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_true_prtest/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 212  2018-02-22 11:54:49,271: INFO: proc(54): run_and_log_output: Output:    at System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Finalize() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_true_prtest/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 258  ```  cc: @danmosemsft, @maryamariyan 
27364	area-System.Net	Specify sub protocol for WebSocket Client	_From @andylyonette on February 21, 2018 16:51_  Hi,    I can't work out how to specify the sub protocol when creating a client connect to a websocket endpoint. Is this possible like it is with this JavaScript client? (https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications)    Thanks,  Andy  _Copied from original issue: aspnet/Home#2892_
27363	area-System.Net	AllowAutoRedirect_True_ValidateNewMethodUsedOnRedirection test failed on Windows	https://mc.dot.net/#/user/ahsonkhan/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/e0a26daab80419c10a37646444d5155d5495d241/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandlerTest~2FAllowAutoRedirect_True_ValidateNewMethodUsedOnRedirection(statusCode:%20307,%20oldMethod:%20%5C%22POST%5C%22,%20newMethod:%20%5C%22POST%5C%22,%20useTE:%20False)    ```text  System.Net.Http.HttpRequestException : Error while copying content to a stream.  ---- System.IO.IOException : The write operation failed, see inner exception.  -------- System.Net.Http.WinHttpException : The connection with the server was terminated abnormally  ```    ```text     at System.Net.Http.HttpContent.CopyToAsyncCore(Task copyTask) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\src\System\Net\Http\HttpContent.cs:line 351     at System.Net.Http.WinHttpHandler.InternalSendRequestBodyAsync(WinHttpRequestState state, Boolean chunkedModeForSend) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 1361     at System.Net.Http.WinHttpHandler.StartRequest(WinHttpRequestState state) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 860     at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 488     at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<>c__DisplayClass51_2.<<AllowAutoRedirect_True_ValidateNewMethodUsedOnRedirection>b__1>d.MoveNext() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.cs:line 654  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in D:\j\workspace\windows-TGrou---74aa877a\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 66     at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<>c__DisplayClass51_1.<<AllowAutoRedirect_True_ValidateNewMethodUsedOnRedirection>b__0>d.MoveNext() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.cs:line 628  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in D:\j\workspace\windows-TGrou---74aa877a\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 66     at System.Net.Http.Functional.Tests.HttpClientHandlerTest.AllowAutoRedirect_True_ValidateNewMethodUsedOnRedirection(Int32 statusCode, String oldMethod, String newMethod, Boolean useTE) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.cs:line 612  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Net.Http.HttpContent.CopyToAsyncCore(Task copyTask) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\src\System\Net\Http\HttpContent.cs:line 347  ----- Inner Stack Trace -----     at System.Environment.get_StackTrace() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Runtime.Extensions\src\System\Environment.cs:line 146     at System.Runtime.ExceptionServices.ExceptionStackTrace.AddCurrentStack(Exception exception) in D:\j\workspace\windows-TGrou---74aa877a\src\Common\src\System\Runtime\ExceptionServices\ExceptionStackTrace.cs:line 23     at System.Net.Http.WinHttpException.CreateExceptionUsingError(Int32 error) in D:\j\workspace\windows-TGrou---74aa877a\src\Common\src\System\Net\Http\WinHttpException.cs:line 56     at System.Net.Http.WinHttpRequestCallback.OnRequestError(WinHttpRequestState state, WINHTTP_ASYNC_RESULT asyncResult) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestCallback.cs:line 324     at System.Net.Http.WinHttpRequestCallback.RequestCallback(IntPtr handle, WinHttpRequestState state, UInt32 internetStatus, IntPtr statusInformation, UInt32 statusInformationLength) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestCallback.cs:line 104     at System.Net.Http.WinHttpRequestCallback.WinHttpCallback(IntPtr handle, IntPtr context, UInt32 internetStatus, IntPtr statusInformation, UInt32 statusInformationLength) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestCallback.cs:line 47     at Interop.WinHttp.WinHttpWriteData(SafeWinHttpHandle requestHandle, IntPtr buffer, UInt32 bufferSize, IntPtr parameterIgnoredAndShouldBeNullForAsync)     at Interop.WinHttp.WinHttpWriteData(SafeWinHttpHandle requestHandle, IntPtr buffer, UInt32 bufferSize, IntPtr parameterIgnoredAndShouldBeNullForAsync)     at System.Net.Http.WinHttpRequestStream.InternalWriteDataAsync(Byte[] buffer, Int32 offset, Int32 count, CancellationToken token) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestStream.cs:line 245     at System.Net.Http.WinHttpRequestStream.InternalWriteAsync(Byte[] buffer, Int32 offset, Int32 count, CancellationToken token) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestStream.cs:line 203     at System.Net.Http.WinHttpRequestStream.WriteAsync(Byte[] buffer, Int32 offset, Int32 count, CancellationToken token) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestStream.cs:line 131     at System.Net.Http.HttpContent.CopyToAsync(Stream stream, TransportContext context, CancellationToken cancellationToken) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\src\System\Net\Http\HttpContent.cs:line 327     at System.Net.Http.HttpContent.CopyToAsync(Stream stream, TransportContext context) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\src\System\Net\Http\HttpContent.cs:line 310     at System.Net.Http.WinHttpHandler.InternalSendRequestBodyAsync(WinHttpRequestState state, Boolean chunkedModeForSend) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 1361     at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in E:\A\_work\1994\s\src\mscorlib\src\System\Runtime\CompilerServices\AsyncMethodBuilder.cs:line 922     at System.Net.Http.WinHttpHandler.InternalSendRequestBodyAsync(WinHttpRequestState state, Boolean chunkedModeForSend)     at System.Net.Http.WinHttpHandler.StartRequest(WinHttpRequestState state) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 860     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in E:\A\_work\1994\s\src\mscorlib\shared\System\Threading\ExecutionContext.cs:line 166     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() in E:\A\_work\1994\s\src\mscorlib\src\System\Runtime\CompilerServices\AsyncMethodBuilder.cs:line 546     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in E:\A\_work\1994\s\src\mscorlib\shared\System\Threading\ExecutionContext.cs:line 166     at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in E:\A\_work\1994\s\src\mscorlib\src\System\Threading\Tasks\Task.cs:line 2440     at System.Threading.ThreadPoolWorkQueue.Dispatch() in E:\A\_work\1994\s\src\mscorlib\src\System\Threading\ThreadPool.cs:line 588  --- End of stack trace from AddCurrentStack ---  ```
27362	area-System.Net	Revisit SocketsHttpHandler's HttpConnection.WriteAsync buffering strategy	"There's a note in the code:  ""CONSIDER: May want to be a bit smarter here?  Think about how large writes should work...""    cc: @geoffkizer "
27361	area-System.Drawing	ToolboxBitmapAttributeTests.Ctor_FileName test failed on netfx	"https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_false_prtest/8667/consoleText  ```        System.Drawing.Tests.ToolboxBitmapAttributeTests.Ctor_FileName(fileName: ""D:\\j\\workspace\\windows-TGrou---2a8f9c29\\bin\\t""..., size: {Width=16, Height=16}) [FAIL]          System.ArgumentException : Parameter is not valid.          Stack Trace:               at System.Drawing.Image.get_Width()               at System.Drawing.Image.get_Size()               at System.Drawing.Tests.ToolboxBitmapAttributeTests.Ctor_FileName(String fileName, Size size)  ```"
27360	area-System.Net	Fix fragment handling in HttpClient	SocketsHttpHandler isn't sending fragments, nor is it properly inheriting the fragment from the original request URI into the redirect location URI when the original URI had one and the redirect URI did not, even though RFC 7231 says it must.  This commit fixes that for SocketsHttpHandler.    WinHttpHandler also isn't handling this inheritance according to the RFC. It appears that the logic for WinHttpHandler would actually need to be changed in WINHTTP itself, or else WinHttpHandler would need to be changed to do the redirects itself.    Neither CurlHandler or NetFxHandler send fragments at all.    This commit also fixes the test to correctly compare the expected and actual Uris... apparently Uri equality doesn't factor in fragments, so they're first converted to strings.  It also updates the test to also validate that the server received the URI with the fragment included.    Closes https://github.com/dotnet/corefx/issues/27305  cc: @geoffkizer, @davidsh, @wfurt, @rmkerr 
27358	area-System.Security	X509Certificate2 unclear error message when attempting to store certificate in non-existent store	"Had a problem where my app would work fine locally, but fail when hosted on azure app services.    I was trying to load a certificate from a file using ```new X509Certificate2(string fileName, string password)```. (Although hrom cursory research the error message is identically as ambiguous with other construction methods)    The error message I received was:  ```  Unhandled Exception: Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException: The system cannot find the file specified     at Internal.Cryptography.Pal.CertificatePal.FromBlobOrFile(Byte[] rawData, String fileName, String password, X509KeyStorageFlags keyStorageFlags)     at System.Security.Cryptography.X509Certificates.X509Certificate..ctor(String fileName, String password, X509KeyStorageFlags keyStorageFlags)     at System.Security.Cryptography.X509Certificates.X509Certificate2..ctor(String fileName)     at ConsoleApplication.Program.Main(String[] args)  ```    The certificate was, indeed, present and was readable from the user running - so it's not an issue that the certificate can't be found!    The actual error is, I believe, that it can't put the certificate the LocalUser's cert store. Info [here](http://web.archive.org/web/20151101033040/http://blog.tylerdoerksen.com:80/2013/08/23/pfx-certificate-files-and-windows-azure-websites/).    I think the culprit is here  https://github.com/dotnet/corefx/blob/29cd6a0b0ac2993cee23ebaf36ca3d4bce6dd75f/src/System.Security.Cryptography.X509Certificates/src/Internal/Cryptography/Pal.Windows/CertificatePal.Import.cs#L150-L152    I believe the last hresult from PFXImportCertStore will be CRYPT_E_NOT_FOUND  ""can't find file"". Which causes ambiguity between ""can't find the given certificate file to import"" and ""got an error when trying to put the certificate after trying to put it in a store"".    Not sure how you'd go about solving this as we're only returned CRYPT_E_NOT_FOUND for failed imports regardless of reason.    Repro:  1. Create a web app that pulls a certificate from a file  2. ```new X509Certificate2(string fileName, string password)```  3. Upload and run on azure app services  4. Pull hair out for 2h wondering why it can't find a file that blatantly exists.    Workaround:  Store it in the MachineKey set  ```new X509Certificate2(filePath,  pass, X509KeyStorageFlags.MachineKeySet);```"
27357	area-System.IO	Path changes resulting in failing DriveInfo test	https://github.com/dotnet/corefx/pull/27339#issuecomment-367578790  https://mc.dot.net/#/user/dotnet-maestro-bot/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/e91038db253e351822d63ed2cf875f94cb0cabc7/workItem/System.IO.FileSystem.DriveInfo.Tests/analysis/xunit/System.IO.FileSystem.DriveInfoTests.DriveInfoWindowsTests~2FCtor_InvalidPath_ThrowsArgumentException(driveName:%20%5C%22%5C%22,%20paramName:%20%5C%22path%5C%22)  ```  Unhandled Exception of Type Xunit.Sdk.EqualException  Message :  Assert.Equal() Failure  Expected: path  Actual:   (null)  Stack Trace :     at System.AssertExtensions.Throws[T](String netCoreParamName, String netFxParamName, Action action) in D:\j\workspace\windows-TGrou---f8ac6754\src\CoreFx.Private.TestUtilities\src\System\AssertExtensions.cs:line 39     at System.IO.FileSystem.DriveInfoTests.DriveInfoWindowsTests.Ctor_InvalidPath_ThrowsArgumentException(String driveName, String paramName) in D:\j\workspace\windows-TGrou---f8ac6754\src\System.IO.FileSystem.DriveInfo\tests\DriveInfo.Windows.Tests.cs:line 35  ```
27356	area-System.Security	Fix NullReferenceException on exception cascade when CEK doesn't decrypt	"A late change caused a test which only runs in outer-loop to fail with a NullReferenceException instead of a CryptographicException.  This is caused by the ""return now if decryption failed"" path."
27355	area-System.Net	HttpWebRequest/HttpWebResponse never releases connection after http server error (.Net Core 2.0.1, Debian 8)	"I'm running a .Net Core Console App under Debian 8, which constantly queries a REST server via HTTPS.  The app uses plain syncronous http calls using HttpWebRequest / HttpWebResponse .  I noticed that after some hours of operation all calls raise exceptions with description ""Too many open files"", meaning that there are too many connections left non-closed.  After some investigation I figured out that each time the http server responds with non-200 status code (for example, 5хх server errors of 429 Too many requests), even after disposing HttpWebResponse the connection remains open but is never reused by ServicePoint manager for next HttpWebRequest, even for the same host/URL. After a significant amount of errors the open file limit (default 4096) is exhausted an no further requests are possible. The connections are never released until the dotnet process is killed.    Actions to reproduce he problem:    1. I wrote a simple php script `getstatus.php` and placed it on a test web serer. The script emulates http error. It accepts a numeric code as GET query and responds with same HTTP code. The response body always  contains the same - the resquest headers. When requesting `https://myserver/getstatus.php` or  `https://myserver/getstaus.php?200` I get normal response. When requesting `https://myserver/getstaus.php?500` I get same content, but with 500 status code (""Internal server error"") etc.  The php code is below:  ```php  <?php  $code=$_SERVER['QUERY_STRING'];  if ($code) {   http_response_code($code);  };  echo ""Request headers:         <br /> \n"";  foreach (getallheaders() as $name => $value) {      echo ""$name: $value         <br />\n"";  }  ?>  ```    2. The sample vb.net code for quering the server. The program accepts a numeric code as argument and makes 100 requests to test server:    ```vb  Imports System  Imports System.IO  Imports System.Net  Imports System.Threading    Module Program      Private Const USER_AGENT = ""Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.167 Safari/537.36""        Sub Main(args As String())          Dim result As String          For counter = 1 To 100              If args.Count < 1 Then                  Console.WriteLine(""Launched without arguments"")                  result = DownloadString(""https://mytestserver/getstatus.php"")              Else                  Console.WriteLine(""Launched with argument: {0}"", args(0))                  result = DownloadString(""https://mytestserver/getstatus.php?"" & args(0))              End If              Console.WriteLine(""Respone content > "" & result)              Thread.Sleep(500)          Next          Console.ReadLine()      End Sub        Private Function GetResult(ByRef w As HttpWebRequest) As String          Try              Using r As HttpWebResponse = w.GetResponse                  Console.WriteLine(""Response status > "" & r.StatusCode)                  Console.WriteLine(""Response headers > "" & r.Headers.ToString)                  Using s As Stream = r.GetResponseStream                      Using rd As StreamReader = New StreamReader(s)                          Dim st As String = rd.ReadToEnd                          Return st                      End Using                  End Using              End Using          Catch ex As webException              Console.WriteLine(""Catch in GetResult(): "" & ex.Message)          End Try        End Function        Private Function DownloadString(ByVal __Url As String) As String          Try              Dim w As HttpWebRequest = CType(WebRequest.Create(__Url), HttpWebRequest)              w.UserAgent = USER_AGENT              w.KeepAlive = True              w.Timeout = 10000              w.ReadWriteTimeout = 10000              Console.WriteLine(""Requesting "" & __Url)              Return GetResult(w)          Catch ex As Exception              Console.WriteLine(""Catch in DownloadString(): "" & ex.Message)          End Try      End Function    End Module  ```  I use VS 2017 Community to write the code. The project was created using a "".Net Core Console application"" template with no additional changes to project configuration. The target platform is shown as "".NET Core 2.0""  The project is compiled under VS, then published to a folder, then the folder contents are transferred to the Debian 8 machine (VPS) and run like `dotnet myproj.dll`    3. To count open file handles I use a bash script found on StackOverflow  ```bash  cd /proc  for pid in [0-9]*  do      echo ""PID = $pid with $(ls /proc/$pid/fd/ | wc -l) file descriptors""  done | sort -rn -k5 | head | while read -r _ _ pid _ fdcount _  do    command=$(ps -o cmd -p ""$pid"" -hc)    printf ""pid = %5d with %4d fds: %s\n"" ""$pid"" ""$fdcount"" ""$command""  done  ```    4. Actual testing  4.1. Run `dotnet myproj.dll`. On a separate session monitor open file count with the above script. In my case there are no more than 42 open files for the dotnet process, from start to finish.    4.2. Run `dotnet myproj.dll 500` emulating http errors. Each attempt to get httpwebresponse object results in exception which is logged to console. After each error the number of open files for dotnet process increases by 3 (!). After 100 ""unsuccessful"" requests the open file count reaches 344 (started at 42).  Note that all objects for response handling are wrapped in `using`, so they should be disposed properly after exception, and tcp connection should be released for reusing for next calls. I might be wrong, but current behavior is a bug.    During further experiments I found a workaround. If I completely read a ResponseStream of WebException.Response object, the connection seems to be released, and total connection count does not increse. The `Catch` block in `GetResponse` function should containg following lines:  ```vb  Catch ex As webException              Console.WriteLine(""Catch in GetResult(): "" & ex.Message)              Console.WriteLine(""WebException.Reponse.Headers: "" & ex.Response.Headers.ToString)              Using s As Stream = ex.Response.GetResponseStream                  Using rd As StreamReader = New StreamReader(s)                      Dim st As String = rd.ReadToEnd                      Return st                  End Using              End Using          End Try  ```  But this seems to be redundant because in many cases servers don't return any meaningful info after http error in the response body, so reading it is unneeded work and anyway non-intuinive way of programming.  Thanks for attention and please don't mind any mistakes, I'm not a professiona l programmer.                           "
27354	area-System.Net	SSL certificate validation on Windows 7 with .Net Framework is ignored after a connection to port different than 443 was established	"- Steps to reproduce:    1. Create/find a server that hosts 2 SSL endpoins on port 443 and port 10443 (probably any port different that 443) - the IP address of the two endpoints should be the same, the server certificates of the endpoints should be self-signed and different.  2. Build the following code for **net471**:  ```c#            static void Main(string[] args)          {             string host = ""your server IP"";             MakeRequest(host, 10443);             MakeRequest(host, 443);          }           private static void MakeRequest(string host, int port) {            HttpRequestMessage webRequest =               new HttpRequestMessage(                  HttpMethod.Get,                  $""https://{host}:{port}/"");            webRequest.Version = new Version(1, 1);              var handler = new HttpClientHandler {               ServerCertificateCustomValidationCallback =                  (sender, cert, chain, errors) => true            };            HttpClient client = new HttpClient(handler);              client.SendAsync(webRequest).Wait();         }  ```  3. Run the following code to connect to that server **on Windows 7 64-bit**    - Expected result:  The code should complete without errors    - Actual result:  There is an exception:    ```  System.Net.Http.HttpRequestException: An error occurred while sending the request.   System.Net.WebException: The request was aborted: Could not create SSL/TLS secure channel.  ```    **This does not reproduce on Windows 10.**    Considering that this API is part of the .Net Standard 2.0 API, it affects portable code running on Windows 7 and on .Net Framework.    The issue is also observed on all net451+ frameworks on Windows 7. The  test for those frameworks uses the ```WebRequestHandler``` as it is the only one that has a certificate validation support.    I think it has something to do with the ServicePointManager and it reusing of connections as reducing the MaxServicePointIdleTime seems to have some effect (though in the distilled repro above I couldn't make it pass).    If the order of the request is changed so that the connection to the port 443 is established first, then the connection to port 10443 is ok.  "
27352	area-System.Net	be more liberal on what exception type to get on handshake failure	on Ubuntu18 following tests were failing: (#27023)    - GetAsync_AllowedSSLVersionDiffersFromServer_ThrowsException (Tls11/Tls12 args)  - GetAsync_DisallowTls10_AllowTls11_AllowTls12    The both set mismatched TLS versions and they expect handshake to fail.   However newer openssl sends Alert message before shutting down TCP connection.  The existing test expected IO failure and failed because we got Exception from SSL handshake.     This change will accept either exception as successful test pass.   The handshake should fail  but that can happen in different ways.     
27351	area-System.Drawing	Graphics.MeasureString produces wrong result if text contains Unicode characters at the end.	"Run the following code on Linux:  ```c#      var txt = ""1\uFF09"";//1）      using (var graphics = Graphics.FromImage(new Bitmap(200, 50)))      using(var font = new Font(""Arial"", 10))      {          var size = graphics.MeasureString(txt, font, new SizeF(float.MaxValue, float.MaxValue),                      StringFormat.GenericTypographic, out var chars, out var lines);                            Console.WriteLine($""Chars fitted: {chars}"");          Console.WriteLine($""Lines fitted: {lines}"");      }  ```    Observed: console output is   Chars fitted: 1  Lines fitted: 1    Expected: console output is  Chars fitted: 2  Lines fitted: 1    "
27350	area-System.Memory	Should Span.Empty return a pointer to an empty array instead of default?	"Currently, there is inconsistent behavior in the following scenario:  ```C#  byte[] array = new byte[10];  Span<byte> span = new Span<byte>(array, 0, 0); // effectively empty  Span<byte> emptySpan = Span<byte>.Empty; // returns ""default""    Assert.True(span.IsEmpty);  Assert.True(emptySpan.IsEmpty);    fixed (byte* pSpan = &MemoryMarshal.GetReference(span))  {      fixed (byte* pEmptySpan = &MemoryMarshal.GetReference(emptySpan))      {          // pSpan != null          // pEmptySpan == null      }  }  ```    Should `Span<T>.Empty` return either `SpanHelpers.PerTypeValues<T>.EmptyArray;` or `Array.Empty<T>();` instead?    As an aside, should we do a null check and throw if someone calls `MemoryMarshal.GetReference(default(Span<T>))` instead of returning a null pointer (especially now that we return default if we pass null array to the constructor)?    Otherwise, we would have to do pointer null checks (for span.Length == 0) before passing it to native libraries (for example here - https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Globalization/CompareInfo.Windows.cs#L166).    cc @jkotas, @KrzysztofCwalina, @stephentoub, @tarekgh, @VSadov, @AndyAyersMS "
27349	area-System.Net	Ignore ping6 failures on macOS 10.12	Fixes #26358
27348	area-System.IO	Update tests for Path changes	Updates for https://github.com/dotnet/coreclr/pull/16478    Tagged these tests with #27269 as they're related. Will update for both PRs from CoreCLR.    cc: @danmosemsft 
27347	area-System.IO	Directory and File Exists using charPool for normalization	Fixes https://github.com/dotnet/corefx/issues/20876
27346	area-System.ComponentModel	EmailAddressAttribute.IsValid Method (Object) cannot validate hyphen at the beginning of domain name	"_From @ahmetbombaci-united on February 21, 2018 22:25_  Domain names cannot start with hyphen (ref: https://tools.ietf.org/html/rfc952)    However; IsValid method does not respect to this rule    Test case:    var checkMail = new System.ComponentModel.DataAnnotations.EmailAddressAttribute().IsValid(""ahmet.bombaci@yahoo.-united.COM"");   _Copied from original issue: aspnet/Home#2893_"
27344	area-System.Net	refactor some proxy tests using new loopback server functions and new auth	This is beginning to get some feedback. If it looks ok, I can finish rest of the tests and retire LoopbackGetRequestHttpProxy. It also should be easier to write tests for something like #27293.  
27343	area-Infrastructure	Publish symbols using Microsoft.SymbolUploader.Build.Task package	The `Microsoft.SymbolUploader.Build.Task` package on the BuildTools feed is the new way to index and publish symbols to the symbol server. It should be used instead of the current combination of BuildTools' `GetAllSymbolFilesToPublish` and the VSTS symbol publish build step.    Example implementation in Core-Setup: https://github.com/dotnet/core-setup/pull/3465
27342	area-System.Text	Proposal: Add pre-defined regular expressions	"# Suggestion:  I suggest to add pre-defined regular exertions as static fields in Regex class or in a new Regexs class. There are some famous widely used expressions, such as Phone numbers, dates, times, zip codes, emails…. etc.  Regexs class can be put in a separate NuGet, to allow contributors to add as many Expressions as they want.    Note:   Regexs should appears in the auto-complete list displayed with Regex methods that expects expressions.    # Implementation:  ```  public static class Regexs  {    public static readonly string Email = @""^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$"";          // ...........  }    ```  # Usage:  `var rgx = new Regex(Regexs.Email);  `  # Benefit:  This will be a time saver for repeated Regex tasks, and will make it easier for beginners to use Regex,   "
27341	area-System.Net	Disable SocketsHttpHandler's concurrent content sends	SocketsHttpHandler currently has some support for allowing request content sending to run concurrently with response content receiving.  However, we don't actually have a need for this, and there are a lot of subtleties that would need to be made robust, e.g. how to handle exceptions that occur concurrently in the sending and receiving.  For now, we're removing it.  Unless ExpectContinue is set to true, we just send the content before receiving the response, and if it is set, we start the send and then wait for it once we've received the final status code from the server.    cc: @geoffkizer, @davidsh, @wfurt   Fixes #https://github.com/dotnet/corefx/issues/27324
27337	area-System.ComponentModel	Adding missing typeforward for Lazy<T,TMetadata> to S.CM.Composition	Adding missing typeforward for Lazy<T,TMetadata> to System.ComponentModel.Composition    Fixes #27299
27336	area-Meta	.NET Core Assembly Code Signing on Mac	"I have a class library that needs to be signed due to other references in the project it is in. I tried to pull it into my Mac app using Xamarin and Visual Studio for Mac but I keep getting this error:     ```  Target ResolveAssemblyReferences:      A TargetFramework profile exclusion list will be generated.  Target ResolveKeySource:      /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(3105,5): error MSB4018: The ""ResolveKeySource"" task failed unexpectedly.      /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(3105,5): error MSB4018: System.NotSupportedException: Specified method is not supported.      /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(3105,5): error MSB4018:   at System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsObject (System.Guid clsid, System.Guid riid) [0x00006] in /Users/builder/data/lanes/4992/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/interopservices/runtimeenvironment.cs:204       /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(3105,5): error MSB4018:   at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)      /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(3105,5): error MSB4018:   at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /Users/builder/data/lanes/4992/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/corlib/System.Reflection/MonoMethod.cs:305   Done building target ""ResolveKeySource"" in project ""POSModel.Shared.csproj"" -- FAILED.    Done building project ""POSModel.Shared.csproj"" -- FAILED.    Build FAILED.    /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(3105,5): error MSB4018: The ""ResolveKeySource"" task failed unexpectedly.  /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(3105,5): error MSB4018: System.NotSupportedException: Specified method is not supported.  /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(3105,5): error MSB4018:   at System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsObject (System.Guid clsid, System.Guid riid) [0x00006] in /Users/builder/data/lanes/4992/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/interopservices/runtimeenvironment.cs:204   /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(3105,5): error MSB4018:   at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)  /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(3105,5): error MSB4018:   at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /Users/builder/data/lanes/4992/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/corlib/System.Reflection/MonoMethod.cs:305       0 Warning(s)      1 Error(s)  ```    It obviously says NotSupported, but didn't know if there was any way to sign this on the Mac or any plans to support this in the future. I tried to do a search through issues and couldn't find anything related.     I noticed the strong name tool does work on Mac `sn -i key.pfx <machine container>`. However because of the NotSupported exception I am not given a machine container to sign against.    Any help would be appreciated!"
27334	area-System.Runtime	StringBuilder should allow copying efficiently to a TextWriter	## Motivation    At present to copy a StringBuilder into a TextWriter you must allocate a throwaway string as large as the amount you want to copy. This can cause a LOH allocation.    ## Workaround     To avoid that today you must write code to copy in blocks via a char[] buffer. ASP.NET were forced to do this ([PR here](https://github.com/aspnet/AspNetWebStack/commit/3fe0d348f00864e4f1eeaefbd027ea965787b892#diff-fe84a6b0645ee996bea1ec4d8445823f)) in response to an issue in a customer workload.    If we add an API for StringBuilder to copy to a TextWriter, we can take care of that loop, and also use a pooled char[].    ## Proposed API    ```c#      public sealed partial class StringBuilder : System.Runtime.Serialization.ISerializable      {           // existing          public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count) { }          public void CopyTo(int sourceIndex, System.Span<char> destination, int count) { }            // proposed          public void CopyTo(int sourceIndex, TextWriter destination, int count) { }      }  ```    ## Rough Implementation    Basically [what ASP.NET did](https://github.com/aspnet/AspNetWebStack/blob/62d0b2df0bcca848a8e0848fd1866928df15528e/src/System.Web.WebPages/StringWriterExtensions.cs#L15) but using a pooled char[] buffer.    ```c#  public void CopyTo(int sourceIndex, TextWriter destination, int count)   {               int remainingChars = this.Length;              int bufferSize = Math.Min(this.Length,  1024);                char[] buffer = ArrayPool<byte>.Shared.Rent(bufferSize);              int currentPosition = 0;                while (remainingChars > 0)              {                  int copyLen = Math.Min(bufferSize, remainingChars);                    this.CopyTo(currentPosition, buffer, copyLen);                    destination.Write(buffer, 0, copyLen);                    currentPosition += copyLen;                  remainingChars -= copyLen;              }               ArrayPool<byte>.Shared.Return(buffer);  }  ````  
27333	area-Infrastructure	CoreFX publish steps should support running on systems with only VS 2017	Currently, the checked-in build definitions used by CoreFX publish tasks ( [example](https://github.com/dotnet/corefx/blob/master/buildpipeline/DotNet-Trusted-Publish.json#L38) ) are hard-coded to expect to find VS 2015 tools installed on the machine.    Ideally these steps could work on either system.  However, to support SourceLink and other new features we'd like to move all build processes to 2017 for now.    @weshaggard FYI.
27332	area-Serialization	Update sgen usage and --parameters	#26901   #26902   @huanwu  @zhenlan  @mconnew 
27330	area-Meta	Look for places to collapse AsSpan().Slice(start, length) into .AsSpan(start,length)	
27329	area-System.Net	SocketsHttpHandler: Consider exposing setting for maximum response drain size	When a response is disposed before the response stream is read to the end, we attempt to drain the remaining response body up to a limit.  We should consider making this limit configurable via a setting on SocketsHttpHandler.    See discussion on #27315     EDIT (@stephentoub): Added API:  ```C#  public int MaxResponseDrainSize { get; set; } // Question: should we use long instead?  ```
27328	area-System.Memory	Rename string-slicing extension methods	"As part of     https://github.com/dotnet/corefx/issues/26894    the api folks have approved renaming AsROSpan and AsROMemory  on string instances to AsSpan and AsMemory (as the ""readonly""  is obvious given the read-only nature of the input.)    This puts the renaming in effect. Basically a big search-replace  commit."
27326	area-System.Security	CryptoStream.Dispose calls Flush on read-only Stream in CryptoStreamMode.Read	```csharp  class ReadOnlyStream : Stream  {      public override void Flush() => throw new NotSupportedException();        public override int Read(byte[] buffer, int offset, int count) => count;        public override long Seek(long offset, SeekOrigin origin) => throw new NotSupportedException();        public override void SetLength(long value) => throw new NotSupportedException();        public override void Write(byte[] buffer, int offset, int count) => throw new NotSupportedException();        public override bool CanRead => true;        public override bool CanSeek => false;        public override bool CanWrite => false;        public override long Length => throw new NotSupportedException();        public override long Position      {          get => throw new NotSupportedException();          set => throw new NotSupportedException();      }  }              static void Main(string[] args)  {      var aes = Aes.Create().CreateDecryptor();      var crypto = new CryptoStream(new ReadOnlyStream(), aes, CryptoStreamMode.Read, false);      crypto.Dispose();  }  ```      I'm not sure if that's the intended behavior, but it makes no logical sense to me and also prevents me from reading encrypted payload from http requests in ASP.NET Core.
27324	area-System.Net	SocketsHttpHandler may corrupt pooled connection if send content is canceled	When a connection is about to be returned to the pool, we're nulling out the _currentRequest field, which then causes the send content to stop sending if it's still going.  But if the connection remains open, the server may still expect a promised amount of content to be received, causing a hang.
27323	area-System.ComponentModel	EmailAddressAttribute validates invalid emails	I've been using [`EmailAddressAttribute`](https://github.com/dotnet/corefx/blob/master/src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/EmailAddressAttribute.cs) to validate email addresses in an MVC app but I've noticed that it uses a very naive validation method that validates addresses like `.name@example.org` and other formats forbidden by [RFC 2822](https://tools.ietf.org/html/rfc2822#section-3.4.1) and [3696](https://tools.ietf.org/html/rfc3696#section-3). Should this attribute use the same regex validation method as its [Framework equivalent](https://github.com/Microsoft/referencesource/blob/master/System.ComponentModel.DataAnnotations/DataAnnotations/EmailAddressAttribute.cs#L54), which seems much more robust?
27322	area-System.Net	DO NOT MERGE: add request drain test to understand behavior	
27320	area-System.Drawing	Graphics.Transform does not affect clip region specified by Path on Linux	"The clip region remains in the same place, regardless of the transformation matrix. The issue is not reproducible on Windows, but reproducible on Linux. The issue is not reproducible with using of graphics.SetClip(Rectangle).    1. Run the following code on Linux:  ```c#       var bmp = new Bitmap(200, 50);       using (var graphics = Graphics.FromImage(bmp))       using(var pen = new Pen(Color.Black, 1f))       {          graphics.Clear(Color.White);                            graphics.TranslateTransform(50f,0f);            var clipRectangle = new Rectangle(0, 0, 50, 50);          graphics.DrawRectangle(pen, clipRectangle); //mark the clip area            // set clip area using path          var path = new GraphicsPath();          path.AddRectangle(clipRectangle);          graphics.SetClip(path);                            // Draw diagonal line to be clipped by rectangle          graphics.DrawLine(pen, -50,0,150,50);      }        bmp.Save(""/mnt/c/Temp/clip_linux.png"", ImageFormat.Png);  ```  2. Compare results of running the code on windows and linux    Observed: Clip area does not affected by transformation matrix and located at 0,0 point.  ![clip_linux](https://user-images.githubusercontent.com/16118282/36468035-47fab214-1714-11e8-9bb1-e38a28b6e6ed.png)    Expected: Clip area should affected by translation matrix and shifted to the right by 50 pixels like on Windows.  ![clip_win](https://user-images.githubusercontent.com/16118282/36468038-4b27777e-1714-11e8-857f-4f5b6c4ee380.png)  "
27319	area-System.Memory	Add ROSpan Equals/CompareTo/IndexOf/Contains string-like APIs with StringComparison	Part of https://github.com/dotnet/corefx/issues/21395#issuecomment-359906138    - Equals  - CompareTo  - IndexOf ~(fast span only)~  - Contains ~(fast span only)~    Depends on: https://github.com/dotnet/coreclr/pull/16467    **TODO:**  - Add more tests  - ~Verify correctness on Unix~  - ~Can we expose string.IndexOf with `out int matchedLength` parameter? Can we expose string.Contains with `StringComparison comparisonType` parameter? If not, these APIs cannot be implemented for portable span.~    cc @jkotas, @stephentoub, @KrzysztofCwalina, @tarekgh, @JeremyKuhne, @joshfree 
27318	area-System.IO	Make final API review changes to file enumeration	Tweak stack array initialization to just zero the first element in matcher algorithm.    cc: @danmosemsft @terrajobst 
27317	area-System.IO	Brotli Compression not working in an Azure Web App	Opened on behalf of @jmkni from https://github.com/dotnet/corefxlab/issues/2068    ---    Hi all    I have the Brotli compression working nicely in development, but when I push it to Azure the files just don't compress.    The Content-Encoding is returned as **br**, but the files are no smaller than with GZIP. Running locally, they are significantly smaller.    On my Azure Web App, I have installed the **Brotli HTTP Compression (x86)** extension, and I am running on 32-bit.    Any ideas?    Cheers    Edit, have tried switching to 64-bit, and using the 64-bit extension. Same issue. I have also tried both 32 and 64 bit without the extension, no joy!    Buffer size: 65520  Quality: CompressionLevel.Optimal    
27315	area-System.Net	SocketsHttpHandler: add response stream drain	When an HttpResponseMessage is disposed before the entire response stream is read, we are currently just killing the connection.    Instead, try to drain the connection (up to a limit) so that it can be reused.    @stephentoub @davidsh @dotnet/ncl   
27314	area-System.Text	RegexPrefix struct, RegexFCD buffer to ValueListBuilder & ArrayPool	**Updated results from yesterday (couldn't repro the better number in commit 2).**    before:    |     Method |     Mean |    Error |    StdDev |       Gen 0 | Allocated |  |----------- |---------:|---------:|----------:|------------:|----------:|  |  RegexCtor | 339.5 ms | 0.9025 ms | 0.8442 ms | 201000.0000 | 402.07 MB |    after:    |     Method |     Mean |    Error |    StdDev |       Gen 0 | Allocated |  |----------- |---------:|---------:|----------:|------------:|----------:|  |  RegexCtor | 312.0 ms | 1.447 ms | 1.1258 ms | 189125.0000 | 378.36 MB |    ### Results    After the first regex construction:  ~ 8% increased throughput  ~ 4% less allocation
27313	area-System.Drawing	Graphics.Measure string wrong result in case of the text broken into lines	"charsFilled output parameter value is wrong in case of text broken into lines. The issue is reproducible under linux, but not reproducible under windows.    Run the following code:  ```c#      var bmp = new Bitmap(200, 50);      using (var graphics = Graphics.FromImage(bmp))      using(var font = new Font(""Arial"", 10))      {          graphics.MeasureString(""H E L L O"", font, new SizeF(20, float.MaxValue),                      StringFormat.GenericTypographic, out var chars, out var lines);                            Console.WriteLine($""Chars fitted: {chars}"");          Console.WriteLine($""Lines fitted: {lines}"");      }  ```    Observed: console output is  Chars fitted: 3  Lines fitted: 4    Expected: console output is   Chars fitted: 9  Lines fitted: 4    "
27312	area-System.Drawing	Graphics.MeasureString wrong results in case of PageUnit is Point and all chars fitted	"charsFitted and linesFitted output paramters values are 0 in case of text fitted in provided area and graphics's PageUnit is Point. The issue is reproducible under linux, but not reproducible under Windows.    Run the following code under linux  ```c#      var bmp = new Bitmap(200, 50);      using (var graphics = Graphics.FromImage(bmp))      using(var font = new Font(""Arial"", 10))      {          graphics.PageUnit = GraphicsUnit.Point;          graphics.MeasureString(""HELLO"", font, new SizeF(float.MaxValue, float.MaxValue),                      StringFormat.GenericTypographic, out var chars, out var lines);                             Console.WriteLine($""Chars fitted: {chars}"");           Console.WriteLine($""Lines fitted: {lines}"");        }  ```  Observed: Console output is  Chars fitted: 0  Lines fitted: 0    Expected: Console output is  Chars fitted: 5  Lines fitted: 1    "
27310	area-System.Drawing	Translation vector of Transformation matrix works incorrect when PageUnit is Point.	"The issue is observed on linux platform, but not observed on the Windows. Its looks like graphics.PageUnits does not taken into account on applying of translation vector to the graphical objects.    1. Run the following code:    ```c#      var bmp = new Bitmap(200, 50);      using (var graphics = Graphics.FromImage(bmp))      using(var font = new Font(""Arial"", 10))      using(var brush = new SolidBrush(Color.Black))      using(var bgBrush = new SolidBrush(Color.White))      {              //Fill background              graphics.PageUnit = GraphicsUnit.Pixel;              graphics.FillRectangle(bgBrush, 0, 0, 200, 100);                                // Draw text with 10 pixel offset              graphics.PageUnit = GraphicsUnit.Pixel;              graphics.Transform = new Matrix(1,0,0,1,10,0);              graphics.DrawString(""|<- 10 pixels offset"", font, brush, 0,0);                                // Draw text with 10 points offset              graphics.PageUnit = GraphicsUnit.Point;              graphics.DrawString(""|<- 10 points offset"", font, brush, 0,10);                                Console.WriteLine(""Actual Dpi is: "" + graphics.DpiX);//96          }      bmp.Save(""units.png"", ImageFormat.Png);  }  ```  2. Open generated png file    Observed: both line of the text have the same offset - 10px (see attached units_linux.png)  ![units_linux](https://user-images.githubusercontent.com/16118282/36460187-e2537272-16e9-11e8-98dd-56b8600c4d8d.png)    Expected: Second line should have 10 points offset (or ~13px for 96 dpi) (see attached units_win.png)  ![units_win](https://user-images.githubusercontent.com/16118282/36460193-e6d3a786-16e9-11e8-8ada-047c220fa28b.png)  "
27307	area-System.Data	Issue connecting to MS SQL Server running on non default port 1433	"@mahesji commented on [Fri Feb 09 2018](https://github.com/dotnet/core/issues/1264)  # Issue Title    Issue connecting to MS SQL Server running on non default port 1433 from Linux environment     **OS Version**  Linux 4.4.0-109-generic #132~14.04.1-Ubuntu SMP Tue Jan 9 21:46:42 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux    dotnet core project settings   ```  <Project Sdk=""Microsoft.NET.Sdk.Web"">      <PropertyGroup>      <TargetFramework>netcoreapp2.0</TargetFramework>      <RuntimeFrameworkVersion>2.0.5</RuntimeFrameworkVersion>    </PropertyGroup>      <ItemGroup>      <Folder Include=""wwwroot\"" />    </ItemGroup>      <ItemGroup>      <PackageReference Include=""Microsoft.AspNetCore.All"" Version=""2.0.5"" />      <PackageReference Include=""System.Data.SqlClient"" Version=""4.4.2"" />    </ItemGroup>      <ItemGroup>      <DotNetCliToolReference Include=""Microsoft.VisualStudio.Web.CodeGeneration.Tools"" Version=""2.0.2"" />    </ItemGroup>    </Project>    ```  # General  Using System.Data.SqlClient to connect to Sql server database. Following the sample in this post https://blogs.msdn.microsoft.com/dotnet/2016/11/09/net-core-data-access/    It works fine if the sql server is listening on port 1433 but fails when connecting to sql servers listening on port 1434. Confirmed that there is no network / firewall issues that that is blocking the ports. Able to connect to the same sql server on port 1434 using java code.  This connection string works >  Server=myhostname,1433;Database=mydatabase;User Id=myuser;Password=mypassword;  This connection string does not work in above linux environment.  Works fine on windows  Server=myhostname,1434;Database=mydatabase;User Id=myuser;Password=mypassword;    Both connect strings work fine in Windows environment.    Record Fetch Error: A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: TCP Provider, error: 35 - An internal exception was caught)  ---  @usergiga commented on [Fri Feb 09 2018](https://github.com/dotnet/core/issues/1264#issuecomment-364605423)  If an instance of SQL Server is listening on any other port, than 1433. You have to specify a server-alias or change the standard port globally.   You can have SQL Server listening on multiple ports.   ---  @mahesji commented on [Mon Feb 12 2018](https://github.com/dotnet/core/issues/1264#issuecomment-364967845)  @usergiga , Thank you for the reply.  I have the alias created and that doesn't seem to help. The connection works fine in Windows runtime.  Have this issue only in the Linux (Ubuntu) runtime.    "
27306	area-System.Runtime	DateTime.TryParse produces different results in different environments	"@Doff3n commented on [Wed Feb 14 2018](https://github.com/dotnet/core/issues/1267)  # DateTime.TryParse produces different results in different environments        # General  I am trying to parse a date, with DateTime.TryParse and with a provided Norwegian culture and no DatetimeStyles:  ``` csharp  var result: DateTime.TryParse(""29.01"", new CultureInfo(""nb-NO"", false), DateTimeStyles.None, out var parsedDateTime)  ```     I am purposely sending in ""29.01"" and expecting the result to parse to a default Datetime: ""29.01.2018"",  I also expect that 29.01.18 and 29.01.2018 parses to the correct dates.     In norway the date format is dd.MM.YYYY HH:mm  Code:  https://github.com/Doff3n/HelloDate    Commands:  - dotnet build  - dotnet run    Running this on my PC:  - dotnet run  parsedDateTime: 29.01.2018 00:00:00  result: True    Running this on the VM:  - dotnet run  parsedDateTime: 01.01.0001 00.00.00  result: False    .Net core sdk version: 2.1.4, runtime: 2.0.5    In desperation I have also tried setting Date and Time formats in Windows, but I would have expected the property UseUserOverride: false to not allow user settings.    "
27305	area-System.Net	Behavioral difference between Linux and Windows in httprequest with 302 reply and #	"@jdelrue commented on [Thu Feb 01 2018](https://github.com/dotnet/core/issues/1246)  # General  Operating system 1: Windows 10  Operating system 2: Ubuntu (16.04 or 17.04)    Execute:    ```  using System;  using System.Net.Http;  using System.Threading.Tasks;    namespace redirtest  {      class Program      {          static void Main(string[] args)          {              var res = Task.Run(async () => await method());              res.Wait();          }          public static async Task method()          {              using (var client = new HttpClient(new HttpClientHandler              {                  AllowAutoRedirect = true              }))              {                  var connect = await client.GetAsync(""http://www.jimber.org/redirect.php"");                  var requestUri = connect.RequestMessage.RequestUri.AbsoluteUri;                  Console.WriteLine(requestUri);                }          }      }  }  ```  Output Windows: http://www.google.be/#youdontgetthisinlinux  Output Linux: http://www.google.be/      Expected output is the Windows version. Workaround: Disable autoredirect and read location header.    "
27304	area-System.Runtime	Check if app is run by sudo/admin on Linux	@maroallegro commented on [Mon Jan 29 2018](https://github.com/dotnet/core/issues/1244)  I am trying to check if .NetCore code is running as sudo/admin on Linux. It works on Windows but throws exception on Linux.    How do I check if app is run by admin/sudo on Ubuntu Linux by using .NET Core2.0 build-in class?    Here is the code I have tried (however i thought that it will not manage admin rights on Linux):  ```  using System;  using System.Security.Principal;    namespace smallTestsCore  {      class Program      {          static void Main(string[] args)          {              Console.WriteLine(Program.IsAdministrator);              Console.ReadLine();          }          public static bool IsAdministrator =>              new WindowsPrincipal(WindowsIdentity.GetCurrent())                  .IsInRole(WindowsBuiltInRole.Administrator);      }  }  ```  The code works on Windows, but does not work on Linux:    ```  Exception has occurred: CLR/System.PlatformNotSupportedException  An unhandled exception of type 'System.PlatformNotSupportedException' occurred in  System.Security.Principal.Windows.dll: 'Windows Principal functionality is not supported on this platform.'    at System.Security.Principal.WindowsIdentity.GetCurrent()     at adminTst.Program.get_IsAdministrator() in /home/user/adminTst/Program.cs:line 15     at adminTst.Program.Main(String[] args) in /home/user/adminTst/Program.cs:line 11  ```  
27302	area-System.Net	[wcf.stress]: SocketsHttpHandler Test:Streaming Async:false Binding:Http StressRunDuration:4	Using `Async:true` we get the same exception wrapped on an `AggregateException`. `WinHttpHandler` completes this test without errors. The error message is suspicious in the sense that it seems to indicate that the server terminated the connection.    /cc @KKhurin     ```  Test:Streaming  Async:false  Binding:Http  StressRunDuration:4  ExitOnSuccess:True  Using CLITest-LocalCoreFX as the stress run name.  Start  2/20/2018 10:35:14 PM 1 0  2/20/2018 10:35:14 PM 8 0  2/20/2018 10:35:14 PM 3 0  2/20/2018 10:35:14 PM 4 0  2/20/2018 10:35:14 PM 0 0  2/20/2018 10:35:14 PM 2 0  2/20/2018 10:35:14 PM 5 0  2/20/2018 10:35:14 PM 7 0  2/20/2018 10:35:14 PM 6 0  2/20/2018 10:35:14 PM 9 0  2/20/2018 10:36:11 PM 9 100  2/20/2018 10:36:11 PM 1 100  2/20/2018 10:36:11 PM 0 100  2/20/2018 10:36:11 PM 6 100  2/20/2018 10:36:11 PM 3 100  2/20/2018 10:36:11 PM 4 100  2/20/2018 10:36:11 PM 8 100  2/20/2018 10:36:11 PM 5 100  2/20/2018 10:36:11 PM 7 100  2/20/2018 10:36:11 PM 2 100  System.IO.IOException: An exception has been thrown when reading the stream. ---> System.IO.IOException: Unable to transfer data on the transport connection: The I/O operation has been aborted because of either a thread exit or an application request. ---> System.Net.Sockets.SocketException: The I/O operation has been aborted because of either a thread exit or an application request     --- End of inner exception stack trace ---     at System.Net.Http.HttpConnection.FillAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1078     at System.Net.Http.HttpConnection.ReadNextLineAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1038     at System.Net.Http.HttpConnection.ChunkedEncodingReadStream.TryGetNextChunkAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ChunkedEncodingReadStream.cs:line 39     at System.Net.Http.HttpConnection.ChunkedEncodingReadStream.ReadAsync(Memory`1 destination, CancellationToken cancellationToken) in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ChunkedEncodingReadStream.cs:line 120     at System.Net.Http.HttpContentReadStream.Read(Byte[] buffer, Int32 offset, Int32 count) in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpContentReadStream.cs:line 30     at System.ServiceModel.Channels.BufferedReadStream.Read(Byte[] array, Int32 offset, Int32 count)     at System.ServiceModel.Channels.MaxMessageSizeStream.Read(Byte[] buffer, Int32 offset, Int32 count)     at System.Xml.EncodingStreamWrapper.Read(Byte[] buffer, Int32 offset, Int32 count) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\EncodingStreamWrapper.cs:line 629     at System.Xml.XmlBufferReader.TryEnsureBytes(Int32 count) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlBufferReader.cs:line 232     at System.Xml.XmlUTF8TextReader.ReadText(Boolean hasLeadingByteOf0xEF) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlUTF8TextReader.cs:line 1254     at System.Xml.XmlUTF8TextReader.Read() in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlUTF8TextReader.cs:line 1363     at System.Xml.XmlBaseReader.MoveToContent() in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlBaseReader.cs:line 878     at System.ServiceModel.Dispatcher.StreamFormatter.MessageBodyStream.Read(Byte[] buffer, Int32 offset, Int32 count)     --- End of inner exception stack trace ---     at System.ServiceModel.Dispatcher.StreamFormatter.MessageBodyStream.Read(Byte[] buffer, Int32 offset, Int32 count)     at SharedPoolsOfWCFObjects.VerifiableStream.VerifyStream(Stream stream, Int32 expectedStreamSize, Int32 bufSize, Boolean verifyContent) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\StreamingTest.cs:line 387     at SharedPoolsOfWCFObjects.StreamingTest`2.TestEchoStream(StreamingRequestContext`1 details) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\StreamingTest.cs:line 264     at SharedPoolsOfWCFObjects.CallStats.CallFuncAndRecordStats[T](Func`1 func, Boolean hideExceptions) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\CallStats.cs:line 71  System.IO.IOException: An exception has been thrown when reading the stream. ---> System.IO.IOException: Unable to transfer data on the transport connection: The I/O operation has been aborted because of either a thread exit or an application request. ---> System.Net.Sockets.SocketException: The I/O operation has been aborted because of either a thread exit or an application request     --- End of inner exception stack trace ---     at System.Net.Http.HttpConnection.FillAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1078     at System.Net.Http.HttpConnection.ReadNextLineAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1038     at System.Net.Http.HttpConnection.ChunkedEncodingReadStream.TryGetNextChunkAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ChunkedEncodingReadStream.cs:line 39     at System.Net.Http.HttpConnection.ChunkedEncodingReadStream.ReadAsync(Memory`1 destination, CancellationToken cancellationToken) in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ChunkedEncodingReadStream.cs:line 120     at System.Net.Http.HttpContentReadStream.Read(Byte[] buffer, Int32 offset, Int32 count) in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpContentReadStream.cs:line 30     at System.ServiceModel.Channels.BufferedReadStream.Read(Byte[] array, Int32 offset, Int32 count)     at System.ServiceModel.Channels.MaxMessageSizeStream.Read(Byte[] buffer, Int32 offset, Int32 count)     at System.Xml.EncodingStreamWrapper.Read(Byte[] buffer, Int32 offset, Int32 count) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\EncodingStreamWrapper.cs:line 629     at System.Xml.XmlBufferReader.TryEnsureBytes(Int32 count) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlBufferReader.cs:line 232     at System.Xml.XmlUTF8TextReader.ReadText(Boolean hasLeadingByteOf0xEF) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlUTF8TextReader.cs:line 1254     at System.Xml.XmlUTF8TextReader.Read() in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlUTF8TextReader.cs:line 1363     at System.Xml.XmlBaseReader.MoveToContent() in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlBaseReader.cs:line 878     at System.ServiceModel.Dispatcher.StreamFormatter.MessageBodyStream.Read(Byte[] buffer, Int32 offset, Int32 count)     --- End of inner exception stack trace ---     at System.ServiceModel.Dispatcher.StreamFormatter.MessageBodyStream.Read(Byte[] buffer, Int32 offset, Int32 count)     at SharedPoolsOfWCFObjects.VerifiableStream.VerifyStream(Stream stream, Int32 expectedStreamSize, Int32 bufSize, Boolean verifyContent) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\StreamingTest.cs:line 387     at SharedPoolsOfWCFObjects.StreamingTest`2.TestEchoStream(StreamingRequestContext`1 details) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\StreamingTest.cs:line 264     at SharedPoolsOfWCFObjects.CallStats.CallFuncAndRecordStats[T](Func`1 func, Boolean hideExceptions) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\CallStats.cs:line 81     at SharedPoolsOfWCFObjects.CommonMultiCallTest`3.<UseChannel>b__0_0(ChannelType channel) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\CommonTest.cs:line 337     at SharedPoolsOfWCFObjects.PooledFactoriesAndChannels`3.UseAllChannelsInPooledFactoriesAndChannels() in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\SharedPoolsOfWCFObjects.cs:line 244     at SharedPoolsOfWCFObjects.Program.RunAllStressTests[ChannelType,TestTemplate,TestParams]() in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Program.cs:line 632     at SharedPoolsOfWCFObjects.Program.<>c__DisplayClass53_0.<DoTheStressRun>b__0() in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Program.cs:line 551     at SharedPoolsOfWCFObjects.Program.<>c__DisplayClass54_1.<<DoTheStressRunImpl>b__1>d.MoveNext() in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Program.cs:line 587  System.IO.IOException: An exception has been thrown when reading the stream. ---> System.IO.IOException: Unable to transfer data on the transport connection: The I/O operation has been aborted because of either a thread exit or an application request. ---> System.Net.Sockets.SocketException: The I/O operation has been aborted because of either a thread exit or an application request     --- End of inner exception stack trace ---     at System.Net.Http.HttpConnection.FillAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1078     at System.Net.Http.HttpConnection.ReadNextLineAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1038     at System.Net.Http.HttpConnection.ChunkedEncodingReadStream.TryGetNextChunkAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ChunkedEncodingReadStream.cs:line 39     at System.Net.Http.HttpConnection.ChunkedEncodingReadStream.ReadAsync(Memory`1 destination, CancellationToken cancellationToken) in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ChunkedEncodingReadStream.cs:line 120     at System.Net.Http.HttpContentReadStream.Read(Byte[] buffer, Int32 offset, Int32 count) in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpContentReadStream.cs:line 30     at System.ServiceModel.Channels.BufferedReadStream.Read(Byte[] array, Int32 offset, Int32 count)     at System.ServiceModel.Channels.MaxMessageSizeStream.Read(Byte[] buffer, Int32 offset, Int32 count)     at System.Xml.EncodingStreamWrapper.Read(Byte[] buffer, Int32 offset, Int32 count) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\EncodingStreamWrapper.cs:line 629     at System.Xml.XmlBufferReader.TryEnsureBytes(Int32 count) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlBufferReader.cs:line 232     at System.Xml.XmlUTF8TextReader.ReadText(Boolean hasLeadingByteOf0xEF) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlUTF8TextReader.cs:line 1254     at System.Xml.XmlUTF8TextReader.Read() in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlUTF8TextReader.cs:line 1363     at System.Xml.XmlBaseReader.MoveToContent() in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlBaseReader.cs:line 878     at System.ServiceModel.Dispatcher.StreamFormatter.MessageBodyStream.Read(Byte[] buffer, Int32 offset, Int32 count)     --- End of inner exception stack trace ---     at System.ServiceModel.Dispatcher.StreamFormatter.MessageBodyStream.Read(Byte[] buffer, Int32 offset, Int32 count)     at SharedPoolsOfWCFObjects.VerifiableStream.VerifyStream(Stream stream, Int32 expectedStreamSize, Int32 bufSize, Boolean verifyContent) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\StreamingTest.cs:line 387     at SharedPoolsOfWCFObjects.StreamingTest`2.TestEchoStream(StreamingRequestContext`1 details) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\StreamingTest.cs:line 264     at SharedPoolsOfWCFObjects.CallStats.CallFuncAndRecordStats[T](Func`1 func, Boolean hideExceptions) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\CallStats.cs:line 71  System.IO.IOException: An exception has been thrown when reading the stream. ---> System.IO.IOException: Unable to transfer data on the transport connection: The I/O operation has been aborted because of either a thread exit or an application request. ---> System.Net.Sockets.SocketException: The I/O operation has been aborted because of either a thread exit or an application request     --- End of inner exception stack trace ---     at System.Net.Http.HttpConnection.FillAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1078     at System.Net.Http.HttpConnection.ReadNextLineAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1038     at System.Net.Http.HttpConnection.ChunkedEncodingReadStream.TryGetNextChunkAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ChunkedEncodingReadStream.cs:line 39     at System.Net.Http.HttpConnection.ChunkedEncodingReadStream.ReadAsync(Memory`1 destination, CancellationToken cancellationToken) in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ChunkedEncodingReadStream.cs:line 120     at System.Net.Http.HttpContentReadStream.Read(Byte[] buffer, Int32 offset, Int32 count) in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpContentReadStream.cs:line 30     at System.ServiceModel.Channels.BufferedReadStream.Read(Byte[] array, Int32 offset, Int32 count)     at System.ServiceModel.Channels.MaxMessageSizeStream.Read(Byte[] buffer, Int32 offset, Int32 count)     at System.Xml.EncodingStreamWrapper.Read(Byte[] buffer, Int32 offset, Int32 count) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\EncodingStreamWrapper.cs:line 629     at System.Xml.XmlBufferReader.TryEnsureBytes(Int32 count) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlBufferReader.cs:line 232     at System.Xml.XmlUTF8TextReader.ReadText(Boolean hasLeadingByteOf0xEF) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlUTF8TextReader.cs:line 1254     at System.Xml.XmlUTF8TextReader.Read() in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlUTF8TextReader.cs:line 1363     at System.Xml.XmlBaseReader.MoveToContent() in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlBaseReader.cs:line 878     at System.ServiceModel.Dispatcher.StreamFormatter.MessageBodyStream.Read(Byte[] buffer, Int32 offset, Int32 count)     --- End of inner exception stack trace ---     at System.ServiceModel.Dispatcher.StreamFormatter.MessageBodyStream.Read(Byte[] buffer, Int32 offset, Int32 count)     at SharedPoolsOfWCFObjects.VerifiableStream.VerifyStream(Stream stream, Int32 expectedStreamSize, Int32 bufSize, Boolean verifyContent) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\StreamingTest.cs:line 387     at SharedPoolsOfWCFObjects.StreamingTest`2.TestEchoStream(StreamingRequestContext`1 details) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\StreamingTest.cs:line 264     at SharedPoolsOfWCFObjects.CallStats.CallFuncAndRecordStats[T](Func`1 func, Boolean hideExceptions) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\CallStats.cs:line 81     at SharedPoolsOfWCFObjects.CommonMultiCallTest`3.<UseChannel>b__0_0(ChannelType channel) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\CommonTest.cs:line 337     at SharedPoolsOfWCFObjects.PooledFactoriesAndChannels`3.UseAllChannelsInPooledFactoriesAndChannels() in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\SharedPoolsOfWCFObjects.cs:line 244     at SharedPoolsOfWCFObjects.Program.RunAllStressTests[ChannelType,TestTemplate,TestParams]() in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Program.cs:line 632     at SharedPoolsOfWCFObjects.Program.<>c__DisplayClass53_0.<DoTheStressRun>b__0() in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Program.cs:line 551     at SharedPoolsOfWCFObjects.Program.<>c__DisplayClass54_1.<<DoTheStressRunImpl>b__1>d.MoveNext() in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Program.cs:line 587  System.IO.IOException: An exception has been thrown when reading the stream. ---> System.IO.IOException: Unable to transfer data on the transport connection: The I/O operation has been aborted because of either a thread exit or an application request. ---> System.Net.Sockets.SocketException: The I/O operation has been aborted because of either a thread exit or an application request     --- End of inner exception stack trace ---     at System.Net.Http.HttpConnection.FillAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1078     at System.Net.Http.HttpConnection.ReadNextLineAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1038     at System.Net.Http.HttpConnection.ChunkedEncodingReadStream.TryGetNextChunkAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ChunkedEncodingReadStream.cs:line 39     at System.Net.Http.HttpConnection.ChunkedEncodingReadStream.ReadAsync(Memory`1 destination, CancellationToken cancellationToken) in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ChunkedEncodingReadStream.cs:line 120     at System.Net.Http.HttpContentReadStream.Read(Byte[] buffer, Int32 offset, Int32 count) in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpContentReadStream.cs:line 30     at System.ServiceModel.Channels.BufferedReadStream.Read(Byte[] array, Int32 offset, Int32 count)     at System.ServiceModel.Channels.MaxMessageSizeStream.Read(Byte[] buffer, Int32 offset, Int32 count)     at System.Xml.EncodingStreamWrapper.Read(Byte[] buffer, Int32 offset, Int32 count) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\EncodingStreamWrapper.cs:line 629     at System.Xml.XmlBufferReader.TryEnsureBytes(Int32 count) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlBufferReader.cs:line 232     at System.Xml.XmlUTF8TextReader.ReadText(Boolean hasLeadingByteOf0xEF) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlUTF8TextReader.cs:line 1254     at System.Xml.XmlUTF8TextReader.Read() in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlUTF8TextReader.cs:line 1363     at System.Xml.XmlBaseReader.MoveToContent() in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlBaseReader.cs:line 878     at System.ServiceModel.Dispatcher.StreamFormatter.MessageBodyStream.Read(Byte[] buffer, Int32 offset, Int32 count)     --- End of inner exception stack trace ---     at System.ServiceModel.Dispatcher.StreamFormatter.MessageBodyStream.Read(Byte[] buffer, Int32 offset, Int32 count)     at SharedPoolsOfWCFObjects.VerifiableStream.VerifyStream(Stream stream, Int32 expectedStreamSize, Int32 bufSize, Boolean verifyContent) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\StreamingTest.cs:line 387     at SharedPoolsOfWCFObjects.StreamingTest`2.TestEchoStream(StreamingRequestContext`1 details) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\StreamingTest.cs:line 264     at SharedPoolsOfWCFObjects.CallStats.CallFuncAndRecordStats[T](Func`1 func, Boolean hideExceptions) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\CallStats.cs:line 71  ```  
27301	area-System.Net	CurlHandler: Transfer-Encoding incorrectly sent on redirect from POST to GET	If the initial request is a POST, and Transfer-Encoding: chunked is true for the request, and we receive a redirect code that forces the method to GET instead of POST, then CurlHandler is incorrectly sending Transfer-Encoding: chunked on the redirected GET request.    
27299	area-System.ComponentModel	System.ComponentModel.Composition is missing a typeforward for Lazy<T,TMetadata>	"@joperezr and I noticed this when having a discussion.    System.ComponentModel.Composition reference assembly is missing a type-forward for System.Lazy<T, TMetadata>.    As a result, when you use a .NET assembly which makes use of this type and reference System.ComponentModel.Composition, you will see a compile error.    ```  Error CS0012 The type 'Lazy<,>' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.ComponentModel.Composition, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.  ```    See attached sample.  [LazySample.zip](https://github.com/dotnet/corefx/files/1742137/LazySample.zip)    We should fix this by added the typeforward to the ref.     This also raises the question of  ""what goes in netcoreapp2.1""?  We can't remove System.ComponentModel.Composition.dll since that will be a breaking change.  It was present in 2.0 in order to typeforward this one type to System.Runtime.  Should we include all of MEF? /cc @weshaggard @danmosemsft   "
27298	area-System.Data	Updated contract, exposed SqlMetaData ctors	Updated contract, exposed SqlMetaData ctors and added SqlParameterCollection properties.    Completed the following types:  M:Microsoft.SqlServer.Server.SqlMetaData..ctor(System.String, System.Data.SqlDbType, System.Type, System.String)   M:Microsoft.SqlServer.Server.SqlMetaData..ctor(System.String, System.Data.SqlDbType, System.Type, System.String, System.Boolean, System.Boolean, System.Data.SqlClient.SortOrder, System.Int32)  P:Microsoft.SqlServer.Server.SqlMetaData.DbType {get;}  P:Microsoft.SqlServer.Server.SqlMetaData.Type {get;}  P:System.Data.SqlClient.SqlParameterCollection.IsFixedSize  P:System.Data.SqlClient.SqlParameterCollection.IsReadOnly M:System.Data.SqlClient.SqlDataReader.IsCommandBehavior(System.Data.CommandBehavior)         Adding reviewers:  @saurabh500 @corivera @geleems 
27297	area-System.Data	System.Data.Tests.DataTableTest.WriteXmlSchema3 test failed in CI on netfx	"```  System.Data.Tests.DataTableTest.WriteXmlSchema3 [FAIL]          Assert.Equal() Failure          Expected: ���CurrentLocale=""true"">\n    <xs:complexType>\n      <xs:choice m���          Actual:   ���CurrentLocale=""true"" msdata:EnforceConstraints=""True"">\n    <x���               at System.Data.Tests.DataTableTest.WriteXmlSchema3()  ```  https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_false_prtest/8520/consoleText"
27296	area-System.Runtime	Testing GetHashCode works properly when using string with embedded null	Related to #27098
27295	area-System.Net	SocketsHttpHandler: should validate request after chained handlers execute	The code in `SocketsHttpHandler::ValidateAndNormalizeRequest` is performing some checks on request validity, e.g. don't allow chunked encoding if there's no content.    These checks happen before the chained handlers (redirect, auth, etc) execute.  Because of this, it's possible that one of these handlers could modify the request to be invalid.  (In fact, we hit this previously because the redirect handler was changing POST to GET and clearing content but not removing Transfer-Encoding: chunked.)    Just to be safe, we should at least consider moving the validation logic to execute after the chained handers run, but before we try to establish a connection.
27293	area-System.Net	SocketsHttpHandler: proxy auth should choose digest over basic	There's logic in the regular auth handler to choose digest over basic if both exist in the 401 challenge.    The proxy logic doesn't seem to do this, it chooses whichever it finds first.
27292	area-System.Net	Expose SocketsHttpHandler.ConnectTimeout/Expect100ContinueTimeout	cc: @geoffkizer, @davidsh, @wfurt, @Priya91   Fixes https://github.com/dotnet/corefx/issues/27145  Fixes https://github.com/dotnet/corefx/issues/27235
27291	area-System.Net	SocketsHttpHandler cancellation test failures on windows	  [20180220.06 SocketsHttpHandler - Win7](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180220.06/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Cancellation_Test~2FConnectTimeout_TimesOutSSLAuth_Throws)    ```  Assert.InRange() Failure  Range:  (500 - 10000)  Actual: 19271        at System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Cancellation_Test.<>c__DisplayClass10_0.<<ConnectTimeout_TimesOutSSLAuth_Throws>b__0>d.MoveNext() in E:\A\_work\19\s\corefx\src\System.Net.Http\tests\FunctionalTests\SocketsHttpHandlerTest.cs:line 235  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext() in E:\A\_work\19\s\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 81  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in E:\A\_work\19\s\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 64     at System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Cancellation_Test.ConnectTimeout_TimesOutSSLAuth_Throws() in E:\A\_work\19\s\corefx\src\System.Net.Http\tests\FunctionalTests\SocketsHttpHandlerTest.cs:line 222  --- End of stack trace from previous location where exception was thrown ---  ```      [20180220.07 SocketsHttpHandler - Win10](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180220.07/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Cancellation_Test~2FConnectTimeout_TimesOutSSLAuth_Throws)    ```  Assert.InRange() Failure  Range:  (500 - 10000)  Actual: 14177       at System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Cancellation_Test.<>c__DisplayClass10_0.<<ConnectTimeout_TimesOutSSLAuth_Throws>b__0>d.MoveNext() in E:\A\_work\14\s\corefx\src\System.Net.Http\tests\FunctionalTests\SocketsHttpHandlerTest.cs:line 235  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext() in E:\A\_work\14\s\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 81  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in E:\A\_work\14\s\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 64     at System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Cancellation_Test.ConnectTimeout_TimesOutSSLAuth_Throws() in E:\A\_work\14\s\corefx\src\System.Net.Http\tests\FunctionalTests\SocketsHttpHandlerTest.cs:line 222  --- End of stack trace from previous location where exception was thrown ---  ```  
27287	area-System.Threading	Improve thread name and start tests	Checking https://github.com/dotnet/coreclr/issues/16449 in CI
27285	area-System.Net	SocketsHttpHandler: Correct behavior when MaxAutomaticRedirections is exceeded?	Currently, if MaxAutomaticRedirections is exceeded, we throw an exception.  This matches WinHttpHandler/CurlHandler.    This does not match full framework behavior, though.  Framework will simply stop redirecting and return the last 3xx response.    The latter seems slightly better to me.  However, it also means the user needs to handle this case and not assume a 200 response.  They pretty much have to do this anyway since the response could always be 4xx or 5xx anyway, but it's still one more situation for them to handle.    See HttpClientHandlerTest.GetAsync_MaxAutomaticRedirectionsNServerHops_ThrowsIfTooMany.
27283	area-System.Data	.Net Core ExecuteReader GetSchemaTable() method not returning the BaseTableName and more details.	"_From @ezra2310 on February 17, 2018 16:54_    Hi,    In .Net Core ExecuteReader.GetSchemaTable() method not returning the BaseTableName and more details of the query will executed.    I'm created an console application in Core .Net 2.0. The below code has written and do some R&D. Its working in .net Framework 4x version and get all schema details as BaseTablename,BaseColumn,etc.... But in Core .Net 2.0 the BaseTableName was not returning.    Im tried in various way but still im not got the route. Can you please help me how to get the BaseTableName and all those details.    Its very important R&D undergoing. Can you anybody please help me ??  ```c#  SqlConnection sqlCnn = new SqlConnection(connetionString);  sqlCnn.Open();  SqlCommand sqlCmd = new SqlCommand(sql, sqlCnn);    SqlDataReader sqlReader = sqlCmd.ExecuteReader(CommandBehavior.KeyInfo);    List<string> gotTableNames = new List<string>();  DataTable schemaTable = sqlReader.GetSchemaTable();    foreach (DataRow dr in schemaTable.Rows)  {     string data = Convert.ToString(dr[""BaseTableName""]);     if (!gotTableNames.Contains(data))     {        gotTableNames.Add(data);     }  }    return string.Join("","", gotTableNames);  ```  [edit by @danmosemsft to add triple tick formatting]  _Copied from original issue: aspnet/Mvc#7389_"
27281	area-Serialization	Microsoft.XmlSerializer.Generator fails when project targets multiple frameworks	"I am currently benchmarking all serializers. I want to compare `XmlSerializer` with SGEN enabled and disabled.    The problem:  when my project targets multiple frameworks (I need to compare Core 2.0 vs 2.1 vs .desktop 4.7.1) the tool fails.    Repro: create a new console app and change TargetFramework to TargetFramework**s**    ```xml  <?xml version=""1.0"" encoding=""utf-8""?>  <configuration>   <packageSources>      <!--To inherit the global NuGet package sources remove the <clear/> line below -->      <clear />      <add key=""api.nuget.org"" value=""https://api.nuget.org/v3/index.json"" protocolVersion=""3"" />      <add key=""corefx CI"" value=""https://dotnet.myget.org/F/dotnet-core/api/v3/index.json"" />   </packageSources>  </configuration>  ```    ```xml  <Project Sdk=""Microsoft.NET.Sdk"">    <PropertyGroup>      <OutputType>Exe</OutputType>      <TargetFrameworks>netcoreapp2.1</TargetFrameworks> <!-- S IS CRUCIAL HERE -->    </PropertyGroup>      <ItemGroup>      <PackageReference Include=""Microsoft.XmlSerializer.Generator"" Version=""2.0.0-preview2-26216-03"" />      <PackageReference Include=""System.Xml.XmlSerializer"" Version=""4.3.0"" />    </ItemGroup>  </Project>  ```    ```cs  class Program  {      static void Main(string[] args)      {          var xmlSerializer = new XmlSerializer(typeof(Test));            Console.WriteLine(xmlSerializer);      }  }    public class Test  {      public int A, B;  }  ```    Now if I run `dotnet build -c Release -f netcoreapp2.1` it fails with:    ```  PS C:\Users\adsitnik\source\repos\ConsoleApp14> dotnet build -c Release -f netcoreapp2.1  Microsoft (R) Build Engine version 15.6.54.9755 for .NET Core  Copyright (C) Microsoft Corporation. All rights reserved.      Restore completed in 59,85 ms for C:\Users\adsitnik\source\repos\ConsoleApp14\ConsoleApp14.csproj.    ConsoleApp14 -> C:\Users\adsitnik\source\repos\ConsoleApp14\bin\Release\netcoreapp2.1\ConsoleApp14.dll    No executable found matching command ""dotnet-Microsoft.XmlSerializer.Generator""  C:\Users\adsitnik\.nuget\packages\microsoft.xmlserializer.generator\2.0.0-preview2-26216-03\build\Microsoft.XmlSerializer.Generator.targets(15,5): warning MSB3073: The command ""dotnet Microsoft.XmlSerializer.Generator obj\Release\netcoreapp2.1\ConsoleApp14.dll /force /quiet"" exited with code 1. [C:\Users\adsitnik\source\repos\ConsoleApp14\ConsoleApp14.csproj]  C:\Users\adsitnik\.nuget\packages\microsoft.xmlserializer.generator\2.0.0-preview2-26216-03\build\Microsoft.XmlSerializer.Generator.targets(16,5): warning : SGEN : warning SGEN1: Fail to generate the serializer for ConsoleApp14.dll. Please follow the instructions at https://go.microsoft.com/fwlink/?linkid=858594 and try again. [C:\Users\adsitnik\source\repos\ConsoleApp14\ConsoleApp14.csproj]  ```    @huanwu I am new to the company, but I can see that you have been working on this feature. Can you recommend me any fix/workaround?    /cc @jorive           "
27279	area-System.IO	GZipStream cannot decompress multipart gzip files. 	"See the following [stackoverflow thread](https://stackoverflow.com/questions/47743788/gzipstream-from-memorystream-only-returns-a-few-hundred-bytes  ) for more information.    GZipStream currently fails if you try to decompress a concatenated gzip file. The RFC does state that two gzip files can be cated together and it is also a valid gzip file. However, the current implementation can only read the first gzip stream and stops there. Here is a simple repro::  ```cs  using System;  using System.IO;  using System.IO.Compression;  class Program  {      static void Main()      {          using (var fs = new FileStream(Path.Combine(Environment.CurrentDirectory,""test.txt.gz""), FileMode.Create))          {              using(var gz = new GZipStream(fs, CompressionLevel.NoCompression, true))              using(var sw = new StreamWriter(gz))                  sw.WriteLine(""Stream 1"");                                using(var gz = new GZipStream(fs, CompressionLevel.NoCompression, true))              using(var sw = new StreamWriter(gz))                  sw.WriteLine(""Stream 2"");                            fs.Seek(0, SeekOrigin.Begin);              using (var gz = new GZipStream(fs, CompressionMode.Decompress))              using (var sr = new StreamReader(gz))              Console.WriteLine(sr.ReadToEnd());          }      }  }  ```    The expected output should be  ```  Stream 1  Stream 2  ```  But the actual output is just `Stream 1`.    If you open up ""test.txt.gz"" in your favorite gzip util, like 7z, you will be able to extract the file and you will see the correct output."
27278	area-System.Text	Improve Regex cache speed when cache is large	Fixes https://github.com/dotnet/corefx/issues/24425  Fixes https://github.com/dotnet/corefx/issues/26364    A try to speed up cache using `Dictionary<CachedCodeEntryKey, CachedCodeEntry>`, refs #24425 
27277	area-Infrastructure	E:\A\_work\2704\b\pipelineRepository\Tools\Symbols.targets(508,5): error : PDB0023: No supported URIs found in Source Link [E:\A\_work\2704\b\pipelineRepository\build.proj]	Opened on behalf of @jcagme  Warnings: 1 Status Message: failed  Build : Master - 20180216.01 (Publish) Failing configurations: - Publish Symbols   - Symbol Publish [Mission Control Build Info](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/build~2Fpublish~2F/build/20180216.01/workItem/Orchestration/analysis/external/Link)  At least last 10 builds have failed to publish due to this error
27275	area-System.Data	System.Data.SqlClient => Dynamic SQL generation is not supported against a SelectCommand that does not return any base table information.	Hi guys,    same piece of code compiled and run against .net framework 4.5 and dotnet core 2.0    .net framework 4.5 version runs without issues  dotnet core 2.0 version returns error:  Dynamic SQL generation is not supported against a SelectCommand that does not return any base table information.    comparing info from both libraries used, i noticed the following difference:  .net framework 4.5  Property: BaseTableName                  Value: TEST    dotnet core 2.0:  Property: BaseTableName                  Value:    apparently, this property is not properly captured    best regards,    Raul
27273	area-System.Net	"WinHttpHandler on Win7 is occasionally failing with ""System.Net.Http.WinHttpException : The handle is invalid"""	For example, here: https://mc.dot.net/#/user/geoffkizer/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/aee82742ebc870d5831d6b0b95b5044cd9e53fc2/workItem/System.Net.Http.Functional.Tests    I saw this earlier today in another PR as well.  Only seems to happen on Win7.
27272	area-System.Net	Enable SocketsHttpHandler_HttpClientHandler_ConnectionPooling_Test for other handlers	From comments in the class:    ```csharp          // TODO: Currently the subsequent tests sometimes fail/hang with WinHttpHandler / CurlHandler.          // In theory they should pass with any handler that does appropriate connection pooling.          // We should understand why they sometimes fail there and ideally move them to be          // used by all handlers this test project tests.  ```    
27270	area-System.IO	Test updates for https://github.com/dotnet/coreclr/pull/16447	Updates and disables tests, tracked by #27269.  For Path change in CoreCLR: https://github.com/dotnet/coreclr/pull/16447
27269	area-System.IO	Need to update tests for https://github.com/dotnet/coreclr/pull/16447	I will link to the test change that disables the tests that are impacted.
27268	area-System.IO	Add IPipeReader and IPipeWriter and have IDuplexPipe inherit from them	Allows determination of whether a Pipe-like is Readable, Writable or Both via the type system    Current API  ```csharp  public interface IDuplexPipe  {      PipeReader Input { get; }      PipeWriter Output { get; }  }  ```  Proposed API  ```csharp  public interface IReadablePipe   {      PipeReader Input { get; }  }    public interface IWritablePipe   {      PipeWriter Output { get; }  }    public interface IDuplexPipe : IReadablePipe, IWritablePipe   {}  ```    Use case a Stream that is write only, but implemented on top of a Pipe  ```csharp  public class HttpResponseStream : Stream, IWritablePipe   {      private readonly Pipe _pipe;      PipeWriter IWritablePipe.Output => _pipe.Writer;        public override async Task FlushAsync(CancellationToken cancellationToken)          => await _pipe.Writer.FlushAsync(cancellationToken);        public override Task WriteAsync(ReadOnlyMemory<byte> source, CancellationToken cancellationToken = default)          => _pipe.Writer.WriteAsync(source, cancellationToken);                public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)          => WriteAsync(new Memory<byte>(buffer, offset, count), cancellationToken);                public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)          => throw NotSupportedException();                public override async ValueTask<int> ReadAsync(Memory<byte> destination, CancellationToken cancellationToken = default)          => throw NotSupportedException();        public override bool CanWrite => true;      public override bool CanRead => false;      public override bool CanSeek => false;            // Other stream overloads  }  ```  This means you can have TextWriters that work with Streams; however, if the Stream has a pipe it can encode on the go in WriteAsync with no internal buffers (using the Pipe's memory directly) rather than waiting for FlushAsync and either allocating buffers or pulling them from the ArrayPool; and then having an additional copy to pass onto the Stream e.g.  ```csharp  public class HttpResponseStreamWriter : TextWriter  {      internal const int DefaultBufferSize = 16 * 1024;        private readonly PipeWriter _pipe;      private readonly StreamWriter _streamWriter;      private readonly Encoder _encoder;        public PipeStreamWriter(Stream stream, Encoding encoding)          : this(stream, encoding, DefaultBufferSize) {}        public PipeStreamWriter(Stream stream, Encoding encoding, int bufferSize)      {          Encoding = encoding;          if (stream is IWritablePipe pipe)          {              _pipe = pipe.Output;          }          else          {              _streamWriter = new StreamWriter(stream, encoding, bufferSize);          }      }        public override Encoding Encoding { get; }        public unsafe override void Write(char value)      {          if (_pipe != null)          {              Span<byte> bytes = _pipe.GetSpan(Encoding.GetMaxByteCount(1));              var encoded = Encoding.GetBytes(new ReadOnlySpan<byte>(&value, sizeof(char)), bytes);              _pipe.Advance(encoded);          }          else          {              _streamWriter.Write(value);          }      }        public override Task WriteAsync(ReadOnlyMemory<char> source, cancellationToken = default) =>           (_pipe != null) ?               _pipe.WriteAsyncImpl(source, cancellationToken) :              _streamWriter.WriteAsync(source);        private Task WriteAsyncImpl(ReadOnlyMemory<char> source, CancellationToken token)      {          ReadOnlySpan<char> input = source.Span;          int minBytes = Encoding.GetMaxCharCount(1);          while (input.Length > 0)          {              Span<byte> bytes = _pipe.GetSpan(minBytes);              int totalEncoded = 0;              while (bytes.Length > 0)              {                  int toEncode = Math.Min(Encoding.GetMaxCharCount(bytes.Length), input.Length);                  var encoded = Encoding.GetBytes(input.Slice(0, toEncode), bytes);                  input = input.Slice(toEncode);                  bytes = bytes.Slice(encoded);                  totalEncoded += encoded;                  if (bytes.Length < minBytes)                  {                      break;                  }              }              _pipe.Advance(totalEncoded);          }                    return _pipe.WriteAsync(default);      }        public override Task WriteAsync(char[] values, int index, int count)          => WriteAsync(new ReadOnlyMemory<char>(values, index, count));        public override Task WriteAsync(string value)          => WriteAsync(value.AsReadOnlyMemory());        public override Task FlushAsync()      {          if (_pipe != null)          {              await _pipe.Output.FlushAsync();          }          else          {              await _streamWriter.FlushAsync();          }      }        // Other TextWriter overloads  }  ```    /cc @davidfowl @stephentoub @GrabYourPitchforks 
27267	area-System.Text	Introduce Regex.Replace Span API & optimize Regex-Redux benchmark	"## Rationale  Today we have the ability to replace certain parts of a string identified by a regex pattern by calling `Regex.Replace(string input, string pattern, string replacement)`. This does work well for small input strings but if you chain multiple Replace calls together and pass a large input string to it the number of string allocations are immensely high.     ## Example  In the regex-redux benchmark there are 3 huge sets of allocations that dominate the rest.  - There is a cascade of replacements on a 50M character string, which creates 500MB of string garbage, presumably in LOH  ![image](https://user-images.githubusercontent.com/6385855/36403552-5d9591f0-159a-11e8-9dad-a0df6d71aeff.png)  - Its input file is read into a 100MB string. (double byte - 50MB file)  - There are 100MB of StringBuilder allocations.    ## API Proposal  ```csharp  namespace System.Text.RegularExpressions  {      public class Regex      {          // Returns amount of bytes written into the buffer          public static int Replace(ReadOnlySpan<char> input, Span<char> buffer, string pattern, string replacement, RegexOptions options = RegexOptions.None, TimeSpan matchTimeout = default);      }  }  ```    ## Notes  This API would help us remove unnecessary string allocations in the regex-redux benchmark (http://benchmarksgame.alioth.debian.org/u64q/program.php?test=regexredux&lang=csharpcore&id=9).  The Regex.Replace implementation uses Match internally to check the pattern on the input string. Can we also change the Match code to operate on Spans or do we need to allocate a string in that step?    ## Sample Usage  ```csharp  // Sample implementation for regex-redux  const int InputFileSize = 1024 * 1024 * 50; // 50 MB input file    // Borrow buffers   char[] buffer1Arr = ArrayPool<char>.Shared.Rent(InputFileSize);   char[] buffer2Arr = ArrayPool<char>.Shared.Rent(InputFileSize);   Span<char> buffer1 = new Span<char>(buffer1Arr);   Span<char> buffer2 = new Span<char>(buffer2Arr);    int bufferBytesWritten = Console.In.ReadBlock(buffer1);  bufferBytesWritten = Regex.Replace(buffer1.Slice(0, bufferBytesWritten).AsReadOnlySpan(), buffer2, ""tHa[Nt]"", ""<4>"");  bufferBytesWritten = Regex.Replace(buffer2.Slice(0, bufferBytesWritten).AsReadOnlySpan(), buffer1, ""aND|caN|Ha[DS]|WaS"", ""<3>"");  bufferBytesWritten = Regex.Replace(buffer1.Slice(0, bufferBytesWritten).AsReadOnlySpan(), buffer2, ""a[NSt]|BY"", ""<2>"");  bufferBytesWritten = Regex.Replace(buffer2.Slice(0, bufferBytesWritten).AsReadOnlySpan(), buffer1, ""<[^>]*>"", ""|"");  bufferBytesWritten = Regex.Replace(buffer1.Slice(0, bufferBytesWritten).AsReadOnlySpan(), buffer2, ""\\|[^|][^|]*\\|"", ""-"");    // Return buffers  ArrayPool<char>.Shared.Return(buffer1Arr);  ArrayPool<char>.Shared.Return(buffer2Arr);    return bufferBytesWritten;  ```    Relates to https://github.com/dotnet/corefx/issues/27124    cc @stephentoub @danmosemsft @vancem @jkotas @jfree"
27266	area-System.Net	SocketsHttpHandler: split auth and redirect handling back into two separate handlers	This will help with supporting NTLM auth, which will need to disable auth on redirects as well, but the auth will be handled at a different level (per connection vs per request).    @stephentoub @davidsh     @dotnet-bot test Outerloop Windows x64 Debug Build please  @dotnet-bot test Outerloop Linux x64 Release Build please  @dotnet-bot test Outerloop OSX x64 Debug Build please
27265	area-System.Net	SocketsHttpHandler: Don't reuse connection with extraneous received data	Fixes #26754
27262	area-System.Text	Force inlining CheckTimeout in RegexRunner	"I can't get any valuable measurements with BDN here. I tried multiple times but it seems either my benchmarks are bad or the absolute costs of the CheckTimeout native calls are to small.    @AndyAyersMS Perfview tells me that without AggresiveInlining it won't inline the method with reason ""unprofitable inline"". Any idea why it doesn't inline a simple boolean check here (it doesn't inline either without the OR condition). Has it do with the state of inliner here (huge switch)?    Perfview before:    Name | Exc %  -- | --  system.text.regularexpressions!RegexInterpreter.Go | 35.8  system.text.regularexpressions!RegexCharClass.CharInClassInternal | 12.1  system.text.regularexpressions!RegexCharClass.CharInClassRecursive | 7.1  system.text.regularexpressions!RegexInterpreter.Backtrack | 7.0  system.text.regularexpressions!RegexInterpreter.Stringmatch | 6.1  system.text.regularexpressions!RegexInterpreter.SetOperator | 5.4  system.text.regularexpressions!RegexInterpreter.FindFirstChar | 5.3  system.text.regularexpressions!RegexInterpreter.Forwardcharnext | 3.5  system.text.regularexpressions!RegexRunner.Scan | 3.1  system.text.regularexpressions!RegexRunner.CheckTimeout | 2.9  system.text.regularexpressions!RegexInterpreter.Goto | 2.5    Perfview after:      Name | Exc %  -- | --  system.text.regularexpressions!RegexInterpreter.Go | 35.3  system.text.regularexpressions!RegexCharClass.CharInClassInternal | 13.8  system.text.regularexpressions!RegexCharClass.CharInClassRecursive | 8.0  system.text.regularexpressions!RegexInterpreter.Backtrack | 7.3  system.text.regularexpressions!RegexInterpreter.Stringmatch | 6.0  system.text.regularexpressions!RegexInterpreter.SetOperator | 5.3  system.text.regularexpressions!RegexInterpreter.FindFirstChar | 5.0  system.text.regularexpressions!RegexInterpreter.Forwardcharnext | 3.8  system.text.regularexpressions!RegexRunner.Scan | 3.1  system.text.regularexpressions!RegexInterpreter.Goto | 2.5        cc @danmosemsft @stephentoub"
27261	area-System.IO	Add tests against corelib shared IO internals	These were removed when we cleaned up unused code in CoreFX common. Next steps are to CoreFX PathInternal usages to CoreLib and remove existing CoreLib.
27260	area-System.Data	Are there plans to support GetSchema in System.Data.Odbc?	I'm currently using the System.Data.Odbc 4.5.0-preview1-25914-04.  Works great for connecting to various sources both on Windows and Linux.  I do however have a requirement to get the schema list for the source and when trying to use GetSchema I get a NotImplemented error.  Are there plans to implement this feature?
27259	area-System.Net	DO NOT MERGE: Test response drain behavior	
27258	area-System.Runtime	[WIP] Add NativeLibrary reference assemblies and tests	This is the corefx equivalent of https://github.com/dotnet/coreclr/pull/16409.
27257	area-System.Net	ValueWebSocketReceiveResult is missing CloseStatus and CloseStatusDescription	I tried replacing ReceiveAsync(ArraySegment\<byte\>) with the Memory\<byte\> overload only to notice these missing properties.    https://github.com/dotnet/corefx/blob/643bccc7f2c24a897cc15c42486d4184e1f931eb/src/System.Net.WebSockets/src/System/Net/WebSockets/WebSocketReceiveResult.cs#L34-L38    https://github.com/dotnet/corefx/blob/643bccc7f2c24a897cc15c42486d4184e1f931eb/src/System.Net.WebSockets/src/System/Net/WebSockets/ValueWebSocketReceiveResult.cs#L32-L34    Is there a reason for this?    /cc @stephentoub 
27256	area-System.Net	Using Trusted Root Certification Authorities for server certificate validation in HttpClient	I have created a self-signed certificate using     `    openssl req -x509 -newkey rsa:2048 -keyout https-key.pem -out https.pem -days 365`    then I created pkcs12 using (I have set the CN to my server's ip adress):    `    openssl pkcs12 -export -out https.pfx -inkey https-key.pem -in https.pem -password pass:123456`    In my server a use the generated `https.pfx` file for https.    In my client I imported the generated certificate into the Windows' `Trusted Root Certification Authorities` (Current user and also local system).    When I send a HTTP request to the server from my client, I get     ```  System.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.Net.Http.WinHttpException: A security error occurred         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Threading.Tasks.RendezvousAwaitable`1.GetResult()         at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext()         --- End of inner exception stack trace ---         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)         at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()         at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()      --- End of stack trace from previous location where exception was thrown ---         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task).  ```    In chrome it says:        Attackers might be trying to steal your information from *** (for example, passwords, messages, or credit cards). NET::ERR_CERT_AUTHORITY_INVALID    Does .NET Core 2.0's `HttpClient` use Windows certificate stores? What could be causing the issue.
27255	area-System.Net	SocketsHttpHandler: remove Content-Length header if Transfer-Encoding: chunked is present	This matches behavior of other handlers.  We've been getting away with not doing this because #27245 would cause Content-Length to not appear in the enumeration in normal cases.    Contributes to #27245     @stephentoub @davidsh 
27254	area-System.IO	Update root dir enum test	Update assert for better logging. Skip directory entries.    fixes #27244
27253	area-System.Text	Consider adding Span<char> overloads to TextEncoder	Seems like these were missed in the Spanification of the BCL. https://github.com/dotnet/corefx/blob/01fa16ffd618846a913cad719269c8bb441ceb28/src/System.Text.Encodings.Web/src/System/Text/Encodings/Web/TextEncoder.cs    /cc @stephentoub @KrzysztofCwalina @GrabYourPitchforks 
27251	area-System.Data	Null value in string array in DataRow causes DataRowComparer to throw NRE, but only if it is the first parameter	Use object.Equals() to compare array elements and avoid NRE
27250	area-System.Net	Optimise HtmlEncode and HtmlDecode to produce less garbage	"This fixes https://github.com/dotnet/corefx/issues/13893. I'd noticed in a project of mine that the `TextWriter` overload of `WebUtility.HtmlEncode` was unexpectedly generating garbage.    I added a `System.Buffers` project reference to the `System.Runtime.Extensions` csproj and wrote a simple implementation of `StringBuilder` based on `ArrayPool`, as suggested by @jkotas in https://github.com/dotnet/corefx/pull/13875.    I benchmarked this implementation and while it appears to produce no garbage (except for the `string` that it returns) it does seem to run around 10-20% slower. I'm keen to get some input from you guys on what might be going on here.      Benchmark code (using BenchmarkDotNet):    ```csharp  [MemoryDiagnoser]  public class Bench  {      public static readonly string _toEncode = string.Concat(Enumerable.Repeat(""<>\""'"", 100));        [Benchmark(Baseline = true)]      public void String_Old()      {          WebUtility.HtmlEncode(_toEncode);      }        [Benchmark]      public void String_New()      {          WebUtility.HtmlEncodeNew(_toEncode);      }        [Benchmark]      public void TextWriter_Old()      {          using (var writer = TextWriter.Null)          {              WebUtility.HtmlEncode(_toEncode, writer);          }      }        [Benchmark]      public void TextWriter_New()      {          using (var writer = TextWriter.Null)          {              WebUtility.HtmlEncodeNew(_toEncode, writer);          }      }  }  ```    And the results:    ```           Method |     Mean |     Error |    StdDev | Scaled | ScaledSD |  Gen 0 |  Gen 1 | Allocated |  --------------- |---------:|----------:|----------:|-------:|---------:|-------:|-------:|----------:|       String_Old | 5.394 us | 0.0987 us | 0.0924 us |   1.00 |     0.00 | 2.0828 | 0.0229 |   13120 B |       String_New | 6.571 us | 0.1101 us | 0.1030 us |   1.22 |     0.03 | 0.7629 |      - |    4832 B |   TextWriter_Old | 5.431 us | 0.1078 us | 0.1153 us |   1.01 |     0.03 | 2.0828 | 0.0229 |   13120 B |   TextWriter_New | 6.080 us | 0.1041 us | 0.0974 us |   1.13 |     0.03 |      - |      - |       0 B |  ```"
27249	area-System.Diagnostics	ObjectDisposedException on Process.Start leaves defunct process on Linux	"This is a difficult one to reproduce!     We're starting a process repeatedly in 5 seconds gaps. After leaving running for a week, we end up with 4-5 defunct processes that failed to start.   On the ones that failed we see the process handle is marked as invalid and an exception (see below) is thrown. Even though we're disposing, the process now has a defunct child for it's lifetime.    C# details:    - Self contained deployment  - DotNetCore 2.0  - Centos 7.3    Code to reproduce:  ```csharp  using (var process = new Process())  {      process.StartInfo.FileName = ""filename"";      process.StartInfo.Arguments = ""arguments"";      process.StartInfo.RedirectStandardOutput = true;      process.EnableRaisingEvents = true;      process.Start();        var output = process.StandardOutput.ReadToEnd();        process.WaitForExit(MaxWaitTime);  }  ```    Exception stack:  ```csharp  System.ObjectDisposedException: Safe handle has been closed  at System.Runtime.InteropServices.SafeHandle.DangerousAddRef(Boolean& success)  at System.Threading.RegisteredWaitHandleSafe.SetWaitObject(WaitHandle waitObject)  at System.Threading.ThreadPool.RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, Object state, UInt32 millisecondsTimeOutInterval, Boolean executeOnlyOnce, StackCrawlMark& stackMark, Boolean compressStack)  at System.Threading.ThreadPool.RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, Object state, Int32 millisecondsTimeOutInterval, Boolean executeOnlyOnce)  at System.Diagnostics.Process.EnsureWatchingForExit()  at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)  at System.Diagnostics.Process.Start()  ```"
27248	area-Meta	Guideline 14. formulation ('within type declarations') is unclear	  > 14. Fields should be specified at the top within type declarations    This is very unclear to our team.  It seems that a 'type declaration' is either a class or a struct declaration, and only classes and structs can have fields. Therefore it seems that either this information is redundant, or it should mean something else.            
27247	area-System.Data	Reference to type 'SqlConnection' claims it is defined in 'System.Data', but it could not be found.	"dotnet --version: 2.1.4   uname -a: Linux firefixmaarten 4.15.3-300.fc27.x86_64 #1 SMP Tue Feb 13 17:02:01 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux  Also tested on windows 10:    ```  <ItemGroup>      <PackageReference Include=""EnterpriseLibrary.WindowsAzure.TransientFaultHandling"" Version=""5.1.1212.0"" />      <PackageReference Include=""log4net"" Version=""2.0.8"" />      <PackageReference Include=""Lz4.Net"" Version=""1.0.98"" />      <PackageReference Include=""MongoDB.Driver"" Version=""2.5.0"" />      <PackageReference Include=""Newtonsoft.Json"" Version=""11.0.1"" />      <PackageReference Include=""Newtonsoft.Json.Schema"" Version=""3.0.6"" />      <PackageReference Include=""ServiceStack.Text"" Version=""5.0.2"" />      <PackageReference Include=""System.Data.SqlClient"" Version=""4.4.2"" />      <PackageReference Include=""WindowsAzure.ServiceBus"" Version=""4.1.7"" />      <PackageReference Include=""WindowsAzure.Storage"" Version=""9.0.0"" />  </ItemGroup>    ```  Getting this error everywhere:  Reference to type 'SqlConnection' claims it is defined in 'System.Data', but it could not be found [commonlib]"
27246	area-System.IO	Add PipeReader and PipeWriter implementations over a Stream	This will help with adoption of pipelines. This is possible today but we can provide an implementation with minimal allocations. The usual adapter code involves creating 2 pipes and creating 2 async loops that read from the stream and write into the pipe and reading from the pipe and writing into the Stream.    This works well but there are some downsides:  - Some streams buffer internally and we may end up copying from the Stream's internal buffer into the pipe's buffers.  - Even if we can avoid that, we'll end up allocating a Task per read and write operation (though some streams cache the result of the previous operation)  - We end up paying per read/write costs in general (for e.g. in FileStream allocating via ThreadPoolBoundHandle.AllocateNativeOverlapped per read/write pair).    Most of the per read/write costs can be mitigated by using CopyToAsync (if overridden by the Stream) but there are some downsides there as well.  - Using the default implementations CopyToAsync allocates an internal buffer if the Stream doesn't have one already and passes that buffer to the other stream. Using the default pipe implementation, we end up copying the Stream's buffer into the pipe's buffer which might be fine but is a bit unfortunate.    We can avoid some of these overheads if we implement a PipeReader on top of CopyToAsync that doesn't use the Pipe internally. The idea here is that we call CopyToAsync on a fake stream that forwards WriteAsync calls to the PipeReader consumer. This implementation would pass buffers directly from the Stream to the consumer. If the consumer doesn't process the entire buffer, only the unconsumed buffer is copied into an internal buffer for the next read.    The write side isn't as problematic because we need to be able to allocate memory to write into the Stream so reusing the pipe isn't so bad here. The implementation here would likely be using a Pipe internally, then writing to the Stream on FlushAsync.
27245	area-System.Net	HttpContent auto-computed content length header is not exposed via header enumeration	"If you access HttpContent.Headers.ContentLength directly, we will attempt to use the content's TryComputeLength to construct a content length header.    However, if you access HttpContent.Headers via its enumerator or a method like TryGetValues, we won't construct the content length header.    This means that just accessing the ContentLength property will change the results of header enumeration.  For example:    ```csharp              var content = new StringContent(""hello world"");              foreach (var kvp in content.Headers) { }    // Content-Length not present              var ignore = content.Headers.ContentLength;              foreach (var kvp in content.Headers) { }    // Content-Length present  ```    Similarly, if you try to remove the header using the Remove method, it's not actually removed:    ```csharp              var content = new StringContent(""hello world"");              content.Headers.Remove(""Content-Length"");              Assert.Equal(null, content.Headers.ContentLength);  // fails; returns value from TryComputeLength  ```    The easiest fix here is probably just to try to compute the length when the content object is constructed.  This assumes that TryComputeLength is always cheap, which seems reasonable, but is slightly different than how it's used today.  Also, it seems like LoadIntoBufferAsync changes the Content-Length, but probably this is fine.    Unfortunately, fixing this will cause SocketsHttpHandler to behave incorrectly.  Currently, if you set TransferEncodingChunked = true, then SocketsHttpHandler will never access the ContentLength property directly, and thus it won't get populated and won't get sent on the wire.  Fixing the above behavior will cause the ContentLength to get populated, and thus sent on the wire, which is not correct behavior, per RFC.  So this will need to get fixed somehow.  (Note that this problem exists today, it's just harder to hit it -- you would need to either set Content-Length explicitly, or force population of the header by accessing it.)    (edited because I'm an idiot and can't read the RFC properly)  "
27244	area-System.IO	Test failure: System.IO.Tests.Enumeration.RootTests/CanRecurseFromRoot	Opened on behalf of @danmosemsft  The test `System.IO.Tests.Enumeration.RootTests/CanRecurseFromRoot` has failed.  System.InvalidOperationException : Sequence contains more than one matching element          Stack Trace:             at System.Linq.Enumerable.SingleOrDefault[TSource](IEnumerable`1 source, Func`2 predicate) in /Users/buildagent/agent/_work/391/s/corefx/src/System.Linq/src/System/Linq/Single.cs:line 143        at System.IO.Tests.Enumeration.RootTests.CanRecurseFromRoot() in /Users/buildagent/agent/_work/391/s/corefx/src/System.IO.FileSystem/tests/Enumeration/RootTests.netcoreapp.cs:line 47 Build : Master - 20180219.01 (Core Tests) Failing configurations: - OSX.1012.Amd64-x64   - Release - Ubuntu.1710.Amd64-x64   - Release 
27242	area-System.Net	Implement SocketsHttpHandler's Expect100ContinueTimeout and ConnectTimeout	With the expectation that we'll want to expose this in 2.1, implement Expect100ContinueTimeout and ConnectTimeout.  The members are currently internal but can be flipped public easily once the APIs are approved.  This also fixes an issue with cancellation around the connect phase, where a cancellation request that came in during the SSL auth phase would not be respected.    Contributes to https://github.com/dotnet/corefx/issues/27145  Contributes to https://github.com/dotnet/corefx/issues/27235  cc: @geoffkizer, @davidsh
27240	area-System.Linq	Linq.Expressions don't support operator overloads with in parameters	"For example:  ```csharp  readonly struct Foo  {      public static implicit operator Foo(in string x)      {          return new Foo();      }  }    class Program  {      public static void Main(string[] args)      {          Console.WriteLine((Foo)""hi""); // valid          Expression.Convert(Expression.Constant(""hi""), typeof(Foo)); // throws      }  }  ```    Exception:  ```  System.InvalidOperationException: No coercion operator is defined between types 'System.String' and 'Test.Foo'.     at System.Linq.Expressions.Expression.GetUserDefinedCoercionOrThrow(ExpressionType coercionType, Expression expression, Type convertToType)     at System.Linq.Expressions.Expression.Convert(Expression expression, Type type, MethodInfo method)     at System.Linq.Expressions.Expression.Convert(Expression expression, Type type)     at Test.Program.Main(String[] args) in D:\Desktop\Test\Test\Program.cs:line 22  ```    This also happens with other operator overloads. Maybe other places too (method call?) but I haven't tested those."
27239	area-System.IO	Handle errors getting state in Unix	Throwing errors while examining extended state while enumerating isn't consistent with Windows behavior. Windows never throws past getting directory entry data as all state is already available.    Ensure entry attribute state is consistent with initial construction.
27238	area-System.Memory	[Jit] Improve struct passing (reduce copies)	Before they are out there and it becomes a breaking change (byval => byref)    ReadOnlyMemory is a `readonly struct`; currently a copy is made and that copy is then passed by reference; but there is an advantage to passing it `in` and no-disadvantage (as call-site doesn't need to be annotated with `in`) and since it is `readonly` and passed by ref anyway due to its size.    e.g. changing     ```csharp  static int CompareOrdinalIgnoreCase(ReadOnlySpan<char> strA, ReadOnlySpan<char> strB)  ```  to  ```csharp  static int CompareOrdinalIgnoreCase(in ReadOnlySpan<char> strA, in ReadOnlySpan<char> strB)  ```  Changes the call site from  ```asm  G_M57521_IG05:         lea      rcx, bword ptr [rsp+38H]         mov      bword ptr [rcx], r9         mov      dword ptr [rcx+8], edx         lea      rcx, bword ptr [rsp+28H]         mov      bword ptr [rcx], r8         mov      dword ptr [rcx+8], edx         lea      rcx, bword ptr [rsp+38H]         lea      rdx, bword ptr [rsp+28H]         call     CompareInfo:CompareOrdinalIgnoreCase(struct,struct):int  ```  to  ```asm  G_M57521_IG05:         mov      bword ptr [rsp+28H], r8         mov      dword ptr [rsp+30H], eax         lea      rcx, bword ptr [rsp+28H]         call     CompareInfo:CompareOrdinalIgnoreCase(byref,byref):int  ```    /cc @jkotas @stephentoub @KrzysztofCwalina @mikedn 
27237	area-System.Memory	Consider adding MemoryMarshal.GetOwner(ROM)	```csharp  public static partial class MemoryMarshal  {      public static object GetOwner(ReadOnlyMemory<T> readOnlyMemory)  }  ```    With Registered IO; when sending an receiving data the api doesn't use `address`, `offset`, `length`; it uses `id`, `offset`, `length`    The `id`s are assigned upfront when you register the addresses (once)    Currently you have to [loop through all the registered](https://github.com/dotnet/corefxlab/blob/ec47e7023bcd45fb40c4468f5b1234b33f14ffe4/src/System.IO.Pipelines.Networking.Windows.RIO/Internal/RioThread.cs#L95-L117) memory blocks to find which one matches and then get its `id` which is inefficient and also has to protect against concurrency of new memory being registered while its searching.    This search and registration blocking could be avoided with the new api  ```csharp  if (GetOwner(readOnlyMemory) is RioMemoryPoolBlock block)  {      var idToUse = block.Id;  }  else  {      // Not registered memory, get registered memory block and copy data  }  ```    /cc @davidfowl @KrzysztofCwalina 
27235	area-System.Net	SocketsHttpHandler: Consider exposing ConnectTimeout	In some environments, in particular in a cloud, it's useful to be able to specify a timeout for just the connection phase of an HTTP request.  That way, if the server is unresponsive, we don't need to wait for the full HttpClient timeout to cancel the request, and conversely, setting a small HttpClient timeout to avoid such issues doesn't cancel an active operation taking a long time simply because it's conversing a lot.    We should add:  ```C#  public sealed class SocketsHttpHandler  {      public TimeSpan ConnectTimeout { get; set; } // defaults to infinite so that it's opt-in / pay for play      ...  }  ```
27234	area-Infrastructure	Consider making a property-based testing library available for tests.	Consider making a property-based testing library, such as [FsCheck](https://github.com/fscheck/FsCheck), available for use in testing.    In particular, [model-based testing](https://fscheck.github.io/FsCheck/StatefulTesting.html) would be useful for dealing with things like the [XML.LINQ](https://github.com/dotnet/corefx/blob/master/src/System.Private.Xml.Linq/tests/events/EventsAdd.cs) property tests, making it easier to write combinatorial tests that search through more possibilities.    Now, it's true that FsCheck, like most libraries based on Quickcheck, normally use a random seed on each run; this is considered a feature.  However, they all explicitly include the failing seed for any failing test in the output, and this can be included in the config for the test (meaning regression tests can be automatically re-run)
27233	area-System.Net	HttpContent.ReadStreamSync  (CancellationToken does not work)	"1.  I see a strange line of code in HttpClient.cs  But I did not found method with same name and 2 params.  ``` await response.Content.LoadIntoBufferAsync(_maxResponseContentBufferSize, cts.Token) ```  And I did not found method in binary files.  2.    Cancel token does not work.  (windows 8.1, net core 2.0)  ```   class Program      {          static void Main(string[] args)          {              new Program().Run().Wait();          }            async Task Run()          {              using (var opt = new HttpClientHandler              {                  Proxy = WebRequest.DefaultWebProxy              })              {                  using (var http = new HttpClient(opt))                  {                        var source = new CancellationTokenSource();                      var token = source.Token;                      var dt = DateTime.Now;                        //BIG FILE                      var task = http.GetAsync(                          new Uri(""https://codeload.github.com/MediaBrowser/Emby/zip/master""),                          HttpCompletionOption.ResponseHeadersRead,                          cancellationToken: token);                        var res = await task;                        //await Task.WhenAny(Task.WhenAll(new[] { task }), Task.Delay(5000));                      //source.Cancel();                        Console.WriteLine(res.Content.Headers.ContentLength);                      Console.WriteLine($""{(DateTime.Now - dt).TotalSeconds} sec"");                        dt = DateTime.Now;                        source.Cancel();                        var data = await res.Content.ReadAsByteArrayAsync();                        // exception did not raised, why?                        Console.WriteLine($""read {data.Length} bytes  ; {(DateTime.Now - dt).TotalSeconds} sec"");                        /*                                                            70995752  0.7254927 sec  read 70995752 bytes  ; 9.8042545 sec                                        */                  }              }          }      }  ```    I think problem this    ```  bool flag = this._timeout != HttpClient.s_infiniteTimeout;   bool disposeCts;   CancellationTokenSource cancellationTokenSource;   if (flag || cancellationToken.CanBeCanceled)   {    disposeCts = true;    cancellationTokenSource = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, this._pendingRequestsCts.Token);    if (flag)    {     cancellationTokenSource.CancelAfter(this._timeout);    }   }   else   {    disposeCts = false;    cancellationTokenSource = this._pendingRequestsCts;   }  ```  finally{   if(disposeCts){token.Dispose()}  }"
27232	area-System.IO	FileSystemWatcher does not raise events when target directory is symlink (on linux)	"Steps to reproduce:    ```shell  mkdir /tmp/realdir  ln -s /tmp/realdir /tmp/symdir  ```    Launch a program similar to below:    ```csharp  var fsw = new FileSystemWatcher(""/tmp/symdir"") { NotifyFilter = NotifyFilters.FileName | NotifyFilters.LastWrite };  fsw.Created += (o, i) => Console.WriteLine(i.Name);  fsw.EnableRaisingEvents = true;  ```    Create empty file (or any other one):    ```shell  touch /tmp/symdir/test.txt # Could be also /tmp/realdir/test.txt, since it's one and the same  ```    No event being raised. Event is raised properly if we listen in `/tmp/realdir` instead.    Since expected behaviour of linux programs is to handle symlinks transparently, I expected that `FileSystemWatcher` would properly raise events that happened in real directory. That didn't happen though (no events being raised, I also tested with other event types). I couldn't find similar issue so I consider it a bug, but if this is expected then it should probably be noted somewhere.    Thank you in advance for looking into this.    ```  .NET Command Line Tools (2.1.300-preview2-008210)    Product Information:   Version:            2.1.300-preview2-008210   Commit SHA-1 hash:  f6065dcc62    Runtime Environment:   OS Name:     debian   OS Version:   OS Platform: Linux   RID:         debian-x64   Base Path:   /opt/dotnet/sdk/2.1.300-preview2-008210/    Microsoft .NET Core Shared Framework Host      Version  : 2.1.0-preview2-26131-06    Build    : b13a0d5c331f374afd35ded57b9a4b4ab128864c    ```"
27231	area-System.Net	Several perf improvements/tweaks for SocketsHttpHandler	- Chunked reads from buffer.  We now process as much of the buffer as we can synchronously during ReadAsync, rather than returning once we hit the end of a chunk.  For very small chunks that arrive quickly, this results in a huge perf increase, e.g. best case for the optimization, with lots of 1-byte chunks getting buffered together, it's now 10x faster.  With 100-byte chunks buffered together, it's 2x faster.    - Blitting byte[] to output for known headers.  Rather than using WriteStringAsync to output all header names, we now use WriteBytesAsync for known headers, with the headers precomputed into byte[]s and cached.    - Cached `Task<int>`s for ReadAsync.  Hopefully consumers start moving to the new `ReadAsync(Memory<byte>, CancellationToken)` overload on Stream, but for those who consume via `ReadAsync(byte[], int, int)`, we need to allocate a task even for synchronously completing values, which will be common when reading from a buffer.  We now cache `Task<int>`s for values < 1024, to account for small reads.    - Removed delegate/closure allocation from connection.  We were accidentally closing over a cancellation token, resulting in an extra delegate and closure allocation in ConnectHelper.  Also reduced the size of the EstablishSslConnectionAsync state machine by splitting the method in order to remove several arguments from being included.    - Use Utf8Formatter for hex values.  Switched from custom formatting of hex values to just use Utf8Formatter.TryFormat.    - Avoid buffering in HttpConnection.CopyToAsync(Stream).  This is used when we want to copy the whole source stream until EOF (e.g. for a Connection: close response), and thus we can skip the buffer and use the source stream's CopyToAsync directly.    - Added a test to exercise various size chunks, line endings, ReadAsync vs CopyToAsync, etc.    - Fix CopyToAsync cancellation handling.  Even though we'll abort the connection when cancellation is requested, we still need to pass the token to the destination stream's WriteAsync to give it the opportunity to cancel.  Also properly pass the buffer size through to the underlying stream's CopyToAsync where appropriate.    - Small miscellaneous cleanup, like removing a few unused arguments from methods, fixing an assert to validate the right thing, etc.    Fixes https://github.com/dotnet/corefx/issues/27198  cc: @geoffkizer, @davidsh, @wfurt, @Priya91 
27230	area-System.Xml	XslCompiledTransform fails on high number of xsl:when elements	".NET core 2.0 (project in Visual Studio 2017 v15.5.6 ) crashes with StackOverflowException when a very high number (2725+) of xsl:when elements are encountered in a choice-element. .NET framework 4.7 has the same problem, but fails (""The stylesheet is too complex"") or crashes with stackoverflowexception (with the restriction disabled in app.config) on around 780 elements) (this has been reported separately)    Below is code which reproduces the problem. Change the number to 2724 and it will complete successfully in my environment.          static void Main()          {              var xslt = new StringBuilder();                xslt.AppendLine(@""<?xml version=""""1.0"""" encoding=""""utf-8""""?>    <xsl:stylesheet version=""""1.0"""" xmlns:xsl=""""http://www.w3.org/1999/XSL/Transform"""">    <xsl:output method=""""html"""" encoding=""""utf-8"""" /><xsl:template name=""""test""""><xsl:choose>"");                for (int n = 1; n < 2725; n++)              {                  xslt.AppendLine($""<xsl:when test=\""@V='k{n}'\"">Value {n}</xsl:when>"");              }                xslt.AppendLine(@""</xsl:choose></xsl:template></xsl:stylesheet>"");              var ms = new MemoryStream(Encoding.UTF8.GetBytes(xslt.ToString()));                var transform = new XslCompiledTransform(true);              using (var rdr = XmlReader.Create(ms))              {                  transform.Load(rdr);              }          }  "
27229	area-System.IO	TryGet for ReadOnlysequence	Fixes https://github.com/dotnet/corefx/issues/27097    Needs tests
27228	area-System.Net	Can not send email on .Net Core 2.0 with SmtpClient or TcpClient	"I'm trying to send email using Google SMTP server but its throwing exception on socket connection.  Simple code that works fine on .Net but not on .Net Core 2.0:     ```  var client = new SmtpClient(""smtp.gmail.com"", 587);        client.UseDefaultCredentials = false;        client.Credentials = new NetworkCredential(""email@gmail.com"", ""some password"");        client.EnableSsl = true;            MailMessage mailMessage = new MailMessage();          mailMessage.From = new MailAddress(""email@gmail.com"");          mailMessage.To.Add(""otheremail@gmail.com"");          mailMessage.Body = ""Hello World!"";          mailMessage.Subject = ""Subjeeect"";            client.Send(mailMessage);  ```    Exception:    > System.Net.Mail.SmtpException: 'Failure sending mail.'    > ExtendedSocketException: An attempt to establish a connection was unsuccessful, because from another computer for the required time, the desired response was not received, or the already established connection was broken because of the incorrect response of the computer already connected. 64.233.162.109:587    Same error will be if use TcpClient:    ```  using (var client = new TcpClient())  {      await client.ConnectAsync(""smtp.gmail.com"", 587);  }  ```    I'm running this code on Windows 10 if it's important."
27227	area-System.Runtime	TimeZoneInfo incredibly slow	"The TimeZoneInfo methods ConvertTimeToUtc, IsAmbiguousTime and IsDayLightSavingTime popped up as eating up about half of the processing time in a program importing, converting and storing lots of data in a database, As this was quite unbelievable to me, I programmed a little converter, which did  these same conversions for our time zone ""W. Europe Standard Time"" and found it to be about 70 times as fast as the dotnet implementation.  I tried to figure out what went wrong in TimeZoneInfo implementation, but it looked pretty complicated (even messed up) to me, and as I only have limited time resources thought, that someone responsible for this code should check this out instead.   I know my comparison is only valid for our W.European timezone, but I think that most time zones are similarily easy to implement, so for these types of zones the dotnet code really should perform much better. Performance should really be an issue here, as time-related functionality is offen used in comination with engineering and measurment data, where converting between local timezones and UTC is very frequent, and needs to be fast.  I have attached my test program and also paste it here for your convenience.  Stefan      [Program.zip](https://github.com/dotnet/corefx/files/1733570/Program.zip)    using System;  using System.Collections.Generic;  using System.Linq;  using System.Text;  using System.Threading.Tasks;    namespace TestTimeZone {   class MyWesternEuropeConverter {    const int YFirst = 1900;    DateTime TFirst = new DateTime(YFirst, 1, 1), TLast = new DateTime(YFirst + 200, 1, 1);    DateTime[] FwdTimes = new DateTime[200], BwdTimes = new DateTime[200];    TimeZoneInfo RegularInfo;    int StdHourDiff = 1;    int HourOfChange = 2;    public MyWesternEuropeConverter() {     RegularInfo = TimeZoneInfo.FindSystemTimeZoneById(""W. Europe Standard Time"");     InitDates();    }    public DateTime ConvertTimeToUtcRegular(DateTime dt, out bool isAmbiguous, out bool isDayLightSavingTime, out bool isAllowed) {     try {      isAmbiguous = RegularInfo.IsAmbiguousTime(dt);      dt = TimeZoneInfo.ConvertTimeToUtc(dt, RegularInfo);      isDayLightSavingTime = RegularInfo.IsDaylightSavingTime(dt);      isAllowed = true;     } catch {      isAllowed = false;      isAmbiguous = true;      isDayLightSavingTime = true;     }     return dt;    }    public DateTime ConvertTimeFromUtcRegular(DateTime dt) {     return TimeZoneInfo.ConvertTimeFromUtc(dt, RegularInfo);    }      public DateTime ConvertTimeToUtc(DateTime dt, out bool isAmbiguous, out bool isDayLightSavingTime, out bool isAllowed) {     int yearIdx = dt.Year - YFirst;     if (yearIdx < 0 || yearIdx >= 200) {      return ConvertTimeToUtcRegular(dt, out isAmbiguous, out isDayLightSavingTime, out isAllowed);     } else {      DateTime curFwd = FwdTimes[yearIdx];      DateTime curBwd = BwdTimes[yearIdx];      if (dt < curFwd || dt >= curBwd) {       isAmbiguous = false;       isAllowed = true;       isDayLightSavingTime = false;       return new DateTime(dt.Ticks - TimeSpan.TicksPerHour * StdHourDiff, DateTimeKind.Utc);      }      if (dt.Ticks < curFwd.Ticks + TimeSpan.TicksPerHour) {       isAllowed = false;       isAmbiguous = true;       isDayLightSavingTime = true;       return dt; // new DateTime(dt.Ticks - TimeSpan.TicksPerHour * StdHourDiff, DateTimeKind.Utc);      }      isAllowed = true;      isAmbiguous = dt.Ticks >= curBwd.Ticks - TimeSpan.TicksPerHour;      isDayLightSavingTime = !isAmbiguous;      return new DateTime(dt.Ticks - TimeSpan.TicksPerHour * (StdHourDiff + (isAmbiguous ? 0 : 1)), DateTimeKind.Utc);     }    }    public DateTime ConvertTimeFromUtc(DateTime dt) {     DateTime utc = new DateTime(dt.Ticks + TimeSpan.TicksPerHour * StdHourDiff, DateTimeKind.Local);     int yearIdx = utc.Year - YFirst;     if (yearIdx < 0 || yearIdx >= 200) {      return TimeZoneInfo.ConvertTimeFromUtc(dt, RegularInfo);     }     DateTime curFwd = FwdTimes[yearIdx];     DateTime curBwd = BwdTimes[yearIdx];     if (dt.Ticks >= curFwd.Ticks || dt.Ticks <= curBwd.Ticks - TimeSpan.TicksPerHour) dt = new DateTime(dt.Ticks + TimeSpan.TicksPerHour, DateTimeKind.Local);     return dt;    }    void InitDates() {     int yFirst = TFirst.Year;     for (int i = 0; i < FwdTimes.Length; i++) {      FwdTimes[i] = GetFwdDate(yFirst + i).AddHours(HourOfChange);      BwdTimes[i] = GetBwdDate(yFirst + i).AddHours(HourOfChange + 1);    //  System.Diagnostics.Trace.WriteLine(string.Format(""{0}-{1}"", FwdTimes[i], BwdTimes[i]));     }    }    DateTime GetFwdDate(int year) {     DateTime dLast = new DateTime(year, 3, 31);     return dLast.AddDays(-(int)dLast.DayOfWeek);    }    DateTime GetBwdDate(int year) {     DateTime dLast = new DateTime(year, 10, 31);     return dLast.AddDays(-(int)dLast.DayOfWeek);    }   }     class Program {    static void Echo(string s) {     System.Diagnostics.Trace.WriteLine(s);     System.Console.WriteLine(s);    }    static string Report(DateTime t, bool isAmbiguous, bool isDayLightSaving, bool isAllowed) {     return string.Format(""{0:yyyy/MM/dd/HH:mm} ambiguous:{1} dayLightSaving:{2} allowed:{3}"", t, isAmbiguous, isDayLightSaving, isAllowed);    }    static void Main(string[] args) {     MyWesternEuropeConverter conv = new MyWesternEuropeConverter();     TimeZoneInfo tzInfo = TimeZoneInfo.Local;     DateTime tStart = new DateTime(1900, 1, 1);     DateTime tEnd = new DateTime(2100, 1, 1);     bool allowed1, allowed2, isAmbiguous1, isAmbiguous2, isDayLightSaving1, isDayLightSaving2;     for (DateTime tCur = tStart; tCur < tEnd; tCur = tCur.AddMinutes(15)) {      DateTime utc1 = conv.ConvertTimeToUtcRegular(tCur, out isAmbiguous1, out isDayLightSaving1, out allowed1);      DateTime utc2 = conv.ConvertTimeToUtc(tCur, out isAmbiguous2, out isDayLightSaving2, out allowed2);      if (utc1 != utc2 || isAmbiguous1 != isAmbiguous2 || isDayLightSaving1 != isDayLightSaving2 || allowed1 != allowed2)       Echo(string.Format(""Different: {0} {1}"", Report(utc1, isAmbiguous1, isDayLightSaving1, allowed1), Report(utc2, isAmbiguous2, isDayLightSaving2, allowed2)));     }     DateTime utc = DateTime.UtcNow;     int count = 0;     for (DateTime tCur = tStart; tCur < tEnd; tCur = tCur.AddMinutes(15)) {      count++;      DateTime utc1 = conv.ConvertTimeToUtcRegular(tCur, out isAmbiguous1, out isDayLightSaving1, out allowed1);     }     TimeSpan tNeeded = DateTime.UtcNow - utc;     Echo(string.Format(""seconds needed for {0} ToUtc regular: {1}, ticks per call: {2}"", count, tNeeded.TotalSeconds,((double) tNeeded.Ticks)/count));     utc = DateTime.UtcNow;     count = 0;     for (DateTime tCur = tStart; tCur < tEnd; tCur = tCur.AddMinutes(15)) {      count++;      DateTime utc2 = conv.ConvertTimeToUtc(tCur, out isAmbiguous2, out isDayLightSaving2, out allowed2);     }     tNeeded = DateTime.UtcNow - utc;     Echo(string.Format(""seconds needed for {0} ToUtc mine: {1}, ticks per call: {2}"", count, tNeeded.TotalSeconds, ((double)tNeeded.Ticks) / count));     System.Console.Write(""Ready >"");     System.Console.ReadKey();    }   }  }    "
27226	area-System.IO	Use PreallocatedOverlapped when internal FileStream buffer isn't being used on Windows	See comment here https://github.com/dotnet/coreclr/pull/16190#issuecomment-363109865    /cc @stephentoub 
27224	area-System.Memory	ReadOnlySequence with empty array returns wrong SequencePosition	```  var buffer = new ReadOnlySequence<byte>(new byte[0]);  Console.WriteLine(buffer.Start.Index);  Console.WriteLine(buffer.End.Index);  ```    This prints:    0  -2147483648    It should print:    0  0    /cc @KrzysztofCwalina @pakrym @ahsonkhan 
27223	area-System.IO	Fix enumerating the root directory.	Shouldn't trim the trailing separator when at the root. On Windows that makes  the path drive relative- which breaks most of the logic.    Add a test to catch this case.
27222	area-System.Data	Convert continuations in SqlClient managed SNI to async/await	Based on the comment at https://github.com/dotnet/corefx/pull/27187#discussion_r168739991 the continuations in SqlClient SNI layer can be changed to use async await to prevent unnecessary allocations during network calls.
27220	area-System.Net	support for CONNECT method in SocketHttpHandler 	This is replacement for  #26869   It is mainly to make git resolving easier after rebasing.   To much changed in master since my original work so it is quire different PR anyway.    Aside from unit tests, I did basic testing with HTTPS over HTTP proxy and it works.   Authentication will still need some work as @geoffkizer mentioned in hist last commit.   I plan to take a look next as well as I'll keep testing SocketHttpHandler with proxies.  
27217	area-System.Net	"Test Failure: System.Net.Http.Functional.Tests.HttpClientHandlerTest/GetAsync_AllowAutoRedirectTrue_RetainsOriginalFragmentIfAppropriate ""Unhandled Exception"""	"[System.Net.Http.Functional.Tests.HttpClientHandlerTest/GetAsync_AllowAutoRedirectTrue_RetainsOriginalFragmentIfAppropriate(origFragment: \""#origFragment\"", redirFragment: \""\"", expectedFragment: \""#origFragment\"", useRelati)](https://mc.dot.net/#/user/caesar1995/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/c4522d10d10a1b622b3f2b0cf919ede239e636a6/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandlerTest~2FGetAsync_AllowAutoRedirectTrue_RetainsOriginalFragmentIfAppropriate(origFragment:%20%5C%22%23origFragment%5C%22,%20redirFragment:%20%5C%22%5C%22,%20expectedFragment:%20%5C%22%23origFragment%5C%22,%20useRelati))    Unhandled Exception of Type System.Net.Http.HttpRequestException  Message :  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The server returned an invalid or unrecognized response  ```    Stack Trace  ```  at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in D:\j\workspace\windows-TGrou---6368dffa\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 488     at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<>c__DisplayClass60_1.<<GetAsync_AllowAutoRedirectTrue_RetainsOriginalFragmentIfAppropriate>b__0>d.MoveNext() in D:\j\workspace\windows-TGrou---6368dffa\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.cs:line 891  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in D:\j\workspace\windows-TGrou---6368dffa\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 64     at System.Net.Http.Functional.Tests.HttpClientHandlerTest.GetAsync_AllowAutoRedirectTrue_RetainsOriginalFragmentIfAppropriate(String origFragment, String redirFragment, String expectedFragment, Boolean useRelativeRedirect) in D:\j\workspace\windows-TGrou---6368dffa\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.cs:line 876  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in D:\j\workspace\windows-TGrou---6368dffa\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62     at System.Net.Http.WinHttpHandler.StartRequest(WinHttpRequestState state) in D:\j\workspace\windows-TGrou---6368dffa\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 863  ```"
27216	area-System.IO	Fix some compression tests	- Remove an unnecessary, flaky compression test  - Reduce brotli performance test time down to ~13 minutes. The problem looks to be that since i was using custom inneriterations the perf runner was going to the max time clock length each time, regardless of max iteration count. I switched my tests to use the Benchmark InnerIterations field and also artificially limited the max Compression iteration count to 100 instead of the usual 1000.    resolves https://github.com/dotnet/corefx/issues/26089  resolves https://github.com/dotnet/corefx/issues/26566    
27215	area-Infrastructure	[1.1] Stand up CI for new distro versions	With [the changes to the supported distro map for 1.1](https://github.com/dotnet/core/pull/1219/files#diff-1c27310d2cbb36ac217c96d508e238f5R33), we need to add CI runs for those distros so we don't ship something without test coverage.    Missing RIDS:  - Fedora26/Fedora27  - OpenSuse 42.3
27214	area-Infrastructure	Add RH / Centos 7.4 skus	@mmitche can you comment on the .groovy change?  SHould 7.4 be in outerloop, replace 7.3, or ?
27213	area-System.Net	make sure socket is blocking after accept() on macOS and BSD	This change will make sure new sockets after Accept() are in blocking mode on macOS.   See the notes from #27210.     It will also make them auto-close after exec to match Linux behavior.  I have no direct evidence that it is causing problems but now remote exec xUnit tests will inherit sockets from main process. 
27211	area-System.Net	[Regresion] Test Failure: System.Net.WebSockets.Client.Tests.CancelTest / CloseAsync_Cancel_Success	[System.Net.WebSockets.Client.Tests.CancelTest/CloseAsync_Cancel_Success(server: ws://corefx-net.cloudapp.net/WebSocket/EchoWebSocket.ashx)](https://mc.dot.net/#/user/caesar1995/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/8345c5e744278e6274af556e5bfd3957d7ab7a41/workItem/System.Net.WebSockets.Client.Tests/analysis/xunit/System.Net.WebSockets.Client.Tests.CancelTest~2FCloseAsync_Cancel_Success(server:%20ws:~2F~2Fcorefx-net.cloudapp.net~2FWebSocket~2FEchoWebSocket.ashx))    ```  Assert.Equal() Failure                ↓ (pos 4)  Expected: The 'System.Net.WebSockets.InternalClientWebS···  Actual:   The remote party closed the WebSocket connect···                ↑ (pos 4)  ```    ```  at System.Net.WebSockets.Client.Tests.ClientWebSocketTestBase.TestCancellation(Func`2 action, Uri server) in D:\j\workspace\windows-TGrou---6368dffa\src\System.Net.WebSockets.Client\tests\ClientWebSocketTestBase.cs:line 81     at System.Net.WebSockets.Client.Tests.CancelTest.CloseAsync_Cancel_Success(Uri server) in D:\j\workspace\windows-TGrou---6368dffa\src\System.Net.WebSockets.Client\tests\CancelTest.cs:line 80  --- End of stack trace from previous location where exception was thrown ---  ```    Consistent repro on Windows.    Different from: #22904    ## Failure history    Build | OS  -- | --  20180214.01 | 2x OSX10.12 & 2x OSX10.13  20180214.02 | 4x Win10 & 2x Win7 & 2x OSX10.12 & 2x OSX10.13  20180215.01 | 10x Win10 & 4x Win8.1 & 2x OSX10.12 & 2x OSX10.13  20180215.04 | 10x Win10 & 2x Win8.1 & 4x Win7 & 2x OSX10.12 & 2x OSX10.13  20180216.01 | 5x Win10 & Win8.1 & OSX10.12 & OSX10.13  20180216.03 | 4x Win10 & 2x Win7 & Win8.1 & OSX10.12 & OSX10.13  
27209	area-System.Security	Normalize names of span inputs in crypto API	"The asymmetric types operate on either hashed input, or unprocessed input.  The existing API tends to call hashed input ""hash"" (or ""rgbHash"" for older API),  and unprocessed input ""data"" (or ""rgbData"").    This change modifies the new (ReadOnly)Span-based methods to use ""data""  and ""hash"" (as appropriate) instead of ""source"".  Particularly because the  hash-based methods in DSA do not contain the word Hash, making ""source""  for CreateSignature ambiguous.    In the cases where the existing parameter was named ""rgbHash"" (et al) the  ""rgb"" was dropped in the (ReadOnly)Span variant, including in the cases  where the (ReadOnly)Span variant is a proper overload."
27208	area-System.Net	Enable overriding of OpenSSL version	Also change the order of attempts to load the libssl.so so that  the version 1.0.2 is tried first to make it less probable that some  of our other dependencies end up loading conflicting version of libssl  on Debian 8 that has bumped the libssl soname to 1.0.2.    Closes #24891    
27207	area-System.Net	Error with PostAsync	"if you use this code in the .net core 1-2 then it gives an error with code 400. If you use the same code in .netframework, then everything passes successfully with code 200. Test on windows. Why error?    `  class Program      {          private const string ProjectID = ""61"";          private const string SubProjectId = ""0"";          private const string ShardId = ""0"";          private const string UserId = ""6918200764865613899"";          private const string UserId2 = ""7816681534978888932"";            private static string XML(string name, string username, string password)          {              return string.Format(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><{0} ProjectId=\""{1}\"" SubProjectId=\""{2}\"" ShardId=\""{3}\"" UserId=\""{4}\"" UserId2=\""{5}\"" Username=\""{6}\"" Password=\""{7}\"" />"", name, ProjectID, SubProjectId, ShardId,              UserId, UserId2, username, password);          }            static void Main(string[] args)          {              HttpClient hc = new HttpClient();              ServicePointManager.ServerCertificateValidationCallback += (o, certificate, chain, errors) => true;              hc.DefaultRequestHeaders.Add(""User-Agent"", ""Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.9 Downloader/12820 MailRuGameCenter/1282 Safari/537.36"");              hc.DefaultRequestHeaders.Add(""Accept"", ""*/*"");              var post = XML(""Auth"", ""artem.rizenkov@gmail.com"", ""XNCCFCWA"");              var result = hc.PostAsync(""https://authdl.mail.ru/sz.php?hint=Auth"", new StringContent(post, Encoding.UTF8, ""application/x-www-form-urlencoded"")).GetAwaiter().GetResult();          }      }`"
27206	area-Meta	Scrub error messages for missing arguments	It's really easy to have a resource string with substitutions but then in code forget to include arguments to fill them, e.g. https://github.com/dotnet/corefx/pull/27205.  We should scrub through the codebase fixing any such issues we find.  I expect 99% of cases would be easily automatable.
27204	area-System.Runtime	Use stackalloc for longer SystemDirectory paths	nit change, use stackalloc for longer SystemDirectory path < 260 chars.
27203	area-System.Net	Add SslStream test to validate options aren't mutated	While reading the code, I thought I saw the AuthenticateAsClientAsync options mutating the input options bag, which it shouldn't do.  I wrote a test for it, only to realize that I'd read the code incorrectly and it wasn't mutating things incorrectly.  But since I'd written the test, figured I might as well check it in.    cc: @Priya91 
27202	area-System.Text	Regex perf test for cache, refs #24425	Performance test for System.Text.RegularExpressions.Regex cache. Refs #24425 
27199	area-System.Net	Put method with Content on Linux is very slow	".Net core - Runtime v2.0.5  ``` csharp  using System;  using System.Diagnostics;  using System.Net.Http;  using System.Text;    namespace Test  {      class Program      {            static void Main(string[] args)          {              var httpClient = new HttpClient();                            // PUT              using (var request = new HttpRequestMessage(HttpMethod.Put, ""http://httpbin.org/put""))              {                  request.Content = new StringContent(""{\""test\"": 123 }"", Encoding.UTF8, ""application/json"");                    var stopWatch = new Stopwatch();                  stopWatch.Start();                  using (var response = httpClient.SendAsync(request).Result)                  {                      stopWatch.Stop();                      Console.WriteLine(""PUT with content - "" + stopWatch.Elapsed);                  }              }                            using (var request = new HttpRequestMessage(HttpMethod.Put, ""http://httpbin.org/put""))              {                  var stopWatch = new Stopwatch();                  stopWatch.Start();                  using (var response = httpClient.SendAsync(request).Result)                  {                      stopWatch.Stop();                      Console.WriteLine(""PUT without content - "" + stopWatch.Elapsed);                  }              }                            // POST              using (var request = new HttpRequestMessage(HttpMethod.Post, ""http://httpbin.org/post""))              {                  request.Content = new StringContent(""{\""test\"": 123 }"", Encoding.UTF8, ""application/json"");                                    var stopWatch = new Stopwatch();                  stopWatch.Start();                  using (var response = httpClient.SendAsync(request).Result)                  {                      stopWatch.Stop();                      Console.WriteLine(""POST with content - "" + stopWatch.Elapsed);                  }              }                            using (var request = new HttpRequestMessage(HttpMethod.Post, ""http://httpbin.org/post""))              {                  var stopWatch = new Stopwatch();                  stopWatch.Start();                  using (var response = httpClient.SendAsync(request).Result)                  {                      stopWatch.Stop();                      Console.WriteLine(""POST without content - "" + stopWatch.Elapsed);                  }              }          }      }  }  ```    Result:  ### Ubuntu 16.04.3 LTS  ```  PUT with content - 00:00:02.5108530  PUT without content - 00:00:00.1544149  POST with content - 00:00:00.1640221  POST without content - 00:00:00.1710089  ```    ### Windows 10 Pro  ```  PUT with content - 00:00:00.4485657  PUT without content - 00:00:00.2165181  POST with content - 00:00:00.1581848  POST without content - 00:00:00.1617438  ```    Why is Put method with content on Linux so slow? I tried use other content types(Steam/Bytes) and they all works slowly also"
27198	area-System.Net	SocketsHttpHandler: improve chunked read handling	Today, we only use a single chunk per ReadAsync on the content body.  For example, if we receive a chunked response body like this:    ```  5\r\n  hello\r\n  5\r\n  world\r\n  0\r\n  ```    The first ReadAsync on the response stream will only get the first 5 bytes, even though more bytes are available in subsequent chunks.    We should improve this.  We should process as many chunks are available in the buffer before returning to the user.    Addditionally, we should consider doing a buffered read when we are close to the end of the chunk but haven't fully chunk yet.  For example, assume the initial read on the body causes us to read into the connection read buffer, receiving the following chunks, with the second one incomplete:    ```  5\r\n  hello\r\n  5\r\n  wo  ```    Per above, for the initial read, we should process both chunks and return 7 bytes.    For the next read, we should notice that we are close to the end of the chunk (3 bytes remaining) and do a buffered read on the connection.  This will allow us to process the rest of the current chunk and any additional chunks returned as part of the buffered read.    We should only do unbuffered reads when there are enough bytes remaining in the current chunk to satisfy the requested read size, unless the remaining chunk bytes won't fit in the connection read buffer, in which case we should do an unbuffered read up to the remaining chunk bytes.  
27195	area-System.IO	Use NtCreateFile on Win32	NtCreateFile allows passing in a base handle which makes opening child directories much faster. This cuts anywhere from 3-10% of the time off of a GetFiles() call.    It is significantly faster as it avoids normalization and path parsing overhead.    cc: @terrajobst, @danmosemsft 
27194	area-System.Net	Remove unsafe from Uri.HexEscape in favor of string.Create	Remove unsafe, avoid allocation and write directly into the string's memory. Benchmarking with 200k * 100 samples.    Relates to https://github.com/dotnet/corefx/pull/22872  Benchmark-Code: https://gist.github.com/ViktorHofer/43a61de5cd7d3e45b29e36e7a40f21c2    ``` ini    BenchmarkDotNet=v0.10.12.431-nightly, OS=Windows 10.0.17101  Intel Core i7-6600U CPU 2.60GHz (Skylake), 1 CPU, 4 logical cores and 2 physical cores  Frequency=2742189 Hz, Resolution=364.6722 ns, Timer=TSC    [Host] : .NET Core ? (Framework 4.6.26214.07), 64bit RyuJIT    Job=.NET Core 2.1 uri Runtime=Core  Toolchain=InProcessToolchain      ```    Before:    |    Method |     Mean |    Error |   StdDev |       Gen 0 | Allocated |  |---------- |---------:|---------:|---------:|------------:|----------:|  | HexEscape | 345.2 ms | 3.552 ms | 3.322 ms | 384500.0000 | 769.04 MB |    After:    |    Method |     Mean |    Error |   StdDev |       Gen 0 | Allocated |  |---------- |---------:|---------:|---------:|------------:|----------:|  | HexEscape | 328.6 ms | 5.602 ms | 4.966 ms | 384500.0000 | 769.04 MB |    cc @CIPop, @davidsh @danmosemsft   
27193	area-System.Memory	Add ROSpan ToLower and ToUpper string-like APIs with CultureInfo	Part of https://github.com/dotnet/corefx/issues/21395#issuecomment-359906138    - ToLower  - ToLowerInvariant  - ToUpper  - ToUpperInvariant    Depends on: https://github.com/dotnet/coreclr/pull/16379 and https://github.com/dotnet/coreclr/pull/16496    cc @jkotas, @stephentoub, @KrzysztofCwalina, @tarekgh, @JeremyKuhne, @joshfree 
27192	area-System.IO	No easy way to see if FileStream.Lock is supported	On OS X, FileStream.Lock throws a PlatfomNotSupportedException.    There's no easy way to know if a given Platform supports this apart from either hardcoding a list of Platforms, or trying to do it and catching the Exception.    Streams have methods like CanRead/CanWrite/CanSeek to allow developers to verify if something _could_ work before doing it.    I'd like to propose a new static property on FileStream named like `SupportsLocking` than can be cheaply checked, even before creating the FileStream (as the result of this might influence the `FileMode` etc. arguments).    A proposal is [in this commit](https://github.com/mstum/corefx/commit/a9dd5fe07e101807ea0a950ddf9edc9afc3d10ee).  
27191	area-System.Diagnostics	ArgumentList added to Process.StartInfo	Fixes https://github.com/dotnet/corefx/issues/23592    This PR contains tests for the change also
27187	area-System.Data	SNIPacket performance improvement	 In `SNIPacket`, memory for `_data` byte array is allocated and released everytime `SqlClient` receives packets from server. I made it to reuse existing byte array if new allocation size is the same as existing byte array length. In `TdsParserStateObjectManaged`, `SNIPacket` object is newly created everytime it sends packets to server. I made it to reuse existing `SNIPacket` object if it is already created previously.   This fix improves SqlClient (managedSNI) by around 1000 tps both in sync and async in TechEmpower benchmark testing.(https://github.com/aspnet/benchmarks)    
27185	area-System.IO	Ability to wait for a specific amount of data	"Often a protocol knows how much data it is waiting for (TLS frames being one example, size headered binary protocols being another).    Instead of ReadAsync() then you check the header and you see you don't have enough, so you ReadAsync() check if you have enough and continue doing loops until you have a complete frame. If you could do a ""ReadAsync(xxxxx)"" and it wouldn't return unless there was an error/complete or at least that amount of data was available it would solve extra looping in every downstream protocol    /cc @Drawaes "
27184	area-System.IO	Remove FileSystem unused common files	Also update .sln using UpdateVSConfigurations    cc: @jkotas 
27181	area-System.Net	Enable SendReceive_VaryingLengthBuffers_Success on Windows run	Have run the test 500 times on local Windows 10 machine. No failure. The previous stack trace #22845 is too old, cannot reflect which code path results in this failure.    Enable the test on Windows to see if it fails in CI. If it fails, I can investigate further.    Related: #23765
27179	area-System.Runtime	Need tests for 2.0<->2.1 binary serialization roundtripping	We currently test 2.1<->2.1 and 2.1<->NETFX. We also need to verify 2.1<->2.0 works.    If we add a new set of canned binary blobs, copy and pasted from the 2.0 servicing branch, we can test 2.0->2.1 with trivial extension of existing mechanisms. To test 2.1->2.0 we would need 2.0 on our test machines, and it isn't there. However it's sufficient to only do that occasionally by hand, and no more often than we update the 2.1 binary blobs, since 2.0 isn't changing.    @ViktorHofer can you formalize a plan and then someone can work on it?
27177	area-System.Data	NullReferenceException in SNITCPHandle.Send	While attempting to write to a table using a table valued parameters with MARS on I am getting a `NullReferenceException` and the following stack trace.    ```   System.NullReferenceException: Object reference not set to an instance of an object.     at System.Data.SqlClient.SNI.SNITCPHandle.Send(SNIPacket packet)     at System.Data.SqlClient.SNI.SNIMarsConnection.Send(SNIPacket packet)     at System.Data.SqlClient.SNI.SNIMarsHandle.SendControlPacket(SNISMUXFlags flags)     at System.Data.SqlClient.SNI.SNIMarsHandle.Dispose()     at System.Data.SqlClient.SNI.TdsParserStateObjectManaged.Dispose()     at System.Data.SqlClient.TdsParserSessionPool.PutSession(TdsParserStateObject session)     at System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(IAsyncResult asyncResult)     at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction,   ```    I am on running dotnet-runtime-2.0.5-linux-x64. 
27176	area-System.Net	Modify StreamContent to use default CopyToAsync buffer size when no size is provided	When creating `StreamContent`, users have the option to provide a buffer size or to use our default. This change attempts to improve performance by deferring to the default buffer size chosen in CopyToAsync rather than selecting the default ourselves.    The default buffer size in CopyToAsync is much larger than the default we chose in StreamContent. Deferring to that default greatly improves performance for uploads from slow stream sources like the file system. While it does add some cost for the initial allocation, the larger buffers are then pooled. Users are also still able to specify their own buffer size if they prefer not to use the default.    Some rough performance testing on my machine showed a ~20% decrease in the time it took HttpClient to upload a 20 MB file. That performance testing was based off the code in [this article](http://weblogs.thinktecture.com/pawel/2017/03/aspnet-core-webapi-performance.html), which was the source for the original issue.    Fixes: #24495
27173	area-System.Net	Fix ConnectAsync not throwing exception for already connected Socket	For issue https://github.com/dotnet/corefx/issues/22765. @geoffkizer @wfurt PTAL    The previously failing tests are now passing for me locally, running a full test suite to make sure this doesn't regress anything else.
27172	area-System.Net	CurlHandler allows invalid headers as long as they contain a colon	"WinHttpHandler, SocketsHttpHandler, and the netfx all disallow response headers like:    - ""   :    ""  - "":""  - ""\x1234: \x5678""    but CurlHandler allows them... as long as there's a colon it's happy."
27171	area-System.Net	Test failure: GetAsync_ManyDifferentRequestHeaders_SentCorrectly	"From the test:  ```  // Fails consistently with:  // System.InvalidCastException: ""Unable to cast object of type 'System.Object[]' to type 'System.Net.Http.WinHttpRequestState'""  // This appears to be due to adding the Expect: 100-continue header, which causes winhttp  // to fail with a ""The parameter is incorrect"" error, which in turn causes the request to  // be torn down, and in doing so, we this this during disposal of the SafeWinHttpHandle.  ```"
27169	area-Infrastructure	[2.1] Update Linux Versions for test execution	Port of https://github.com/dotnet/corefx/pull/26723 for the 2.1 branch.    Removals:  Fedora 25 - EOL 12/20/17  OpenSUSE 42.2 - EOL 01/26/18  RedHat 7.2 - EOL 11/30/17    Additions:  OpenSUSE 42.3  Fedora 27    It may be too late to merge this with the impending lockdown, but I wanted to get it ready just in case we want to squeeze it in. These EOL Helix images are being removed soon which will cause red CI for Preview1 without an update.    cc: @MattGal @joshfree 
27168	area-System.IO	Add IsFlush to Pipelines ReadResult	```csharp  public partial struct ReadResult  {      public bool IsFlush => (_resultFlags & ResultFlags.Flush) != 0;  }  ```  ```diff  [Flags]  internal enum ResultFlags : byte  {      None = 0x0,      Canceled = 0x1,      Completed = 0x2,  +   Flush = 0x4  }  ```  And set for calls to `FlushAsync()`    This allows the reader; if it chooses, to differentiate between a `WriteAsync()` and a `FlushAsync()` (if the writer differentiates)    **Use case**    If `WriteAsync` and `FlushAsync` are differentiated; a `TextWriter` type on a Pipeline does not need to maintain arrays of internal buffered data to have good performance but only needs a char (or two?) to maintain the outstanding surrogate pairs for encoding; the rest can be directly written to the Pipe.    If they don't differentiate then it can't write directly to the Pipe as writing a very small chunk followed by a flush in a loop would have an unacceptable performance degradation; so its back to maintaining internal arrays and then writing in a large chunk 😢     /cc @davidfowl @pakrym @stephentoub 
27167	area-System.Numerics	Add a special Numeric structure or INumeric Interface	_Intrinsic_ numeric types (byte, int, float, ….etc) are structures, so unfortunately, they have no base class that can gather all basic methods and operators!   So I suggest to add a special Numeric structure that can accept numeric values of any type. It should contain the value and the underling type of it, as Object class does. Numeric structure should have the basic arithmetic and logical operators. Or it can be an interace (say INumeric) that all numeric data types implement. This will not break any existing code.    Usage:   Numeric structure (or INumeric Inrerface) can be used in generic methods where T is expected to be a numeric type, to carry out the basic arithmetic and logical operators without writing a dozen if statements for each individual numeric type. Objects doesn't have the basic arithmetic and logical operators and have to be converted to numeric types to work with. For example, I tried to do this but failed:      ```    public struct Numeric      {          public object Value { get; set; }            public static Numeric operator +(Numeric n1, Numeric n2)          {              return (Numeric)(n1.Value + n2.Value);          }      }    ```  C# refuses n1.Value + n2.Value because it doesn't know how to add objects. Many if statements are needed to deal with different types of n1 and n2, regarding the larger type to use as the output type. This is a hell of code to something that should be easy and direct if there was a general numeric type that can contain any numeric type.    I face the same situation when I use the base Enum class in any method, because Enum can have any numeric type as an underling type!    I saw similar problem in the source code of Vector<T>, where tons of code lines are repeated just to cover all cases of each numeric type!    Note: If you add the numeric type, C# and VB.net should add a new constraint for generic parameters to be numerics.  where T: numeric  this means T can only be of type Numeric or any intrinsic numeric data types.    So, If this Numeric Type or INumeric Interface exists, one can write  ```  public static Enum SetFlag(Enum value, Enum flag)  {  var result = (Numeric)value | (Numeric)flag);  return (Enum)result;   }  ```    instead of:     ```  public static Enum SetFlags(Enum value, Enum flag)  {     if (Enum.GetUnderlyingType(value.GetType()) == typeof(byte))        return (Enum)(object)((byte)(object)value | (byte)(object)flag);       if (Enum.GetUnderlyingType(value.GetType()) == typeof(int))        return (Enum)(object)((int)(object)value | (int)(object)flag);      //     //     // etc  }  ```    and the same  when writing  generic types that deal with numeric data types only.  This can be extended based on this proposal https://github.com/dotnet/csharplang/issues/1233, I also suggest to add these interfaces:  numeric constraint.  IIntegral: for integer tyoes (byte, sbyte, int, uint, short, ushort, long, ulong)  IFloating: (float, double, decemal)  IValue: (numerics and dates).  ILetiral (Char and string).  IPrimitive (numerics, dates, char, string)    These Interfaces will make writting generics easier. IPerimative can help you   format or parsing or using + operation depending on where T: IPerimative.   Also it can be usefull when defining generic lists and dictionaries that can contain different values.  This will make them more specialized than using objects.  
27165	area-System.Diagnostics	Process.Start fails to execute properly	"_From @victorsample on February 15, 2018 14:44_  Using Visual Studio 2017 Community  Process.Start (<name>,<command_line)  fails to execute properly.  Trying to start Postgresql utility ""psql"" with command line ""-U aobadmin aobdb <C:\\Temp\\backupdb.sql"" does not execute properly.  Putting the execution in a "".bat"" file and building the command line in the bat file does work.  Apparently the form of the ""psql"" command is causing a problem.  _Copied from original issue: dotnet/coreclr#16399_"
27164	area-Infrastructure	more love from BenchmarkDotNet to CoreFX	"To tell the long story short: I implemented new toolchain for BenchmarkDotNet which generates a self-contained app which can target **ANY** CoreFX and CoreCLR builds. I combined the knowledge from dogfooding docs from [corefx](https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/dogfooding.md) and [coreclr](https://github.com/dotnet/coreclr/blob/master/Documentation/workflow/UsingDotNetCli.md). dotnet cli does the job for us, it's just a matter of generating the right `.csproj` and `NuGet.config` files.    So you can now:    1. Benchmark local CoreFX builds  2. Benchmark nightly CoreFX builds  3. Benchmark local CoreCLR builds  4. Benchmark nightly CoreCLR builds  5. Mix them all together  6. Compare them  7. Use Disassembly Diagnoser to get the generated assembly code    To use the new feature you need to add our CI feed to your `NuGet.config` file and download version `0.10.12.433` or newer.    ```xml  <packageSources>    <add key=""bdn-CI"" value=""https://ci.appveyor.com/nuget/benchmarkdotnet"" />  </packageSources>  ```    Simple example:    ```cs  public class LocalCoreFxConfig : ManualConfig  {   public LocalCoreFxConfig()   {    Add(Job.ShortRun.With(CustomCoreClrToolchain.CreateForLocalCoreFxBuild(     @""C:\Projects\forks\corefx\bin\packages\Release"",     ""4.5.0-preview2-26313-0"")));      Add(DefaultConfig.Instance.GetExporters().ToArray());    Add(DefaultConfig.Instance.GetLoggers().ToArray());    Add(DefaultConfig.Instance.GetColumnProviders().ToArray());      Add(DisassemblyDiagnoser.Create(new DisassemblyDiagnoserConfig(printAsm: true, recursiveDepth: 2)));   }  }    class Program  {      static void Main(string[] args)           => BenchmarkSwitcher.FromAssembly(typeof(Program).GetTypeInfo().Assembly)              .Run(args, new LocalCoreFxConfig());  }  ```    Comparison:    ```cs  Add(Job.Default.With(CustomCoreClrToolchain.CreateForNightlyCoreFxBuild(""4.5.0-preview2-26214-01"", displayName: ""before my change"")));  Add(Job.Default.With(CustomCoreClrToolchain.CreateForNightlyCoreFxBuild(""4.5.0-preview2-26215-01"", displayName: ""after my change"")));  ```    Complex example:    ```  public class LocalCoreClrConfig : ManualConfig  {   public LocalCoreClrConfig()   {    Add(Job.ShortRun.With(     new CustomCoreClrToolchain(      ""local builds"",      coreClrNuGetFeed: @""C:\Projects\forks\coreclr\bin\Product\Windows_NT.x64.Release\.nuget\pkg"",      coreClrVersion: ""2.1.0-preview2-26313-0"",      coreFxNuGetFeed: @""C:\Projects\forks\corefx\bin\packages\Release"",      coreFxVersion: ""4.5.0-preview2-26313-0"")    ));      Add(Job.ShortRun.With(     new CustomCoreClrToolchain(      ""local coreclr myget corefx"",      coreClrNuGetFeed: @""C:\Projects\forks\coreclr\bin\Product\Windows_NT.x64.Release\.nuget\pkg"",      coreClrVersion: ""2.1.0-preview2-26313-0"",      coreFxNuGetFeed: ""https://dotnet.myget.org/F/dotnet-core/api/v3/index.json"",      coreFxVersion: ""4.5.0-preview2-26215-01"")    ));      Add(Job.ShortRun.With(     new CustomCoreClrToolchain(      ""myget coreclr local corefx"",      coreClrNuGetFeed: ""https://dotnet.myget.org/F/dotnet-core/api/v3/index.json"",      coreClrVersion: ""2.1.0-preview2-26214-07"",      coreFxNuGetFeed: @""C:\Projects\forks\corefx\bin\packages\Release"",      coreFxVersion: ""4.5.0-preview2-26313-0"")    ));      Add(Job.ShortRun.With(     new CustomCoreClrToolchain(      ""myget builds"",      coreClrNuGetFeed: ""https://dotnet.myget.org/F/dotnet-core/api/v3/index.json"",      coreClrVersion: ""2.1.0-preview2-26214-07"",      coreFxNuGetFeed: ""https://dotnet.myget.org/F/dotnet-core/api/v3/index.json"",      coreFxVersion: ""4.5.0-preview2-26215-01"")    ));      // the rest of the config..   }  }  ```    The output is going to contain exact CoreCLR and CoreFX versions used:    ```  BenchmarkDotNet=v0.10.12.20180215-develop, OS=Windows 10 Redstone 3 [1709, Fall Creators Update] (10.0.16299.192)  Intel Core i7-3687U CPU 2.10GHz (Ivy Bridge), 1 CPU, 4 logical cores and 2 physical cores  Frequency=2533308 Hz, Resolution=394.7408 ns, Timer=TSC  .NET Core SDK=2.1.300-preview2-008162    [Host]     : .NET Core 2.0.5 (CoreCLR 4.6.26020.03, CoreFX 4.6.26018.01), 64bit RyuJIT    Job-DHYYZE : .NET Core ? (CoreCLR 4.6.26313.0, CoreFX 4.6.26313.0), 64bit RyuJIT    Job-VGTPFY : .NET Core ? (CoreCLR 4.6.26313.0, CoreFX 4.6.26215.01), 64bit RyuJIT    Job-IYZFNW : .NET Core ? (CoreCLR 4.6.26214.07, CoreFX 4.6.26215.01), 64bit RyuJIT    Job-CTQFFQ : .NET Core ? (CoreCLR 4.6.26214.07, CoreFX 4.6.26313.0), 64bit RyuJIT  ```    Corresponding change in BenchmarkDotNet https://github.com/dotnet/BenchmarkDotNet/issues/651    @ViktorHofer @benaadams  @stephentoub @JosephTremoulet @maryamariyan @AndyAyersMS    I am open to feedback and willing to improve/change the feature!      "
27163	area-System.Net	Streamline SocketHttpHandler's ParseStatusLine validation	"For a typical status line like ""HTTP/1.1 200 OK"", cuts the time of ParseStatusLine almost in half.  Fixes https://github.com/dotnet/corefx/issues/26946    cc: @geoffkizer, @davidsh"
27162	area-System.IO	Remove Commit from PipeWriter	Commit was originally added because to allow an opportunistic pick up of data by the reader if it's already reading but it doesn't give any back pressure and can be a pit of failure in some cases. Originally, it was required when we had the requirement to Alloc() then Commit() but that requirement has been relaxed. On top of that the scenarios it was added for were a bit ill defined and we should remove it from the PipeWriter class.    /cc @benaadams @pakrym 
27161	area-System.Collections	ImmutableArray<byte> .Concat() includes a number of trailing zeroes not present in either argument	".NET Command Line Tools 2.0.2    Hello!  Found a weird problem today, been able to isolate it to the following code sample:    ```C#  using Newtonsoft.Json;  using System;  using System.Collections.Immutable;  using System.Linq;  using System.Text;    namespace ArraySanitycheck  {      class Program      {          public sealed class TestModel          {              public readonly string TestString;              public readonly int TestNumber;                public TestModel(string testString, int testNumber)              {                  TestString = testString;                  TestNumber = testNumber;              }          }            static void Main(string[] args)          {              var model = new TestModel(""Test String Content"", 268234);                var bytes = Encoding.UTF8.GetBytes($""Test Purpose\0{JsonConvert.SerializeObject(model)}"").ToImmutableArray();                var a = bytes.TakeWhile(i => i != 0);              var b = new byte[] { 0 };              var c = bytes.SkipWhile(i => i != 0).Skip(1).Take(5);              var d = new byte[] { 254 };              var e = bytes.SkipWhile(i => i != 0).Skip(6);              var concatenated = a.Concat(b).Concat(c).Concat(d).Concat(e);          }      }  }  ```    Set a breakpoint on the closing brace following `var concatenated...` and inspect `concatenated`.  It ends with approximately 15 zeroes.    Note that none of a, b, c, d or e include said zeroes.    Weirdly, attempting to write this data to the console (`Console.WriteLine(string.Join("", "", concatenated));`) does not include the zeroes either.      I suspect this may be an issue with how TakeWhile/SkipWhile perform ""slices"" of the underlying array (the length of the concatenated array is the same as the length of the sliced array)."
27158	area-System.IO	Made a few tweaks to pipelines	- Renamed the file containing the class IDuplexPipe  - Changed the default scheduler to use the ThreadPool if none was specified    Resolves #27157 
27157	area-System.IO	Default the pipe scheduler to the thread pool instead of inline	As a safe default for the 99% of people we should use the ThreadPool PipeScheduler instead of the Inline one. Running inline can cause unintended consequences (like deadlocks).
27155	area-System.IO	Use shared IO helper code from CoreCLR	Common IO source code helpers were copied to CoreCLR some time ago. Now that we are mirroring, we should switch to using the mirrored code. There has been quite a bit of drift, so it might take some effort.    src/Common/src/System/IO/PathInternal.Windows.cs -> src/Common/src/CoreLib/System/IO/PathInternal.Windows.cs    https://github.com/dotnet/corefx/pull/27150#discussion_r168377623  
27154	area-System.IO	Remove IDisposable from IDuplexPipe	The way you close a pipe is by completing both sides, and in the case of an IDuplexPipe, that's the input and output. There should be no dispose on the interface.    /cc @pakrym 
27153	area-System.IO	Current directory code duplicates Environment	Just call Environment.CurrentDirectory. Remove a number of P/Invokes  that are no longer in use.
27152	area-System.IO	NamedPipeClientStream does not work on Mac on Mono	I've been trying to port the compiler server to work on Mono, but I hit a serious snag: looks like named pipes don't support Mono. Here's the stack trace I get:    ```C#  --- PID=37064 TID=29 Ticks=-1794243353: Attempt to open named pipe 'angocke.F.HUdVQvyExeOVtpAXeTBkTcTRj'  --- PID=37064 TID=29 Ticks=-1794243341: Exception 'Error on creating named pipe: error code -1' occurred during 'Exception while connecting to process'. Stack trace:    at System.IO.Pipes.UnixNamedPipe.EnsureTargetFile (System.String name) [0x00029] in <f7cad77794fc4fa5bf9a33531f4b94b4>:0     at System.IO.Pipes.UnixNamedPipeClient..ctor (System.IO.Pipes.NamedPipeClientStream owner, System.String serverName, System.String pipeName, System.IO.Pipes.PipeAccessRights desiredAccessRights, System.IO.Pipes.PipeOptions options, System.IO.HandleInheritability inheritability) [0x00080] in <f7cad77794fc4fa5bf9a33531f4b94b4>:0     at System.IO.Pipes.NamedPipeClientStream..ctor (System.String serverName, System.String pipeName, System.IO.Pipes.PipeAccessRights desiredAccessRights, System.IO.Pipes.PipeOptions options, System.Security.Principal.TokenImpersonationLevel impersonationLevel, System.IO.HandleInheritability inheritability) [0x0003b] in <f7cad77794fc4fa5bf9a33531f4b94b4>:0     at System.IO.Pipes.NamedPipeClientStream..ctor (System.String serverName, System.String pipeName, System.IO.Pipes.PipeDirection direction, System.IO.Pipes.PipeOptions options, System.Security.Principal.TokenImpersonationLevel impersonationLevel, System.IO.HandleInheritability inheritability) [0x00009] in <f7cad77794fc4fa5bf9a33531f4b94b4>:0     at System.IO.Pipes.NamedPipeClientStream..ctor (System.String serverName, System.String pipeName, System.IO.Pipes.PipeDirection direction, System.IO.Pipes.PipeOptions options, System.Security.Principal.TokenImpersonationLevel impersonationLevel) [0x00000] in <f7cad77794fc4fa5bf9a33531f4b94b4>:0     at System.IO.Pipes.NamedPipeClientStream..ctor (System.String serverName, System.String pipeName, System.IO.Pipes.PipeDirection direction, System.IO.Pipes.PipeOptions options) [0x00000] in <f7cad77794fc4fa5bf9a33531f4b94b4>:0     at (wrapper remoting-invoke-with-check) System.IO.Pipes.NamedPipeClientStream..ctor(string,string,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions)  ```    cc @jaredpar @stephentoub 
27151	area-System.Net	SocketsHttpHandler: refactor pool manager logic to enable SSL proxy tunneling support	Reorganize and enhance a bunch of pool management logic to enable SSL proxy tunneling support.    Note that proxy tunneling support isn't actually working yet; once Tomas gets his CONNECT PR in, this should enable the tunnel support.    Split into two commits; first is general reorganization to enable proxy tunneling, second is the code to specifically implement proxy tunneling via CONNECT.    @stephentoub @wfurt @davidsh
27150	area-System.IO	Cleaning out dead code	Also refactor Unix attribute handling a bit to be more consistent and  ensure that we don't make unnecessary addtional filesystem calls.
27148	area-System.Net	Fix race condition in PostAsyncExpect100Continue_RetryOnConnectionClosed_Success test	Fixes https://github.com/dotnet/corefx/issues/26760    cc: @geoffkizer 
27147	area-System.Diagnostics	BasicEventSourceTests failing in non elevated Windows runs	cc @brianrob     Not all our Windows test runs are elevated. Tests need to pass non elevated.    ```  BasicEventSourceTests.FuzzyTests.Test_Write_Fuzzy | 35 ms | 10  -- | -- | --  BasicEventSourceTests.TestsWriteEvent.Test_WriteEvent_ComplexData_SelfDescribing_ETW | 0 ms | 10  BasicEventSourceTests.TestsWriteEvent.Test_WriteEvent_SelfDescribing_ETW | 0 ms | 10  BasicEventSourceTests.TestsWriteEvent.Test_WriteEvent_Manifest_ETW | 0 ms | 10  BasicEventSourceTests.TestsWriteEvent.Test_WriteEvent_ByteArray_Manifest_ETW | 0 ms | 10  BasicEventSourceTests.TestsWriteEvent.Test_WriteEvent_ByteArray_SelfDescribing_ETW | 0 ms | 10  BasicEventSourceTests.TestsWrite.Test_Write_T_ETW | 0 ms | 10  BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds  ```  eg   https://ci.dot.net/job/dotnet_corefx/job/master/job/windows_nt_debug/lastCompletedBuild/testReport/BasicEventSourceTests/FuzzyTests/Test_Write_Fuzzy/    They are all failing this way  ```  MESSAGE:  System.Exception : Need to be elevated to run.  +++++++++++++++++++  STACK TRACE:  at BasicEventSourceTests.EtwListener..ctor(String dataFileName, String sessionName) in D:\j\workspace\windows_nt_debug88592b53\src\System.Diagnostics.Tracing\tests\BasicEventSourceTest\Harness\Listeners.cs:line 170 at BasicEventSourceTests.FuzzyTests.Test_Write_Fuzzy() in D:\j\workspace\windows_nt_debug88592b53\src\System.Diagnostics.Tracing\tests\BasicEventSourceTest\FuzzyTests.cs:line 2751  ```    Fix seems to be to change all these to have `[ConditionalFact(nameof(IsProcessElevated))]`
27146	area-System.Text	Fix regression & enable ClearInitLocals in System.Text.RegularExpressions	I expect we will use more stackalloc in Regex over time therefore it makes sense to enable the switch now.    Relates to https://github.com/dotnet/corefx/pull/26993    Also fixes a bad code refactoring introduced by https://github.com/dotnet/corefx/pull/26877  
27145	area-System.Net	SocketsHttpHandler: Consider exposing a setting for Expect: 100-continue timeout	This is hardcoded to 1 second today.  We should consider exposing a setting to control this.    API proposal:    ```C#  public sealed class SocketsHttpHandler  {      public TimeSpan Expect100ContinueTimeout { get; set; } // Default is 1 second, as today  }  ```
27142	area-System.Data	Fix the name of the schema queue	Allow Schema queue to be detected from the database schema instead of assuming that the schema name is user name.  This approach is more portable, especially while running tests in a SQL docker installation. 
27139	area-System.Globalization	Fixing fa-IR neg. currency format for test GetCurrencyNegativePattern	Fixing fa-IR negative currency format for test GetCurrencyNegativePattern    Fixes #27022
27138	area-System.Globalization	Fixing fa-IR neg currency format for test GetCurrencyNegativePattern	Fixes #27022
27135	area-System.Net	Improve test coverage of SocketsHttpHandler	Used code coverage information to write targeted tests to cover various uncovered paths in SocketsHttpHandler.  Along the way fixed a variety of issues relating to throwing the wrong exception type, a stack overflow due to an unexpected recursive call, etc.    cc: @geoffkizer, @davidsh, @Priya91, @wfurt 
27134	area-System.IO	Change RootDirectory properties to span	Exposing string restricts the ability to change internals without introducing unnecessary allocations.
27133	area-System.IO	Add some pattern transformation tests	
27132	area-System.IO	WIP Move Pipes ACL types down	/cc @pjanotti     Just meant to test the changes I've made.  
27131	area-System.Threading	Remove a SignalAndWait test so that relevant change in CoreCLR can be brought into CoreFX	This test would fail after CoreCLR PR https://github.com/dotnet/coreclr/pull/16383, removing. https://github.com/dotnet/corefx/pull/27118 is the other part of this set of changes.
27130	area-Infrastructure	Point the Readme test badges to Helix runs	We should abandon the Jenkins testing infrastructure for innerloop/outerloop which is currently only being used for the badges and instead point our badges at daily/onPush helix runs (daily outerloop added in https://github.com/dotnet/corefx/pull/27129).    This greatly reduces the cost of updating our test OS versions and also makes the badges more accurately reflect our current build&test state.    Forked from https://github.com/dotnet/corefx/issues/27095  Depends on https://github.com/dotnet/core-eng/issues/1901    
27129	area-Infrastructure	Remove EOL OS's from Jenkins	- Removes some EOL OS's from our Jenkins Innerloop and Outerloop tests. These test definitions are triggerable on PR's but are not run by default. They are primarily used for daily/onPush runs that the badges on the corefx ReadMe.md can point to. By removing the definitions, we aren't losing any OS coverage since we run them on Helix. We are, however, losing the badge runs, so until we point the badges to the helix runs those are going to be outdated.  - Add a daily trigger to helix outerloop runs to replace the outerloop runs I'm removing from the Jenkins build/test.    resolves https://github.com/dotnet/corefx/issues/27095 for corefx/master.  resolves https://github.com/dotnet/corefx/issues/25252 for corefx/master    @mmitche @MattGal 
27127	area-System.Globalization	"Test failure: System.Globalization.Tests.NumberFormatInfoCurrencyNegativePattern/CurrencyNegativePattern_Get(locale: \""fa-IR\"")"	"Opened on behalf of @danmosemsft  The test `System.Globalization.Tests.NumberFormatInfoCurrencyNegativePattern/CurrencyNegativePattern_Get(locale: \""fa-IR\"")` has failed.  Assert.Contains() Failure     Not found: 1     In value:  Int32[] [8]          Stack Trace:          null Build : Master - 20180214.02 (Core Tests) Failing configurations: - Ubuntu.1804.Amd64-x64   - Release "
27126	area-System.Security	*CNG crypto algorithms missing from CNG library	I was looking at porting some code targeting desktop and came across SHA256Cng which I noticed was missing.    I did a diff and I see we're actually missing a number of Cng algorithms:    - MD5Cng  - SHA1Cng  - SHA256Cng  - SHA384Cng  - SHA512Cng    Moreover, I see quite a few more here: https://github.com/dotnet/corefx/blob/5edf66e4f35eca3ba409cb2e31154fb6a59bd4b3/src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/CryptoConfig.cs#L266-L284    Any reason we left these out? /cc @bartonjs 
27125	area-System.Text	Inline RegexCharClass code	Relates to https://github.com/dotnet/corefx/issues/27124    Code wasn't inlined before because the JIT function size exceeds threshold. IL size is 26 bytes.  Is there an easier way to tell for sure if a method is inlined? Currently I'm more or less guessing by looking at the generated JIT code and then I set a break point inside the function and if it not hit the code must be  inlined. (in Release mode of course)    cc @danmosemsft 
27124	area-System.Text	Regex code optimization candidates	The following items are potential candidates for code optimization which could result in an increased performance / reduced allocation. Based on perfview data and manual code review.    ### Time    - [x] Avoid additional iteration in op code generation (https://github.com/dotnet/corefx/pull/26877)  - [x] CharInClass (Internal & Recursive) (12.7% + 7.9% time spent exclusively)  https://source.dot.net/#System.Text.RegularExpressions/System/Text/RegularExpressions/RegexCharClass.cs,787  comments from @danmosemsft: optimizing for common characters [A-Za-z] first? Bloom filter? It's doing a binary search over a short list  comments from myself: I think binary search shouldn't be an issue even for small classes. See this article: https://schani.wordpress.com/2010/04/30/linear-vs-binary-search/  - [x] Stringmatch (6.2 % time spent exclusively)  https://source.dot.net/#System.Text.RegularExpressions/System/Text/RegularExpressions/RegexInterpreter.cs,256  Inline optimization for short case-sensitive strings (default).  `if (str[--c] != _culture.TextInfo.ToLower(runtext[--pos]))` check whether the characters are identical before doing ToLower  - [ ] SetOperator (5.4% time spent exclusively)  https://source.dot.net/#System.Text.RegularExpressions/System/Text/RegularExpressions/RegexInterpreter.cs,148  Store a boolean whether either of those opcodes appear in the pattern at all. Reduces costs to a Boolean check only.  - [ ] Forwardcharnext (3.5% time spent exclusively)  https://source.dot.net/#System.Text.RegularExpressions/System/Text/RegularExpressions/RegexInterpreter.cs,249  The benchmark analyzed by perfview uses case sensitive comparison. I don't know why so much time is spent in this function when it only does two comparisons and an index operation.  - [ ] EnsureStorage (2.3% time spent exclusively, a lot of allocation is done here)  https://source.dot.net/#System.Text.RegularExpressions/System/Text/RegularExpressions/RegexRunner.cs,345  Though one of the functions is called Stack it's allocating arrays on the Heap. We should investigate how often these array sizes are increased and think about using stackalloc with Span/ValueListBuilder here.  - [x] Analyze failing inlinees  There are probably tons of other places where inline optimizations are applicable.  [System.Text.RegularExpression.Inline.xlsx](https://github.com/dotnet/corefx/files/1725897/System.Text.RegularExpression.Inline.xlsx)    ### Allocations    In regex-redux there are 3 huge sets of allocations that dominate the rest  - There is a cascade of replacements on a 50M character string, which creates 500MB of string garbage, presumably in LOH  ![image](https://user-images.githubusercontent.com/6385855/36403552-5d9591f0-159a-11e8-9dad-a0df6d71aeff.png)  - Its input file is read into a 100MB string. (double byte - 50MB file)  - There are 100MB of StringBuilder allocations.    Could we use spans or pooled buffers or otherwise avoid these huge temporary strings?      Help is appreciated. If someone wants to collaborate I can share my perfview zip. I will extend this list over time.     FYI @stephentoub @jkotas @joshfree @vancem 
27123	area-System.IO	Move System.IO.Pipelines to netstandard1.1	
27121	area-System.Drawing	Unable to create Bitmap from disk file on Linux	"Hi, I'm referencing CoreCompat.System.Drawing.v2 from a .NET Core project and doing the following:    Bitmap frame = new Bitmap($""{Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)}\\images\\image_0.bmp"")    I've checked that the path is correct at runtime. On Windows this works fine, but on Debian I am getting:    Unable to update the static FcBlanks: 0x0600  Unable to update the static FcBlanks: 0x0601  Unable to update the static FcBlanks: 0x0602  Unable to update the static FcBlanks: 0x0603  Unable to update the static FcBlanks: 0x06dd  Unable to update the static FcBlanks: 0x070f  Unable to update the static FcBlanks: 0x2028  Unable to update the static FcBlanks: 0x2029  Unable to update the static FcBlanks: 0xfff9  Unable to update the static FcBlanks: 0xfffa  Unable to update the static FcBlanks: 0xfffb    Unhandled Exception: System.ArgumentException: A null reference or invalid value was found [GDI+ status: InvalidParameter]  at System.Drawing.GDIPlus.CheckStatus(Status status)  at System.Drawing.Bitmap..ctor(String filename, Boolean useIcm)  at TestVideoConvert.TestVideoConvert.Create() in /home/osboxes/Downloads/Test2/TestVideoConvert/TestVideoConvert.cs:line 44  at ImageResizeNetCore.Program.Main(String[] args) in /home/osboxes/Downloads/Test2/ImageResizeNetCore/Program.cs:line 15    I've installed libgdiplus, but no luck.    Using System.Drawing.Common gives the following error:    Unhandled Exception: System.ArgumentException: Parameter is not valid.  at System.Drawing.Bitmap..ctor(String filename, Boolean useIcm)  at TestVideoConvert.TestVideoConvert.Create() in /home/osboxes/Downloads/Test2/TestVideoConvert/TestVideoConvert.cs:line 44  at ImageResizeNetCore.Program.Main(String[] args) in /home/osboxes/Downloads/Test2/ImageResizeNetCore/Program.cs:line 15    I've read somewhere that this could be due to the image size being too large, but in my case it's a 1920x1080 bmp so not out of the ordinary.    Here is a sample image to repro the issue: https://wallpaperscraft.com/image/stars_sky_shore_84534_1920x1080.jpg"
27120	area-System.Security	The RSA implementation fails to encrypt an empty byte array	- Steps to reproduce: run the following code on **Windows 10 or Mac OS X on .Net Core 2.0**:  ```C#            var key = RSA.Create();            var encrypted = key.Encrypt(new byte[0], RSAEncryptionPadding.Pkcs1);  ```  - Expected result:  A byte array that would be decrypted to an empty byte array.    - Actual result:  Exception on Windows 10:  ```  Internal.Cryptography.CryptoThrowHelper.WindowsCryptographicException    HResult=0x80090027    Message=The parameter is incorrect    Source=System.Security.Cryptography.Algorithms    StackTrace:     at System.Security.Cryptography.RSAImplementation.RSACng.EncryptOrDecrypt(SafeNCryptKeyHandle key, Byte[] input, AsymmetricPaddingMode paddingMode, Void* paddingInfo, EncryptOrDecryptAction encryptOrDecrypt)     at System.Security.Cryptography.RSAImplementation.RSACng.EncryptOrDecrypt(Byte[] data, RSAEncryptionPadding padding, EncryptOrDecryptAction encryptOrDecrypt)     at System.Security.Cryptography.RSAImplementation.RSACng.Encrypt(Byte[] data, RSAEncryptionPadding padding)     at ConsoleApp3.Program.Main(String[] args)  ```    On Mac OS X the exception is:  ```  System.ArgumentNullException: Value cannot be null.  Parameter name: source     at System.Runtime.InteropServices.Marshal.CopyToManaged(IntPtr source, Object destination, Int32 startIndex, Int32 length)     at Interop.CoreFoundation.CFGetData(SafeCFDataHandle cfData)     at Interop.AppleCrypto.ExecuteTransform(SecKeyTransform transform)     at Interop.AppleCrypto.RsaEncrypt(SafeSecKeyRefHandle publicKey, Byte[] data, RSAEncryptionPadding padding)     at System.Security.Cryptography.RSAImplementation.RSASecurityTransforms.Encrypt(Byte[] data, RSAEncryptionPadding padding)     at ConsoleApp3.Program.Main(String[] args)  ```    **Running the same code on .Net Framework 4.6.1 and on Core on Ubuntu returns the expected result.**    
27119	area-System.Net	DO NOT MERGE: simple connection reuse test	
27118	area-System.Threading	Enable WaitHandle.SignalAndWait tests on Unix	Depends on https://github.com/dotnet/coreclr/pull/16383  Fixes https://github.com/dotnet/coreclr/issues/10441
27116	area-System.Diagnostics	Remove USE_ETW Compilation Constant from System.Diagnostics.Tracing.Tests	It may be possible to remove USE_ETW and just mark the tests as Windows only.  We should see if this is possible to simplify the test code.
27114	area-System.Runtime	"Test under ""System.Tests.EnvironmentTests"" failed with ""System.ArgumentOutOfRangeException"""	The test System.Tests.EnvironmentTests.WorkingSet_Valid has failed.    MESSAGE:  System.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.  +++++++++++++++++++  STACK TRACE:  at System.Environment.get_WorkingSet() at System.Tests.EnvironmentTests.WorkingSet_Valid() in /mnt/resource/j/workspace/dotnet_corefx/master/rhel7.2_release/src/System.Runtime.Extensions/tests/System/EnvironmentTests.cs:line 180    Details: https://ci.dot.net/job/dotnet_corefx/job/master/job/rhel7.2_release/5053/testReport/System.Tests/EnvironmentTests/WorkingSet_Valid/
27113	area-System.Net	Fix failing authentication test cases on different httpclienthandlers.	Search for issue number in code.
27109	area-System.Console	Adding support for ncurses 6.1 TERM format on System.Console	Fixes #26966    cc: @stephentoub @ianhays     ncurses 6.1 introduced a new magic number in their header, that if read, then its contents should be parsed as 32-bit integers instead of 16-bit integers. These changes will add support for ncurses6.1.
27106	area-System.Diagnostics	Fix ETW EventCounter Tests and Manifest_Write_T Tests	Both of these tests fail because the event names are incorrect.  They both use TraceLogging but have statically defined events as well which results in them having a manifest produced as well (because they are not strictly marked as SelfDescribing EventSources).  TraceEvent loads the manifests correctly but does not load the templates for the TraceLogging events.    Template loading appears to be specific to TraceLog but swapping in TraceLog results in a bunch of other failures.  This should be investigated so that these tests can be re-activated.
27104	area-Microsoft.CSharp	Remove more orphaned code in Microsoft.CSharp	Missed a couple in #26491 but @ericstj rerunning the diffs in #17905 found them.
27103	area-System.Security	Add FixedTimeEquals and other crypto helper routines as public API	Fixes #10749.  
27102	area-System.IO	API tweaks to match latest updates to spec	Add a few new tests    See #25873     cc: @terrajobst, @danmosemsft 
27101	area-System.Memory	Add an option to return finalizable versions of ArrayMemoryPoolBuffer from MemoryPool	
27100	area-Infrastructure	Update inbox data for UAP 6	A number of assemblies shipped inbox in `release/uwp6.0` (10.0.15138), but have been rev'ed in master and ship ref-assms that would apply to UAP.    This will cause a ref-def mismatch if we don't include the implementation assembly for UAP in the package.    We need to make sure to update the packageIndex in to account for this and then ensure that the current packages validate cleanly (either rolling back reference assembly versions or adding UAP runtime assemblies to fix errors).    This **must** be done before we ship the packages again.  Ideally it's done before we ship a preview of the packages, so that we don't break folks if we decide to roll-back reference assembly versions.    /cc @joperezr @weshaggard 
27098	area-System.Runtime	.NET 4.7 -  '\0' char in String causes GetHashCode to ignore remainder -- but on x64 only	"@vsfeedback commented on [Mon Feb 12 2018](https://github.com/dotnet/roslyn/issues/24780)  The `GetHashCode(...)` function for the **ordinal** `String` comparisons In **.NET 4.7** has a grossly different behavior between running on **x86** versus **x64**. Note: ***I am not talking about the different hash code values, per-platform***, since these are intended as opaque -- rather, the issue here is a ***semantic difference*** in runtime behavior between the two platforms.    On **x86**, the full length of a `String` is always hashed, regardless of any `\0` characters.    On **x64**, the hashing terminates at the first `\0` character.    This is trivial to demonstrate:     var h1 = ""\0AAAAAAAAA"".GetHashCode();   var h2 = ""\0BBBBBBBBBBBB"".GetHashCode();   var h3 = ""\0CCCCCCCCCCCCCCC"".GetHashCode();       // x64 results:   //  0x162a16fe   //  0x162a16fe   //  0x162a16fe       // x86 results:   //  0x07b801bc   //  0x048e22a3   //  0x21e2037d    As shown above, this affects the `GetHashCode` instance virtual method (overriden by the `String` type), as well as two other **.NET**-provided techniques for obtaining an ordinal-based `String` hash code: `StringComparer.Ordinal.GetHashCode` and also `CultureInfo.CurrentCulture.CompareInfo.GetHashCode` (when using `CompareOptions.Ordinal`). These results are summarized below:    <pre>  -------------------------- x86 --------------------------  &quot;\0AAAAAAAAA&quot;  s.GetHashCode     0x07b801bc  StringComparer.Ordinal.GetHashCode  0x07b801bc  CompareInfo.GetHashCode/CompareOptions.Ordinal 0x07b801bc      &quot;\0BBBBBBBBBBBB&quot;  s.GetHashCode     0x00001505  StringComparer.Ordinal.GetHashCode  0x00001505  CompareInfo.GetHashCode/CompareOptions.Ordinal 0x00001505      &quot;\0CCCCCCCCCCCCCCC&quot;  s.GetHashCode     0x21e2037d  StringComparer.Ordinal.GetHashCode  0x21e2037d  CompareInfo.GetHashCode/CompareOptions.Ordinal 0x21e2037d          -------------------------- x64 --------------------------  &quot;\0AAAAAAAAA&quot;  s.GetHashCode     0x162a16fe  StringComparer.Ordinal.GetHashCode  0x162a16fe  CompareInfo.GetHashCode/CompareOptions.Ordinal 0x162a16fe      &quot;\0BBBBBBBBBBBB&quot;  s.GetHashCode     0x162a16fe  StringComparer.Ordinal.GetHashCode  0x162a16fe  CompareInfo.GetHashCode/CompareOptions.Ordinal 0x162a16fe      &quot;\0CCCCCCCCCCCCCCC&quot;  s.GetHashCode     0x162a16fe  StringComparer.Ordinal.GetHashCode  0x162a16fe  CompareInfo.GetHashCode/CompareOptions.Ordinal 0x162a16fe  </pre>    While I do realize that theoretical practice deems hash codes purely advisory, in practice applications will be designed to expect that hash code collisions are rare. Being able to trivially produce an infinite number of identical hashes, at will -- such as one can do via &quot;\0A&quot;, &quot;\0B&quot;, &quot;\0C&quot;, &quot;\012345...&quot;  (on **x64** all of these give the same hash code as above, `0x162a16fe`)-- is neither in the spirit of hashing nor accepted/expected common practice.    Worse, this only happens on the  x86 platform and not x64, which could cause considerable loss of design and development effort, if such proceeded based on a false impression of consistent behavior.    _This issue has been moved from https://developercommunity.visualstudio.com/content/problem/196675/net-47-0-char-in-string-causes-gethashcode-to-igno-1.html  VSTS ticketId: 565715_  _These are the original issue comments:_    Glenn Slayden on 2/9/2018, 06:39 PM (2 days ago): <p>I should also mention that the **x64** version of `String.GetHashCode(...)` in fact makes no reference to the string's length whatsoever, neither to incorporate that value into the hash, nor to determine how many characters to compute the hash code for. Instead, the x64 code ***just scans the string forward until it hits the first '\0' char***. If there are no embedded nulls, then it will scan to the end, where the **CLR** ensures there will always be an extra `\0` char (that is not included in the `Length`).</p><p>Thus, by ignoring the stored length of the string, the x64 code *takes a critical dependency* on that zero-terminating char being present. If that `\0` gets corrupted somehow, the failure mode is severe, since that loop can immediately scan off the end of the string into unrelated memory areas. </p><p>Since the **x86** version refers to the stored string length to determine how many chars to hash--it might seem like that code doesn't have the same problem, and it's true that it's not as fatal, as follows:</p><p>The x86 code does actually take a ***different kind of dependency*** on the zero terminator, namely, that loop is written such that the 16-bit terminator value itself is `XORed` into the returned hash value whenever the two lowest bits of the input string length are equal to `0b_00000011 == 0x03`. For that operation to have no effect, the terminator must be zero (since `xor` with zero is a `nop`.)  So if the terminator somehow becomes corrupted, the returned hash code value will be affected, but there won't likely be an immediate `AccessViolationException` (as with the x64 case).</p>    _These are the original issue solutions:_  (no solutions)  ---  @Joe4evr commented on [Mon Feb 12 2018](https://github.com/dotnet/roslyn/issues/24780#issuecomment-365098562)  Curious, does this also repro for the `OrdinalIgnoreCase` variants?  ---  @jcouv commented on [Mon Feb 12 2018](https://github.com/dotnet/roslyn/issues/24780#issuecomment-365161086)  @AlexGhiondea Could you help route? It feels like either a runtime or a BCL issue on desktop.  ---  @glenn-slayden commented on [Tue Feb 13 2018](https://github.com/dotnet/roslyn/issues/24780#issuecomment-365363366)  Yes, it should be BCL. The problem is with MSIL code that exists in the `String.GetHashCode` function in mscorlib.dll. The difference between **x64** and **x86** is due to there being different mscorlib.dll builds for each.    ---  @glenn-slayden commented on [Tue Feb 13 2018](https://github.com/dotnet/roslyn/issues/24780#issuecomment-365370873)  @jinujoseph  The 'Area-IDE' tag doesn't sound right; as I mentioned the problem is with runtime code in the Base Class Library.  ---  @jcouv commented on [Tue Feb 13 2018](https://github.com/dotnet/roslyn/issues/24780#issuecomment-365374965)  I'll move the issue over to corefx  "
27097	area-System.IO	Consider adding MemoryMarshal.TryGetArray/MemoryList(ReadOnlySequence)	We shouldn't interpret `SequencePositions` outside `ReadOnlySequence` but pipelines need to get IMemoryList reference and indexes out of SequencePositions received in `Advance`    I'm proposing to add the following API's:  ```C#  public static partial class MemoryMarshal  {      bool TryGetArray<T>(ReadOnlySequence<T> sequence, out ArraySegment<T> array);        bool TryGetOwnedMemory<T>(ReadOnlySequence<T> sequence, out OwnedMemory<T> ownedMemory, out int start, out int length);        bool TryGetMemory<T>(ReadOnlySequence<T> sequence, out ReadOnlyMemory<T> readOnlyMemory);        bool TryGetMemoryList<T>(ReadOnlySequence<T> sequence, out IMemoryList<T> startSegment, out int startIndex, out IMemoryList<T> endSegment, out int endIndex);  }  ```    /cc @davidfowl @KrzysztofCwalina 
27095	area-Infrastructure	Update RIDs used in test execution	This issue is to track updating the RIDs being used in CoreFX Jenkins testing.    Related: https://github.com/dotnet/corefx/issues/25252, https://github.com/dotnet/wcf/issues/2553, https://github.com/dotnet/core-eng/issues/2450    Current CoreFX Master Jenkins Linux RIDS:  - RHEL7.2  - CentOS7.1  - Fedora24  - Debian8.4  - Ubuntu 14.04, 16.04, 16.10    Target RIDS:  - RHEL7.4  - CentOS7.4  - Fedora27  - Debian9.0  - Ubuntu 14.04, 16.04, 18.04      Update 2/6/2018:  Remaining work:  - /+ RHEL7.4  - /+ CentOS7.4
27094	area-System.Memory	Move Span APIs that allow shipping visibility checks to MemoryMarshal	"`BinaryPrimitives.TryReadMachineEndian` or `MemoryExtensions.AsBytes` APIs are an inherently ""unsafe"" API in the sense that they allow bypassing visibility checks. They allow creating structs with invalid content that can lead to unexpected behaviors. An example of such unexpected behavior is buffer overrun described in https://github.com/dotnet/coreclr/issues/16336 .    Should we move these APIs to System.Runtime.InteropServices.MemoryMarshal to be together with other unsafe APIs that one has to be very careful about using?"
27092	area-System.Threading	Thread affinity isn't inherited from the process affinity in Linux	"Ubuntu 16.04, dotnet 2.1.4    ````  [DllImport(""libc"", EntryPoint = ""syscall"", SetLastError = true)]  public static extern long syscall0(long number);    [DllImport(""libc"", SetLastError = true)]  public static extern int sched_getaffinity(int pid, IntPtr cpusetsize, ref ulong cpuset);     Process.GetCurrentProcess().ProcessorAffinity = new IntPtr(6);    new Thread(() => {       var sysGetId =  (RuntimeInformation.OSArchitecture == Architecture.Arm ||               RuntimeInformation.OSArchitecture == Architecture.Arm64)                  ? 224                  : 186;       var threadId = syscall0(sysGetId);                ulong affinity;        var result = Syscall.sched_getaffinity((int)threadId, new IntPtr(sizeof(ulong)), ref            affinity);         // affinity == 255, expected == 6  });    ````    In Windows a new thread inherits the process affinity.  Need to call sched_setaffinity after thread creation."
27090	area-System.Net	Add a generic SASL API with GSSAPI support	Provide GSSAPI mechanism support, for Kerberos V5 authentication.    Sample SASL client methods: `EvaluateChallenge()`, `Wrap()`, `UnWrap()`.
27089	area-System.Data	Revert Managed SNI usage flag	Revert the managed SNI flag which was incorrectly toggled in https://github.com/dotnet/corefx/pull/27010
27088	area-System.Net	reorganize and cleanup some LoopbackServer code	"As we are writing more and more LoopbackServer based tests, seems like a good time to do a bit of refactoring and simplification.    Several related changes:  (1) Move nonessential code out of LoopbackServer itself. E.g. the websocket test code and the ""transfer"" code. These are only used by a couple very specific tests, and don't actually need to be in LoopbackServer.  (2) Simplify a few things that are awkward today. For example, the Options object gets passed in to several different places and used in different ways. I changed it to only be passed in to CreateServerAsync. Another example: the callback you pass to AcceptSocketAsync always has to return a Task<List>, even though many uses don't care about this and just pass null.  (3) Add the Connection object, which makes the callback from AcceptSocketAsync (now AcceptConnectionAsync) cleaner. Today you have to have four params on the callback, even though you often only care about one or two. Connection just encapsulates these args into a single object, and allows you to easily discover and call instance methods on this object.  (4) Rename some core methods to make them more descriptive.  (5) Fix usage in tests to reflect the updates.    @stephentoub @davidsh @Priya91 @wfurt     "
27086	area-Infrastructure	Tests are not waiting on child processes when run	Some tests use RemoteInvoke to launch child processes. Generally they should call Dispose() on the RemoteInvokeHandle that returns in order to WaitForExit on the process. If they forget, execution will continue and any assertion failure (or other unhandled exception) in the child process will not prevent the test passing. Eg.,:  ```    Running tests... Start time: 22:29:13.23    xUnit.net console test runner (64-bit .NET Core)    Copyright (C) 2014 Outercurve Foundation.      Discovering: System.Text.RegularExpressions.Tests    Discovered:  System.Text.RegularExpressions.Tests    Starting:    System.Text.RegularExpressions.Tests      Unhandled Exception: Xunit.Sdk.ThrowsException: Assert.Throws() Failure    Expected: typeof(System.ArgumentException)    Actual:   typeof(System.TypeInitializationException): The type initializer for 'System.Text.RegularExpressions.Regex'     threw an exception.       at Xunit.Assert.Throws(Type exceptionType, Exception exception) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.a    ssert\Asserts\ExceptionAsserts.cs:line 143       at Xunit.Assert.Throws[T](Func`1 testCode) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\Excepti    onAsserts.cs:line 36       at System.Text.RegularExpressions.Tests.RegexConstructorTests.<>c.<StaticCtor_InvalidTimeoutObject_ExceptionThrown    >b__3_0() in C:\git\corefx\src\System.Text.RegularExpressions\tests\Regex.Ctor.Tests.cs:line 85    --- End of stack trace from previous location where exception was thrown ---       at RemoteExecutorConsoleApp.Program.Main(String[] args) in C:\git\corefx\src\Common\tests\System\Diagnostics\Remot    eExecutorConsoleApp\RemoteExecutorConsoleApp.cs:line 92    Finished:    System.Text.RegularExpressions.Tests      === TEST EXECUTION SUMMARY ===       System.Text.RegularExpressions.Tests  Total: 802, Errors: 0, Failed: 0, Skipped: 0, Time: 2.042s    Finished running tests.  End time=22:29:15.68, Exit code = 0  ```    This behavior is slightly obscured when running on a dev machine, as runtests.cmd is generally wrapped inside MSBuild, and MSBuild, after WaitforExit hsa returned on the process it launched, will then wait indefinitely for the console output streams to reach EOF. Those do not return until the grandchild remote processes have exited (@JeremyKuhne @stephentoub  I'm unclear why this is - do they automatically duplicate the console handles from the test process which is MSBuild's direct child?). When the grandchild fails in this situation, the exception will appear in the console, but the test will already have succeeded and be counted as such.    When Helix runs the tests using runtest.cmd directly, MSBuild is not involved so if Dispose() is forgotten there is no wait on the grandchildren and they are completely ignored. https://github.com/dotnet/corefx/pull/26543#issuecomment-365021333 is an example.    We should add a finalizer to RemoteInvokeHandle which will mean that at least some waiting will occur on those child processes: they still wont fail the test, as it's too late, but their console output is more likely to show up in the log. (XUnit does not do WaitForPendingFinalizers so I figure if they don't complete within X seconds - I think 40 seconds - of the XUnit process completing, the output still won't show up.)    @stephentoub  does this sound like the best we can do?
27085	area-System.IO	Tests For GetFullPath(string path,string basePath)	Fixes #25535  Implementation PR:- dotnet/coreclr#15579  Previous PR:- https://github.com/dotnet/corefx/pull/25994    The Commits upto 4466ed9 this are already been reviewed in the previous PR.   This PR has been opened beacause of large number of merge conflicts in the other PR due to span overload tests.  
27084	area-System.Linq	Linq support on Task	I think we should add linq support for `IEnumerable<Task<T>>` and  `Task<Enumerable<T>>` with the same set of function as linq, let the lambda could return `Task<T>` and become unwrap while seamlessly handle both combination of `IEnumerable<Task<T>>` and  `Task<Enumerable<T>>`    ```C#  using System.Linq.Async;  ////  // Enumerable of Task can Select, Where and any function supporterd by Linq  Task<IEnumerable<string>> texts = GetTask();  IEnumerable<Task<string[]>> tasks = task.ToEnumerablesTasks().Where((text) => text.Length > 10).Select((text) => text.Split(':'));  string[][] splits = await Task.WhenAll(tasks);    // Enumerable has extension method SelectAsync to create Enumerable of Task from lambda  IEnumerable<Task<DBObject>> tasks2 = splits.SelectAsync(async(split) => await QuerySomeDB(split[0],split[1]));  var result = await Task.WhenAll(tasks2);  ```    If possible I would also want to have https://www.nuget.org/packages/System.Interactive.Async/ in BCL
27082	area-System.Drawing	Added DCS Tests for System.Drawing Types	This adds DataContractSerializer tests for basic types in System.Drawing   -See issue #25729 for a list of types    cc: @huanwu, @safern     Resolves #25729 
27079	area-System.Net	Change HTTP default request version to HTTP/2	Close: #23394
27077	area-System.Net	Log when an insecure Https -> Http redirect is blocked	.NET Core does not allow insecure redirects from https to http, but .NET Framework does. Developers have had some trouble diagnosing the issue when they run into this difference. This change adds logging to help developers track down what is going on.    Fixes: #24577 
27075	area-System.Data	ADO.NET: Database-independent way to generate parameter placeholders	In theory, parameter placeholders [are an entirely database-specific details](https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/configuring-parameters-and-parameter-data-types#working-with-parameter-placeholders) - there is no way to write a single SQL containing parameters, and then execute it on different databases.    In practice, it seems that most ADO.NET have aligned on the `@name` convention. This is quite a problem, since for databases which don't support it natively, the ADO.NET provider must parse and replace the `@name` placeholder with the one accepted by the database. For example, PostgreSQL uses positional placeholders ($1, $2...), which by the way are also specific to individual statements in a batch (parameters are per-statement, not per-batch).    We could design an API where the provider would generate the placeholder. This could be as simple as adding a `Placeholder` property on DbParameter, which each provider would implement as necessary. The user would then interpolate the placeholder into the CommandText. For positional placeholders, the logic would typically calculate the placeholder as the DbParameter is inserted into a DbParameterCollection, whereas for named placeholders the `ParameterName` would be returned.    PS Parameter placeholder translation is one of two things forcing Npgsql to parse the CommandText - the other is the lack of a proper batching API (#3688), which requires to parse and split on semicolons.
27074	area-System.Data	SqlClient: Avoid boxing values as much as possible	We believe that for hot paths while consuming data readers this could have a significant enough impact. For parameters, there is already https://github.com/dotnet/corefx/issues/8955 about adding a generic API in ADO.NET base provider model that then can be implemented by SqlClient.    cc @saurabh500 @geleems @roji @ajcvickers 
27073	area-System.Globalization	Fixing test CurrencyNegativePattern_Get() on distro Ubuntu18.04	From class/project System.Globalization.Tests.NumberFormatInfoCurrencyNegativePattern    Fixes #27022    CC: @danmosemsft @krwq 
27069	area-System.Net	Cache SslClientAuthenticationOptions on SocketsHttpHandler pool	For the common case, we can just use a singleton cached instance with settings computed when the pool is created.  Only if it's accessed via HttpClientHandler with a server certificate callback do we need to still create an instance per request, in order to wrap the delegate to provide the expected semantics.    cc: @geoffkizer, @davidsh, @Priya91, @wfurt 
27068	area-System.Net	Fix SocketsHttpHandler connection pool accounting for dropped connections	When MaxConnectionsPerServer is set to anything other than int.MaxValue, the SocketsHttpHandler pool keeps track of the number of connections handed out, and this count is updated when a connection is disposed.  But if a response stream isn't disposed of, resulting in the connection never being disposed of, the count may never be updated.  This fix adds an HttpConnection derived type that simply adds a finalizer, making it pay-for-play when MaxConnectionsPerServer is set to something other than the default.    cc: @geoffkizer, @davidsh, @Priya91, @wfurt 
27067	area-System.Net	WinHttpHandler/CurlHandler hangs or fails when connection pooling and connection dropped	See GetAsync_DontDisposeResponse_EventuallyUnblocksWaiters test.  It sets MaxConnectionsPerServer to 1, and then proceeds to issue a ResponseHeadersRead request but drops the response object without disposing it.  It then creates a second request to the same server, and that request is never processed.
27066	area-System.Net	Make Sockets behavior consistent in the face of cancellation	See discussion at https://github.com/dotnet/corefx/pull/27029/files/a137bbf42598202f999ead31d92754613145c849#r167445914    cc: @geoffkizer 
27065	area-System.Net	Test failure: GetAsync_CancelPendingRequests_DoesntCancelReadAsyncOnResponseStream	CurlHandler incorrectly maintains a registration with the CancellationToken passed in to SendAsync for the duration of the whole operation, including processing of the response body, even if HttpCompletionOption.ResponseHeadersRead is used.  That means that HttpClient.CancelAllPending will cancel such operations.  It should unregister from that token once it completes the Task returned from SendAsync.
27064	area-System.Net	Test failure: MaxConnectionsPerServer_WaitingConnectionsAreCancelable	"The MaxConnectionsPerServer_WaitingConnectionsAreCancelable test fails on WinHttpHandler in a strange manner.  It throws a ""The server returned an invalid or unrecognized response"" WinHttpException while receiving/parsing the response headers. This happens while handling the response from the first request, but doesn't happen if the last request is removed.  It almost as if there's some state that bleeds between the requests."
27063	area-System.Net	Test failure: PostAsync_CancelDuringRequestContentSend_TaskCanceledQuickly	WinHttpHandler has some cancellation support, but it doesn't appear to support cancellation during content send, e.g. if cancellation is requested and the server never sends back response headers.  netfx has the same issue.
27062	area-System.Threading	My idea:Async and Task function pipeline	I design a Lambda  Expression:Task<IEnumerable> WhereAsync.  If you used WhereAsync,You Lambda Expression pipline such as WhereAsync().SelectAsync() be broken.    So If c# has a async Lambda Expression pipline,We used async and Task our function pipline don't be broken.
27061	area-System.Net	Fix HttpClientMiniStress.UnreadResponseMessage_Collectible test	The async state machine was holding a reference to the response content object.    Fixes https://github.com/dotnet/corefx/issues/27058  cc: @geoffkizer 
27059	area-System.Net	Fix HttpClientMiniStressTest	Fix an issue with response generation.    Also, disable the UnreadResponseMessage_Collectible test, which is failing currently for reasons that are not obvious to me.     @stephentoub @davidsh 
27058	area-System.Net	HttpClientMiniStress: consistent failure in UnreadResponseMessage_Collectible	The Assert waiting for the response object to be collected fails.    Happens for both WinHttpHandler and SocketsHttpHandler.
27057	area-System.Data	Nested Transactions failing - Enlisting in Ambient transactions is not supported	"Nested transaction are broken in System.Data.SqlClient 4.4.2 (latest stable release)    They work with System.Data.Sqlclient 4.3.1.    The error is Enlisting in Ambient transactions is not supported.    Below is sample code which works in 4.3.1 and now boken in 4.4.2        ```c#  var option = new TransactionOptions  {      IsolationLevel = IsolationLevel.ReadCommitted,      Timeout = TimeSpan.FromSeconds(60)  };  using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))  {      using (var conn = new SqlConnection(connectionString))      {          using (SqlCommand cmd = conn.CreateCommand())          {              cmd.CommandText = ""INSERT INTO Data(Code, FirstName) VALUES('A-100', 'Mr. A');"";              cmd.Connection.Open();              cmd.ExecuteNonQuery();          }      }      using (var scopeInner = new TransactionScope(TransactionScopeOption.Required, option))      {          using (var conn = new SqlConnection(connectionString))          {              using (SqlCommand cmd = conn.CreateCommand())              {                  cmd.CommandText = ""INSERT INTO Data(Code, FirstName) VALUES('B-100', 'Mr. B');"";                  cmd.Connection.Open();                  cmd.ExecuteNonQuery();              }          }          scopeInner.Complete();      }      scopeOuter.Complete();  }  ```    [EDIT] Update code formatting and syntax highlighting by @karelz"
27056	area-System.Threading	[Question] Per thread finalizer	Regarding https://github.com/dotnet/corefx/issues/26992,  I have a question.    @davidfowl    > No, ReleaseHandle happens when the safe handle is disposed explicitly or finalized.    If we cannot dispose the safe handle explicitly, only finalizer can release it. In this situation, is there a way that the safe handle is disposed by finalizer in the same thread as initialization?
27055	area-System.Net	DO NOT MERGE: test some refactoring of LoopbackServer	
27052	area-System.IO	Switch from using SafeHandle for Unix enumeration	This cuts enumeration time by a further 5-10%. For filtered results it also has 5%+ impact on memory allocation.    For an unfiltered GetFiles of 66K files (CoreFX enlistment with some builds) GC count went from 5|2|1 to 4|1|0 (gen 0|1|2).    On top of earlier changes we're seeing 20-30% time improvements and 40-60% improvements in memory usage over 2.0.     Also tweak an assert to validate embedded nulls only when we try to filter them out.
27051	area-System.Runtime	Tests for StringComparer Create(culture, CompareOptions) overload	Related to dotnet/corefx#395  Implementation PR- https://github.com/dotnet/coreclr/pull/16334  
27049	area-System.IO	API Proposal: Add Path API that validates that path cross-plat safe	"Essentially this is similar to the Windows `Path.GetInvalidFileNameChars()`.    ``` c#  namespace System.IO  {      public static class Path      {          public static bool IsPortableFileName(ReadonlySpan<char> name);      }  }  ```    This API will not accept    - invalid Windows filename characters (control chars, `<`, `>`, `:`, `""`, `/`, `\`, `|`)  - starting or ending spaces ` `  - ending periods `.`  - starting dashes `-`  - normal globbing characters `[`, `]`, `*`, `?`    See related #27048  "
27048	area-System.IO	API Proposal: Path API that exposes the Portable Filename Character Set	``` c#  namespace System.IO  {      public static class Path      {          public static bool IsPortablePosixFileName(ReadonlySpan<char> name);      }  }  ```    Returns true if the name only has characters from the defined set. The set is small `[A-Z][a-z][0-9]._-`. The spec also discourages `-` as the first character, which we should also check.    POSIX.1-2008  3.282 Portable Filename Character Set  http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282    http://www.boost.org/doc/libs/1_66_0/libs/filesystem/doc/portability_guide.htm    See related #27049
27047	area-System.IO	Add more IO tests around problematic filename characters	While we have some tests, it would be good to add more with problematic filenames and filename characters.    Here is a good article describing difficult names for reference:    https://www.dwheeler.com/essays/fixing-unix-linux-filenames.html    Creating, copying, moving, enumerating, deleting, etc.    Trailing spaces and periods on Windows are legal, but difficult to create and access. Calling Win32 APIs with paths normally will strip these. The exception is when prepended with `\\?\`.  We purposefully do not handle creating these unless you use `\\?\` as creating these sort of paths frequently breaks apps.  We should (and do) handle finding them via `GetFiles`, etc. and handle manipulating them with the *Info classes. We currently don't allow opening them directly from a path string unless you use `\\?\`. 
27046	area-System.Runtime	System.Runtime.InteropServices bad calling convention when returning unions on linux	"Hi,    When using Interop on linux my app crashed. I managed to narrow it down to the cas where the native method returns an union.  When I looked at the core dump with gdb it seemed to me that the calling convention is wrong. I was expecting to see the pointer to the string in register RDI but it contained garbage.    I do not know if it is correct behavior or a bug, but I would appreciate if somebody has the time to take a look.    Thanks !    ## Environnent    * Fedora 26 linux 4.14.14-200.fc26.x86_64  * dotnet 2.1.4  * gcc (GCC) 7.2.1 20170915    ## C++ shared object code                #include <iostream>              #include <string>                extern ""C""              union Union {                  int64_t f2;              };                extern ""C""              Union crash(const char* msg) {                  std::cerr << __PRETTY_FUNCTION__ << "" start"" << std::endl;                  std::cerr << __PRETTY_FUNCTION__ << "" ptr "" << (void*)msg << std::endl;                  std::cerr << __PRETTY_FUNCTION__ << "" arg "" << msg << std::endl;                  return Union{};              }    Compiled using : `g++ -Wall -fPIC -std=c++11 -shared -O0 -g -o libcrash.so crash.cpp`    ## C# console app code            using System;          using System.Runtime.InteropServices;                    namespace question          {              [StructLayout(LayoutKind.Explicit)]              public struct Union {                  [FieldOffset(0)]                  Int64 field2;              }                        class Program              {                  [DllImport(""libcrash.so"")]                  static extern Union crash(string s);                            static void Main(string[] args)                  {                      crash(""boom !!"");                      Console.WriteLine(""All Done"");                  }              }          }"
27045	area-Infrastructure	ILLink initlocals custom step fails when building on Unix	Adding  ```XML  <ILLinkClearInitLocals>true</ILLinkClearInitLocals>  ```  to a corefx .csproj works fine on Windows but fails to build on Linux with the error:  ```  IL Linker  Error: Step type 'ILLink.CustomSteps.ClearInitLocalsStep,ILLink.CustomSteps' not found.  illink [options] -x|-a|-i file     --about             About the IL Linker     --version           Print the version number of the IL Linker     --skip-unresolved   Ignore unresolved types and methods (true or false)     --dump-dependencies Dump dependencies for the linker analyzer tool     -out                Specify the output directory, default to `output'     -c                  Action on the core assemblies, skip, copy, copyused, addbypassngen, addbypassngenused or link, default to skip     -u                  Action on the user assemblies, skip, copy, copyused, addbypassngen, addbypassngenused or link, default to link     -p                  Action per assembly     -s                  Add a new step to the pipeline.     -t                  Keep assemblies in which only type forwarders are referenced.     -d                  Add a directory where the linker will look for assemblies     -b                  Generate debug symbols for each linked module (true or false)     -g                  Generate a new unique guid for each linked module (true or false)     -v                  Keep memebers needed by debugger attributes (true or false)     -h                  List of reflection heuristics separated with a comma.                         Supported heuristics:                           LdtokenTypeMethods:   mark all methods of types whose token is used                                                 in an ldtoken instruction                           LdtokenTypeFields:    mark all fields of types whose token is used                                                 in an ldtoken instruction                           InstanceConstructors: mark all instance constructors in types                                                 where an instance member has been marked but                                                 none of the instance constructors have been marked     -l                  List of i18n assemblies to copy to the output directory                           separated with a comma: none,all,cjk,mideast,other,rare,west                           default is all     -x                  Link from an XML descriptor     -a                  Link from a list of assemblies     -r                  Link from a list of assemblies using roots visible outside of the assembly     -i                  Link from an mono-api-info descriptor     -z                  Include default preservations (true or false), default to true    Command execution failed with exit code 1.  ```  cc: @sbomer, @JosephTremoulet
27044	area-Microsoft.CSharp	Make many helpers, factories and tables static in Microsoft.CSharp	Microsoft.CSharp has several objects that are heavily used throughout the library that have circular dependencies on each other, as well as several other classes depending on them. Use of them hence requires either a field in each object that will use them, or to follow chains of such fields. Prior to #25191 it was necessary for them to be instances so that they could be replaced with new versions. This no longer being necessary it's possible to make them all static.    At the same time, the related `RuntimeBinder`, `ExpressionBinder` and `BindingContext` classes are relatively heavy, mostly due to these dependencies. They are hence created once unless a cast must be attempted with a different `BindingContext`, and `BindingContext`'s state is overwritten for each operation. Removing these dependencies makes these very light, allowing them to be `readonly struct`s that are created for each operation.    * Have `TypeArray` in charge of the empty `TypeArray` singleton    * Make `TypeArray` allocation a static responsibility of `TypeArray`    * Remove some orphaned members.    Mostly `BSYMMGR`-returning members that had been used to allocate `TypeArrays`    * Make members static where possible.    Those that can already be easily made static. Includes removing some members that this makes no longer necessary.    * Remove unused parameters    Since some are of the types we'll be making static, and such parameters will have to go anyway.    * Make `TypeTable` static    And more conventional names within `TypeTable`.    * More `TypeManager` state & methods to static    * Make `SYMTBL.Key` an immutable struct.    * `SYMTBL` completely static and renamed to `SymbolStore`    More conventional name, and doesn't clash with other `SymbolTable` class.    * `GetWinRTCollectionIfacesAll` to property.    * `SymFactory` static class.    * Remove `PredefinedTypes._symbolManager` field    Only used in assertion.    * Remove assert comparison with this in `GetAggregate`    Assert is the only reason to not be static, allows a cascade of more changes to static.    * Make `InternalsVisibleTo` check static.    * Make cycle of instance methods static    Take quite a large set of methods which must be instance because of cyclic instance dependencies, and make them all static.    Removes dependency in `AggregateSymbol` and `NullableType` on `TypeManager` instances.    * Replace `GetAggTypeSym` with virtual method on `CType`.    Merged with existing `GetAts` on `NullableType`. Comment says this would be nice, and indeed it would, and its easy now.    * Make those members that can now be static, static.    * Remove orphaned members and fields.    * `PredefinedMembers` entirely static.    * Remove `UserStringBuilder.m_buildingInProgress`    Only used in asserts, just assert on whether `m_strBuilder` is null or not.    Also rename `m_strBuilder` to `_strBuilder` to be more conventional.    * Favour returning over out in `UserStringBuilder`    And favour clearing `StringBuilder` over creating another.    * Make `ErrorHandling` completely static.    Creating `UserStringBuilder` instances on demand.    * `TypeManager` static.    * Make `CNullable` methods static and merge directly into `ExpressionBinder`    Don't cache method and property, as they're already cached.    * Don't preload types.    Either they'll be loaded soon anyway, or else it's a wasted effort.    * Move `CompareTypes` into Better.cs    * Remove `BSYMMGR.LookupAggMember`    Just call into `SymbolStore.LookupSym`    * Move `LookupNextSym` logic into `Symbol`    * Remove `BSYMMGR` and `GlobalSymbolContext`    No longer any use.    * `ExprFactory` static    * `SymbolLoader` static    * `CSemanticChecker` static    * Don't pre-emptively load `System.Object`    Will be loaded as a base of the first type encountered anyway.    * `SymbolTable` static    * More methods can be made static    * Remove orphaned method.    * Move methods for getting `MemberInfo`s from expressions into those expressions    * Replace `ExpressionTreeCallRewriter.GetObject` with virtual property in `Expr`    * `TypeArray` tidy-up.    * Pass `ExpressionBinder` to operator delegates, and make them static.    Allows array to be created once statically, rather than on each instance construction.    * Create `RuntimeBinder`, `ExpressionBinder` and `BindingContext` per operation    These are now very lightweight, so it's simpler to create them anew each time rather than overwriting the values in the `BindingContext`.    * Make `RuntimeBinder`, `ExpressionBinder` and `BindingContext` structs    No need to allocate on the heap.    * Remove `AggregateDeclaration`    We only ever care about the `AggregateSymbol` it relates to.    (The two aren't really separate in dynamic code, where there aren't really declarations).    * Remove `IsChecked` and `CallingContext` from C# binders.    Now not used as they are passed to `RuntimeBinder` on construction, except for `CallingContext` remaining in `CSharpInvokeMemberBinder` for use in deferring.    * Make `RecordBinOpSigFromArgs` static.    A last member that can be made static.    CC @VSadov @OmarTawfik 
27043	area-System.Net	Tweak CurlHandler SSL not supported messages to be more helpful	cc: @bartonjs, @karelz 
27040	area-System.Net	Add SocketsHttpHandler check for TransferEncodingChunked w/o Content	Fixes https://github.com/dotnet/corefx/issues/27031  cc: @geoffkizer, @davidsh
27038	area-System.IO	DirectoryEntry.GetName assert failure on macOS	https://mc.dot.net/#/user/stephentoub/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/a137bbf42598202f999ead31d92754613145c849/workItem/System.IO.Tests/wilogs  ```  2018-02-10 19:37:45,431: INFO: proc(54): run_and_log_output: Output: Discovering: System.IO.Tests  2018-02-10 19:37:45,666: INFO: proc(54): run_and_log_output: Output: Discovered:  System.IO.Tests  2018-02-10 19:37:45,821: INFO: proc(54): run_and_log_output: Output: Starting:    System.IO.Tests  2018-02-10 19:37:46,351: INFO: proc(54): run_and_log_output: Output: Assertion Failed  2018-02-10 19:37:46,351: INFO: proc(54): run_and_log_output: Output: should not have embedded nulls  2018-02-10 19:37:46,351: INFO: proc(54): run_and_log_output: Output:   2018-02-10 19:37:46,351: INFO: proc(54): run_and_log_output: Output:    at Interop.Sys.DirectoryEntry.GetName(Span`1 buffer)  2018-02-10 19:37:46,351: INFO: proc(54): run_and_log_output: Output:    at System.IO.Enumeration.FileSystemEntry.get_FileName()  2018-02-10 19:37:46,352: INFO: proc(54): run_and_log_output: Output:    at System.IO.Enumeration.FileSystemEnumerableFactory.<>c__DisplayClass5_0.<UserEntries>b__1(FileSystemEntry& entry)  2018-02-10 19:37:46,352: INFO: proc(54): run_and_log_output: Output:    at System.IO.Enumeration.FileSystemEnumerable`1.DelegateEnumerator.ShouldIncludeEntry(FileSystemEntry& entry)  2018-02-10 19:37:46,352: INFO: proc(54): run_and_log_output: Output:    at System.IO.Enumeration.FileSystemEnumerator`1.MoveNext()  2018-02-10 19:37:46,352: INFO: proc(54): run_and_log_output: Output:    at System.IO.FileSystem.RemoveDirectoryInternal(DirectoryInfo directory, Boolean recursive, Boolean throwOnTopLevelDirectoryNotFound)  2018-02-10 19:37:46,353: INFO: proc(54): run_and_log_output: Output:    at System.IO.FileSystem.RemoveDirectory(String fullPath, Boolean recursive)  2018-02-10 19:37:46,353: INFO: proc(54): run_and_log_output: Output:    at System.IO.Directory.Delete(String path, Boolean recursive)  2018-02-10 19:37:46,353: INFO: proc(54): run_and_log_output: Output:    at System.IO.FileCleanupTestBase.Dispose(Boolean disposing) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/CoreFx.Private.TestUtilities/src/System/IO/FileCleanupTestBase.cs:line 66  2018-02-10 19:37:46,354: INFO: proc(54): run_and_log_output: Output:    at System.IO.FileCleanupTestBase.Dispose() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/CoreFx.Private.TestUtilities/src/System/IO/FileCleanupTestBase.cs:line 57  2018-02-10 19:37:46,354: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExecutionTimer.Aggregate(Action action)  2018-02-10 19:37:46,354: INFO: proc(54): run_and_log_output: Output:    at ReflectionAbstractionExtensions.DisposeTestClass(ITest test, Object testClass, IMessageBus messageBus, ExecutionTimer timer, CancellationTokenSource cancellationTokenSource)  2018-02-10 19:37:46,354: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.Run(Action code)  2018-02-10 19:37:46,354: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestInvoker`1.<RunAsync>b__45_0()  2018-02-10 19:37:46,355: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,355: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestInvoker`1.<RunAsync>b__45_0()  2018-02-10 19:37:46,355: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)  2018-02-10 19:37:46,355: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,356: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)  2018-02-10 19:37:46,356: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(ExceptionAggregator aggregator)  2018-02-10 19:37:46,356: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,356: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(ExceptionAggregator aggregator)  2018-02-10 19:37:46,356: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)  2018-02-10 19:37:46,357: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,357: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)  2018-02-10 19:37:46,357: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestRunner`1.RunAsync()  2018-02-10 19:37:46,357: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,358: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestRunner`1.RunAsync()  2018-02-10 19:37:46,358: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.XunitTheoryTestCaseRunner.RunTestAsync()  2018-02-10 19:37:46,358: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,358: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.XunitTheoryTestCaseRunner.RunTestAsync()  2018-02-10 19:37:46,359: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCaseRunner`1.RunAsync()  2018-02-10 19:37:46,359: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,359: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCaseRunner`1.RunAsync()  2018-02-10 19:37:46,359: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestMethodRunner`1.RunTestCasesAsync()  2018-02-10 19:37:46,360: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,360: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestMethodRunner`1.RunTestCasesAsync()  2018-02-10 19:37:46,360: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestMethodRunner`1.RunAsync()  2018-02-10 19:37:46,360: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,361: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestMethodRunner`1.RunAsync()  2018-02-10 19:37:46,361: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestClassRunner`1.RunTestMethodsAsync()  2018-02-10 19:37:46,361: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,361: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestClassRunner`1.RunTestMethodsAsync()  2018-02-10 19:37:46,361: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestClassRunner`1.RunAsync()  2018-02-10 19:37:46,362: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,362: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestClassRunner`1.RunAsync()  2018-02-10 19:37:46,362: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCollectionRunner`1.RunTestClassesAsync()  2018-02-10 19:37:46,362: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,362: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCollectionRunner`1.RunTestClassesAsync()  2018-02-10 19:37:46,363: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCollectionRunner`1.RunAsync()  2018-02-10 19:37:46,363: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,363: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCollectionRunner`1.RunAsync()  2018-02-10 19:37:46,363: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task`1.InnerInvoke() in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Threading/Tasks/future.cs:line 610  2018-02-10 19:37:46,364: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/buildagent/agent/_work/382/s/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166  2018-02-10 19:37:46,364: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 2440  2018-02-10 19:37:46,364: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.ExecuteEntry() in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 2361  2018-02-10 19:37:46,365: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.SynchronizationContextTaskScheduler.<>c.<.cctor>b__8_0(Object s) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs:line 694  2018-02-10 19:37:46,365: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.MaxConcurrencySyncContext.RunOnSyncContext(SendOrPostCallback callback, Object state)  2018-02-10 19:37:46,365: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/buildagent/agent/_work/382/s/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166  2018-02-10 19:37:46,365: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc()  2018-02-10 19:37:46,365: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.XunitWorkerThread.<>c.<QueueUserWorkItem>b__5_0(Object _)  2018-02-10 19:37:46,366: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/buildagent/agent/_work/382/s/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166  2018-02-10 19:37:46,366: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 2440  2018-02-10 19:37:46,366: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/buildagent/agent/_work/382/s/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166  2018-02-10 19:37:46,367: INFO: proc(54): run_and_log_output: Output: Assertion Failed  2018-02-10 19:37:46,367: INFO: proc(54): run_and_log_output: Output: should not have embedded nulls  2018-02-10 19:37:46,367: INFO: proc(54): run_and_log_output: Output:   2018-02-10 19:37:46,367: INFO: proc(54): run_and_log_output: Output:    at Interop.Sys.DirectoryEntry.GetName(Span`1 buffer)  2018-02-10 19:37:46,367: INFO: proc(54): run_and_log_output: Output:    at System.IO.Enumeration.FileSystemEntry.get_FileName()  2018-02-10 19:37:46,367: INFO: proc(54): run_and_log_output: Output:    at System.IO.Enumeration.FileSystemEnumerableFactory.<>c__DisplayClass5_0.<UserEntries>b__1(FileSystemEntry& entry)  2018-02-10 19:37:46,367: INFO: proc(54): run_and_log_output: Output:    at System.IO.Enumeration.FileSystemEnumerable`1.DelegateEnumerator.ShouldIncludeEntry(FileSystemEntry& entry)  2018-02-10 19:37:46,368: INFO: proc(54): run_and_log_output: Output:    at System.IO.Enumeration.FileSystemEnumerator`1.MoveNext()  2018-02-10 19:37:46,368: INFO: proc(54): run_and_log_output: Output:    at System.IO.FileSystem.RemoveDirectoryInternal(DirectoryInfo directory, Boolean recursive, Boolean throwOnTopLevelDirectoryNotFound)  2018-02-10 19:37:46,368: INFO: proc(54): run_and_log_output: Output:    at System.IO.FileSystem.RemoveDirectory(String fullPath, Boolean recursive)  2018-02-10 19:37:46,368: INFO: proc(54): run_and_log_output: Output:    at System.IO.Directory.Delete(String path, Boolean recursive)  2018-02-10 19:37:46,368: INFO: proc(54): run_and_log_output: Output:    at System.IO.FileCleanupTestBase.Dispose(Boolean disposing) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/CoreFx.Private.TestUtilities/src/System/IO/FileCleanupTestBase.cs:line 66  2018-02-10 19:37:46,369: INFO: proc(54): run_and_log_output: Output:    at System.IO.FileCleanupTestBase.Dispose() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/CoreFx.Private.TestUtilities/src/System/IO/FileCleanupTestBase.cs:line 57  2018-02-10 19:37:46,369: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExecutionTimer.Aggregate(Action action)  2018-02-10 19:37:46,369: INFO: proc(54): run_and_log_output: Output:    at ReflectionAbstractionExtensions.DisposeTestClass(ITest test, Object testClass, IMessageBus messageBus, ExecutionTimer timer, CancellationTokenSource cancellationTokenSource)  2018-02-10 19:37:46,369: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.Run(Action code)  2018-02-10 19:37:46,369: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestInvoker`1.<RunAsync>b__45_0()  2018-02-10 19:37:46,370: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,370: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestInvoker`1.<RunAsync>b__45_0()  2018-02-10 19:37:46,370: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)  2018-02-10 19:37:46,370: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,371: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)  2018-02-10 19:37:46,371: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(ExceptionAggregator aggregator)  2018-02-10 19:37:46,371: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,371: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(ExceptionAggregator aggregator)  2018-02-10 19:37:46,371: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)  2018-02-10 19:37:46,372: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,372: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)  2018-02-10 19:37:46,372: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestRunner`1.RunAsync()  2018-02-10 19:37:46,372: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,372: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestRunner`1.RunAsync()  2018-02-10 19:37:46,372: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCaseRunner`1.RunAsync()  2018-02-10 19:37:46,373: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,373: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCaseRunner`1.RunAsync()  2018-02-10 19:37:46,373: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestMethodRunner`1.RunTestCasesAsync()  2018-02-10 19:37:46,373: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,374: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestMethodRunner`1.RunTestCasesAsync()  2018-02-10 19:37:46,374: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestMethodRunner`1.RunAsync()  2018-02-10 19:37:46,374: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,374: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestMethodRunner`1.RunAsync()  2018-02-10 19:37:46,374: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestClassRunner`1.RunTestMethodsAsync()  2018-02-10 19:37:46,375: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,375: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestClassRunner`1.RunTestMethodsAsync()  2018-02-10 19:37:46,375: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestClassRunner`1.RunAsync()  2018-02-10 19:37:46,375: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,375: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestClassRunner`1.RunAsync()  2018-02-10 19:37:46,375: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCollectionRunner`1.RunTestClassesAsync()  2018-02-10 19:37:46,376: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,376: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCollectionRunner`1.RunTestClassesAsync()  2018-02-10 19:37:46,376: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCollectionRunner`1.RunAsync()  2018-02-10 19:37:46,376: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,376: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCollectionRunner`1.RunAsync()  2018-02-10 19:37:46,377: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task`1.InnerInvoke() in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Threading/Tasks/future.cs:line 610  2018-02-10 19:37:46,377: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/buildagent/agent/_work/382/s/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166  2018-02-10 19:37:46,377: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 2440  2018-02-10 19:37:46,377: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.ExecuteEntry() in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 2361  2018-02-10 19:37:46,378: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.SynchronizationContextTaskScheduler.<>c.<.cctor>b__8_0(Object s) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs:line 694  2018-02-10 19:37:46,378: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.MaxConcurrencySyncContext.RunOnSyncContext(SendOrPostCallback callback, Object state)  2018-02-10 19:37:46,378: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/buildagent/agent/_work/382/s/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166  2018-02-10 19:37:46,378: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc()  2018-02-10 19:37:46,379: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.XunitWorkerThread.<>c.<QueueUserWorkItem>b__5_0(Object _)  2018-02-10 19:37:46,379: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/buildagent/agent/_work/382/s/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166  2018-02-10 19:37:46,379: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 2440  2018-02-10 19:37:46,379: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/buildagent/agent/_work/382/s/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166  2018-02-10 19:37:49,001: INFO: proc(54): run_and_log_output: Output: /Users/dotnet-bot/dotnetbuild/work/78908c4b-3dbb-4ac4-8785-16df253cd217/Work/5674dd81-888b-46a4-9774-b7b0136812e8/Unzip/RunTests.sh: line 87: 64175 Abort trap: 6     ```  cc: @JeremyKuhne 
27037	area-System.Net	Test failed: System.Net.Http.WinHttpHandlerFunctional.Tests.ServerCertificateTest / UseCallback_CallbackReturnsFailure_ThrowsInnerSecurityFailureException	Failed tests: System.Net.Http.WinHttpHandlerFunctional.Tests.ServerCertificateTest.UseCallback_CallbackReturnsFailure_ThrowsInnerSecurityFailureException    Details:  https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_win7_release/398/testReport/System.Net.Http.WinHttpHandlerFunctional.Tests/ServerCertificateTest/UseCallback_CallbackReturnsFailure_ThrowsInnerSecurityFailureException/    Configuration: Outerloop_netcoreapp_win7_debug    MESSAGE:  Assert.Equal() Failure\r\nExpected: 12175\r\nActual: 12017  +++++++++++++++++++  STACK TRACE:  at System.Net.Http.WinHttpHandlerFunctional.Tests.ServerCertificateTest.UseCallback_CallbackReturnsFailure_ThrowsInnerSecurityFailureException() --- End of stack trace from previous location where exception was thrown ---
27036	area-System.Drawing	Disable drawing test for distro Ubuntu18.04	Related to #27021
27035	area-System.Globalization	Fixing test CurrencyNegativePattern_Get() on distro Ubuntu 18.04	Fixing test CurrencyNegativePattern_Get() on newly added distro Ubuntu 18.04    From class/project System.Globalization.Tests.NumberFormatInfoCurrencyNegativePattern    Fixes #27022
27033	area-System.Numerics	[Feature-Request] N-bit sized int and floating point types	@hamarb123 commented on [Fri Feb 09 2018](https://github.com/dotnet/standard/issues/647)  I propose we should be able to have N-bit sized int and floating point types.  Here is how it could work:    Obviously we already have the following:  - int 1 / uint 1 (bool)  - uint 8 (byte)  - int 8 (sbyte)  - uint 16, 32 and 64 (ushort, uint and ulong)  - int 16, 32 and 64 (short, int and long)  - float 32 (single)  - float 64 (double)    But what about the following:  - (u)int 2 (2 bits)  - (u)int 4 (4 bits)  - (u)int 128 (128 bits)  - (u)int 256 (256 bits)  - (u)int 2^n (2^n bits)  - (float 1 makes no sense but you could still add it)  - float 2 (2 bits)  - float 4 (4 bits)  - float 8 (8 bits)  - float 16 (16 bits)  - float 128 (128 bits)  - float 256 (256 bits)  - float 2^n (2^n bits)    The classes could be called the following:  For integers: `intj` where j is a power of 2 for a j bit integer  For unsigned integers: `uintj` where j is a power of 2 for a j bit unsigned integer  For floats: `floatj` where j is a power of 2 for a j bit float  And there could be special names for floats between `float8` and `float256` ranging from `quarter`, `half`, `single` (already in .NET), `double` (already in .NET), `quadruple`, `octuple`    Why do I need this in my beloved c#?  1. Because it will give you more/less precise floats to use  2. It will give you more integers to use  3. There are no good floating point (bigger than double) libraries out there that do not just use System.Math which reduces it to double precision anyway    Won't this ruin my IDE with millions of different type names?  1. Not if you make a maximum for the types (say 1024) or make it so that the IDE can have the ability to only show you some (say up to 1024) then it will not give you millions of types suggested  
27031	area-System.Net	SocketsHttpHandler should check for transfer encoding chunked without content	WinHttpHandler and CurlHandler both fail if TransferEncodingChunked is set to true but request.Content is null.  SocketsHttpHandler should check for that, too.  And there should be a test.
27029	area-System.Net	Enable SocketsHttpHandler cancellation support	This change significantly improves the cancellation support in SocketsHttpHandler.  Previously we were passing the CancellationToken around to every method, eventually bottoming out in calls to the underlying Stream which then ends up passing them down to the underlying Socket.  But today Socket's support for cancellation is minimal, only doing up-front checks; if cancellation is requested during the socket operation rather than before, the request will be ignored.  Since HttpClient implements features like timeouts on top of cancellation support, it's important to do better than this.    The change implements cancellation by registering with the CancellationToken to dispose of the connection.  This will cause any reads/writes to wake up.  We then translate resulting exceptions into cancellation exceptions.  When in the main SendAsync method, we register once for the whole body of the operation until the point that we're returning the response message.  For individual operations on the response content stream, we register per operation; however, when feasible we try to avoid the registration costs by only registering if operations don't complete synchronously.  We also account for the case that on Unix, closing the connection may result in read operations waking up not with an exception but rather with EOF, which we also need to translate into cancellation when appropriate.    Along the way I cleaned up a few minor issues as well.    I also added a bunch of cancellation-related tests:  - Test cancellation occurring while sending request content  - Test cancellation occurring while receiving response headers  - Test cancellation occurring while receiving response body and using a buffered operation  - Test that all of the above are triggerable with CancellationTokenSource.Cancel, HttpClient.CancelPendingRequests, and HttpClient.Dispose  - Test cancellation occurring while receiving response body and using an unbuffered operation, either a ReadAsync or CopyToAsync on the response stream  - Test that a CancelPendingRequests doesn't affect unbuffered operations on the response stream    There are deficiencies here in the existing handlers, and tests have been selectively disabled accordingly.  SocketsHttpHandler passes now for all of them.  I will open issues for the non-netfx issues and include the corresponding numbers in comments before merging.    cc: @geoffkizer, @Priya91, @wfurt, @davidsh   Fixes https://github.com/dotnet/corefx/issues/23131  Fixes https://github.com/dotnet/corefx/issues/23141
27024	area-System.IO	Fix *Info classes for Unix when opened on root	Regression I introduced. Created a new inner loop test that will catch this in the future.    Fixes #26988
27023	area-System.Net	[Ubuntu18.04] Tests failed: System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test / *	Failed on newly added distro Ubuntu18.04    Affected tests:  * `GetAsync_AllowedSSLVersionDiffersFromServer_ThrowsException` (Tls11/Tls12 args)  * `GetAsync_DisallowTls10_AllowTls11_AllowTls12`    Test failure:  ```  Assert.Throws() Failure  Expected: typeof(System.IO.IOException)  Actual:   typeof(System.Security.Authentication.AuthenticationException): A call to SSPI failed, see inner exception.    at System.Net.Security.SslState.StartSendAuthResetSignal(ProtocolToken message, AsyncProtocolRequest asyncRequest, ExceptionDispatchInfo exception) in /root/corefx-1372297/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 973  at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest) in /root/corefx-1372297/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 820  at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest) in /root/corefx-1372297/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 791  at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest) in /root/corefx-1372297/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 960  at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest) in /root/corefx-1372297/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 863  at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest) in /root/corefx-1372297/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 820  at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest) in /root/corefx-1372297/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 791  at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest) in /root/corefx-1372297/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 960  at System.Net.Security.SslState.PartialFrameCallback(AsyncProtocolRequest asyncRequest) in /root/corefx-1372297/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 1094  --- End of stack trace from previous location where exception was thrown ---  at System.Net.Security.SslState.EndProcessAuthentication(IAsyncResult result) in /root/corefx-1372297/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 709  at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization) in /root/coreclr/src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs:line 533  --- End of stack trace from previous location where exception was thrown ---  at System.Net.Test.Common.LoopbackServer.AcceptSocketAsync(Socket server, Func`5 funcAsync, Options options) in /root/corefx-1372297/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 165  ```    ## History of failures    Day | Build | Details  -- | -- | --  2/10 | 20180210.01 | 3x - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180210.01/workItem/System.Net.Http.Functional.Tests)  2/10 | 20180210.03 | 3x - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180210.03/workItem/System.Net.Http.Functional.Tests)  
27022	area-System.Globalization	[Ubuntu18.04] Test failed: System.Globalization.Tests.NumberFormatInfoCurrencyNegativePattern / CurrencyNegativePattern_Get	Fails on newly added distro: Ubuntu 18.04    Failure:  ```  Assert.Contains() Failure  Not found: 1  In value:  Int32[] [8]  ```    ## History of failures    Day | Build | Details  -- | -- | --  2/10 | 20180210.01 | [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180210.01/workItem/System.Globalization.Tests/analysis/xunit/System.Globalization.Tests.NumberFormatInfoCurrencyNegativePattern~2FCurrencyNegativePattern_Get(locale:%20%5C%22fa-IR%5C%22))  2/10 | 20180210.03 | [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180210.03/workItem/System.Globalization.Tests/analysis/xunit/System.Globalization.Tests.NumberFormatInfoCurrencyNegativePattern~2FCurrencyNegativePattern_Get(locale:%20%5C%22fa-IR%5C%22))  
27021	area-System.Drawing	[Ubuntu18.04] Test failed: System.Drawing.Imaging.Tests.EncoderParameterTests / Ctor_Encoder_NegativeNumberOfValues_Type_Value_OutOfMemoryException	Failed on newly added distro Ubuntu 18.04. Related to #24274 (failing in the past)    Failure:  ```  Assert.Throws() Failure  Expected: typeof(System.OutOfMemoryException)  Actual:   (No exception was thrown)    at System.Drawing.Imaging.Tests.EncoderParameterTests.Ctor_Encoder_NegativeNumberOfValues_Type_Value_OutOfMemoryException(Int32 numberOfValues) in /root/corefx-1371172/src/System.Drawing.Common/tests/Imaging/EncoderParameterTests.cs:line 327  ```    ## History of failure    Day | Build | Details  -- | -- | --  2/10 | 20180210.01 | [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180210.01/workItem/System.Drawing.Common.Tests/analysis/xunit/System.Drawing.Imaging.Tests.EncoderParameterTests~2FCtor_Encoder_NegativeNumberOfValues_Type_Value_OutOfMemoryException(numberOfValues:%20-1))  2/10 | 20180210.03 | [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180210.03/workItem/System.Drawing.Common.Tests/analysis/xunit/System.Drawing.Imaging.Tests.EncoderParameterTests~2FCtor_Encoder_NegativeNumberOfValues_Type_Value_OutOfMemoryException(numberOfValues:%20-1))  2/12 | 20180212.01 | [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180212.01/workItem/System.Drawing.Common.Tests/analysis/xunit/System.Drawing.Imaging.Tests.EncoderParameterTests~2FCtor_Encoder_NegativeNumberOfValues_Type_Value_OutOfMemoryException(numberOfValues:%20-1))  2/12 | 20180212.01 | [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180212.05/workItem/System.Drawing.Common.Tests/analysis/xunit/System.Drawing.Imaging.Tests.EncoderParameterTests~2FCtor_Encoder_NegativeNumberOfValues_Type_Value_OutOfMemoryException(numberOfValues:%20-1))  
27019	area-System.IO	Fix Unix enumeration	For non-trivial recursive enumerations we were running out of file descriptors. Stop creating them when we queue pending subdirectories and only create when we dequeue.
27018	area-System.Collections	Test failure in CI: System.Collections.Tests.LinkedList_Generic_Tests_string/AddBefore_LLNode_LLNode	https://mc.dot.net/#/user/tmat/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Frelease~2F2.1~2F/test~2Ffunctional~2Fcli~2F/76c888d757bf1e9d470ceb4b93d3d00b5be5d4ec/workItem/System.Collections.Tests/analysis/xunit/System.Collections.Tests.LinkedList_Generic_Tests_string~2FAddBefore_LLNode_LLNode
27015	area-System.Net	Not a good idea to specify charset parameter for some content types in StringContent	https://github.com/dotnet/corefx/blob/6bf1e7c3032d3c24d5a41bbd880549ef4a8de2da/src/System.Net.Http/src/System/Net/Http/StringContent.cs#L31    I was building a `StringContent` object with a `mediaType` of `application/json`. That media type does not specify a `charset` parameter, which is unconditionally added in this class.    Adding this parameter automatically is probably not a good idea. I'm not sure the right fix, I just know that `Content-Type: application/json; charset=utf-8` will choke some parsers.
27014	area-System.Numerics	Add Vector.Narrow and Vector.Widen overloads to cast elemnts values between float and int, and between double and long	I suggest to add these two overloads to the Vector.Narrow method:  ```  Vector<int> Vector.Narrow(Vector<float>, ConversionType ct)  Vector<long> Vector.Narrow(Vector<double> ConversionType ct)    ```  where:  ```  enum ConversionType  {      Floor,        // Apply Mathf.Floor      Ceiling,     // Apply Mathf.Ceiling      Truncate,   // Apply Mathf.Truncate      Round       // Apply Mathf.Round  }    ```  Example:  ```  var v1 = new Vector<float>({-1.4, 2.1, -3.9, 4.3});  var v2 = Vector.Narrow(v1, ConversionType.Floor);        // <-2, 2, -4, 4>    ```  By the way, It will be nice if we can use foreach to iterate Vector<T> elemnts using foreach..  I think more mathematical methods (like the ones in the Math class) can be added to the Vector class. The fact that the Vector<T> is immutable, demands some long codes to construct a new version containing individual results. Or, is there a chance to make the Indexer read-write?        
27013	area-System.IO	Implement Snappy compression algorithm 	The Brotli algorithm has been recently implemented. I think that it would be nice to see a similar implementation for Snappy: it is very popular, cross platform, open source, with a lower compression but faster than Brotli.
27011	area-System.Data	Bump System.Data.SqlClient assembly version to 4.4.0.	Fixes https://github.com/dotnet/corefx/issues/26142
27010	area-System.Data	Restrict the Long Running option to MARS	This PR partially address https://github.com/dotnet/corefx/issues/19836     Restrict the usage of Long Running while reading data off the stream, to cases which are reading data for MARS enabled connections. This is to restrict the side effects of LongRunning continuation option.     Validated with EF tests.   
27008	area-System.Net	DO NOT MERGE: test multiple cookie header handling	
27007	area-System.IO	Add System.IO.Pipelines API	94% coverage of new API    Please check csprojes, configuration.props and other infrastructure files. It's my first time adding a package to corefx so I may have done some mistakes there.
27006	area-System.Net	System.Net.Security.SslStream throws exception while running EF tests	"While running EF tests on Ubuntu against netcoreapp2.1 an exception is thrown     ```  Failed   Microsoft.EntityFrameworkCore.SqlServerDatabaseCreatorEnsureDeletedTest.Deletes_database(async: False, open: True, ambientTransaction: False)  Error Message:   System.NotSupportedException :  The WriteAsync method cannot be called when another write operation is pending.  Stack Trace:     at System.Net.Security.SslStreamInternal.WriteAsyncInternal[TWriteAdapter](TWriteAdapter writeAdapter, ReadOnlyMemory`1 buffer)     at System.Net.Security.SslStreamInternal.Write(Byte[] buffer, Int32 offset, Int32 count)     at System.Net.Security.SslStream.Write(Byte[] buffer, Int32 offset, Int32 count)     at System.Data.SqlClient.SNI.SNITCPHandle.Send(SNIPacket packet)     at System.Data.SqlClient.SNI.SNIMarsConnection.Send(SNIPacket packet)     at System.Data.SqlClient.SNI.SNIMarsHandle.SendControlPacket(SNISMUXFlags flags)     at System.Data.SqlClient.SNI.SNIMarsHandle.Dispose()     at System.Data.SqlClient.SNI.TdsParserStateObjectManaged.Dispose()     at System.Data.SqlClient.TdsParser.Disconnect()     at System.Data.SqlClient.SqlInternalConnectionTds.Dispose()     at System.Data.ProviderBase.DbConnectionPool.DestroyObject(DbConnectionInternal obj)     at System.Data.ProviderBase.DbConnectionPool.DeactivateObject(DbConnectionInternal obj)     at System.Data.ProviderBase.DbConnectionPool.PutObject(DbConnectionInternal obj, Object owningObject)     at System.Data.ProviderBase.DbConnectionInternal.CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory)     at System.Data.SqlClient.SqlConnection.Close()     at System.Data.SqlClient.SqlConnection.Dispose(Boolean disposing)     at System.ComponentModel.Component.Dispose()     at Microsoft.EntityFrameworkCore.TestUtilities.RelationalTestStore.Dispose() in /home/saurabh/EntityFrameworkCore/src/EFCore.Relational.Specification.Tests/TestUtilities/RelationalTestStore.cs:line 41     at Microsoft.EntityFrameworkCore.TestUtilities.SqlServerTestStore.Dispose() in /home/saurabh/EntityFrameworkCore/test/EFCore.SqlServer.FunctionalTests/TestUtilities/SqlServerTestStore.cs:line 414     at Microsoft.EntityFrameworkCore.SqlServerDatabaseCreatorEnsureDeletedTest.<Delete_database_test>d__2.MoveNext() in /home/saurabh/EntityFrameworkCore/test/EFCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs:line 154  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---    ```    Steps to repro     Clone the EFCore repo `https://github.com/aspnet/EntityFrameworkCore`    Build the repo from the root using build.sh    Execute the tests in /EntityFrameworkCore/test/EFCore.SqlServer.FunctionalTests  Steps:  1. Modify config.json to have a valid connection string (something like) ""Data Source=tcp:server,1437;Database=master;Integrated Security=False;Connect Timeout=60;ConnectRetryCount=0;uid=saurabh;pwd=*******;MultipleActiveResultSets=False""    2. Execute test   ```   ~/.dotnet/dotnet test --framework netcoreapp2.1 --filter=""FullyQualifiedName=Microsoft.EntityFrameworkCore.SqlServerDatabaseCreatorEnsureDeletedTest.Deletes_database""  ```    This test passes one out of every 5 times when run for framework netcoreapp2.1   Run the test against netcoreapp2.0 and it passes consistently.     Some in System.Net.Security changed?     Please contact me for the database password via email for quicker setup."
27004	area-System.Runtime	Wrong Type equality behavior when loading assembly from file	I take a Type, query its assembly location, and then load the assembly from the same address, and find the same type from the loaded assembly. The resulting type is not equal to the original type.    Here's the test case:        [TestMethod]      public void TestTypeLoadingWithFilePath()      {          var originalType = typeof(SomeClass);          var assemblyAddress = originalType.Assembly.Location;            var loadedAssembly = Assembly.LoadFile(assemblyAddress);          Assert.IsNotNull(loadedAssembly);            var loadedType = loadedAssembly.GetType(originalType.FullName);          Assert.IsNotNull(loadedType);            Assert.AreEqual(originalType, loadedType);      }    The test fails on the last assertion.    This only happens on .NET Core on Windows. (I'm testing against latest version, 2.1.4). But this was not the case with .NET Framework.    Is this by design, or a bug?  If it's by design, why?  Again, if it's by design, doesn't this mean different behavior between two implementations of .NET Standard? (.NET Core vs. .NET Framework)
27001	area-System.Memory	API proposal: ReferenceCountedDisposable<T>	## Summary    This proposal simplifies the use of disposable resources shared through code where single owner of the resource is either unclear, or complicates maintenance of the code. This situation is increasingly common when asynchronous code which needs to operate on a threading-agnostic API where the `Dispose` operation is explicitly called out as not safe for concurrent use.    The semantics of a safe, shared wrapper for `IDisposable` objects is challenging, especially when considerations are made for handling missing and/or multiple calls to `Dispose` and for weakly-held references. Providing a holder for managing lifetimes of these objects allows developers to focus on the semantics of the underlying shared object, which is always a challenge in itself.    ## Proposed API    ```csharp  namespace System.Memory  {    public sealed class ReferenceCountedDisposable<T> : IDisposable      where T : class, IDisposable    {      public ReferenceCountedDisposable(T instance);        public T Target { get; }        public ReferenceCountedDisposable<T> TryAddReference();      public void Dispose();        public struct WeakReference      {        public WeakReference(ReferenceCountedDisposable<T> reference);          public ReferenceCountedDisposable<T> TryAddReference();      }    }  }  ```    ## Semantics    A reference-counting wrapper which allows multiple uses of a single disposable object in code, which is deterministically released (by calling `IDisposable.Dispose`) when the last reference is disposed.    Each instance of `ReferenceCountedDisposable<T>` represents a counted reference (also referred to as a *reference* in the following documentation) to a target object. Each of these references has a lifetime, starting when it is constructed and continuing through its release. During this time, the reference is considered *alive*. Each reference which is alive owns exactly one reference to the target object, ensuring that it will not be disposed while still in use. A reference is released through either of the following actions:    * The reference is explicitly released by a call to `Dispose`.  * The reference is no longer in use by managed code and gets reclaimed by the garbage collector.    While each instance of `ReferenceCountedDisposable<T>` should be explicitly disposed when the object is no longer needed by the code owning the reference, this implementation will not leak resources in the event one or more callers fail to do so. When all references to an object are explicitly released (i.e. by calling `Dispose`), the target object will itself be deterministically released by a call to `IDisposable.Dispose` when the last reference to it is released. However, in the event one or more references is not explicitly released, the underlying object will still become eligible for non-deterministic release (i.e. finalization) as soon as each reference to it is released by one of the two actions described previously.    When using `ReferenceCountedDisposable<T>`, certain steps must be taken to ensure the target object is not disposed early.    1. Use `ReferenceCountedDisposable<T>` consistently. In other words, do not mix code using reference-counted wrappers with code that references to the target directly.  1. Only use the `ReferenceCountedDisposable<T>(T reference)` constructor one time per target object. Additional references to the same target object must only be obtained by calling `TryAddReference`.  1. Do not call `IDisposable.Dispose` on the target object directly. It will be called automatically at the appropriate time, as described above.    All public methods on this type adhere to their pre- and post-conditions and will not invalidate state even in concurrent execution.    ### `ReferenceCountedDisposable<T>.TryAddReference`    Increments the reference count for the disposable object, and returns a new disposable reference to it. The returned object is an independent reference to the same underlying object. Disposing of the returned value multiple times will only cause the reference count to be decreased once.    Return value: a new `ReferenceCountedDisposable<T>` pointing to the same underlying object, if it has not yet been disposed; otherwise, `null` if this reference to the underlying object has already been disposed.    ### `ReferenceCountedDisposable<T>.WeakReference`    Represents a weak reference to a `ReferenceCountedDisposable<T>` which is capable of obtaining a new counted reference up until the point when the object is no longer accessible.    ### Differences between `TryAddReference` operations    The semantics of `ReferenceCountedDisposable<T>.TryAddReference` and `ReferenceCountedDisposable<T>.WeakReference.TryAddReference` are slightly different:    * `ReferenceCountedDisposable<T>.TryAddReference`: This method returns `null` after *this reference* is disposed. In other words, it is possible for other references to the target object to still be held in code.  * `ReferenceCountedDisposable<T>.WeakReference.TryAddReference`: This method returns `null` after *the last reference* to the target object is disposed.
27000	area-System.Net	" The handler does not support client authentication certificates with this combination of libcurl (7.54.0) and its SSL backend (""LibreSSL/2.0.20"")"	"I'm having an issue when calling an endpoint with the following code, and I don't know what can solve that critical issue on mac:    ```  var handler = new HttpClientHandler();  handler.ClientCertificates.Add(cert);  var client = new HttpClient(handler);  var result = await client.GetAsync(url);  ```    The error is below:    ```  System.PlatformNotSupportedException: The handler does not support client authentication certificates with this combination of libcurl (7.54.0) and its SSL backend (""LibreSSL/2.0.20"").     at System.Net.Http.CurlHandler.SslProvider.SetSslOptions(EasyRequest easy, ClientCertificateOption clientCertOption)     at System.Net.Http.CurlHandler.EasyRequest.InitializeCurl()     at System.Net.Http.CurlHandler.MultiAgent.ActivateNewRequest(EasyRequest easy)  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()  ```    **curl --version**  ```  curl 7.54.0 (x86_64-apple-darwin17.0) libcurl/7.54.0 LibreSSL/2.0.20 zlib/1.2.11 nghttp2/1.24.0  Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp  Features: AsynchDNS IPv6 Largefile GSS-API Kerberos SPNEGO NTLM NTLM_WB SSL libz HTTP2 UnixSockets HTTPS-proxy  ```    **dotnet info**  ```  .NET Command Line Tools (2.1.4)    Product Information:   Version:            2.1.4   Commit SHA-1 hash:  5e8add2190    Runtime Environment:   OS Name:     Mac OS X   OS Version:  10.13   OS Platform: Darwin   RID:         osx.10.12-x64   Base Path:   /usr/local/share/dotnet/sdk/2.1.4/    Microsoft .NET Core Shared Framework Host      Version  : 2.0.5    Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54  ```"
26999	area-System.Collections	Queue/Stack batch item Enqueue/Push	"`Queue` and `Stack` in the `System.Collections.Generic` namespace currently only implement methods to enqueue/push single objects to the collection. In order to add multible elements, the source collection has to be enumerated, that could potentialy lead to a performance loss based on the required iterations.      # Usage  Because of performance, large input collections would profit from such a change.  ````cs      private static async void UseCaseLogic()      {          var workQueue = new Queue<char>();          var siteList = new List<string>          {              ""https://google.com"",              ""https://github.com"",          };                using (var wc = new WebClient())          {              foreach (var cSite in siteList)              {                  var cSiteText = await wc.DownloadStringTaskAsync(cSite);                  workQueue.EnqueueRange(cSiteText.ToCharArray());              }          }                while (workQueue.Count != 0)          {              var cItem = workQueue.Dequeue();              //Process          }      }  ````    # Proposed API additions    Because of a simmilar method in `List<T>` (`AddRange`) naming the new APIs `EnqueueRange`/`PushRange` appears to be the most logical way.    ````cs  namespace System.Collections.Generic  {      public class Stack<T> : IEnumerable<T>, IEnumerable, ICollection, IReadOnlyCollection<T>      {          public void EnqueueRange(IEnumerable<T> item);          public void EnqueueRange(T[] item);      }  }  ````    ````cs  namespace System.Collections.Generic  {      public class Queue<T> : IEnumerable<T>, IEnumerable, ICollection, IReadOnlyCollection<T>      {          public void PushRange(IEnumerable<T> item);          public void PushRange(T[] item);      }  }  ````    # Open Questions  In which order should the source array/collection be Inserted? Would reordering the source void the performance gains?"
26997	area-System.Net	Trying to collect info about ping test failures in macOS 10.12	See #26358
26996	area-System.IO	System.MissingMethodException : Method not found: 'Void System.IO.Compression.ZipFileExtensions.ExtractToFile(System.IO.Compression.ZipArchiveEntry, System.String, Boolean)'	I'm having the following error when targetting netappcore2.0 and net471:    System.MissingMethodException : Method not found: 'Void System.IO.Compression.ZipFileExtensions.ExtractToFile(System.IO.Compression.ZipArchiveEntry, System.String, Boolean)'.    Is this a new bug? Is there any workaround available?    Thanks.
26995	area-System.Net	Add DecompressionMethods.Brotli?	"System.Net.DecompressionMethods is an enum that is used by HttpClient handlers to determine whether/what to automatically decode in a response, e.g. if DecompressionMethods.Deflate is set and the response is encoded with deflate, it'll automatically decode the response as part of handing it back.    The enum today is just:  ```C#  namespace System.Net  {      [Flags]      public enum DecompressionMethods      {          None = 0,          GZip = 1,          Deflate = 2      }  }  ```  but we now also have BrotliStream, which we could use to support a DecompressionMethods.Brotli and a ""br"" encoding:  ```C#  namespace System.Net  {      [Flags]      public enum DecompressionMethods      {          ...          Brotli = 4      }  }  ```  From an implementation perspective, this would mean either System.Net.Http.dll taking a dependency on System.IO.Compression.Brotli.dll, or if we wanted to avoid the dependency, building all of the source into System.Net.Http.dll (there is currently a native dependency, with the native portion compiled into clrcompression.dll on Windows and System.IO.Compression.Native.so/dylib on Unix)."
26994	area-System.Reflection	Add new overload to System.Reflection.Assembly to load from Stream	## Rationale    Currently we can load an assembly from byte array or by file name:  ```c#          public static Assembly Load(byte[] rawAssembly);          public static Assembly Load(byte[] rawAssembly, byte[] rawSymbolStore);          public static Assembly Load(AssemblyName assemblyRef);          public static Assembly Load(string assemblyString);          public static Assembly LoadFile(string path);          public static Assembly LoadFrom(string assemblyFile, byte[] hashValue, Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);          public static Assembly LoadFrom(string assemblyFile);  ```    If we compile dynamically in a memory stream we have to do extra allocations to load the assembly:  ```c#  using (var ms = new MemoryStream())  {      emitResult = compilation.Emit(peStream: ms, options: _emitOptions);      if (emitResult.Success)      {          ms.Flush();          ms.Seek(0, SeekOrigin.Begin);          Assembly assembly = Assembly.Load(ms.ToArray());      }  }  ```    ### Proposed API    ```c#      // Load the assembly from Stream.          public static Assembly Load(Stream assemblyStream);  ```    ### Update    There is `AssemblyLoadContext.Default.LoadFromStream()` in `System.Reflection.Loader` but its hard to find.
26993	area-Infrastructure	Clear initlocals in a bunch of assemblies	Sets  ```XML  <ILLinkClearInitLocals>true</ILLinkClearInitLocals>  ```  for the assemblies:  - System.IO.FileSystem  - System.IO.Pipes  - System.Memory  - System.Net.Http  - System.Net.Http.WinHttpHandler  - System.Net.NameResolution  - System.Net.NetworkInformation  - System.Net.Primitives  - System.Net.Requests  - System.Net.Security  - System.Net.Sockets  - System.Net.WebSockets  - System.Net.WebSockets.Client  - System.Net.WebSockets.WebSocketsProtocol  - System.Private.Uri  - System.Runtime  - System.Runtime.Extensions    Eventually we'd ideally set the flag (or eventually compiler switch) for the whole repo; these are just the ones I audited thus far.  In a few cases I had to make code changes to adapt, where the code was expecting stackallocs to be cleared.  I also looked at a few other projects (System.Collections, System.Runtime.Numerics) where there were more significant dependencies on clearing and I decided to leave those for later.    Contributes to https://github.com/dotnet/corefx/issues/26939  cc: @jkotas, @erozenfeld, @VSadov 
26991	area-System.Net	HttpClient not setting Accept-Encoding: gzip, deflate on older Windows versions	".NET Core 2.1.4 SDK    ```csharp  var handler = new HttpClientHandler()  {         AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate  };    using (var client = new HttpClient(handler))  {        response = client.GetStringAsync(""http://scooterlabs.com/echo"").Result;  }  ```    On a Windows 2008 R2 box, it looks like `Accept-Encoding` is **not** set even though the `HttpClientHandler` has compression set.    Windows 2008 R2  ```  [headers] => Array  (      [Connection] => Keep-Alive      [Host] => scooterlabs.com  )  ```    Windows 10  ```  [headers] => Array  (      [Connection] => Keep-Alive      [Accept-Encoding] => gzip, deflate      [Host] => scooterlabs.com  )    ```  This works as expected on a Windows 10 box and Windows 8.1 VM.    If you force the headers to be sent however, on Windows 2008 R2 it decompresses fine, so compression is supported.    If you use WebClient or HttpWebRequest directly with `AutomaticDecompression` set it works on all versions with the correct headers and ability to handle the compressed payload.    This works on all environments  ```csharp  var handler = new HttpClientHandler()  {         AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate  };    using (var client = new HttpClient(handler))  {        client.DefaultRequestHeaders.AcceptEncoding.Add(new StringWithQualityHeaderValue(""gzip""));        client.DefaultRequestHeaders.AcceptEncoding.Add(new StringWithQualityHeaderValue(""deflate""));        response = client.GetStringAsync(""http://scooterlabs.com/echo"").Result;  }  ```      P/s: SO question is here https://stackoverflow.com/questions/48703143/httpclient-not-sending-accept-encoding-on-different-machine    "
26990	area-System.Security	Crypto provider wrappers in System.Security.Cryptography.Algorithms	PR #12964 added crypto wrappers.    I'm able to use them targeting netstandard 2.x but not for netstandard1.x.    I see that those providers are not included as part of `System.Security.Cryptography.Algorithms` package (v4.3.1). Would it be possible to include them as part of the nuget package?
26989	area-System.Net	SocketsHttpHandler: Fix some issues with cookie handling, and add cookie tests	Remove CookieHandler and integrate the cookie handling logic into HttpConnection, which fixes some issues with how cookies were handled.    Add a bunch of protocol tests for cookie handling.  Issues filed for failures in CurlHandler and WinHttpHandler.    Fixes #26984   Fixes #26985   
26988	area-System.IO	[Regression] Test failure: System.IO.Tests.* / DeleteRoot	Affected OS:  * All Linux & Mac OS    Affected tests:  * System.IO.Tests.DirectoryInfo_Delete / DeleteRoot  * System.IO.Tests.DirectoryInfo_Delete_bool / DeleteRoot  * System.IO.Tests.Directory_Delete_str / DeleteRoot  * System.IO.Tests.Directory_Delete_str_bool / DeleteRoot    Failure:  ```  Assert.Throws() Failure  Expected: typeof(System.IO.IOException)  Actual:   typeof(System.IO.DirectoryNotFoundException): Could not find a part of the path '/'.    at System.IO.FileSystem.RemoveDirectory(String fullPath, Boolean recursive)  ```    ## History of failures    Day | Build | Details  -- | -- | --  2/9 | 20180209.01 | 56x (14 OS's) - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180209.01/workItem/System.IO.FileSystem.Tests)  2/9 | 20180209.03 | 48x (12 OS's) - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180209.03/workItem/System.IO.FileSystem.Tests)  2/9 | 20180209.05 | 56x - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180209.05/workItem/System.IO.FileSystem.Tests)  2/10 | 20180210.01 | 60x (15 OS's) - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180210.01/workItem/System.IO.FileSystem.Tests)  2/10 | 20180210.03 | 56x - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180210.03/workItem/System.IO.FileSystem.Tests)
26986	area-System.Net	WinHttpHandler: cookies received on a 401 response are not added to the CookieContainer	If the server sends a 401 auth challenge with a Set-Cookie header, the cookie is not added to the CookieContainer.    SocketsHttpHandler and CurlHandler handle this correctly.
26985	area-System.Net	SocketsHttpHandler: incorrect cookie behavior with redirects	When processing a redirect, the redirected request will be sent with cookies for both the initial request and the redirected request.  Should be only the latter.
26984	area-System.Net	SocketsHttpHandler: container cookies are incorrectly handled if you add a Cookie header to the cookie collection	"If you add a Cookie header via    ```csharp      requestMessage.Headers.Add(""Cookie"", ""A=1"");  ```    This causes cookies from the cookie container to be appended using the "","" separator, which is incorrect for cookies -- they use "";"" as a separator instead.    WinHttpHandler appends the cookies properly."
26983	area-System.Net	CurlHandler: container cookies are not sent if you add a Cookie header to the header collection	"If you add a Cookie header via    ```csharp      requestMessage.Headers.Add(""Cookie"", ""A=1"");  ```    This causes cookies from the cookie container to not be sent.    WinHttpHandler appends the cookies from the cookie container to the specified Cookie: header."
26982	area-System.Net	Disable Http status line parsing test cases on CurlHandler	Closes: #26980
26981	area-Infrastructure	Add Ubuntu 18 to supported Linux list	
26980	area-System.Net	[New test] Test failure: System.Net.Http.Functional.Tests.HttpProtocolTests / GetAsync_InvalidStatusLine_ThrowsException	"[8 test cases](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180209.01/workItem/System.Net.Http.Functional.Tests) fail on Fedora27 and Ubuntu17.10 (probably due to different libcurl version which changed the behavior) - introduced in #26798  * ""HTTP/1.1 ""  * ""HTTP/1.1 !11""  * ""HTTP/1.1 "" (looks same as the first one - unclear why)  * ""HTTP/1.1 a11""  * ""HTTP/1.1 abc""  * ""HTTP/1.1\\t""  * ""HTTP/1.1\\t\\t""  * ""HTTP/1.A 200 OK""    I would recommend to skip the test cases on CurlHandler in general."
26979	area-System.Net	Add test infra for auth testing.	fixes #26375    @dotnet/ncl 
26978	area-System.IO	Make Unix filename conversion lazy	Also hook error handling. I'm working on shifting to IntPtr instead of SafeHandle like the Windows impl.    cc: @danmosemsft, @pjanotti, @tarekgh 
26976	area-System.Reflection	Add support for PDB Checksum debug directory entry	Implements proposal https://github.com/dotnet/corefx/issues/26935    The CodeView debug directory entry in PE/COFF file associates the PE file with one or more PDBs. The CodeView entry and the PDB both store the same PDB ID (for Portable PDB it's 20B for Windows PDB it's 16B of data). Debuggers, symbol servers and other tools use the PDB ID to match the PE file with the PDB.     Although the PDB ID is good enough for finding the right PDB for the PE file it is not good enough for validating that the PDB has not been maliciously modified. _PDB Checksum_ is a new debug directory record that can be used for such validation.    _PDB Checksum_ comprises of crypto hash algorithm name and the hash of the PDB content. See   [Specification](https://github.com/dotnet/corefx/blob/master/src/System.Reflection.Metadata/specs/PE-COFF.md#pdb-checksum-debug-directory-entry-type-19) for details.    This change introduces new APIs that allow tools to read and write PDB Checksum.   
26975	area-System.Net	CookieCollection should implement ICollection<Cookie>	It implements `ICollection`, but not `ICollection<Cookie>`.
26971	area-Infrastructure	Adding a new resource string to .resx file doesn't regenerate generated SR.cs 	"Repro:    1. Open `corefx\src\System.Reflection.Metadata\System.Reflection.Metadata.sln` in VS.  2. Open `corefx\src\System.Reflection.Metadata\src\Resources\Strings.resx`  3. Add a new resource string and save the .resx file, e.g.    ```xml    <data name=""Foo"" xml:space=""preserve"">      <value>Foo</value>    </data>  ```    4. Open any .cs file and type `SR.Foo`. `Foo` is not in completion.  5. Build. Build fails due to missing `SR.Foo` property.    **Expected behavior**    `SR.Foo` is generated as soon as the .resx file is saved."
26970	area-System.Runtime	Fixing a regression introduced by the previous test fix.	My previous fix introduced a regression which was not caught in normal desktop test runs.
26967	area-System.Net	"HttpClient PostAsync throws exception ""The server returned an invalid or unrecognized response"" when using linux container"	"When I ran following code in Windows or Visual Studio, it worked fine.     ```c#  var httpClientHander = new HttpClientHandler() { AutomaticDecompression = DecompressionMethods.Deflate | DecompressionMethods.GZip };    using (var client = new HttpClient(httpClientHander))  {      client.DefaultRequestHeaders.Add(""Authorization"", $""Basic {_authorizationHeaderValue}"");      var soapMessage = CreateSoapRequestForGetDocument();      using (var response = await client.PostAsync(_options.Value.BaseUri, new StringContent(soapMessage, Encoding.UTF8, ""text/xml"")))      {          documentResponse = await response.Content.ReadAsStringAsync();      }  }  ```    However, when I ran it with docker using Linux container, I got this error:    ```  System.Net.Http.HttpRequestException: The server returned an invalid or unrecognized response.  at System.Net.Http.CurlResponseHeaderReader.ReadHeader(String& headerName, String& headerValue)  at System.Net.Http.CurlHandler.MultiAgent.CurlReceiveHeadersCallback(IntPtr buffer, UInt64 size, UInt64 nitems, IntPtr context)  --- End of stack trace from previous location where exception was thrown ---  at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  ```    I inspected the response via Fiddler and the raw response is like this:    ```  > HTTP/1.1 200 OK  Date: Wed, 07 Feb 2018 21:02:57 GMT  Server: Web Server  Vary: Accept-Encoding  X-Robots-Tag: noindex  Keep-Alive: timeout=5, max=100  Connection: Keep-Alive  Content-Type: multipart/related; type=""application/xop+xml""; start=""<soap.xml@xfire.codehaus.org>""; start-info=""text/xml"";  boundary=""----=_Part_166_1126302715.1518037377448""  Content-Length: 2488  ------=_Part_166_1126302715.1518037377448  Content-Type: application/xop+xml; charset=UTF-8; type=""text/xml""  Content-Transfer-Encoding: 8bit  Content-ID: <soap.xml@xfire.codehaus.org>  <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""><soap:Body><ns1:getDocumentResponse xmlns:ns1=""http://www.test.com/ws/integration""><ns1:Document xmlns:ns2=""http://www.w3.org/2004/11/xmlmime"" ns2:contentType=""text/xml; charset=UTF-8""><Include xmlns=""http://www.w3.org/2004/08/xop/include"" href=""cid:1518037377448449414076338@http://www.w3.org/2001/XMLSchema""/></ns1:Document></ns1:getDocumentResponse></soap:Body></soap:Envelope>  ------=_Part_166_1126302715.1518037377448  Content-Type: text/xml; charset=UTF-8  Content-Transfer-Encoding: binary  Content-ID: <1518037377448449414076338@http://www.w3.org/2001/XMLSchema>  <Document xmlns=""http://www.test.com/ws/integration"">  </Document>  ------=_Part_166_1126302715.1518037377448--  ```    I have tried to use HttpWebRequest, WebClient or RestSharp and I got the same error message from all of them.     ## Steps to reproduce  Call post async method with HttpClient in docker Linux container    ## Expected behavior  Get the SOAP response (Works fine on Windows).    ## Actual behavior  An exception was thrown    ## Environment data  Product Information: Windows 10  Version: .NET Core 2.0 / .NET Standard 2.0  Docker: Community Edition Version 17.12.0-ce-win47 (15139)    [EDIT] Format code sample and logs/stacks, add syntax highlighting by @karelz"
26966	area-System.Console	System.Console fails with ncurses 6.1	Released on Jan 27, 2018 - Announcement https://www.gnu.org/software/ncurses/    Original report: https://bugs.archlinux.org/task/57260    ```  MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.  System.InvalidOperationException: The terminfo database is invalid.  at System.TermInfo.Database..ctor(String term, Byte[] data)  at System.TermInfo.Database.ReadDatabase(String term, String directoryPath)  at System.TermInfo.Database.ReadDatabase(String term)  at System.TermInfo.Database.ReadActiveDatabase()  at System.ConsolePal.TerminalFormatStrings.<>c.<.cctor>b__27_0()  at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)  at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)  at System.Lazy`1.CreateValue()  at System.ConsolePal.EnsureInitializedCore()  at System.ConsolePal.ControlCHandlerRegistrar.Register()  at System.Console.add_CancelKeyPress(ConsoleCancelEventHandler value)  at Microsoft.Build.CommandLine.MSBuildApp.Execute(String[] commandLine) in E:\A\_work\17\s\src\MSBuild\XMake.cs:line 526    Unhandled Exception: System.InvalidOperationException: The terminfo database is invalid.  at System.TermInfo.Database..ctor(String term, Byte[] data)  at System.TermInfo.Database.ReadDatabase(String term, String directoryPath)  at System.TermInfo.Database.ReadDatabase(String term)  at System.TermInfo.Database.ReadActiveDatabase()  at System.ConsolePal.TerminalFormatStrings.<>c.<.cctor>b__27_0()  at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)  at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)  at System.Lazy`1.CreateValue()  at System.ConsolePal.EnsureInitializedCore()  at System.ConsolePal.ControlCHandlerRegistrar.Register()  at System.Console.add_CancelKeyPress(ConsoleCancelEventHandler value)  at Microsoft.Build.CommandLine.MSBuildApp.Execute(String[] commandLine) in E:\A\_work\17\s\src\MSBuild\XMake.cs:line 748  at Microsoft.Build.CommandLine.MSBuildApp.Main(String[] args) in E:\A\_work\17\s\src\MSBuild\XMake.cs:line 215  ```
26965	area-System.Data	Crash in SqlConnection.Close() when using TransactionScope on linux.	"I'm using SqlClient 4.5.0-preview1-26207-04 in netcoreapp2.0.    ```  .NET Command Line Tools (2.0.0)    Product Information:   Version:            2.0.0   Commit SHA-1 hash:  cdcd1928c9    Runtime Environment:   OS Name:     centos   OS Version:  7   OS Platform: Linux   RID:         centos.7-x64   Base Path:   /usr/share/dotnet/sdk/2.0.0/    Microsoft .NET Core Shared Framework Host      Version  : 2.0.0    Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d  ```    The following snippet would crash on the above machine (removed some code for brevity). Works without issues on Windows.    ```c#  using (var txscope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))                  using (var cn = _dBProvider.GetWriteConnection())                  {                      await cn.OpenAsync();                        if (cmd.RecordCertificationStatus)                      {                          await cn.ExecuteAsync(@""INSERT INTO (...) (@iduser, @idtitle, @value, getdate()); "",                               new { @iduser = cmd.SubId, @idtitle=cmd.EntityId, @value = cmd.Model.IsCertified });                      }                      await cn.ExecuteAsync(sql, data);                      txscope.Complete();                  }  ```      Both statements are inserts. Stacktrace is below:    ```   ""System.NullReferenceException: Object reference not set to an instance of an object.                  at System.Data.ProviderBase.DbConnectionPool.DeactivateObject(DbConnectionInternal obj)                  at System.Data.ProviderBase.DbConnectionPool.PutObject(DbConnectionInternal obj, Object owningObject)                  at System.Data.ProviderBase.DbConnectionInternal.CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory)                  at System.Data.SqlClient.SqlConnection.Close()                  at System.Data.SqlClient.SqlConnection.Dispose(Boolean disposing)                  at System.ComponentModel.Component.Dispose()                  at ...TitleUpdate.Handler.<HandleCore>d__2.MoveNext() in ...TitleUpdate.cs:line 189                  --- End of stack trace from previous location where exception was thrown ---                  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()                  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)                  at MediatR.Internal.RequestHandlerWrapperImpl`1.<>c__DisplayClass0_0.<<Handle>g__Handler0>d.MoveNext()                  --- End of stack trace from previous location where exception was thrown ---                  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()                  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)                  at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()                  at ...ValidationBehavior`2.<Handle>d__2.MoveNext() in ...ValidationBehavior.cs:line 34                  --- End of stack trace from previous location where exception was thrown ---                  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()                  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)                  at ....TitlesController.<Update>d__5.MoveNext() in TitleController.cs:line 98                  --- End of stack trace from previous location where exception was thrown ---                  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()                  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)                  at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeActionMethodAsync>d__12.MoveNext()                  --- End of stack trace from previous location where exception was thrown ---                  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()                  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)                  at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeNextActionFilterAsync>d__10.MoveNext()                  --- End of stack trace from previous location where exception was thrown ---                  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()                  at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)                  at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)                  at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeInnerFilterAsync>d__14.MoveNext()                  --- End of stack trace from previous location where exception was thrown ---                  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()                  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)                  at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextExceptionFilterAsync>d__23.MoveNext()""  ```"
26964	area-System.Net	Expose SocketsHttpHandler	- Renames ManagedHandler to SocketsHttpHandler  - Moves a bunch of files around accordingly  - Updates System.Net.WebSockets.Client to use SocketsHttpHandler directly  - Updates System.Net.Http's tests with a reflection-based rather than TLS-based method for instantiating an HttpClientHandler backed by a SocketsHttpHandler.  - Adds some more tests    cc: @geoffkizer, @davidsh, @Priya91, @wfurt, @karelz   Closes https://github.com/dotnet/corefx/issues/23166  Closes https://github.com/dotnet/corefx/issues/26895  Closes https://github.com/dotnet/corefx/issues/26960
26963	area-Infrastructure	Add TestUtilities NuGet package	To be consumed by CoreRT in connection with the work done in https://github.com/dotnet/corert/pull/5329.     cc @joperezr         
26962	area-System.Net	DO NOT MERGE: test HttpClient cookie handling	
26961	area-System.Security	Support for RFC 3161 cryptographic timestamps with RFC 5816 additions	"This change adds API to inspect, request, and create timestamp tokens in accordance with IETF RFC 3161 (Internet X.509 Public Key Infrastructure Time-Stamp Protocol (TSP)).  The validation layer includes support for IETF RFC 5816 (ESSCertIDv2 Update for RFC 3161).    Unlike the Win32 CryptRetrieveTimeStamp, this API does not provide ""Time-Stamp Protocol via HTTP"" functionality.  Instead it provides enough of the processing logic to enable a client to do the HTTP(S) request using whatever preferred technology they desire, or to implement any of the other protocols (email, file, sockets, or a custom solution) as their application sees fit.    Rfc3161TimestampRequest.CreateForSignerInfo and Rfc3161TimestampToken.VerifyForSignerInfo provide an accelerated path for IETF RFC 3161 Appendix A (Signature Time-stamp attribute using CMS).    References:  * https://tools.ietf.org/html/rfc3161  * https://tools.ietf.org/html/rfc5816    Fixes #24524."
26960	area-System.Net	WebSocketProtocolTests causing failures in NETFX Outerloop	"NETFX Outerloop test runs have been failing for a few weeks now with the following error:  ```  16:24:49 Build FAILED.  16:24:49   16:24:49 D:\j\workspace\windows-TGrou---bb3e71cd\Tools\tests.targets(492,5): warning :    System.Net.WebSockets.WebSocketProtocol.Tests  Total: 7, Errors: 0, Failed: 2, Skipped: 0, Time: 1.331s [D:\j\workspace\windows-TGrou---bb3e71cd\src\System.Net.WebSockets.WebSocketProtocol\tests\System.Net.WebSockets.WebSocketProtocol.Tests.csproj]  16:24:49 D:\j\workspace\windows-TGrou---bb3e71cd\Tools\tests.targets(492,5): warning MSB3073: The command ""D:\j\workspace\windows-TGrou---bb3e71cd\bin/tests/System.Net.WebSockets.WebSocketProtocol.Tests/netfx-Windows_NT-Release-x86//RunTests.cmd D:\j\workspace\windows-TGrou---bb3e71cd\bin/testhost/netfx-Windows_NT-Release-x86/"" exited with code 1. [D:\j\workspace\windows-TGrou---bb3e71cd\src\System.Net.WebSockets.WebSocketProtocol\tests\System.Net.WebSockets.WebSocketProtocol.Tests.csproj]  16:24:49 D:\j\workspace\windows-TGrou---bb3e71cd\Tools\tests.targets(500,5): error : One or more tests failed while running tests from 'System.Net.WebSockets.WebSocketProtocol.Tests' please check D:\j\workspace\windows-TGrou---bb3e71cd\bin/tests/System.Net.WebSockets.WebSocketProtocol.Tests/netfx-Windows_NT-Release-x86/testResults.xml for details! [D:\j\workspace\windows-TGrou---bb3e71cd\src\System.Net.WebSockets.WebSocketProtocol\tests\System.Net.WebSockets.WebSocketProtocol.Tests.csproj]  16:24:49 D:\j\workspace\windows-TGrou---bb3e71cd\dir.traversal.targets(77,5): error : (No message specified) [D:\j\workspace\windows-TGrou---bb3e71cd\src\tests.builds]  ```  There have been ~200 runs that have failed at the same point. As far as I can tell the issue first occurred on January 18th. Based on that date and an offline discussion with the team I think the issue was probably introduced by PR #26429.     You can find a few instances of failed runs here: [1](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_true_prtest/38/console), [2](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_true_prtest/34/console), [3](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_true_prtest/37/console)    cc: @Priya91 "
26959	area-System.Runtime	Re-evaluate default buffer size for getpw native calls	By default, we are allocating 1K of memory on the stack as the first buffer to use in getpwnam_r and getpwuid_r.    https://github.com/dotnet/corefx/blob/bfac45af5dddcbd70b6935fcf92b4b8755f3cd1c/src/Common/src/System/IO/PersistedFiles.Unix.cs#L100    https://github.com/dotnet/corefx/blob/6f5ce856e9f40a7d247c241a6bb916fc546045ff/src/System.Runtime.Extensions/src/System/Environment.Unix.cs#L371    https://github.com/dotnet/corefx/blob/426e1c72a0dbda1aece127ec5f56696dc465d74b/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs#L632    We should re-evaluate if this is too large of a buffer to start with on the stack, as it may be too large for what is necessary.    See https://github.com/dotnet/corefx/pull/26945/files/55c360ff0e62b30814a085f079304a126dab9d21#diff-015aad2514de8320cbfe19ed2b8ee9a7
26957	area-System.Net	Validate ClientWebSocket wss connections work through http proxies	After https://github.com/dotnet/corefx/pull/26878 is merged, validate (and ideally add automated tests) that ClientWebSocket's proxy support works when using wss connections.  And if it doesn't, fix it.
26956	area-System.Numerics	Add Quaternion.Divide(Quaternion, float)	I noticed that Quaternion.Divide Method has no overload to dived a quaternion by a scalar value, unlike the Multiply method! so I suggest to add it!  I used this:  ```  Dim Q1 = New Quaternion(1, -1, 2, -4)  Dim Q2 = New Quaternion(-1, 1, -2, -4) * (1 / Q1.LengthSquared())  ```    Edit:  After looking at the Inverse Methode source code, it appears it is the Reciprocal Method but with a confusing name! Inverse in math can mean addative Inverse  or multiplicative inverse. SIMD-enabled types are not consistant with naming conventions of .net. One odd examole is implementing the Length of these types as a method not a property! I expected to find a Quaternion.Reciprocal as there is a Complex.Reciprocal, but found an Inverse method instead. Having a consistant naming convention makes new features easy to learn and thier methods names easy to remember.  Also I think many of static members need to be instance members.
26954	area-System.Runtime	Proposal: TryForSufficientStack method to support stackalloc usage	"_From @kkokosa on February 8, 2018 12:8_  Due to changes in C# 7.2 and Span, more and more `stackalloc `usages may become popular like:    `Span<byte> span = stackalloc byte[1000];`    However, this call will end up with unrecoverable `StackOverflowException `if there is not enough stack space left. We can do nothing in such situation which makes this approach not useful at some point. It is now just completely unreliable to guess what `stackalloc `size may end up with such a catastrophe.    @jkotas pointed out in #14675 that `RuntimeHelpers.EnsureSufficientExecutionStack` is a reliable solution for handling stack overflow in general but as MSDN says, this method ""_ensures that the remaining stack space is large enough to execute the average .NET Framework function_"". However, probing for _average_ .NET framework function is not very helpful as `stackalloc` makes it not average for sure.     I propose to add a new helper method which gives at least some clue whether our `stackalloc `may end up with `StackOverflowException`:    `public static bool RuntimeHelpers.TryForSufficientStack(long size)`    I believe returning `bool` instead of throwing an exception (like `InsufficientExecutionStackException` from above method) is better because `stackalloc` is most probably used in hot paths already and adding exception handling there is rather undesirable.    As far as I understand this method seems to be quite simple in terms of implementation as all necessary data are there already. My naive implementation proposal:    ```  FCIMPL1(FC_BOOL_RET, ReflectionInvocation::TryForSufficientStack, INT64 size)  {      FCALL_CONTRACT;        Thread *pThread = GetThread();        UINT_PTR current = reinterpret_cast<UINT_PTR>(&pThread);      UINT_PTR limit = reinterpret_cast<UINT_PTR>(pThread->GetCachedStackLimit());        FC_RETURN_BOOL(current >= (limit + size));  }  FCIMPLEND  ```    PS. I am not sure whether stack guard size should be taken into consideration here or not...   _Copied from original issue: dotnet/coreclr#16277_"
26952	area-System.IO	System.IO.IOException: 'Entries cannot be opened multiple times in Update mode.'	"I am moving an application from .net to core.  When I run core version I got System.IO.IOException: 'Entries cannot be opened multiple times in Update mode.'    I use System.IO.Packaging library to create packages.      ```csharp   Package package = Package.Open(packageFile, System.IO.FileMode.OpenOrCreate, System.IO.FileAccess.ReadWrite);    AddFile(package, folder, filePath1, mimeType1, id1, reletionType);    AddProperties(package);    AddCoreAndHash(package);      package.Close();  ```    Here is the AddProperties function:    ```csharp  private static void AddProperties(Package package)  {              package.PackageProperties.Subject = ""Subject"";              package.PackageProperties.Creator = ""Creator"";  }  ```  After this I call the AddCoreAndHash function:  ```csharp  private static void AddCoreAndHash(Package package)  {              package.Flush(); // serialize core properties                var coreRelations = package.GetRelationshipsByType(""http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties"");              if (coreRelations == null || coreRelations.Count() == 0)              {                  throw new ApplicationException(""Missing core relations."");              }              var corePart = package.GetPart(coreRelations.First().TargetUri);              var stream = corePart.GetStream();              stream.Position = 0;              using (var memoryStream = new MemoryStream())              {                  Tools.CopyStream(stream, memoryStream);                  memoryStream.Position = 0;                  byte[] hash = Tools.CalculateHash(memoryStream);                  //... will add hash to package later              }  }  ```  I get error while accessing the stream of corePart.   I have attached sample files to reproduce the issue    [Files.zip](https://github.com/dotnet/corefx/files/1705985/Files.zip)    "
