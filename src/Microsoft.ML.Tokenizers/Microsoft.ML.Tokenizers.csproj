<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;net8.0</TargetFrameworks>
    <Nullable>enable</Nullable>
    <IsPackable>true</IsPackable>
    <PackageDescription>Microsoft.ML.Tokenizers contains the implmentation of the tokenization used in the NLP transforms.</PackageDescription>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>

  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
    <Compile Remove="Utils/Helpers.netcoreapp.cs" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFramework)' != 'netstandard2.0'">
    <Compile Remove="Utils/Helpers.netstandard.cs" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Google.Protobuf" Version="$(GoogleProtobufVersion)" />
    <PackageReference Include="System.Text.Json" Version="$(SystemTextJsonVersion)" />
  </ItemGroup>

  <UsingTask TaskName="CompressFile"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
    <ParameterGroup>
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
			<![CDATA[
        foreach(var file in Files)
        {
            using var sourceStream = File.OpenRead(file.GetMetadata("FullPath"));
            using var destStream = new DeflateStream(File.Create(file.GetMetadata("Destination")), CompressionLevel.Optimal);
            using var streamWriter = new StreamWriter(destStream);

            string line;
            int destLineNumber = 0;
            using StreamReader reader = new StreamReader(sourceStream);

            while ((line = reader.ReadLine()) != null)
            {
                if (line.Length == 0) { continue; }
                int index = line.IndexOf(' ');

                if (index <= 0 || index == line.Length - 1 || !int.TryParse(line.Substring(index + 1), out int id) || id < destLineNumber)
                {
                    Log.LogError($"Invalid format in the file {file.GetMetadata("FullPath")} line {line}");
                    break;
                }

                while (destLineNumber < id)
                {
                    // ensure id always aligns with the line number
                    streamWriter.WriteLine(string.Empty);
                    destLineNumber++;
                }

                destLineNumber++;

                streamWriter.WriteLine(line.Substring(0, index));
            }
        }
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <ItemGroup>
    <!--
      The following files are compressed using the DeflateStream and embedded as resources in the assembly.
      The files are downloaded from the following sources and compressed to the Destination.
        1. cl100k_base.tiktoken: https://openaipublic.blob.core.windows.net/encodings/cl100k_base.tiktoken
        2. gpt2.tiktoken:        https://pythia.blob.core.windows.net/public/encoding/gpt2.tiktoken
        3. p50k_base.tiktoken:   https://openaipublic.blob.core.windows.net/encodings/p50k_base.tiktoken
        4. r50k_base.tiktoken:   https://openaipublic.blob.core.windows.net/encodings/r50k_base.tiktoken

      These files under MIT copyright license https://github.com/openai/tiktoken/blob/main/LICENSE

      Prior to compressing the files, we modify their content to eliminate the ranks, thus reducing the file size,
      since the rank corresponds to the line number in the file. For the file p50k_base.tiktoken,
      we introduce empty lines to replace any missing ranks, ensuring that the rank consistently aligns with the line number.
      Take note of the empty line at number 50,257 in the file p50k_base.tiktoken.
    -->
    <FilesToCompress Include="Data\cl100k_base.tiktoken" Destination="$(IntermediateOutputPath)%(FileName).deflate" />
    <FilesToCompress Include="Data\gpt2.tiktoken" Destination="$(IntermediateOutputPath)%(FileName).deflate" />
    <FilesToCompress Include="Data\p50k_base.tiktoken" Destination="$(IntermediateOutputPath)%(FileName).deflate" />
    <FilesToCompress Include="Data\r50k_base.tiktoken" Destination="$(IntermediateOutputPath)%(FileName).deflate" />
  </ItemGroup>

  <Target Name="TestCompress"
          BeforeTargets="AssignTargetPaths"
          Inputs="@(FilesToCompress)"
          Outputs="@(FilesToCompress->'%(Destination)')">

    <CompressFile Files="@(FilesToCompress)" />
    <ItemGroup>
      <EmbeddedResource Include="@(FilesToCompress->'%(Destination)')" LogicalName="%(FileName)%(Extension).deflate" />
    </ItemGroup>
  </Target>
</Project>
