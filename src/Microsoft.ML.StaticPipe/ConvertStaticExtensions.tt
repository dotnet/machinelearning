<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using Microsoft.ML.Runtime;
using Microsoft.ML.Runtime.Data;
using Microsoft.ML.StaticPipe;

namespace Microsoft.ML.StaticPipe
{
    public static partial class ConvertStaticExtensions
    {
        // Do not edit this file directly. Rather, it is generated out of ConvertStaticExtensions.tt.
        <#
        // Let's skip the time-based types for now.
        foreach (string typeName in new string[] { "string", "double", "sbyte", "short", "int", "long", "byte", "ushort", "uint", "ulong", "bool" }) {
        #>
#region For <#=typeName#> inputs.
        <#
        foreach (string columnKind in new string[] { "Scalar", "Vector", "VarVector" }) {
        string returnType="";
        string convertTo="";
        switch(columnKind)
        {
             case "Scalar":
                 returnType = "Float column.";
                 convertTo = "float";
             break;
             case "Vector":
                 returnType = "Column with array of floats.";
                 convertTo = "array of floats";
             break;
             case "VarVector":
                 returnType = "Column with variable array of floats.";
                 convertTo = "variable array of floats";
             break;
        }
        #>
/// <summary>
        /// Convert to <#=convertTo#>.
        /// </summary>
        /// <param name="input">The input column.</param>
        /// <returns ><#=returnType#></returns>
        public static <#=columnKind#><float> ToFloat(this <#=columnKind#><<#=typeName#>> input) => new Impl<#=columnKind#><<#=typeName#>>(Contracts.CheckRef(input, nameof(input)), DataKind.R4);

        <#
        }
        #>
#endregion
        <#
        }
        #>
    }
}