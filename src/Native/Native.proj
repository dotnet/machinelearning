<Project>

  <Import Project="Sdk.props" Sdk="Microsoft.Build.Traversal" />
  <!--
    Typically Sdk.Targets are imported at the end. But if we do that here,
    we won't be able to override the Build target and call build.cmd
    to run CMake builds
  -->
  <Import Project="Sdk.targets" Sdk="Microsoft.Build.Traversal" />

  <!-- Download Nugets for OneDal -->
  <ItemGroup>
    <PackageDownload Include="inteldal.devel.win-x64" Version="[2023.0.0.23189]" />

    <PackageDownload Condition="$([MSBuild]::IsOSPlatform('Linux'))" Include="inteldal.redist.linux-x64" Version="[2023.0.0.23046]" />
    <PackageDownload Condition="$([MSBuild]::IsOSPlatform('Linux'))" Include="inteltbb.devel.linux" Version="[2021.7.1.15005]" />

    <PackageDownload Condition="$([MSBuild]::IsOSPlatform('osx'))" Include="inteldal.redist.osx-x64" Version="[2023.0.0.22995]" />
    <PackageDownload Condition="$([MSBuild]::IsOSPlatform('osx'))" Include="inteltbb.devel.osx" Version="[2021.7.1.14939]" />

    <PackageDownload Condition="'$(OS)' == 'Windows_NT'" Include="inteldal.redist.win-x64" Version="[2023.0.0.23189]" />
    <PackageDownload Condition="'$(OS)' == 'Windows_NT'" Include="inteltbb.redist.win" Version="[2021.7.1.15305]" />
    <PackageDownload Condition="'$(OS)' == 'Windows_NT'" Include="inteltbb.devel.win" Version="[2021.7.1.15305]" />
  </ItemGroup>

  <PropertyGroup>
    <!-- versioning.targets will import this file, so don't import it again -->
    <DisableImportVersioningProps>true</DisableImportVersioningProps>
    <!-- Use this flag to ensure native assets take stable version -->
    <UseStableVersionForNativeAssets>true</UseStableVersionForNativeAssets>

    <StripNativeSymbols Condition="'$(StripNativeSymbols)' == '' and '$(Configuration)' == 'Release'">True</StripNativeSymbols>
    <IntermediateOutputPath>$(ArtifactsObjDir)$(MSBuildProjectName)\$(TargetArchitecture).$(Configuration)\</IntermediateOutputPath>
  </PropertyGroup>

  <!-- Target that builds all the native binaries in the Native folder -->
  <Target Name="Build" DependsOnTargets="BuildNativeUnix;BuildNativeWindows;PreparePackageAssets" />

  <PropertyGroup>
    <PlaceholderFile>$(RepoRoot)eng\pkg\_._</PlaceholderFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
    <GenerateVersionSourceFile>true</GenerateVersionSourceFile>
    <NativeVersionSourceFile>$(IntermediateOutputPath)version.c</NativeVersionSourceFile>
  </PropertyGroup>

  <PropertyGroup  Condition="'$(OS)' == 'Windows_NT'">
    <GenerateNativeVersionInfo>true</GenerateNativeVersionInfo>
    <NativeVersionFile>$(IntermediateOutputPath)_version.h</NativeVersionFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
    <NonArmOnWindows Condition="'$(TargetArchitecture)' != 'arm64' And '$(TargetArchitecture)' != 'arm'">true</NonArmOnWindows>
  </PropertyGroup>

  <PropertyGroup>
    <NativeLibPrefix Condition="'$(OS)' != 'Windows_NT'">lib</NativeLibPrefix>
    <NativeLibExtension Condition="'$(OS)' == 'Windows_NT'">.dll</NativeLibExtension>
    <NativeLibExtension Condition="'$(OS)' != 'Windows_NT'">.so</NativeLibExtension>
    <NativeLibExtension Condition="$([MSBuild]::IsOSPlatform('osx'))">.dylib</NativeLibExtension>

    <NativeLibSymbolExtension Condition="'$(OS)' == 'Windows_NT'">.pdb</NativeLibSymbolExtension>
    <NativeLibSymbolExtension Condition="'$(OS)' != 'Windows_NT'">.so.dbg</NativeLibSymbolExtension>
    <NativeLibSymbolExtension Condition="$([MSBuild]::IsOSPlatform('osx'))">.dylib.dwarf</NativeLibSymbolExtension>
  </PropertyGroup>

  <PropertyGroup>
    <OneDalLibExtension Condition="'$(OS)' == 'Windows_NT'">.$(OneDalMajorBinaryVersion)$(NativeLibExtension)</OneDalLibExtension>
    <OneDalLibExtension Condition="'$(OS)' != 'Windows_NT'">$(NativeLibExtension).$(OneDalMajorBinaryVersion).$(OneDalMinorBinaryVersion)</OneDalLibExtension>
    <OneDalLibExtension Condition="$([MSBuild]::IsOSPlatform('osx'))">.$(OneDalMajorBinaryVersion).$(OneDalMinorBinaryVersion)$(NativeLibExtension)</OneDalLibExtension>

    <OneDalLibDir Condition="'$(OS)' == 'Windows_NT'">redist\intel64</OneDalLibDir>
    <OneDalLibDir Condition="'$(OS)' != 'Windows_NT'">lib\intel64</OneDalLibDir>
    <OneDalLibDir Condition="$([MSBuild]::IsOSPlatform('osx'))">lib</OneDalLibDir>
  </PropertyGroup>

  <PropertyGroup>
    <TbbSystem Condition="'$(OS)' == 'Windows_NT'">win</TbbSystem>
    <TbbSystem Condition="'$(OS)' != 'Windows_NT'">linux</TbbSystem>
    <TbbSystem Condition="$([MSBuild]::IsOSPlatform('osx'))">osx</TbbSystem>

    <TbbPkgType Condition="'$(OS)' == 'Windows_NT'">redist</TbbPkgType>
    <TbbPkgType Condition="'$(OS)' != 'Windows_NT'">devel</TbbPkgType>

    <TbbLibrary Condition="'$(OS)' == 'Windows_NT'">tbb12.dll</TbbLibrary>
    <TbbLibrary Condition="'$(OS)' != 'Windows_NT'">libtbb.so.12</TbbLibrary>
    <TbbLibrary Condition="$([MSBuild]::IsOSPlatform('osx'))">libtbb.12.dylib</TbbLibrary>

    <TbbMallocLibrary Condition="'$(OS)' == 'Windows_NT'">tbbmalloc.dll</TbbMallocLibrary>
    <TbbMallocLibrary Condition="'$(OS)' != 'Windows_NT'">libtbbmalloc.so.2</TbbMallocLibrary>
    <TbbMallocLibrary Condition="$([MSBuild]::IsOSPlatform('osx'))">libtbbmalloc.2.dylib</TbbMallocLibrary>
  </PropertyGroup>

  <Target Name="BuildNativeUnix"
          Condition="'$(OS)' != 'Windows_NT'"
          DependsOnTargets="GenerateNativeVersionFile">
    <PropertyGroup>
      <StripArgs Condition="'$(StripNativeSymbols)' == 'True'">--stripSymbols</StripArgs>
      <BuildArgs>--configuration $(Configuration) --arch $(TargetArchitecture) $(StripArgs)</BuildArgs>
    </PropertyGroup>

    <!-- <PropertyGroup Condition="!$(TargetArchitecture.StartsWith('arm'))"> -->
    <PropertyGroup Condition="'$(TargetArchitecture)' == 'x64'">
      <BuildArgs>$(BuildArgs) --mkllibpath $(NuGetPackageRoot)mlnetmkldeps/$(MlNetMklDepsVersion)/runtimes/$(PackageRid)/native</BuildArgs>
      <!-- mkllibrpath is used as rpath on macOS by binaries such as SymSDGNative and MklProxyNative to locate mkl library.
           We are shipping 2 native assemblies in different nuget packages, and one has a reference on the other and MacOS needs to have
           the rpath in the assembly to where it should load the referenced assembly and since .NET Core can run assemblies out of a NuGet cache,
           we need to add the NuGet cache relative location. -->
      <BuildArgs Condition="$([MSBuild]::IsOSPlatform('osx'))">$(BuildArgs) --mkllibrpath ../../../../../microsoft.ml.mkl.redist/$(Version)/runtimes/$(PackageRid)/native</BuildArgs>
      <BuildArgs>$(BuildArgs) --onedalredistpath $(NuGetPackageRoot)inteldal.redist.$(PackageRid)/$(OneDalPkgVersion)/build/native/daal/latest</BuildArgs>
      <BuildArgs>$(BuildArgs) --onedaldevelpath $(NuGetPackageRoot)inteldal.devel.win-x64/$(OneDalDevelPkgVersion)/build/native/daal/latest</BuildArgs>
      <BuildArgs>$(BuildArgs) --onetbbredistpath $(NuGetPackageRoot)inteltbb.devel.$(TbbSystem)/$(OneTbbPkgVersion)/runtimes/$(PackageRid)/native</BuildArgs>
    </PropertyGroup>

    <Message Text="$(MSBuildProjectDirectory)/build.sh $(BuildArgs)" Importance="High"/>
    <Exec Command="&quot;$(MSBuildProjectDirectory)/build.sh&quot; $(BuildArgs)" />

  </Target>

  <Target Name="BuildNativeWindows"
          Condition="'$(OS)' == 'Windows_NT'"
          DependsOnTargets="GenerateNativeVersionFile">

    <PropertyGroup>
      <BuildArgs>$(Configuration) $(TargetArchitecture) --mkllibpath $(NuGetPackageRoot)mlnetmkldeps\$(MlNetMklDepsVersion)\runtimes\$(PackageRid)\native</BuildArgs>
      <BuildArgs Condition="'$(TargetArchitecture)' == 'x64'">$(BuildArgs) --onedaldevelpath $(NuGetPackageRoot)inteldal.devel.win-x64\$(OneDalDevelPkgVersion)\build\native\daal\latest</BuildArgs>
      <BuildArgs Condition="'$(TargetArchitecture)' == 'x64'">$(BuildArgs) --onetbbdevelpath $(NuGetPackageRoot)inteltbb.devel.$(TbbSystem)\$(OneTbbPkgVersion)\lib\native\$(PackageRid)</BuildArgs>
    </PropertyGroup>

    <!-- Run script that invokes Cmake to create VS files, and then calls msbuild to compile them -->
    <Message Text="$(MSBuildProjectDirectory)\build.cmd $(BuildArgs)" Importance="High"/>
    <Exec Command="&quot;$(MSBuildProjectDirectory)\build.cmd&quot; $(BuildArgs)" />

  </Target>

  <Target Name="PreparePackageAssets">

    <!-- Copy MklImports into the native assets folder, so it can be treated like a regularly built native assembly - packaged into our NuGet packages, and used by tests. -->
    <Message Text="PreparePackageAssets" Importance="High"/>

    <Copy Condition="'$(TargetArchitecture)' != 'arm64' And '$(TargetArchitecture)' != 'arm'"
          SourceFiles="$(NuGetPackageRoot)mlnetmkldeps\$(MlNetMklDepsVersion)\runtimes\$(PackageRid)\native\$(NativeLibPrefix)MklImports$(NativeLibExtension)"
          DestinationFolder="$(NativeAssetsBuiltPath)" />

    <!-- Copy MklImports pdb over -->
    <Copy Condition="'$(NonArmOnWindows)' == 'true'" SourceFiles="$(NuGetPackageRoot)mlnetmkldeps\$(MlNetMklDepsVersion)\runtimes\$(PackageRid)\native\MklImports.pdb"
          DestinationFolder="$(NativeAssetsBuiltPath)" />

    <Copy Condition="'$(NonArmOnWindows)' == 'true'" SourceFiles="$(NuGetPackageRoot)mlnetmkldeps\$(MlNetMklDepsVersion)\runtimes\$(PackageRid)\native\libiomp5md$(NativeLibExtension)"
          DestinationFolder="$(NativeAssetsBuiltPath)" />

    <!-- Copy oneDAL -->
    <Copy Condition="'$(TargetArchitecture)' == 'x64'"
          SourceFiles="$(NuGetPackageRoot)inteldal.redist.$(PackageRid)\$(OneDalPkgVersion)\build\native\daal\latest\$(OneDalLibDir)\$(NativeLibPrefix)onedal_core$(OneDalLibExtension)"
          DestinationFolder="$(NativeAssetsBuiltPath)" />
    <Copy Condition="'$(TargetArchitecture)' == 'x64'"
          SourceFiles="$(NuGetPackageRoot)inteldal.redist.$(PackageRid)\$(OneDalPkgVersion)\build\native\daal\latest\$(OneDalLibDir)\$(NativeLibPrefix)onedal_core$(OneDalLibExtension)"
          DestinationFolder="$(PackageAssetsPath)\Microsoft.ML.OneDal\runtimes\$(PackageRid)\native" />

    <Copy Condition="'$(TargetArchitecture)' == 'x64'"
          SourceFiles="$(NuGetPackageRoot)inteldal.redist.$(PackageRid)\$(OneDalPkgVersion)\build\native\daal\latest\$(OneDalLibDir)\$(NativeLibPrefix)onedal_thread$(OneDalLibExtension)"
          DestinationFolder="$(NativeAssetsBuiltPath)" />
    <Copy Condition="'$(TargetArchitecture)' == 'x64'"
          SourceFiles="$(NuGetPackageRoot)inteldal.redist.$(PackageRid)\$(OneDalPkgVersion)\build\native\daal\latest\$(OneDalLibDir)\$(NativeLibPrefix)onedal_thread$(OneDalLibExtension)"
          DestinationFolder="$(PackageAssetsPath)\Microsoft.ML.OneDal\runtimes\$(PackageRid)\native" />

    <!-- Copy oneTBB (dependency of oneDAL) -->
    <Copy Condition="'$(TargetArchitecture)' == 'x64'"
          SourceFiles="$(NuGetPackageRoot)inteltbb.$(TbbPkgType).$(TbbSystem)\$(OneTbbPkgVersion)\runtimes\$(PackageRid)\native\$(TbbLibrary)"
          DestinationFolder="$(NativeAssetsBuiltPath)" />
    <Copy Condition="'$(TargetArchitecture)' == 'x64'"
          SourceFiles="$(NuGetPackageRoot)inteltbb.$(TbbPkgType).$(TbbSystem)\$(OneTbbPkgVersion)\runtimes\$(PackageRid)\native\$(TbbLibrary)"
          DestinationFolder="$(PackageAssetsPath)\Microsoft.ML.OneDal\runtimes\$(PackageRid)\native" />

    <Copy Condition="'$(TargetArchitecture)' == 'x64'"
          SourceFiles="$(NuGetPackageRoot)inteltbb.$(TbbPkgType).$(TbbSystem)\$(OneTbbPkgVersion)\runtimes\$(PackageRid)\native\$(TbbMallocLibrary)"
          DestinationFolder="$(NativeAssetsBuiltPath)" />
    <Copy Condition="'$(TargetArchitecture)' == 'x64'"
          SourceFiles="$(NuGetPackageRoot)inteltbb.$(TbbPkgType).$(TbbSystem)\$(OneTbbPkgVersion)\runtimes\$(PackageRid)\native\$(TbbMallocLibrary)"
          DestinationFolder="$(PackageAssetsPath)\Microsoft.ML.OneDal\runtimes\$(PackageRid)\native" />

    <ItemGroup>
      <NativePackageAsset Condition="'$(TargetArchitecture)' != 'arm64' And '$(TargetArchitecture)' != 'arm'"
                          Include="$(NativeAssetsBuiltPath)\$(NativeLibPrefix)CpuMathNative$(NativeLibExtension)"
                          RelativePath="Microsoft.ML.CpuMath\runtimes\$(PackageRid)\nativeassets\netstandard2.0" />
      <NativePackageAsset Include="$(PlaceholderFile)"
                          RelativePath="Microsoft.ML.CpuMath\runtimes\$(PackageRid)\nativeassets\netcoreapp3.1" />
      <NativePackageAsset Include="$(NativeAssetsBuiltPath)\$(NativeLibPrefix)LdaNative$(NativeLibExtension)"
                          RelativePath="Microsoft.ML\runtimes\$(PackageRid)\native" />
      <!-- TODO: once we fix the 4 intel MKL methods, SymSgdNative will need to go back in. -->
      <NativePackageAsset Condition="'$(TargetArchitecture)' != 'arm64' And '$(TargetArchitecture)' != 'arm'"
                          Include="$(NativeAssetsBuiltPath)\$(NativeLibPrefix)SymSgdNative$(NativeLibExtension)"
                          RelativePath="Microsoft.ML.Mkl.Components\runtimes\$(PackageRid)\native" />
      <NativePackageAsset Condition="'$(TargetArchitecture)' != 'arm64' And '$(TargetArchitecture)' != 'arm'"
                          Include="$(NativeAssetsBuiltPath)\$(NativeLibPrefix)MklProxyNative$(NativeLibExtension)"
                          RelativePath="Microsoft.ML.Mkl.Redist\runtimes\$(PackageRid)\native" />
      <NativePackageAsset Include="$(NativeAssetsBuiltPath)\$(NativeLibPrefix)MatrixFactorizationNative$(NativeLibExtension)"
                          RelativePath="Microsoft.ML.Recommender\runtimes\$(PackageRid)\native" />
      <NativePackageAsset Condition="'$(TargetArchitecture)' != 'arm64' And '$(TargetArchitecture)' != 'arm'"
                          Include="$(NativeAssetsBuiltPath)\$(NativeLibPrefix)FastTreeNative$(NativeLibExtension)"
                          RelativePath="Microsoft.ML.FastTree\runtimes\$(PackageRid)\native" />

    <!-- Copy oneDAL -->
    <!--
    <NativePackageAsset Condition="'$(TargetArchitecture)' == 'x64'"
          Include="$(NuGetPackageRoot)inteldal.redist.$(PackageRid)\$(OneDalPkgVersion)\build\native\daal\latest\$(OneDalLibDir)\$(NativeLibPrefix)onedal_core$(OneDalLibExtension)"
          RelativePath="Microsoft.ML.OneDal\runtimes\$(PackageRid)\native" />
    <NativePackageAsset Condition="'$(TargetArchitecture)' == 'x64'"
	  Include="$(NuGetPackageRoot)inteldal.redist.$(PackageRid)\$(OneDalPkgVersion)\build\native\daal\latest\$(OneDalLibDir)\$(NativeLibPrefix)onedal_thread$(OneDalLibExtension)"
          RelativePath="Microsoft.ML.OneDal\runtimes\$(PackageRid)\native" />
	  -->
    <!-- Copy oneTBB (dependency of oneDAL) -->
    <!--
    <NativePackageAsset Condition="'$(TargetArchitecture)' == 'x64'"
          Include="$(NuGetPackageRoot)inteltbb.$(TbbPkgType).$(TbbSystem)\$(OneTbbPkgVersion)\runtimes\$(PackageRid)\native\$(TbbLibrary)"
          RelativePath="Microsoft.ML.OneDal\runtimes\$(PackageRid)\native" />
    <NativePackageAsset Condition="'$(TargetArchitecture)' == 'x64'"
          Include="$(NuGetPackageRoot)inteltbb.$(TbbPkgType).$(TbbSystem)\$(OneTbbPkgVersion)\runtimes\$(PackageRid)\native\$(TbbMallocLibrary)"
          RelativePath="Microsoft.ML.OneDal\runtimes\$(PackageRid)\native" />
	  -->

    </ItemGroup>

    <ItemGroup>
      <NativePackageAsset Condition="('$(OS)' == 'Windows_NT' OR '$(StripNativeSymbols)' == 'True')
                                     AND '%(NativePackageAsset.Identity)' != '$(PlaceholderFile)'"
                          Include="@(NativePackageAsset->'%(RootDir)%(Directory)%(Filename)$(NativeLibSymbolExtension)')" />
    </ItemGroup>

    <ItemGroup>
      <NativePackageAsset Condition="'$(TargetArchitecture)' != 'arm64' And '$(TargetArchitecture)' != 'arm'"
                          Include="$(NativeAssetsBuiltPath)\$(NativeLibPrefix)MklImports$(NativeLibExtension)"
                          RelativePath="Microsoft.ML.Mkl.Redist\runtimes\$(PackageRid)\native" />
      <NativePackageAsset Condition="'$(NonArmOnWindows)' == 'true'"
                          Include="$(NativeAssetsBuiltPath)\MklImports.pdb"
                          RelativePath="Microsoft.ML.Mkl.Redist\runtimes\$(PackageRid)\native" />
      <NativePackageAsset Condition="'$(NonArmOnWindows)' == 'true'" Include="$(NativeAssetsBuiltPath)\libiomp5md$(NativeLibExtension)"
                          RelativePath="Microsoft.ML.Mkl.Redist\runtimes\$(PackageRid)\native" />
      <NativePackageAsset Condition="'$(TargetArchitecture)' == 'x64'"
                          Include="$(NativeAssetsBuiltPath)\$(NativeLibPrefix)OneDalNative$(NativeLibExtension)"
                          RelativePath="Microsoft.ML.OneDal\runtimes\$(PackageRid)\native" />

    </ItemGroup>

    <Copy SourceFiles="@(NativePackageAsset)"
          DestinationFolder="$(PackageAssetsPath)%(NativePackageAsset.RelativePath)" />

  </Target>

  <Target Name="Pack" />
  <Target Name="Test" />

  <ItemGroup>
    <PackageDownload Include="MlNetMklDeps" Version="[$(MlNetMklDepsVersion)]" />
  </ItemGroup>

</Project>
