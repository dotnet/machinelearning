<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="ColumnArithmeticTemplate.ttinclude" #>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

// Generated from Converters.tt. Do not modify directly

using System;
using System.Collections.Generic;

namespace Microsoft.Data.Analysis
{
<#
    foreach (var typeToLevel in primitiveTypeToPrimitivityLevelMap)
    {
        string type = typeToLevel.Key;
        int level = typeToLevel.Value;
        string typeFirstCharUpper = GetCapitalizedPrimitiveTypes(type);
#>
    internal interface I<#=typeFirstCharUpper#>Converter<T>
    {
        <#=type#> Get<#=typeFirstCharUpper#>(T value);
    }
    internal static class <#=typeFirstCharUpper#>Converter<T>
    {
        public static I<#=typeFirstCharUpper#>Converter<T> Instance { get; } = <#=typeFirstCharUpper#>Converter.Get<#=typeFirstCharUpper#>Converter<T>();
    }
    internal static class <#=typeFirstCharUpper#>Converter
    {
        public static I<#=typeFirstCharUpper#>Converter<T> Get<#=typeFirstCharUpper#>Converter<T>()
        {
<#
    foreach (var typeLoop in primitiveTypeToPrimitivityLevelMap)
    {
        int loopLevel = typeLoop.Value;
        if (loopLevel > level)
        {
            continue;
        }
#>
            if (typeof(T) == typeof(<#=typeLoop.Key#>))
            {
<#
                string capitalizedLoopPrimitive = GetCapitalizedPrimitiveTypes(typeLoop.Key);
#>
                return (I<#=typeFirstCharUpper#>Converter<T>)new <#=capitalizedLoopPrimitive#><#=typeFirstCharUpper#>Converter();
            }
<#
    }
#>
            throw new NotSupportedException();
        }
    }
<#
    // Generate the individual type converter classes
    foreach (var typeLoop in primitiveTypeToPrimitivityLevelMap)
    {
        int loopLevel = typeLoop.Value;
        if (loopLevel > level)
        {
            continue;
        }
        string capitalizedLoopPrimitive = GetCapitalizedPrimitiveTypes(typeLoop.Key);
#>
    internal class <#=capitalizedLoopPrimitive#><#=typeFirstCharUpper#>Converter : I<#=typeFirstCharUpper#>Converter<<#=typeLoop.Key#>>
    {
        public <#=type#> Get<#=typeFirstCharUpper#>(<#=typeLoop.Key#> value)
        {
            return (<#=type#>)value;
        }
    }
<#
    }
#>
<#
    }
#>
}
