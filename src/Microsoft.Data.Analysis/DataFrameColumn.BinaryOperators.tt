<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="ColumnArithmeticTemplate.ttinclude" #>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

// Generated from DataFrameColumn.BinaryOperators.tt. Do not modify directly

using System;
using System.Collections.Generic;

namespace Microsoft.Data.Analysis
{
    public abstract partial class DataFrameColumn
    {
<# foreach (MethodConfiguration method in methodConfiguration) { #>
<# if (method.MethodType == MethodType.BinaryScalar) { #>
<# if (method.IsBitwise == true) { #>
        public static DataFrameColumn operator <#=method.Operator#>(DataFrameColumn column, bool value)
        {
            return column.<#=method.MethodName#>(value);
        }

        public static DataFrameColumn operator <#=method.Operator#>(bool value, DataFrameColumn column)
        {
            return column.Reverse<#=method.MethodName#>(value);
        }

<# } else { #>
<# foreach (TypeConfiguration type in typeConfiguration) { #>
<#      if (method.IsNumeric != type.SupportsNumeric) continue; #>
<#      if (method.IsNumeric && type.TypeName == "char") continue; #>
        public static DataFrameColumn operator <#=method.Operator#>(DataFrameColumn column, <#=type.TypeName#> value)
        {
            return column.<#=method.MethodName#>(value);
        }

        public static DataFrameColumn operator <#=method.Operator#>(<#=type.TypeName#> value, DataFrameColumn column)
        {
            return column.Reverse<#=method.MethodName#>(value);
        }

<# } #>

<# } #>
<# } else if (method.MethodType == MethodType.BinaryInt) {#>
        public static DataFrameColumn operator <#=method.Operator#>(DataFrameColumn column, int value)
        {
            return column.<#=method.MethodName#>(value);
        }

<# } else if (method.MethodType == MethodType.Binary) { #>
        public static DataFrameColumn operator <#=method.Operator#>(DataFrameColumn left, DataFrameColumn right)
        {
            return left.<#=method.MethodName#>(right);
        }

<# } #>
<# } #>
    }
}
