<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="ColumnArithmeticTemplate.ttinclude" #>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

// Generated from DataFrameBinaryOperators.tt. Do not modify directly

using System;
using System.Collections.Generic;

namespace Microsoft.Data.Analysis
{
    public partial class DataFrame
    {
<# foreach (MethodConfiguration method in methodConfiguration) { #>
<# if (method.MethodType == MethodType.BinaryScalar) { #>
<# if (method.IsBitwise == true) { #>
        public static DataFrame operator <#=method.Operator#>(DataFrame df, bool value)
        {
            return df.<#=method.MethodName#>(value);
        }

        public static DataFrame operator <#=method.Operator#>(bool value, DataFrame df)
        {
            return df.Reverse<#=method.MethodName#>(value, inPlace: false);
        }

<# } else { #>
<# foreach (TypeConfiguration type in typeConfiguration) { #>
        public static DataFrame operator <#=method.Operator#>(DataFrame df, <#=type.TypeName#> value)
        {
            return df.<#=method.MethodName#>(value);
        }
        
        public static DataFrame operator <#=method.Operator#>(<#=type.TypeName#> value, DataFrame df)
        {
            return df.Reverse<#=method.MethodName#>(value);
        }

<# } #>
<# } #>
<# } else if (method.MethodType == MethodType.BinaryInt) {#>
        public static DataFrame operator <#=method.Operator#>(DataFrame df, int value)
        {
            return df.<#=method.MethodName#>(value);
        }

<# } #>
<# } #>
    }
}
