<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="ColumnArithmeticTemplate.ttinclude" #>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

// Generated from PrimitiveDataFrameColumnArithmetic.tt. Do not modify directly

using System;

namespace Microsoft.Data.Analysis
{
    internal interface IPrimitiveDataFrameColumnArithmetic<T>
        where T : unmanaged
    {
        void HandleOperation(BinaryOperation operation, Span<T> left, Span<byte> leftValidity, ReadOnlySpan<T> right, ReadOnlySpan<byte> rightValidity);

        void HandleOperation(BinaryScalarOperation operation, Span<T> left, T right);
        void HandleOperation(BinaryScalarOperation operation, T left, Span<T> right, ReadOnlySpan<byte> rightValidity);

        void HandleOperation(BinaryIntOperation operation, Span<T> left, int right);

<# foreach (MethodConfiguration method in methodConfiguration) { #>
<# if (method.MethodType == MethodType.Comparison) { #>
        PrimitiveColumnContainer<bool> <#=method.MethodName#>(PrimitiveColumnContainer<T> left, PrimitiveColumnContainer<T> right);
<# } else if (method.MethodType == MethodType.ComparisonScalar) {#>
        PrimitiveColumnContainer<bool> <#=method.MethodName#>(PrimitiveColumnContainer<T> column, T scalar);
<# } #>
<# } #>
    }

    internal class PrimitiveDataFrameColumnArithmetic<T> : IPrimitiveDataFrameColumnArithmetic<T>
        where T : unmanaged
    {
        public static IPrimitiveDataFrameColumnArithmetic<T> Instance { get; } = PrimitiveDataFrameColumnArithmetic.GetArithmetic<T>();

        public virtual void HandleOperation(BinaryOperation operation, Span<T> left, Span<byte> leftValidity, ReadOnlySpan<T> right, ReadOnlySpan<byte> rightValidity)
        {
            if (operation == BinaryOperation.Divide)
            {
                Divide(left, leftValidity, right, rightValidity);
                return;
            }
<# foreach (MethodConfiguration method in methodConfiguration) { #>
<# if (method.MethodType == MethodType.Binary) { #>
<# if (method.MethodName != "Divide") { #>
            else if (operation == BinaryOperation.<#=method.MethodName#>)
                <#=method.MethodName#>(left, right);
<# } #>
<# } #>
<# } #>

            BitmapHelper.ElementwiseAnd(leftValidity, rightValidity, leftValidity);
        }

        public virtual void HandleOperation(BinaryScalarOperation operation, Span<T> left, T right)
        {
            switch (operation)
            {
<# foreach (MethodConfiguration method in methodConfiguration) { #>
<# if (method.MethodType == MethodType.BinaryScalar) { #>
                case BinaryScalarOperation.<#=method.MethodName#>:
                    <#=method.MethodName#>(left, right);
                    break;
<# } #>
<# } #>
            }
        }

        public virtual void HandleOperation(BinaryScalarOperation operation, T left, Span<T> right, ReadOnlySpan<byte> rightValidity)
        {
            if (operation == BinaryScalarOperation.Divide)
            {
                Divide(left, right, rightValidity);
                return;
            }
<# foreach (MethodConfiguration method in methodConfiguration) { #>
<# if (method.MethodType == MethodType.BinaryScalar) { #>
<# if (method.MethodName != "Divide") { #>
            else if (operation == BinaryScalarOperation.<#=method.MethodName#>)
                <#=method.MethodName#>(left, right);
<# } #>
<# } #>
<# } #>
        }

        public virtual void HandleOperation(BinaryIntOperation operation, Span<T> left, int right)
        {
            switch (operation)
            {
<# foreach (MethodConfiguration method in methodConfiguration) { #>
<# if (method.MethodType == MethodType.BinaryInt) { #>
                case BinaryIntOperation.<#=method.MethodName#>:
                    <#=method.MethodName#>(left, right);
                    break;
<# } #>
<# } #>
            }
        }

<# foreach (MethodConfiguration method in methodConfiguration) { #>
<# if (method.MethodType == MethodType.Comparison) { #>
        public virtual PrimitiveColumnContainer<bool> <#=method.MethodName#>(PrimitiveColumnContainer<T> left, PrimitiveColumnContainer<T> right) => throw new NotSupportedException();
<# } #>
<# else if (method.MethodType == MethodType.ComparisonScalar) { #>
        public virtual PrimitiveColumnContainer<bool> <#=method.MethodName#>(PrimitiveColumnContainer<T> column, T scalar) => throw new NotSupportedException();
<# } #>
<# else if (method.MethodType == MethodType.Binary) { #>
<# if (method.MethodName == "Divide") { #>
        public virtual void <#=method.MethodName#>(Span<T> left, Span<byte> leftValidity, ReadOnlySpan<T> right, ReadOnlySpan<byte> rightValidity) => throw new NotSupportedException();
<# } else {#>
        public virtual void <#=method.MethodName#>(Span<T> left, ReadOnlySpan<T> right) => throw new NotSupportedException();
<# } #>
<# } else if (method.MethodType == MethodType.BinaryScalar) { #>
        public virtual void <#=method.MethodName#>(Span<T> left, T scalar) => throw new NotSupportedException();
<# if (method.MethodName == "Divide") { #>
        public virtual void <#=method.MethodName#>(T left, Span<T> right, ReadOnlySpan<byte> rightValidity) => throw new NotSupportedException();
<# } else { #>
        public virtual void <#=method.MethodName#>(T left, Span<T> right) => throw new NotSupportedException();
<# } #>
<# } else if (method.MethodType == MethodType.BinaryInt) { #>
        public virtual void <#=method.MethodName#>(Span<T> left, int right) => throw new NotSupportedException();
<# } #>
<# } #>

    }

    internal static class PrimitiveDataFrameColumnArithmetic
    {
        public static IPrimitiveDataFrameColumnArithmetic<T> GetArithmetic<T>()
            where T : unmanaged
        {
<# foreach (TypeConfiguration type in typeConfiguration) { #>
            <#=GenerateIfStatementHeader(type)#>
                return (IPrimitiveDataFrameColumnArithmetic<T>)new <#=type.ClassPrefix#>Arithmetic();
<# } #>
            throw new NotSupportedException();
        }
    }

<# foreach (TypeConfiguration type in typeConfiguration) { #>
    internal class <#=type.ClassPrefix#>Arithmetic : PrimitiveDataFrameColumnArithmetic<<#=type.TypeName#>>
    {

<# foreach (MethodConfiguration method in methodConfiguration) { #>
<# if (!((method.IsNumeric && !type.SupportsNumeric) || (method.IsBitwise && !type.SupportsBitwise) || (type.UnsupportedMethods.Contains(method.MethodName))) && method.Operator != null) { #>
<# if (method.MethodType == MethodType.Comparison) { #>

        public override PrimitiveColumnContainer<bool> <#=method.MethodName#>(PrimitiveColumnContainer<<#=type.TypeName#>> left, PrimitiveColumnContainer<<#=type.TypeName#>> right)
<# } else if (method.MethodType == MethodType.ComparisonScalar) {#>

        public override PrimitiveColumnContainer<bool> <#=method.MethodName#>(PrimitiveColumnContainer<<#=type.TypeName#>> column, <#=type.TypeName#> scalar)
<# } else if (method.MethodType == MethodType.Binary) { #>
<# if (method.MethodName == "Divide") { #>
        public override void <#=method.MethodName#>(Span<<#=type.TypeName#>> left, Span<byte> leftValidity, ReadOnlySpan<<#=type.TypeName#>> right, ReadOnlySpan<byte> rightValidity)
        {
            for (var i = 0; i < left.Length; i++)
            {
                if (BitmapHelper.IsValid(rightValidity, i))
                    left[i] = (<#=type.TypeName#>)(left[i] <#= method.Operator #> right[i]);
                else
                    BitmapHelper.ClearBit(leftValidity, i);
            }
        }
<# } #>
<# else { #>
        public override void <#=method.MethodName#>(Span<<#=type.TypeName#>> left, ReadOnlySpan<<#=type.TypeName#>> right)
        {
            for (var i = 0; i < left.Length; i++)
                left[i] = (<#=type.TypeName#>)(left[i] <#= method.Operator #> right[i]);
        }
<# } #>
<# } #>
<# else if (method.MethodType == MethodType.BinaryScalar) { #>

        public override void <#=method.MethodName#>(Span<<#=type.TypeName#>> left, <#=type.TypeName#> right)
        {
            for (var i = 0; i < left.Length; i++)
                left[i] = (<#=type.TypeName#>)(left[i] <#= method.Operator #> right);
        }

<# if (method.MethodName == "Divide") { #>
        public override void <#=method.MethodName#>(<#=type.TypeName#> left, Span<<#=type.TypeName#>> right, ReadOnlySpan<byte> rightValidity)
        {
            for (var i = 0; i < right.Length; i++)
            {
                if (BitmapHelper.IsValid(rightValidity, i))
                    right[i] = (<#=type.TypeName#>)(left <#= method.Operator #> right[i]);
            }
        }
<# } #>
<# else { #>
        public override void <#=method.MethodName#>(<#=type.TypeName#> left, Span<<#=type.TypeName#>> right)
        {
            for (var i = 0; i < right.Length; i++)
                right[i] = (<#=type.TypeName#>)(left <#= method.Operator #> right[i]);
        }
<# } #>
<# } #>
<# else if (method.MethodType == MethodType.BinaryInt) { #>

        public override void <#=method.MethodName#>(Span<<#=type.TypeName#>> left, int right)
        {
            for (var i = 0; i < left.Length; i++)
                left[i] = (<#=type.TypeName#>)(left[i] <#= method.Operator #> right);
        }
<# } #>
<# if (method.MethodType != MethodType.Binary && method.MethodType != MethodType.BinaryScalar && method.MethodType != MethodType.BinaryInt) { #>
        {
<# if (method.MethodType == MethodType.Comparison) { #>
            PrimitiveColumnContainer<bool> ret = new PrimitiveColumnContainer<bool>(left.Length);
            long index = 0;
<# } #>
<# if (method.MethodType == MethodType.ComparisonScalar) { #>
            PrimitiveColumnContainer<bool> ret = new PrimitiveColumnContainer<bool>(column.Length);
            long index = 0;
<# } #>
            for (int b = 0; b < <#= method.Op1Name #>.Buffers.Count; b++)
            {
<# if (method.MethodType == MethodType.Comparison) { #>
                var span = <#= method.Op1Name #>.Buffers[b].ReadOnlySpan;
                var otherSpan = <#=method.Op2Name#>.Buffers[b].ReadOnlySpan;
<# } else if (method.MethodType == MethodType.ComparisonScalar){#>
                var span = <#= method.Op1Name #>.Buffers[b].ReadOnlySpan;
<# } else {#>
                var mutableBuffer = <#= method.Op1Name #>.Buffers.GetOrCreateMutable(b);
                var span = mutableBuffer.Span;
<# } #>
                for (int i = 0; i < span.Length; i++)
                {
<# if (method.MethodType == MethodType.Comparison) { #>
                    ret[index++] = (span[i] <#= method.Operator #> otherSpan[i]);
<# } else if (method.MethodType == MethodType.ComparisonScalar) { #>
                    ret[index++] = (span[i] <#= method.Operator #> <#= method.Op2Name #>);
<# } else {#>
                    throw new NotImplementedException();
<# } #>
                }
            }
<# if (method.MethodType == MethodType.Comparison || method.MethodType == MethodType.ComparisonScalar) { #>
            return ret;
<# } #>
        }
<# } #>
<# } #>
<# } #>
    }
<# } #>
}
