<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="$(ProjectDir)\ColumnArithmeticTemplate.ttinclude" #>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

// Generated from Arithmetic.tt. Do not modify directly

using System;
using System.Numerics;
using System.Runtime.CompilerServices;

namespace Microsoft.Data.Analysis
{
    ////////////////////////////////////////
    //Factory Class                       //
    ////////////////////////////////////////

    internal static class Arithmetic
    {
        public static IArithmetic<T> GetArithmetic<T>()
            where T : unmanaged
        {
<# foreach (TypeConfiguration type in typeConfiguration) { #>
            <#=GenerateIfStatementHeader(type)#>
                return (IArithmetic<T>)new <#=type.ClassPrefix#>Arithmetic();
<# } #>
            throw new NotSupportedException();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ref Vector<T> AsVector<T>(ref T start, int offset)
            where T : struct => ref Unsafe.As<T, Vector<T>>(ref Unsafe.Add(ref start, offset));
    }


    ////////////////////////////////////////
    //Base Class for Arithmetic           //
    ////////////////////////////////////////

    internal class Arithmetic<T> : IArithmetic<T>
        where T : unmanaged
    {
        public static IArithmetic<T> Instance { get; } = Arithmetic.GetArithmetic<T>();


        //Binary operations

        public void HandleOperation(BinaryOperation operation, ReadOnlySpan<T> x, ReadOnlySpan<T> y, Span<T> destination)
        {
            switch (operation)
            {
<# foreach (MethodConfiguration method in methodConfiguration) { #>
<# if (method.MethodType == MethodType.Binary) { #>
                case BinaryOperation.<#=method.MethodName#>:
                    <#=method.MethodName#>(x, y, destination);
                    break;
<# } #>
<# } #>
            }
        }

        public void HandleOperation(BinaryOperation operation, ReadOnlySpan<T> x, T y, Span<T> destination)
        {
            switch (operation)
            {
<# foreach (MethodConfiguration method in methodConfiguration) { #>
<# if (method.MethodType == MethodType.BinaryScalar) { #>
                case BinaryOperation.<#=method.MethodName#>:
                    <#=method.MethodName#>(x, y, destination);
                    break;
<# } #>
<# } #>
            }
        }

        public void HandleOperation(BinaryOperation operation, T x, ReadOnlySpan<T> y, Span<T> destination)
        {
            switch (operation)
            {
<# foreach (MethodConfiguration method in methodConfiguration) { #>
<# if (method.MethodType == MethodType.BinaryScalar) { #>
                case BinaryOperation.<#=method.MethodName#>:
                    <#=method.MethodName#>(x, y, destination);
                    break;
<# } #>
<# } #>
            }
        }

        public T HandleOperation(BinaryOperation operation, T x, T y)
        {
            if (operation == BinaryOperation.Divide)
                return Divide(x, y);

            if (operation == BinaryOperation.Modulo)
                return Modulo(x, y);

            throw new NotSupportedException();
        }


        //Binary Int operations

        public void HandleOperation(BinaryIntOperation operation, ReadOnlySpan<T> x, int y, Span<T> destination)
        {
            switch (operation)
            {
<# foreach (MethodConfiguration method in methodConfiguration) { #>
<# if (method.MethodType == MethodType.BinaryInt) { #>
                case BinaryIntOperation.<#=method.MethodName#>:
                    <#=method.MethodName#>(x, y, destination);
                    break;
<# } #>
<# } #>
            }
        }


        //Comparison operations

        public void HandleOperation(ComparisonOperation operation, ReadOnlySpan<T> x, ReadOnlySpan<T> y, PrimitiveColumnContainer<bool> result, long offset)
        {
            switch (operation)
            {
<# foreach (MethodConfiguration method in methodConfiguration) { #>
<# if (method.MethodType == MethodType.Comparison) { #>
                case ComparisonOperation.<#=method.MethodName#>:
                    <#=method.MethodName#>(x, y, result, offset);
                    break;
<# } #>
<# } #>
            }
        }

        public void HandleOperation(ComparisonOperation operation, ReadOnlySpan<T> x, T y, PrimitiveColumnContainer<bool> result, long offset)
        {
            switch (operation)
            {
<# foreach (MethodConfiguration method in methodConfiguration) { #>
<# if (method.MethodType == MethodType.ComparisonScalar) { #>
                case ComparisonOperation.<#=method.MethodName#>:
                    <#=method.MethodName#>(x, y, result, offset);
                    break;
<# } #>
<# } #>
            }
        }


        //Protected methods
<# foreach (MethodConfiguration method in methodConfiguration) { #>
<# if (method.MethodType == MethodType.Comparison) { #>

        protected virtual void <#=method.MethodName#>(ReadOnlySpan<T> x, ReadOnlySpan<T> y, PrimitiveColumnContainer<bool> result, long offset) => throw new NotSupportedException();
<# } #>
<# else if (method.MethodType == MethodType.ComparisonScalar) { #>

        protected virtual void <#=method.MethodName#>(ReadOnlySpan<T> x, T y, PrimitiveColumnContainer<bool> result, long offset) => throw new NotSupportedException();
<# } #>
<# else if (method.MethodType == MethodType.Binary) { #>

        protected virtual void <#=method.MethodName#>(ReadOnlySpan<T> x, ReadOnlySpan<T> y, Span<T> destination) => throw new NotSupportedException();
<# } else if (method.MethodType == MethodType.BinaryScalar) { #>

        protected virtual void <#=method.MethodName#>(ReadOnlySpan<T> x, T y, Span<T> destination) => throw new NotSupportedException();

        protected virtual void <#=method.MethodName#>(T x, ReadOnlySpan<T> y, Span<T> destination) => throw new NotSupportedException();
<# } else if (method.MethodType == MethodType.BinaryInt) { #>

        protected virtual void <#=method.MethodName#>(ReadOnlySpan<T> x, int y, Span<T> destination) => throw new NotSupportedException();
<# } #>
<# } #>

        protected virtual T Divide(T x, T y) => throw new NotSupportedException();

        protected virtual T Modulo(T x, T y) => throw new NotSupportedException();
    }
}
