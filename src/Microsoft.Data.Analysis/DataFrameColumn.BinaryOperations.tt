<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="ColumnArithmeticTemplate.ttinclude"#>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

// Generated from DataFrameColumn.BinaryOperations.tt. Do not modify directly

using System;
using System.Collections.Generic;

namespace Microsoft.Data.Analysis
{
    public abstract partial class DataFrameColumn
    {
<# foreach (MethodConfiguration method in methodConfiguration) { #>
<# if (method.MethodType == MethodType.BinaryScalar) { #>
<# if (method.IsBitwise == true) { #>
        /// <summary>
        /// <#=method.GetColumnSpecificMethodComments()#>
        /// </summary>
        public virtual PrimitiveDataFrameColumn<bool> <#=method.MethodName#>(bool value, bool inPlace = false)
<# } else { #>
        /// <summary>
        /// <#=method.GetColumnSpecificMethodComments()#>
        /// </summary>
        public virtual DataFrameColumn <#=method.MethodName#><T>(T value, bool inPlace = false)
<# } #>
<# } #>
<# if (method.MethodType == MethodType.ComparisonScalar) { #>
        /// <summary>
        /// <#=method.GetColumnSpecificMethodComments()#>
        /// </summary>
        public virtual PrimitiveDataFrameColumn<bool> <#=method.MethodName#><T>(T value)
<# } #>
<# if (method.MethodType == MethodType.Binary) {#>
        /// <summary>
        /// <#=method.MethodComments#>
        /// </summary>
        public virtual DataFrameColumn <#=method.MethodName#>(DataFrameColumn column, bool inPlace = false)
<# } #>
<# if (method.MethodType == MethodType.Comparison) {#>
        /// <summary>
        /// <#=method.MethodComments#>
        /// </summary>
        public virtual PrimitiveDataFrameColumn<bool> <#=method.MethodName#>(DataFrameColumn column)
<# } #>
<# if (method.MethodType == MethodType.BinaryInt ) {#>
        /// <summary>
        /// <#=method.GetColumnSpecificMethodComments()#>
        /// </summary>
        public virtual DataFrameColumn <#=method.MethodName#>(int value, bool inPlace = false)
<# } #>
        {
            throw new NotImplementedException();
        }

<# if (method.MethodType == MethodType.BinaryScalar) { #>
<# if (method.IsBitwise == true) { #>
        /// <summary>
        /// <#=method.GetColumnSpecificReverseMethodComments()#>
        /// </summary>
        public virtual PrimitiveDataFrameColumn<bool> Reverse<#=method.MethodName#>(bool value, bool inPlace = false)
<# } else { #>
        /// <summary>
        /// <#=method.GetColumnSpecificReverseMethodComments()#>
        /// </summary>
        public virtual DataFrameColumn Reverse<#=method.MethodName#><T>(T value, bool inPlace = false)
<# } #>
        {
            throw new NotImplementedException();
        }

<# } #>
<# } #>
    }
}
