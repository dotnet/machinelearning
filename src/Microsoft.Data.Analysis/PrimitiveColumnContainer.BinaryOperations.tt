<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="ColumnArithmeticTemplate.ttinclude" #>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

// Generated from PrimitiveColumnContainer.BinaryOperations.tt. Do not modify directly

namespace Microsoft.Data.Analysis
{
    internal partial class PrimitiveColumnContainer<T>
        where T : unmanaged
    {
        public PrimitiveColumnContainer<T> HandleOperation(BinaryOperation operation, PrimitiveColumnContainer<T> right)
        {
            var arithmetic = PrimitiveDataFrameColumnArithmetic<T>.Instance;
            long nullCount = 0;
            for (int i = 0; i < this.Buffers.Count; i++)
            {
                var mutableBuffer = this.Buffers.GetOrCreateMutable(i);
                var leftSpan = mutableBuffer.Span;
                var rightSpan = right.Buffers[i].ReadOnlySpan;

                var leftValidity = this.NullBitMapBuffers.GetOrCreateMutable(i).Span;
                var rightValidity = right.NullBitMapBuffers[i].ReadOnlySpan;

                arithmetic.HandleOperation(operation, leftSpan, leftValidity, rightSpan, rightValidity);

                //Calculate NullCount
                nullCount += BitmapHelper.GetBitCount(leftValidity, mutableBuffer.Length);
            }

            NullCount = nullCount;
            return this;
        }

        public PrimitiveColumnContainer<T> HandleOperation(BinaryScalarOperation operation, T right)
        {
            var arithmetic = PrimitiveDataFrameColumnArithmetic<T>.Instance;
            for (int i = 0; i < this.Buffers.Count; i++)
            {
                var leftSpan = this.Buffers.GetOrCreateMutable(i).Span;

                arithmetic.HandleOperation(operation, leftSpan, right);
            }

            return this;
        }

        public PrimitiveColumnContainer<T> HandleReverseOperation(BinaryScalarOperation operation, T left)
        {
            var arithmetic = PrimitiveDataFrameColumnArithmetic<T>.Instance;
            for (int i = 0; i < this.Buffers.Count; i++)
            {
                var rightSpan = this.Buffers.GetOrCreateMutable(i).Span;
                var rightValidity = this.NullBitMapBuffers.GetOrCreateMutable(i).Span;

                arithmetic.HandleOperation(operation, left, rightSpan, rightValidity);
            }

            return this;
        }

<# foreach (MethodConfiguration method in methodConfiguration) { #>
<# if (method.MethodType == MethodType.Comparison) { #>
        public PrimitiveColumnContainer<bool> <#=method.MethodName#>(PrimitiveColumnContainer<T> right)
        {
            return PrimitiveDataFrameColumnArithmetic<T>.Instance.<#=method.MethodName#>(this, right);
        }
<# } else if (method.MethodType == MethodType.ComparisonScalar ) { #>
        public PrimitiveColumnContainer<bool> <#=method.MethodName#>(T scalar)
        {
            return PrimitiveDataFrameColumnArithmetic<T>.Instance.<#=method.MethodName#>(this, scalar);
        }
<# } else if (method.MethodType != MethodType.Binary && method.MethodType != MethodType.BinaryScalar) { #>
        public <#= method.GetSingleArgumentMethodSignature("PrimitiveColumnContainer", "T")#>
        {
<# if (method.MethodType == MethodType.BinaryInt) { #>
            PrimitiveDataFrameColumnArithmetic<T>.Instance.<#=method.MethodName#>(this, value);
<# } else { #>
            PrimitiveDataFrameColumnArithmetic<T>.Instance.<#=method.MethodName#>(this, right);
<# } #>
            return this;
        }
<# } #>
<# } #>
    }
}