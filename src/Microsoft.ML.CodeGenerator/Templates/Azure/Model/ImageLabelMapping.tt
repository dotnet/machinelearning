<#@ template language="C#" linePragmas = "false" visibility = "internal"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\..\Console\Annotation.ttinclude" #><#if(Target == CSharp.GenerateTarget.Cli){ #>
<#CLI_Annotation();#>
<# } else if(Target == CSharp.GenerateTarget.ModelBuilder){ #>
<#MB_Annotation();#>
<# } #>
using Microsoft.ML.Data;
using Microsoft.ML.Transforms;
using System;
using System.Linq;

namespace <#= Namespace #>.Model
{
    [CustomMappingFactoryAttribute(nameof(LabelMapping))]
    public class LabelMapping : CustomMappingFactory<LabelMappingInput, LabelMappingOutput>
    {
		public static string[] Label {get; set;} = new string[]{<#foreach(var label in Labels){#>"<#=label#>",<#}#>};
        // This is the custom mapping. We now separate it into a method, so that we can use it both in training and in loading.
        public static void Mapping(LabelMappingInput input, LabelMappingOutput output)
        {
            var values = input.output1.GetValues().ToArray();
            var maxVal = values.Max();
            var exp = values.Select(v => Math.Exp(v - maxVal));
            var sumExp = exp.Sum();

            exp.Select(v => (float)(v / sumExp)).ToArray();
            output.score = exp.Select(v => (float)(v / sumExp)).ToArray();

            var maxValue = output.score.Max();
            var maxValueIndex = Array.IndexOf(output.score, maxValue);
            output.label = Label[maxValueIndex];
        }
        // This factory method will be called when loading the model to get the mapping operation.
        public override Action<LabelMappingInput, LabelMappingOutput> GetMapping()
        {
            return Mapping;
        }
    }
    public class LabelMappingInput
    {
        [ColumnName("output1")]
        public VBuffer<float> output1;
    }
    public class LabelMappingOutput
    {

        [ColumnName("PredictedLabel")]
        public string label { get; set; }

        [ColumnName("Score")]
        public float[] score { get; set; }
    }
}
<#+
public string Namespace {get;set;}
internal CSharp.GenerateTarget Target {get;set;}
public string[] Labels {get; set;} = new string[0];
#>
