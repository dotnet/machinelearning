// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.ML.CodeGenerator.Templates.Console
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    internal partial class ModelOutputClass : ModelOutputClassBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
if(Target == CSharp.GenerateTarget.Cli){ 
CLI_Annotation();
 } else if(Target == CSharp.GenerateTarget.ModelBuilder){ 
MB_Annotation();
 } 
            this.Write("\r\nusing System;\r\nusing Microsoft.ML.Data;\r\n");
if(IsObjectDetection){ 
            this.Write("using System.Collections.Generic;\r\nusing System.Linq;\r\n");
 }
            this.Write("\r\nnamespace  ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            this.Write(".Model\r\n{\r\n    public class ModelOutput\r\n    {\r\n");
if("BinaryClassification".Equals(TaskType)){ 
            this.Write("        // ColumnName attribute is used to change the column name from\r\n        /" +
                    "/ its default value, which is the name of the field.\r\n        [ColumnName(\"Predi" +
                    "ctedLabel\")]\r\n        public bool Prediction { get; set; }\r\n");
 } if("MulticlassClassification".Equals(TaskType) && !IsObjectDetection){ 
            this.Write("        // ColumnName attribute is used to change the column name from\r\n        /" +
                    "/ its default value, which is the name of the field.\r\n        [ColumnName(\"Predi" +
                    "ctedLabel\")]\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(PredictionLabelType));
            this.Write(" Prediction { get; set; }\r\n");
 }
if(IsObjectDetection){ 
            this.Write("        [ColumnName(\"boxes\")]\r\n        public float[] Boxes { get; set; }\r\n\r\n    " +
                    "    [ColumnName(\"PredictedLabels\")]\r\n        public string[] Labels { get; set; " +
                    "}\r\n\r\n        [ColumnName(\"scores\")]\r\n        public float[] Scores { get; set; }" +
                    "\r\n\r\n        private BoundingBox[] BoundingBoxes\r\n        {\r\n            get\r\n   " +
                    "         {\r\n                var boundingBoxes = new List<BoundingBox>();\r\n\r\n    " +
                    "            boundingBoxes = Enumerable.Range(0, this.Labels.Length)\r\n           " +
                    "               .Select((index) =>\r\n                          {\r\n                " +
                    "              var boxes = this.Boxes;\r\n                              var scores " +
                    "= this.Scores;\r\n                              var labels = this.Labels;\r\n\r\n     " +
                    "                         return new BoundingBox()\r\n                             " +
                    " {\r\n                                  Left = boxes[index * 4],\r\n                " +
                    "                  Top = boxes[(index * 4) + 1],\r\n                               " +
                    "   Right = boxes[(index * 4) + 2],\r\n                                  Bottom = b" +
                    "oxes[(index * 4) + 3],\r\n                                  Score = scores[index]," +
                    "\r\n                                  Label = labels[index].ToString(),\r\n         " +
                    "                     };\r\n                          }).ToList();\r\n               " +
                    " return boundingBoxes.ToArray();\r\n            }\r\n        }\r\n\r\n        public ove" +
                    "rride string ToString()\r\n        {\r\n            return string.Join(\"\\n\", Boundin" +
                    "gBoxes.Select(x => x.ToString()));\r\n        }\r\n    }\r\n\r\n    public class Boundin" +
                    "gBox\r\n    {\r\n        public float Top;\r\n\r\n        public float Left;\r\n\r\n        " +
                    "public float Right;\r\n\r\n        public float Bottom;\r\n\r\n        public string Lab" +
                    "el;\r\n\r\n        public float Score;\r\n\r\n        public override string ToString()\r" +
                    "\n        {\r\n            return $\"Top: {this.Top}, Left: {this.Left}, Right: {thi" +
                    "s.Right}, Bottom: {this.Bottom}, Label: {this.Label}, Score: {this.Score}\";\r\n   " +
                    "     }\r\n");
} else if("MulticlassClassification".Equals(TaskType)){ 
            this.Write("        public float[] Score { get; set; }\r\n");
}else{ 
            this.Write("        public float Score { get; set; }\r\n");
}
            this.Write("    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }

public string TaskType {get;set;}
public string PredictionLabelType {get;set;}
public string Namespace {get;set;}
public bool IsObjectDetection {get;set;}
internal CSharp.GenerateTarget Target {get;set;}


void CLI_Annotation()
{
this.Write(@"//*****************************************************************************************
//*                                                                                       *
//* This is an auto-generated file by Microsoft ML.NET CLI (Command-Line Interface) tool. *
//*                                                                                       *
//*****************************************************************************************
");


}


void MB_Annotation()
{
this.Write("// This file was auto-generated by ML.NET Model Builder. \r\n");


}

    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    internal class ModelOutputClassBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
